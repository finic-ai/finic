/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */!function(a){"use strict";function b(a,b,c,e){// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
     var f=b&&b.prototype instanceof d?b:d,g=Object.create(f.prototype),h=new m(e||[]);return g._invoke=i(a,c,h),g}// Try/catch helper to minimize deoptimizations. Returns a completion
     // record like context.tryEntries[i].completion. This interface could
     // have been (and was previously) designed to take a closure to be
     // invoked without arguments, but in all the cases we care about we
     // already have an existing method we want to call, so there's no need
     // to create a new function object. We can even get away with assuming
     // the method takes exactly one argument, since that happens to be true
     // in every case, so we don't have to touch the arguments object. The
     // only additional allocation required is the completion record, which
     // has a stable shape and so hopefully should be cheap to allocate.
     function c(a,b,c){try{return{type:"normal",arg:a.call(b,c)}}catch(a){return{type:"throw",arg:a}}}// Dummy constructor functions that we use as the .constructor and
     // .constructor.prototype properties for functions that return Generator
     // objects. For full spec compliance, you may wish to configure your
     // minifier not to mangle the names of these two functions.
     function d(){}function e(){}function f(){}// This is a polyfill for %IteratorPrototype% for environments that
     // don't natively support it.
     // Helper for defining the .next, .throw, and .return methods of the
     // Iterator interface in terms of a single ._invoke method.
     function g(a){["next","throw","return"].forEach(function(b){a[b]=function(a){return this._invoke(b,a)}})}function h(a){function b(d,e,f,g){var h=c(a[d],a,e);if("throw"===h.type)g(h.arg);else{var i=h.arg,j=i.value;return j&&"object"===typeof j&&q.call(j,"__await")?Promise.resolve(j.__await).then(function(a){b("next",a,f,g)},function(a){b("throw",a,f,g)}):Promise.resolve(j).then(function(a){// When a yielded Promise is resolved, its final value becomes
     // the .value of the Promise<{value,done}> result for the
     // current iteration. If the Promise is rejected, however, the
     // result for this iteration will be rejected with the same
     // reason. Note that rejections of yielded Promises are not
     // thrown back into the generator function, as is the case
     // when an awaited Promise is rejected. This difference in
     // behavior between yield and await is important, because it
     // allows the consumer to decide what to do with the yielded
     // rejection (swallow it and continue, manually .throw it back
     // into the generator, abandon iteration, whatever). With
     // await, by contrast, there is no opportunity to examine the
     // rejection reason outside the generator function, so the
     // only option is to throw it from the await expression, and
     // let the generator function handle the exception.
     i.value=a,f(i)},g)}}function d(a,c){function d(){return new Promise(function(d,e){b(a,c,d,e)})}return e=// If enqueue has been called before, then we want to wait until
     // all previous Promises have been resolved before calling invoke,
     // so that results are always delivered in the correct order. If
     // enqueue has not been called before, then it is important to
     // call invoke immediately, without waiting on a callback to fire,
     // so that the async generator function has the opportunity to do
     // any necessary setup in a predictable way. This predictability
     // is why the Promise constructor synchronously invokes its
     // executor callback, and why async functions synchronously
     // execute code before the first await. Since we implement simple
     // async functions in terms of async generators, it is especially
     // important to get this right, even though it requires care.
     e?e.then(d,// Avoid propagating failures to Promises returned by later
     // invocations of the iterator.
     d):d()}// Define the unified helper method that is used to implement .next,
     // .throw, and .return (see defineIteratorMethods).
     var e;this._invoke=d}function i(a,b,d){var e="suspendedStart";return function(f,g){if(e==="executing")throw new Error("Generator is already running");if("completed"===e){if("throw"===f)throw g;// Be forgiving, per 25.3.3.3.3 of the spec:
     // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
     return o()}for(d.method=f,d.arg=g;;){var h=d.delegate;if(h){var i=j(h,d);if(i){if(i===x)continue;return i}}if("next"===d.method)// Setting context._sent for legacy support of Babel's
     // function.sent implementation.
     d.sent=d._sent=d.arg;else if("throw"===d.method){if("suspendedStart"===e)throw e="completed",d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);e="executing";var k=c(a,b,d);if("normal"===k.type){if(e=d.done?"completed":"suspendedYield",k.arg===x)continue;return{value:k.arg,done:d.done}}"throw"===k.type&&(// Dispatch the exception by looping back around to the
     // context.dispatchException(context.arg) call above.
     e="completed",d.method="throw",d.arg=k.arg)}}}// Call delegate.iterator[context.method](context.arg) and handle the
     // result, either by returning a { value, done } result from the
     // delegate iterator, or by modifying context.method and context.arg,
     // setting context.delegate to null, and returning the ContinueSentinel.
     function j(a,b){var d=a.iterator[b.method];if(void 0===d){if(b.delegate=null,"throw"===b.method){if(a.iterator.return&&(b.method="return",b.arg=void 0,j(a,b),"throw"===b.method))// If maybeInvokeDelegate(context) changed context.method from
     // "return" to "throw", let that override the TypeError below.
     return x;b.method="throw",b.arg=new TypeError("The iterator does not provide a 'throw' method")}return x}var e=c(d,a.iterator,b.arg);if("throw"===e.type)return b.method="throw",b.arg=e.arg,b.delegate=null,x;var f=e.arg;if(!f)return b.method="throw",b.arg=new TypeError("iterator result is not an object"),b.delegate=null,x;if(f.done)b[a.resultName]=f.value,b.next=a.nextLoc,"return"!==b.method&&(b.method="next",b.arg=void 0);else// Re-yield the result returned by the delegate method.
     return f;// The delegate iterator is finished, so forget it and continue with
     // the outer generator.
     return b.delegate=null,x}// Define Generator.prototype.{next,throw,return} in terms of the
     // unified ._invoke helper method.
     function k(a){var b={tryLoc:a[0]};1 in a&&(b.catchLoc=a[1]),2 in a&&(b.finallyLoc=a[2],b.afterLoc=a[3]),this.tryEntries.push(b)}function l(a){var b=a.completion||{};b.type="normal",delete b.arg,a.completion=b}function m(a){// The root entry object (effectively a try statement without a catch
     // or a finally block) gives us a place to store values thrown from
     // locations where there is no enclosing try statement.
     this.tryEntries=[{tryLoc:"root"}],a.forEach(k,this),this.reset(!0)}function n(a){if(a){var b=a[s];if(b)return b.call(a);if("function"===typeof a.next)return a;if(!isNaN(a.length)){var c=-1,d=function b(){for(;++c<a.length;)if(q.call(a,c))return b.value=a[c],b.done=!1,b;return b.value=void 0,b.done=!0,b};return d.next=d}}// Return an iterator with no values.
     return{next:o}}function o(){return{value:void 0,done:!0}}var p=Object.prototype,q=p.hasOwnProperty,r="function"===typeof Symbol?Symbol:{},s=r.iterator||"@@iterator",t=r.asyncIterator||"@@asyncIterator",u=r.toStringTag||"@@toStringTag",v="object"===typeof module,w=a.regeneratorRuntime;if(w)// Don't bother evaluating the rest of this file if the runtime was
     // already defined globally.
     return void(v&&(module.exports=w));// Define the runtime globally (as expected by generated code) as either
     // module.exports (if we're in a module) or a new, empty object.
     w=a.regeneratorRuntime=v?module.exports:{},w.wrap=b;var x={},y={};y[s]=function(){return this};var z=Object.getPrototypeOf,A=z&&z(z(n([])));A&&A!==p&&q.call(A,s)&&(y=A);var B=f.prototype=d.prototype=Object.create(y);// Within the body of any async function, `await x` is transformed to
     // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
     // `hasOwn.call(value, "__await")` to determine if the yielded value is
     // meant to be awaited.
     // Note that simple async functions are implemented on top of
     // AsyncIterator objects; they just return a Promise for the value of
     // the final result produced by the iterator.
     // A Generator should always return itself as the iterator object when the
     // @@iterator function is called on it. Some browsers' implementations of the
     // iterator prototype chain incorrectly implement this, causing the Generator
     // object to not be returned from this call. This ensures that doesn't happen.
     // See https://github.com/facebook/regenerator/issues/274 for more details.
     e.prototype=B.constructor=f,f.constructor=e,f[u]=e.displayName="GeneratorFunction",w.isGeneratorFunction=function(a){var b="function"===typeof a&&a.constructor;return!!b&&(b===e||// For the native GeneratorFunction constructor, the best we can
     // do is to check its .name property.
     "GeneratorFunction"===(b.displayName||b.name))},w.mark=function(a){return Object.setPrototypeOf?Object.setPrototypeOf(a,f):(a.__proto__=f,!(u in a)&&(a[u]="GeneratorFunction")),a.prototype=Object.create(B),a},w.awrap=function(a){return{__await:a}},g(h.prototype),h.prototype[t]=function(){return this},w.AsyncIterator=h,w.async=function(a,c,d,e){var f=new h(b(a,c,d,e));return w.isGeneratorFunction(c)?f// If outerFn is a generator, return the full iterator.
     :f.next().then(function(a){return a.done?a.value:f.next()})},g(B),B[u]="Generator",B[s]=function(){return this},B.toString=function(){return"[object Generator]"},w.keys=function(a){var b=[];for(var c in a)b.push(c);// Rather than returning an object with a next method, we keep
     // things simple and return the next function itself.
     return b.reverse(),function c(){for(;b.length;){var d=b.pop();if(d in a)return c.value=d,c.done=!1,c}// To avoid creating an additional object, we just hang the .value
     // and .done properties off the next function object itself. This
     // also ensures that the minifier will not anonymize the function.
     return c.done=!0,c}},w.values=n,m.prototype={constructor:m,reset:function(a){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(l),!a)for(var b in this)// Not sure about the optimal order of these conditions:
     "t"===b.charAt(0)&&q.call(this,b)&&!isNaN(+b.slice(1))&&(this[b]=void 0)},stop:function(){this.done=!0;var a=this.tryEntries[0],b=a.completion;if("throw"===b.type)throw b.arg;return this.rval},dispatchException:function(a){function b(b,d){return f.type="throw",f.arg=a,c.next=b,d&&(c.method="next",c.arg=void 0),!!d}if(this.done)throw a;for(var c=this,d=this.tryEntries.length-1;0<=d;--d){var e=this.tryEntries[d],f=e.completion;if("root"===e.tryLoc)// Exception thrown outside of any try block that could handle
     // it, so set the completion value of the entire function to
     // throw the exception.
     return b("end");if(e.tryLoc<=this.prev){var g=q.call(e,"catchLoc"),h=q.call(e,"finallyLoc");if(g&&h){if(this.prev<e.catchLoc)return b(e.catchLoc,!0);if(this.prev<e.finallyLoc)return b(e.finallyLoc)}else if(g){if(this.prev<e.catchLoc)return b(e.catchLoc,!0);}else if(!h)throw new Error("try statement without catch or finally");else if(this.prev<e.finallyLoc)return b(e.finallyLoc)}}},abrupt:function(a,b){for(var c,d=this.tryEntries.length-1;0<=d;--d)if(c=this.tryEntries[d],c.tryLoc<=this.prev&&q.call(c,"finallyLoc")&&this.prev<c.finallyLoc){var e=c;break}e&&("break"===a||"continue"===a)&&e.tryLoc<=b&&b<=e.finallyLoc&&(e=null);var f=e?e.completion:{};return f.type=a,f.arg=b,e?(this.method="next",this.next=e.finallyLoc,x):this.complete(f)},complete:function(a,b){if("throw"===a.type)throw a.arg;return"break"===a.type||"continue"===a.type?this.next=a.arg:"return"===a.type?(this.rval=this.arg=a.arg,this.method="return",this.next="end"):"normal"===a.type&&b&&(this.next=b),x},finish:function(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.finallyLoc===a)return this.complete(b.completion,b.afterLoc),l(b),x},catch:function(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.tryLoc===a){var d=b.completion;if("throw"===d.type){var e=d.arg;l(b)}return e}// The context.catch method must only be called with a location
     // argument that corresponds to a known catch block.
     throw new Error("illegal catch attempt")},delegateYield:function(a,b,c){return this.delegate={iterator:n(a),resultName:b,nextLoc:c},"next"===this.method&&(this.arg=void 0),x}}}(// In sloppy mode, unbound `this` refers to the global object, fallback to
     // Function constructor if we're in global strict mode. That is sadly a form
     // of indirect eval which violates Content Security Policy.
     function(){return this}()||Function("return this")());function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _get(target,property,receiver){if(typeof Reflect!=="undefined"&&Reflect.get){_get=Reflect.get;}else{_get=function _get(target,property,receiver){var base=_superPropBase(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(receiver);}return desc.value;};}return _get(target,property,receiver||target);}function _superPropBase(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf(object);if(object===null)break;}return object;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e2){throw _e2;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]();},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e3){didErr=true;err=_e3;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&Symbol.iterator in Object(iter))return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _classCallCheck(instance,Constructor){if(!_instanceof(instance,Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _wrapNativeSuper(Class){var _cache=typeof Map==="function"?new Map():undefined;_wrapNativeSuper=function _wrapNativeSuper(Class){if(Class===null||!_isNativeFunction(Class))return Class;if(typeof Class!=="function"){throw new TypeError("Super expression must either be null or a function");}if(typeof _cache!=="undefined"){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper);}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor);}Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,Class);};return _wrapNativeSuper(Class);}function _construct(Parent,args,Class){if(_isNativeReflectConstruct()){_construct=Reflect.construct;}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1;}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _instanceof(left,right){if(right!=null&&typeof Symbol!=="undefined"&&right[Symbol.hasInstance]){return!!right[Symbol.hasInstance](left);}else{return left instanceof right;}}function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}(function(global,factory){(typeof exports==="undefined"?"undefined":_typeof(exports))==='object'&&typeof module!=='undefined'?factory(exports):typeof define==='function'&&define.amd?define(['exports'],factory):(global=typeof globalThis!=='undefined'?globalThis:global||self,factory(global.ModelViewerElement={}));})(this,function(exports){'use strict';/* eslint no-invalid-this: 1 */var _ENCODINGS;var ERROR_MESSAGE='Function.prototype.bind called on incompatible ';var slice=Array.prototype.slice;var toStr=Object.prototype.toString;var funcType='[object Function]';var implementation=function bind(that){var target=this;if(typeof target!=='function'||toStr.call(target)!==funcType){throw new TypeError(ERROR_MESSAGE+target);}var args=slice.call(arguments,1);var bound;var binder=function binder(){if(_instanceof(this,bound)){var result=target.apply(this,args.concat(slice.call(arguments)));if(Object(result)===result){return result;}return this;}else{return target.apply(that,args.concat(slice.call(arguments)));}};var boundLength=Math.max(0,target.length-args.length);var boundArgs=[];for(var i=0;i<boundLength;i++){boundArgs.push('$'+i);}bound=Function('binder','return function ('+boundArgs.join(',')+'){ return binder.apply(this,arguments); }')(binder);if(target.prototype){var Empty=function Empty(){};Empty.prototype=target.prototype;bound.prototype=new Empty();Empty.prototype=null;}return bound;};var functionBind=Function.prototype.bind||implementation;var src=functionBind.call(Function.call,Object.prototype.hasOwnProperty);var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};/* eslint complexity: [2, 18], max-statements: [2, 33] */var shams=function hasSymbols(){if(typeof Symbol!=='function'||typeof Object.getOwnPropertySymbols!=='function'){return false;}if(_typeof(Symbol.iterator)==='symbol'){return true;}var obj={};var sym=Symbol('test');var symObj=Object(sym);if(typeof sym==='string'){return false;}if(Object.prototype.toString.call(sym)!=='[object Symbol]'){return false;}if(Object.prototype.toString.call(symObj)!=='[object Symbol]'){return false;}// temp disabled per https://github.com/ljharb/object.assign/issues/17
     // if (sym instanceof Symbol) { return false; }
     // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
     // if (!(symObj instanceof Symbol)) { return false; }
     // if (typeof Symbol.prototype.toString !== 'function') { return false; }
     // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
     var symVal=42;obj[sym]=symVal;for(sym in obj){return false;}// eslint-disable-line no-restricted-syntax
     if(typeof Object.keys==='function'&&Object.keys(obj).length!==0){return false;}if(typeof Object.getOwnPropertyNames==='function'&&Object.getOwnPropertyNames(obj).length!==0){return false;}var syms=Object.getOwnPropertySymbols(obj);if(syms.length!==1||syms[0]!==sym){return false;}if(!Object.prototype.propertyIsEnumerable.call(obj,sym)){return false;}if(typeof Object.getOwnPropertyDescriptor==='function'){var descriptor=Object.getOwnPropertyDescriptor(obj,sym);if(descriptor.value!==symVal||descriptor.enumerable!==true){return false;}}return true;};var origSymbol=commonjsGlobal.Symbol;var hasSymbols=function hasNativeSymbols(){if(typeof origSymbol!=='function'){return false;}if(typeof Symbol!=='function'){return false;}if(_typeof(origSymbol('foo'))!=='symbol'){return false;}if(_typeof(Symbol('bar'))!=='symbol'){return false;}return shams();};/* globals
              Atomics,
              SharedArrayBuffer,
         */var undefined$1;var $TypeError=TypeError;var $gOPD=Object.getOwnPropertyDescriptor;if($gOPD){try{$gOPD({},'');}catch(e){$gOPD=null;// this is IE 8, which has a broken gOPD
     }}var throwTypeError=function throwTypeError(){throw new $TypeError();};var ThrowTypeError=$gOPD?function(){try{// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
     arguments.callee;// IE 8 does not throw here
     return throwTypeError;}catch(calleeThrows){try{// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
     return $gOPD(arguments,'callee').get;}catch(gOPDthrows){return throwTypeError;}}}():throwTypeError;var hasSymbols$1=hasSymbols();var getProto=Object.getPrototypeOf||function(x){return x.__proto__;};// eslint-disable-line no-proto
     var generatorFunction=undefined$1;var asyncFunction=undefined$1;var asyncGenFunction=undefined$1;var TypedArray=typeof Uint8Array==='undefined'?undefined$1:getProto(Uint8Array);var INTRINSICS={'%Array%':Array,'%ArrayBuffer%':typeof ArrayBuffer==='undefined'?undefined$1:ArrayBuffer,'%ArrayBufferPrototype%':typeof ArrayBuffer==='undefined'?undefined$1:ArrayBuffer.prototype,'%ArrayIteratorPrototype%':hasSymbols$1?getProto([][Symbol.iterator]()):undefined$1,'%ArrayPrototype%':Array.prototype,'%ArrayProto_entries%':Array.prototype.entries,'%ArrayProto_forEach%':Array.prototype.forEach,'%ArrayProto_keys%':Array.prototype.keys,'%ArrayProto_values%':Array.prototype.values,'%AsyncFromSyncIteratorPrototype%':undefined$1,'%AsyncFunction%':asyncFunction,'%AsyncFunctionPrototype%':undefined$1,'%AsyncGenerator%':undefined$1,'%AsyncGeneratorFunction%':asyncGenFunction,'%AsyncGeneratorPrototype%':undefined$1,'%AsyncIteratorPrototype%':undefined$1,'%Atomics%':typeof Atomics==='undefined'?undefined$1:Atomics,'%Boolean%':Boolean,'%BooleanPrototype%':Boolean.prototype,'%DataView%':typeof DataView==='undefined'?undefined$1:DataView,'%DataViewPrototype%':typeof DataView==='undefined'?undefined$1:DataView.prototype,'%Date%':Date,'%DatePrototype%':Date.prototype,'%decodeURI%':decodeURI,'%decodeURIComponent%':decodeURIComponent,'%encodeURI%':encodeURI,'%encodeURIComponent%':encodeURIComponent,'%Error%':Error,'%ErrorPrototype%':Error.prototype,'%eval%':eval,// eslint-disable-line no-eval
     '%EvalError%':EvalError,'%EvalErrorPrototype%':EvalError.prototype,'%Float32Array%':typeof Float32Array==='undefined'?undefined$1:Float32Array,'%Float32ArrayPrototype%':typeof Float32Array==='undefined'?undefined$1:Float32Array.prototype,'%Float64Array%':typeof Float64Array==='undefined'?undefined$1:Float64Array,'%Float64ArrayPrototype%':typeof Float64Array==='undefined'?undefined$1:Float64Array.prototype,'%Function%':Function,'%FunctionPrototype%':Function.prototype,'%Generator%':undefined$1,'%GeneratorFunction%':generatorFunction,'%GeneratorPrototype%':undefined$1,'%Int8Array%':typeof Int8Array==='undefined'?undefined$1:Int8Array,'%Int8ArrayPrototype%':typeof Int8Array==='undefined'?undefined$1:Int8Array.prototype,'%Int16Array%':typeof Int16Array==='undefined'?undefined$1:Int16Array,'%Int16ArrayPrototype%':typeof Int16Array==='undefined'?undefined$1:Int8Array.prototype,'%Int32Array%':typeof Int32Array==='undefined'?undefined$1:Int32Array,'%Int32ArrayPrototype%':typeof Int32Array==='undefined'?undefined$1:Int32Array.prototype,'%isFinite%':isFinite,'%isNaN%':isNaN,'%IteratorPrototype%':hasSymbols$1?getProto(getProto([][Symbol.iterator]())):undefined$1,'%JSON%':(typeof JSON==="undefined"?"undefined":_typeof(JSON))==='object'?JSON:undefined$1,'%JSONParse%':(typeof JSON==="undefined"?"undefined":_typeof(JSON))==='object'?JSON.parse:undefined$1,'%Map%':typeof Map==='undefined'?undefined$1:Map,'%MapIteratorPrototype%':typeof Map==='undefined'||!hasSymbols$1?undefined$1:getProto(new Map()[Symbol.iterator]()),'%MapPrototype%':typeof Map==='undefined'?undefined$1:Map.prototype,'%Math%':Math,'%Number%':Number,'%NumberPrototype%':Number.prototype,'%Object%':Object,'%ObjectPrototype%':Object.prototype,'%ObjProto_toString%':Object.prototype.toString,'%ObjProto_valueOf%':Object.prototype.valueOf,'%parseFloat%':parseFloat,'%parseInt%':parseInt,'%Promise%':typeof Promise==='undefined'?undefined$1:Promise,'%PromisePrototype%':typeof Promise==='undefined'?undefined$1:Promise.prototype,'%PromiseProto_then%':typeof Promise==='undefined'?undefined$1:Promise.prototype.then,'%Promise_all%':typeof Promise==='undefined'?undefined$1:Promise.all,'%Promise_reject%':typeof Promise==='undefined'?undefined$1:Promise.reject,'%Promise_resolve%':typeof Promise==='undefined'?undefined$1:Promise.resolve,'%Proxy%':typeof Proxy==='undefined'?undefined$1:Proxy,'%RangeError%':RangeError,'%RangeErrorPrototype%':RangeError.prototype,'%ReferenceError%':ReferenceError,'%ReferenceErrorPrototype%':ReferenceError.prototype,'%Reflect%':typeof Reflect==='undefined'?undefined$1:Reflect,'%RegExp%':RegExp,'%RegExpPrototype%':RegExp.prototype,'%Set%':typeof Set==='undefined'?undefined$1:Set,'%SetIteratorPrototype%':typeof Set==='undefined'||!hasSymbols$1?undefined$1:getProto(new Set()[Symbol.iterator]()),'%SetPrototype%':typeof Set==='undefined'?undefined$1:Set.prototype,'%SharedArrayBuffer%':typeof SharedArrayBuffer==='undefined'?undefined$1:SharedArrayBuffer,'%SharedArrayBufferPrototype%':typeof SharedArrayBuffer==='undefined'?undefined$1:SharedArrayBuffer.prototype,'%String%':String,'%StringIteratorPrototype%':hasSymbols$1?getProto(''[Symbol.iterator]()):undefined$1,'%StringPrototype%':String.prototype,'%Symbol%':hasSymbols$1?Symbol:undefined$1,'%SymbolPrototype%':hasSymbols$1?Symbol.prototype:undefined$1,'%SyntaxError%':SyntaxError,'%SyntaxErrorPrototype%':SyntaxError.prototype,'%ThrowTypeError%':ThrowTypeError,'%TypedArray%':TypedArray,'%TypedArrayPrototype%':TypedArray?TypedArray.prototype:undefined$1,'%TypeError%':$TypeError,'%TypeErrorPrototype%':$TypeError.prototype,'%Uint8Array%':typeof Uint8Array==='undefined'?undefined$1:Uint8Array,'%Uint8ArrayPrototype%':typeof Uint8Array==='undefined'?undefined$1:Uint8Array.prototype,'%Uint8ClampedArray%':typeof Uint8ClampedArray==='undefined'?undefined$1:Uint8ClampedArray,'%Uint8ClampedArrayPrototype%':typeof Uint8ClampedArray==='undefined'?undefined$1:Uint8ClampedArray.prototype,'%Uint16Array%':typeof Uint16Array==='undefined'?undefined$1:Uint16Array,'%Uint16ArrayPrototype%':typeof Uint16Array==='undefined'?undefined$1:Uint16Array.prototype,'%Uint32Array%':typeof Uint32Array==='undefined'?undefined$1:Uint32Array,'%Uint32ArrayPrototype%':typeof Uint32Array==='undefined'?undefined$1:Uint32Array.prototype,'%URIError%':URIError,'%URIErrorPrototype%':URIError.prototype,'%WeakMap%':typeof WeakMap==='undefined'?undefined$1:WeakMap,'%WeakMapPrototype%':typeof WeakMap==='undefined'?undefined$1:WeakMap.prototype,'%WeakSet%':typeof WeakSet==='undefined'?undefined$1:WeakSet,'%WeakSetPrototype%':typeof WeakSet==='undefined'?undefined$1:WeakSet.prototype};var $replace=functionBind.call(Function.call,String.prototype.replace);/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */var rePropName=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;var reEscapeChar=/\\(\\)?/g;/** Used to match backslashes in property paths. */var stringToPath=function stringToPath(string){var result=[];$replace(string,rePropName,function(match,number,quote,subString){result[result.length]=quote?$replace(subString,reEscapeChar,'$1'):number||match;});return result;};/* end adaptation */var getBaseIntrinsic=function getBaseIntrinsic(name,allowMissing){if(!(name in INTRINSICS)){throw new SyntaxError('intrinsic '+name+' does not exist!');}// istanbul ignore if // hopefully this is impossible to test :-)
     if(typeof INTRINSICS[name]==='undefined'&&!allowMissing){throw new $TypeError('intrinsic '+name+' exists, but is not available. Please file an issue!');}return INTRINSICS[name];};var GetIntrinsic=function GetIntrinsic(name,allowMissing){if(typeof name!=='string'||name.length===0){throw new TypeError('intrinsic name must be a non-empty string');}if(arguments.length>1&&typeof allowMissing!=='boolean'){throw new TypeError('"allowMissing" argument must be a boolean');}var parts=stringToPath(name);var value=getBaseIntrinsic('%'+(parts.length>0?parts[0]:'')+'%',allowMissing);for(var i=1;i<parts.length;i+=1){if(value!=null){if($gOPD&&i+1>=parts.length){var desc=$gOPD(value,parts[i]);if(!allowMissing&&!(parts[i]in value)){throw new $TypeError('base intrinsic for '+name+' exists, but the property is not available.');}value=desc?desc.get||desc.value:value[parts[i]];}else{value=value[parts[i]];}}}return value;};var $TypeError$1=GetIntrinsic('%TypeError%');// http://www.ecma-international.org/ecma-262/5.1/#sec-9.10
     var CheckObjectCoercible=function CheckObjectCoercible(value,optMessage){if(value==null){throw new $TypeError$1(optMessage||'Cannot call method on '+value);}return value;};var RequireObjectCoercible=CheckObjectCoercible;var $apply=GetIntrinsic('%Function.prototype.apply%');var $call=GetIntrinsic('%Function.prototype.call%');var $reflectApply=GetIntrinsic('%Reflect.apply%',true)||functionBind.call($call,$apply);var callBind=function callBind(){return $reflectApply(functionBind,$call,arguments);};var apply=function applyBind(){return $reflectApply(functionBind,$apply,arguments);};callBind.apply=apply;var $indexOf=callBind(GetIntrinsic('String.prototype.indexOf'));var callBound=function callBoundIntrinsic(name,allowMissing){var intrinsic=GetIntrinsic(name,!!allowMissing);if(typeof intrinsic==='function'&&$indexOf(name,'.prototype.')){return callBind(intrinsic);}return intrinsic;};var $isEnumerable=callBound('Object.prototype.propertyIsEnumerable');var implementation$1=function values(O){var obj=RequireObjectCoercible(O);var vals=[];for(var key in obj){if(src(obj,key)&&$isEnumerable(obj,key)){vals.push(obj[key]);}}return vals;};var polyfill=function getPolyfill(){return typeof Object.values==='function'?Object.values:implementation$1;};var toStr$1=Object.prototype.toString;var isArguments=function isArguments(value){var str=toStr$1.call(value);var isArgs=str==='[object Arguments]';if(!isArgs){isArgs=str!=='[object Array]'&&value!==null&&_typeof(value)==='object'&&typeof value.length==='number'&&value.length>=0&&toStr$1.call(value.callee)==='[object Function]';}return isArgs;};var keysShim;if(!Object.keys){// modified from https://github.com/es-shims/es5-shim
     var has=Object.prototype.hasOwnProperty;var toStr$2=Object.prototype.toString;var isArgs=isArguments;// eslint-disable-line global-require
     var isEnumerable=Object.prototype.propertyIsEnumerable;var hasDontEnumBug=!isEnumerable.call({toString:null},'toString');var hasProtoEnumBug=isEnumerable.call(function(){},'prototype');var dontEnums=['toString','toLocaleString','valueOf','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','constructor'];var equalsConstructorPrototype=function equalsConstructorPrototype(o){var ctor=o.constructor;return ctor&&ctor.prototype===o;};var excludedKeys={$applicationCache:true,$console:true,$external:true,$frame:true,$frameElement:true,$frames:true,$innerHeight:true,$innerWidth:true,$onmozfullscreenchange:true,$onmozfullscreenerror:true,$outerHeight:true,$outerWidth:true,$pageXOffset:true,$pageYOffset:true,$parent:true,$scrollLeft:true,$scrollTop:true,$scrollX:true,$scrollY:true,$self:true,$webkitIndexedDB:true,$webkitStorageInfo:true,$window:true};var hasAutomationEqualityBug=function(){/* global window */if(typeof window==='undefined'){return false;}for(var k in window){try{if(!excludedKeys['$'+k]&&has.call(window,k)&&window[k]!==null&&_typeof(window[k])==='object'){try{equalsConstructorPrototype(window[k]);}catch(e){return true;}}}catch(e){return true;}}return false;}();var equalsConstructorPrototypeIfNotBuggy=function equalsConstructorPrototypeIfNotBuggy(o){/* global window */if(typeof window==='undefined'||!hasAutomationEqualityBug){return equalsConstructorPrototype(o);}try{return equalsConstructorPrototype(o);}catch(e){return false;}};keysShim=function keys(object){var isObject=object!==null&&_typeof(object)==='object';var isFunction=toStr$2.call(object)==='[object Function]';var isArguments=isArgs(object);var isString=isObject&&toStr$2.call(object)==='[object String]';var theKeys=[];if(!isObject&&!isFunction&&!isArguments){throw new TypeError('Object.keys called on a non-object');}var skipProto=hasProtoEnumBug&&isFunction;if(isString&&object.length>0&&!has.call(object,0)){for(var i=0;i<object.length;++i){theKeys.push(String(i));}}if(isArguments&&object.length>0){for(var j=0;j<object.length;++j){theKeys.push(String(j));}}else{for(var name in object){if(!(skipProto&&name==='prototype')&&has.call(object,name)){theKeys.push(String(name));}}}if(hasDontEnumBug){var skipConstructor=equalsConstructorPrototypeIfNotBuggy(object);for(var k=0;k<dontEnums.length;++k){if(!(skipConstructor&&dontEnums[k]==='constructor')&&has.call(object,dontEnums[k])){theKeys.push(dontEnums[k]);}}}return theKeys;};}var implementation$2=keysShim;var slice$1=Array.prototype.slice;var origKeys=Object.keys;var keysShim$1=origKeys?function keys(o){return origKeys(o);}:implementation$2;var originalKeys=Object.keys;keysShim$1.shim=function shimObjectKeys(){if(Object.keys){var keysWorksWithArguments=function(){// Safari 5.0 bug
     var args=Object.keys(arguments);return args&&args.length===arguments.length;}(1,2);if(!keysWorksWithArguments){Object.keys=function keys(object){// eslint-disable-line func-name-matching
     if(isArguments(object)){return originalKeys(slice$1.call(object));}return originalKeys(object);};}}else{Object.keys=keysShim$1;}return Object.keys||keysShim$1;};var objectKeys=keysShim$1;var hasSymbols$2=typeof Symbol==='function'&&_typeof(Symbol('foo'))==='symbol';var toStr$3=Object.prototype.toString;var concat=Array.prototype.concat;var origDefineProperty=Object.defineProperty;var isFunction=function isFunction(fn){return typeof fn==='function'&&toStr$3.call(fn)==='[object Function]';};var arePropertyDescriptorsSupported=function arePropertyDescriptorsSupported(){var obj={};try{origDefineProperty(obj,'x',{enumerable:false,value:obj});// eslint-disable-next-line no-unused-vars, no-restricted-syntax
     for(var _ in obj){// jscs:ignore disallowUnusedVariables
     return false;}return obj.x===obj;}catch(e){/* this is IE 8. */return false;}};var supportsDescriptors=origDefineProperty&&arePropertyDescriptorsSupported();var defineProperty=function defineProperty(object,name,value,predicate){if(name in object&&(!isFunction(predicate)||!predicate())){return;}if(supportsDescriptors){origDefineProperty(object,name,{configurable:true,enumerable:false,value:value,writable:true});}else{object[name]=value;}};var defineProperties=function defineProperties(object,map){var predicates=arguments.length>2?arguments[2]:{};var props=objectKeys(map);if(hasSymbols$2){props=concat.call(props,Object.getOwnPropertySymbols(map));}for(var i=0;i<props.length;i+=1){defineProperty(object,props[i],map[props[i]],predicates[props[i]]);}};defineProperties.supportsDescriptors=!!supportsDescriptors;var defineProperties_1=defineProperties;var shim=function shimValues(){var polyfill$1=polyfill();defineProperties_1(Object,{values:polyfill$1},{values:function testValues(){return Object.values!==polyfill$1;}});return polyfill$1;};shim();/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */ /**
          * An expression marker with embedded unique key to avoid collision with
          * possible text in templates.
          */var marker="{{lit-".concat(String(Math.random()).slice(2),"}}");/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */ /**
          * Our TrustedTypePolicy for HTML which is declared using the html template
          * tag function.
          *
          * That HTML is a developer-authored constant, and is parsed with innerHTML
          * before any untrusted expressions have been mixed in. Therefor it is
          * considered safe by construction.
          */var policy=window.trustedTypes&&trustedTypes.createPolicy('lit-html',{createHTML:function createHTML(s){return s;}});/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */ // Detect event listener options support. If the `capture` property is read
     // from the options object, then options are supported. If not, then the third
     // argument to add/removeEventListener is interpreted as the boolean capture
     // value so we should only pass the `capture` property.
     var eventOptionsSupported=false;// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
     // blocks right into the body of a module
     (function(){try{var options={get capture(){eventOptionsSupported=true;return false;}};// eslint-disable-next-line @typescript-eslint/no-explicit-any
     window.addEventListener('test',options,options);// eslint-disable-next-line @typescript-eslint/no-explicit-any
     window.removeEventListener('test',options,options);}catch(_e){// event options not supported
     }})();/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */ // IMPORTANT: do not change the property name or the assignment expression.
     // This line will be used in regexes to search for lit-html usage.
     // TODO(justinfagnani): inject version number at build time
     if(typeof window!=='undefined'){(window['litHtmlVersions']||(window['litHtmlVersions']=[])).push('1.3.0');}/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */if(typeof window.ShadyCSS==='undefined');else if(typeof window.ShadyCSS.prepareTemplateDom==='undefined'){console.warn("Incompatible ShadyCSS version detected. "+"Please update to at least @webcomponents/webcomponentsjs@2.0.2 and "+"@webcomponents/shadycss@1.3.1.");}/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */var _a;/**
          * Use this module if you want to create your own base class extending
          * [[UpdatingElement]].
          * @packageDocumentation
          */ /*
          * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
          * replaced at compile time by the munged name for object[property]. We cannot
          * alias this function, so we have to use a small shim that has the same
          * behavior when not compiling.
          */window.JSCompiler_renameProperty=function(prop,_obj){return prop;};var defaultConverter={toAttribute:function toAttribute(value,type){switch(type){case Boolean:return value?'':null;case Object:case Array:// if the value is `null` or `undefined` pass this through
     // to allow removing/no change behavior.
     return value==null?value:JSON.stringify(value);}return value;},fromAttribute:function fromAttribute(value,type){switch(type){case Boolean:return value!==null;case Number:return value===null?null:Number(value);case Object:case Array:return JSON.parse(value);}return value;}};/**
          * Change function that returns true if `value` is different from `oldValue`.
          * This method is used as the default for a property's `hasChanged` function.
          */var notEqual=function notEqual(value,old){// This ensures (old==NaN, value==NaN) always returns false
     return old!==value&&(old===old||value===value);};var defaultPropertyDeclaration={attribute:true,type:String,converter:defaultConverter,reflect:false,hasChanged:notEqual};var STATE_HAS_UPDATED=1;var STATE_UPDATE_REQUESTED=1<<2;var STATE_IS_REFLECTING_TO_ATTRIBUTE=1<<3;var STATE_IS_REFLECTING_TO_PROPERTY=1<<4;/**
          * The Closure JS Compiler doesn't currently have good support for static
          * property semantics where "this" is dynamic (e.g.
          * https://github.com/google/closure-compiler/issues/3177 and others) so we use
          * this hack to bypass any rewriting by the compiler.
          */var finalized='finalized';/**
          * Base element class which manages element properties and attributes. When
          * properties change, the `update` method is asynchronously called. This method
          * should be supplied by subclassers to render updates as desired.
          * @noInheritDoc
          */var UpdatingElement=/*#__PURE__*/function(_HTMLElement){_inherits(UpdatingElement,_HTMLElement);var _super=_createSuper(UpdatingElement);function UpdatingElement(){var _this2;_classCallCheck(this,UpdatingElement);_this2=_super.call(this);_this2.initialize();return _this2;}/**
              * Returns a list of attributes corresponding to the registered properties.
              * @nocollapse
              */_createClass(UpdatingElement,[{key:"initialize",/**
              * Performs element initialization. By default captures any pre-set values for
              * registered properties.
              */value:function initialize(){var _this3=this;this._updateState=0;this._updatePromise=new Promise(function(res){return _this3._enableUpdatingResolver=res;});this._changedProperties=new Map();this._saveInstanceProperties();// ensures first update will be caught by an early access of
     // `updateComplete`
     this.requestUpdateInternal();}/**
              * Fixes any properties set on the instance before upgrade time.
              * Otherwise these would shadow the accessor and break these properties.
              * The properties are stored in a Map which is played back after the
              * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
              * (<=41), properties created for native platform properties like (`id` or
              * `name`) may not have default values set in the element constructor. On
              * these browsers native properties appear on instances and therefore their
              * default value will overwrite any element default (e.g. if the element sets
              * this.id = 'id' in the constructor, the 'id' will become '' since this is
              * the native platform default).
              */},{key:"_saveInstanceProperties",value:function _saveInstanceProperties(){var _this4=this;// Use forEach so this works even if for/of loops are compiled to for loops
     // expecting arrays
     this.constructor._classProperties.forEach(function(_v,p){if(_this4.hasOwnProperty(p)){var value=_this4[p];delete _this4[p];if(!_this4._instanceProperties){_this4._instanceProperties=new Map();}_this4._instanceProperties.set(p,value);}});}/**
              * Applies previously saved instance properties.
              */},{key:"_applyInstanceProperties",value:function _applyInstanceProperties(){var _this5=this;// Use forEach so this works even if for/of loops are compiled to for loops
     // expecting arrays
     // tslint:disable-next-line:no-any
     this._instanceProperties.forEach(function(v,p){return _this5[p]=v;});this._instanceProperties=undefined;}},{key:"connectedCallback",value:function connectedCallback(){// Ensure first connection completes an update. Updates cannot complete
     // before connection.
     this.enableUpdating();}},{key:"enableUpdating",value:function enableUpdating(){if(this._enableUpdatingResolver!==undefined){this._enableUpdatingResolver();this._enableUpdatingResolver=undefined;}}/**
              * Allows for `super.disconnectedCallback()` in extensions while
              * reserving the possibility of making non-breaking feature additions
              * when disconnecting at some point in the future.
              */},{key:"disconnectedCallback",value:function disconnectedCallback(){}/**
              * Synchronizes property values when attributes change.
              */},{key:"attributeChangedCallback",value:function attributeChangedCallback(name,old,value){if(old!==value){this._attributeToProperty(name,value);}}},{key:"_propertyToAttribute",value:function _propertyToAttribute(name,value){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultPropertyDeclaration;var ctor=this.constructor;var attr=ctor._attributeNameForProperty(name,options);if(attr!==undefined){var attrValue=ctor._propertyValueToAttribute(value,options);// an undefined value does not change the attribute.
     if(attrValue===undefined){return;}// Track if the property is being reflected to avoid
     // setting the property again via `attributeChangedCallback`. Note:
     // 1. this takes advantage of the fact that the callback is synchronous.
     // 2. will behave incorrectly if multiple attributes are in the reaction
     // stack at time of calling. However, since we process attributes
     // in `update` this should not be possible (or an extreme corner case
     // that we'd like to discover).
     // mark state reflecting
     this._updateState=this._updateState|STATE_IS_REFLECTING_TO_ATTRIBUTE;if(attrValue==null){this.removeAttribute(attr);}else{this.setAttribute(attr,attrValue);}// mark state not reflecting
     this._updateState=this._updateState&~STATE_IS_REFLECTING_TO_ATTRIBUTE;}}},{key:"_attributeToProperty",value:function _attributeToProperty(name,value){// Use tracking info to avoid deserializing attribute value if it was
     // just set from a property setter.
     if(this._updateState&STATE_IS_REFLECTING_TO_ATTRIBUTE){return;}var ctor=this.constructor;// Note, hint this as an `AttributeMap` so closure clearly understands
     // the type; it has issues with tracking types through statics
     // tslint:disable-next-line:no-unnecessary-type-assertion
     var propName=ctor._attributeToPropertyMap.get(name);if(propName!==undefined){var options=ctor.getPropertyOptions(propName);// mark state reflecting
     this._updateState=this._updateState|STATE_IS_REFLECTING_TO_PROPERTY;this[propName]=// tslint:disable-next-line:no-any
     ctor._propertyValueFromAttribute(value,options);// mark state not reflecting
     this._updateState=this._updateState&~STATE_IS_REFLECTING_TO_PROPERTY;}}/**
              * This protected version of `requestUpdate` does not access or return the
              * `updateComplete` promise. This promise can be overridden and is therefore
              * not free to access.
              */},{key:"requestUpdateInternal",value:function requestUpdateInternal(name,oldValue,options){var shouldRequestUpdate=true;// If we have a property key, perform property update steps.
     if(name!==undefined){var ctor=this.constructor;options=options||ctor.getPropertyOptions(name);if(ctor._valueHasChanged(this[name],oldValue,options.hasChanged)){if(!this._changedProperties.has(name)){this._changedProperties.set(name,oldValue);}// Add to reflecting properties set.
     // Note, it's important that every change has a chance to add the
     // property to `_reflectingProperties`. This ensures setting
     // attribute + property reflects correctly.
     if(options.reflect===true&&!(this._updateState&STATE_IS_REFLECTING_TO_PROPERTY)){if(this._reflectingProperties===undefined){this._reflectingProperties=new Map();}this._reflectingProperties.set(name,options);}}else{// Abort the request if the property should not be considered changed.
     shouldRequestUpdate=false;}}if(!this._hasRequestedUpdate&&shouldRequestUpdate){this._updatePromise=this._enqueueUpdate();}}/**
              * Requests an update which is processed asynchronously. This should
              * be called when an element should update based on some state not triggered
              * by setting a property. In this case, pass no arguments. It should also be
              * called when manually implementing a property setter. In this case, pass the
              * property `name` and `oldValue` to ensure that any configured property
              * options are honored. Returns the `updateComplete` Promise which is resolved
              * when the update completes.
              *
              * @param name {PropertyKey} (optional) name of requesting property
              * @param oldValue {any} (optional) old value of requesting property
              * @returns {Promise} A Promise that is resolved when the update completes.
              */},{key:"requestUpdate",value:function requestUpdate(name,oldValue){this.requestUpdateInternal(name,oldValue);return this.updateComplete;}/**
              * Sets up the element to asynchronously update.
              */},{key:"_enqueueUpdate",value:function(){var _enqueueUpdate2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(){var result;return regeneratorRuntime.wrap(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this._updateState=this._updateState|STATE_UPDATE_REQUESTED;_context2.prev=1;_context2.next=4;return this._updatePromise;case 4:_context2.next=8;break;case 6:_context2.prev=6;_context2.t0=_context2["catch"](1);case 8:result=this.performUpdate();// If `performUpdate` returns a Promise, we await it. This is done to
     // enable coordinating updates with a scheduler. Note, the result is
     // checked to avoid delaying an additional microtask unless we need to.
     if(!(result!=null)){_context2.next=12;break;}_context2.next=12;return result;case 12:return _context2.abrupt("return",!this._hasRequestedUpdate);case 13:case"end":return _context2.stop();}}},_callee,this,[[1,6]]);}));function _enqueueUpdate(){return _enqueueUpdate2.apply(this,arguments);}return _enqueueUpdate;}()},{key:"performUpdate",/**
              * Performs an element update. Note, if an exception is thrown during the
              * update, `firstUpdated` and `updated` will not be called.
              *
              * You can override this method to change the timing of updates. If this
              * method is overridden, `super.performUpdate()` must be called.
              *
              * For instance, to schedule updates to occur just before the next frame:
              *
              * ```
              * protected async performUpdate(): Promise<unknown> {
              *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
              *   super.performUpdate();
              * }
              * ```
              */value:function performUpdate(){// Abort any update if one is not pending when this is called.
     // This can happen if `performUpdate` is called early to "flush"
     // the update.
     if(!this._hasRequestedUpdate){return;}// Mixin instance properties once, if they exist.
     if(this._instanceProperties){this._applyInstanceProperties();}var shouldUpdate=false;var changedProperties=this._changedProperties;try{shouldUpdate=this.shouldUpdate(changedProperties);if(shouldUpdate){this.update(changedProperties);}else{this._markUpdated();}}catch(e){// Prevent `firstUpdated` and `updated` from running when there's an
     // update exception.
     shouldUpdate=false;// Ensure element can accept additional updates after an exception.
     this._markUpdated();throw e;}if(shouldUpdate){if(!(this._updateState&STATE_HAS_UPDATED)){this._updateState=this._updateState|STATE_HAS_UPDATED;this.firstUpdated(changedProperties);}this.updated(changedProperties);}}},{key:"_markUpdated",value:function _markUpdated(){this._changedProperties=new Map();this._updateState=this._updateState&~STATE_UPDATE_REQUESTED;}/**
              * Returns a Promise that resolves when the element has completed updating.
              * The Promise value is a boolean that is `true` if the element completed the
              * update without triggering another update. The Promise result is `false` if
              * a property was set inside `updated()`. If the Promise is rejected, an
              * exception was thrown during the update.
              *
              * To await additional asynchronous work, override the `_getUpdateComplete`
              * method. For example, it is sometimes useful to await a rendered element
              * before fulfilling this Promise. To do this, first await
              * `super._getUpdateComplete()`, then any subsequent state.
              *
              * @returns {Promise} The Promise returns a boolean that indicates if the
              * update resolved without triggering another update.
              */},{key:"_getUpdateComplete",/**
              * Override point for the `updateComplete` promise.
              *
              * It is not safe to override the `updateComplete` getter directly due to a
              * limitation in TypeScript which means it is not possible to call a
              * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
              * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
              * This method should be overridden instead. For example:
              *
              *   class MyElement extends LitElement {
              *     async _getUpdateComplete() {
              *       await super._getUpdateComplete();
              *       await this._myChild.updateComplete;
              *     }
              *   }
              */value:function _getUpdateComplete(){return this._updatePromise;}/**
              * Controls whether or not `update` should be called when the element requests
              * an update. By default, this method always returns `true`, but this can be
              * customized to control when to update.
              *
              * @param _changedProperties Map of changed properties with old values
              */},{key:"shouldUpdate",value:function shouldUpdate(_changedProperties){return true;}/**
              * Updates the element. This method reflects property values to attributes.
              * It can be overridden to render and keep updated element DOM.
              * Setting properties inside this method will *not* trigger
              * another update.
              *
              * @param _changedProperties Map of changed properties with old values
              */},{key:"update",value:function update(_changedProperties){var _this6=this;if(this._reflectingProperties!==undefined&&this._reflectingProperties.size>0){// Use forEach so this works even if for/of loops are compiled to for
     // loops expecting arrays
     this._reflectingProperties.forEach(function(v,k){return _this6._propertyToAttribute(k,_this6[k],v);});this._reflectingProperties=undefined;}this._markUpdated();}/**
              * Invoked whenever the element is updated. Implement to perform
              * post-updating tasks via DOM APIs, for example, focusing an element.
              *
              * Setting properties inside this method will trigger the element to update
              * again after this update cycle completes.
              *
              * @param _changedProperties Map of changed properties with old values
              */},{key:"updated",value:function updated(_changedProperties){}/**
              * Invoked when the element is first updated. Implement to perform one time
              * work on the element after update.
              *
              * Setting properties inside this method will trigger the element to update
              * again after this update cycle completes.
              *
              * @param _changedProperties Map of changed properties with old values
              */},{key:"firstUpdated",value:function firstUpdated(_changedProperties){}},{key:"_hasRequestedUpdate",get:function get(){return this._updateState&STATE_UPDATE_REQUESTED;}},{key:"hasUpdated",get:function get(){return this._updateState&STATE_HAS_UPDATED;}},{key:"updateComplete",get:function get(){return this._getUpdateComplete();}}],[{key:"_ensureClassProperties",/**
              * Ensures the private `_classProperties` property metadata is created.
              * In addition to `finalize` this is also called in `createProperty` to
              * ensure the `@property` decorator can add property metadata.
              */ /** @nocollapse */value:function _ensureClassProperties(){var _this7=this;// ensure private storage for property declarations.
     if(!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties',this))){this._classProperties=new Map();// NOTE: Workaround IE11 not supporting Map constructor argument.
     var superProperties=Object.getPrototypeOf(this)._classProperties;if(superProperties!==undefined){superProperties.forEach(function(v,k){return _this7._classProperties.set(k,v);});}}}/**
              * Creates a property accessor on the element prototype if one does not exist
              * and stores a PropertyDeclaration for the property with the given options.
              * The property setter calls the property's `hasChanged` property option
              * or uses a strict identity check to determine whether or not to request
              * an update.
              *
              * This method may be overridden to customize properties; however,
              * when doing so, it's important to call `super.createProperty` to ensure
              * the property is setup correctly. This method calls
              * `getPropertyDescriptor` internally to get a descriptor to install.
              * To customize what properties do when they are get or set, override
              * `getPropertyDescriptor`. To customize the options for a property,
              * implement `createProperty` like this:
              *
              * static createProperty(name, options) {
              *   options = Object.assign(options, {myOption: true});
              *   super.createProperty(name, options);
              * }
              *
              * @nocollapse
              */},{key:"createProperty",value:function createProperty(name){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultPropertyDeclaration;// Note, since this can be called by the `@property` decorator which
     // is called before `finalize`, we ensure storage exists for property
     // metadata.
     this._ensureClassProperties();this._classProperties.set(name,options);// Do not generate an accessor if the prototype already has one, since
     // it would be lost otherwise and that would never be the user's intention;
     // Instead, we expect users to call `requestUpdate` themselves from
     // user-defined accessors. Note that if the super has an accessor we will
     // still overwrite it
     if(options.noAccessor||this.prototype.hasOwnProperty(name)){return;}var key=_typeof(name)==='symbol'?Symbol():"__".concat(name);var descriptor=this.getPropertyDescriptor(name,key,options);if(descriptor!==undefined){Object.defineProperty(this.prototype,name,descriptor);}}/**
              * Returns a property descriptor to be defined on the given named property.
              * If no descriptor is returned, the property will not become an accessor.
              * For example,
              *
              *   class MyElement extends LitElement {
              *     static getPropertyDescriptor(name, key, options) {
              *       const defaultDescriptor =
              *           super.getPropertyDescriptor(name, key, options);
              *       const setter = defaultDescriptor.set;
              *       return {
              *         get: defaultDescriptor.get,
              *         set(value) {
              *           setter.call(this, value);
              *           // custom action.
              *         },
              *         configurable: true,
              *         enumerable: true
              *       }
              *     }
              *   }
              *
              * @nocollapse
              */},{key:"getPropertyDescriptor",value:function getPropertyDescriptor(name,key,options){return{// tslint:disable-next-line:no-any no symbol in index
     get:function get(){return this[key];},set:function set(value){var oldValue=this[name];this[key]=value;this.requestUpdateInternal(name,oldValue,options);},configurable:true,enumerable:true};}/**
              * Returns the property options associated with the given property.
              * These options are defined with a PropertyDeclaration via the `properties`
              * object or the `@property` decorator and are registered in
              * `createProperty(...)`.
              *
              * Note, this method should be considered "final" and not overridden. To
              * customize the options for a given property, override `createProperty`.
              *
              * @nocollapse
              * @final
              */},{key:"getPropertyOptions",value:function getPropertyOptions(name){return this._classProperties&&this._classProperties.get(name)||defaultPropertyDeclaration;}/**
              * Creates property accessors for registered properties and ensures
              * any superclasses are also finalized.
              * @nocollapse
              */},{key:"finalize",value:function finalize(){// finalize any superclasses
     var superCtor=Object.getPrototypeOf(this);if(!superCtor.hasOwnProperty(finalized)){superCtor.finalize();}this[finalized]=true;this._ensureClassProperties();// initialize Map populated in observedAttributes
     this._attributeToPropertyMap=new Map();// make any properties
     // Note, only process "own" properties since this element will inherit
     // any properties defined on the superClass, and finalization ensures
     // the entire prototype chain is finalized.
     if(this.hasOwnProperty(JSCompiler_renameProperty('properties',this))){var props=this.properties;// support symbols in properties (IE11 does not support this)
     var propKeys=[].concat(_toConsumableArray(Object.getOwnPropertyNames(props)),_toConsumableArray(typeof Object.getOwnPropertySymbols==='function'?Object.getOwnPropertySymbols(props):[]));// This for/of is ok because propKeys is an array
     var _iterator=_createForOfIteratorHelper(propKeys),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var p=_step.value;// note, use of `any` is due to TypeSript lack of support for symbol in
     // index types
     // tslint:disable-next-line:no-any no symbol in index
     this.createProperty(p,props[p]);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}/**
              * Returns the property name for the given attribute `name`.
              * @nocollapse
              */},{key:"_attributeNameForProperty",value:function _attributeNameForProperty(name,options){var attribute=options.attribute;return attribute===false?undefined:typeof attribute==='string'?attribute:typeof name==='string'?name.toLowerCase():undefined;}/**
              * Returns true if a property should request an update.
              * Called when a property value is set and uses the `hasChanged`
              * option for the property if present or a strict identity check.
              * @nocollapse
              */},{key:"_valueHasChanged",value:function _valueHasChanged(value,old){var hasChanged=arguments.length>2&&arguments[2]!==undefined?arguments[2]:notEqual;return hasChanged(value,old);}/**
              * Returns the property value for the given attribute value.
              * Called via the `attributeChangedCallback` and uses the property's
              * `converter` or `converter.fromAttribute` property option.
              * @nocollapse
              */},{key:"_propertyValueFromAttribute",value:function _propertyValueFromAttribute(value,options){var type=options.type;var converter=options.converter||defaultConverter;var fromAttribute=typeof converter==='function'?converter:converter.fromAttribute;return fromAttribute?fromAttribute(value,type):value;}/**
              * Returns the attribute value for the given property value. If this
              * returns undefined, the property will *not* be reflected to an attribute.
              * If this returns null, the attribute will be removed, otherwise the
              * attribute will be set to the value.
              * This uses the property's `reflect` and `type.toAttribute` property options.
              * @nocollapse
              */},{key:"_propertyValueToAttribute",value:function _propertyValueToAttribute(value,options){if(options.reflect===undefined){return;}var type=options.type;var converter=options.converter;var toAttribute=converter&&converter.toAttribute||defaultConverter.toAttribute;return toAttribute(value,type);}},{key:"observedAttributes",get:function get(){var _this8=this;// note: piggy backing on this to ensure we're finalized.
     this.finalize();var attributes=[];// Use forEach so this works even if for/of loops are compiled to for loops
     // expecting arrays
     this._classProperties.forEach(function(v,p){var attr=_this8._attributeNameForProperty(p,v);if(attr!==undefined){_this8._attributeToPropertyMap.set(attr,p);attributes.push(attr);}});return attributes;}}]);return UpdatingElement;}(/*#__PURE__*/_wrapNativeSuper(HTMLElement));_a=finalized;/**
          * Marks class as having finished creating properties.
          */UpdatingElement[_a]=true;/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */var standardProperty=function standardProperty(options,element){// When decorating an accessor, pass it through and add property metadata.
     // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
     // stomp over the user's accessor.
     if(element.kind==='method'&&element.descriptor&&!('value'in element.descriptor)){return Object.assign(Object.assign({},element),{finisher:function finisher(clazz){clazz.createProperty(element.key,options);}});}else{// createProperty() takes care of defining the property, but we still
     // must return some kind of descriptor, so return a descriptor for an
     // unused prototype field. The finisher calls createProperty().
     return{kind:'field',key:Symbol(),placement:'own',descriptor:{},// When @babel/plugin-proposal-decorators implements initializers,
     // do this instead of the initializer below. See:
     // https://github.com/babel/babel/issues/9260 extras: [
     //   {
     //     kind: 'initializer',
     //     placement: 'own',
     //     initializer: descriptor.initializer,
     //   }
     // ],
     initializer:function initializer(){if(typeof element.initializer==='function'){this[element.key]=element.initializer.call(this);}},finisher:function finisher(clazz){clazz.createProperty(element.key,options);}};}};var legacyProperty=function legacyProperty(options,proto,name){proto.constructor.createProperty(name,options);};/**
          * A property decorator which creates a LitElement property which reflects a
          * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be
          * supplied to configure property features.
          *
          * This decorator should only be used for public fields. Private or protected
          * fields should use the [[`internalProperty`]] decorator.
          *
          * @example
          * ```ts
          * class MyElement {
          *   @property({ type: Boolean })
          *   clicked = false;
          * }
          * ```
          * @category Decorator
          * @ExportDecoratedItems
          */function property(options){// tslint:disable-next-line:no-any decorator
     return function(protoOrDescriptor,name){return name!==undefined?legacyProperty(options,protoOrDescriptor,name):standardProperty(options,protoOrDescriptor);};}/**
         @license
         Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
         This code may only be used under the BSD style license found at
         http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
         http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
         found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
         part of the polymer project is also subject to an additional IP rights grant
         found at http://polymer.github.io/PATENTS.txt
         */ /**
          * Whether the current browser supports `adoptedStyleSheets`.
          */var supportsAdoptingStyleSheets=window.ShadowRoot&&(window.ShadyCSS===undefined||window.ShadyCSS.nativeShadow)&&'adoptedStyleSheets'in Document.prototype&&'replace'in CSSStyleSheet.prototype;/**
          * @license
          * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
          * This code may only be used under the BSD style license found at
          * http://polymer.github.io/LICENSE.txt
          * The complete set of authors may be found at
          * http://polymer.github.io/AUTHORS.txt
          * The complete set of contributors may be found at
          * http://polymer.github.io/CONTRIBUTORS.txt
          * Code distributed by Google as part of the polymer project is also
          * subject to an additional IP rights grant found at
          * http://polymer.github.io/PATENTS.txt
          */ // IMPORTANT: do not change the property name or the assignment expression.
     // This line will be used in regexes to search for LitElement usage.
     // TODO(justinfagnani): inject version number at build time
     (window['litElementVersions']||(window['litElementVersions']=[])).push('2.4.0');var HAS_WEBXR_DEVICE_API=navigator.xr!=null&&self.XRSession!=null&&navigator.xr.isSessionSupported!=null;var HAS_WEBXR_HIT_TEST_API=HAS_WEBXR_DEVICE_API&&self.XRSession.prototype.requestHitTestSource;var HAS_RESIZE_OBSERVER=self.ResizeObserver!=null;var HAS_INTERSECTION_OBSERVER=self.IntersectionObserver!=null;var IS_WEBXR_AR_CANDIDATE=HAS_WEBXR_HIT_TEST_API;var IS_MOBILE=function(){var userAgent=navigator.userAgent||navigator.vendor||self.opera;var check=false;if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(userAgent)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(userAgent.substr(0,4))){check=true;}return check;}();var IS_CHROMEOS=/\bCrOS\b/.test(navigator.userAgent);var USE_OFFSCREEN_CANVAS=false;var IS_ANDROID=/android/i.test(navigator.userAgent);var IS_IOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!self.MSStream||navigator.platform==='MacIntel'&&navigator.maxTouchPoints>1;var IS_AR_QUICKLOOK_CANDIDATE=function(){var tempAnchor=document.createElement('a');return Boolean(tempAnchor.relList&&tempAnchor.relList.supports&&tempAnchor.relList.supports('ar'));}();var IS_SAFARI=/Safari\//.test(navigator.userAgent);var IS_FIREFOX=/firefox/i.test(navigator.userAgent);var IS_OCULUS=/OculusBrowser/.test(navigator.userAgent);var IS_IOS_CHROME=IS_IOS&&/CriOS\//.test(navigator.userAgent);var IS_IOS_SAFARI=IS_IOS&&IS_SAFARI;var IS_SCENEVIEWER_CANDIDATE=IS_ANDROID&&!IS_FIREFOX&&!IS_OCULUS;var CloseIcon="\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <!-- NOTE(cdata): This SVG filter is a stop-gap until we can implement\n         support for dynamic re-coloring of UI components -->\n    <defs>\n      <filter id=\"drop-shadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\"/>\n        <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"/>\n        <feFlood flood-color=\"#000000\"/>\n        <feComposite in2=\"offsetblur\" operator=\"in\"/>\n        <feMerge>\n          <feMergeNode/>\n          <feMergeNode in=\"SourceGraphic\"/>\n        </feMerge>\n      </filter>\n    </defs>\n    <path filter=\"url(#drop-shadow)\" d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n</svg>";var ControlsPrompt="\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"36\">\n    <defs>\n        <path id=\"A\" d=\"M.001.232h24.997V36H.001z\" />\n    </defs>\n    <g transform=\"translate(-11 -4)\" fill=\"none\" fill-rule=\"evenodd\">\n        <path fill-opacity=\"0\" fill=\"#fff\" d=\"M0 0h44v44H0z\" />\n        <g transform=\"translate(11 3)\">\n            <path d=\"M8.733 11.165c.04-1.108.766-2.027 1.743-2.307a2.54 2.54 0 0 1 .628-.089c.16 0 .314.017.463.044 1.088.2 1.9 1.092 1.9 2.16v8.88h1.26c2.943-1.39 5-4.45 5-8.025a9.01 9.01 0 0 0-1.9-5.56l-.43-.5c-.765-.838-1.683-1.522-2.712-2-1.057-.49-2.226-.77-3.46-.77s-2.4.278-3.46.77c-1.03.478-1.947 1.162-2.71 2l-.43.5a9.01 9.01 0 0 0-1.9 5.56 9.04 9.04 0 0 0 .094 1.305c.03.21.088.41.13.617l.136.624c.083.286.196.56.305.832l.124.333a8.78 8.78 0 0 0 .509.953l.065.122a8.69 8.69 0 0 0 3.521 3.191l1.11.537v-9.178z\" fill-opacity=\".5\" fill=\"#e4e4e4\" />\n            <path d=\"M22.94 26.218l-2.76 7.74c-.172.485-.676.8-1.253.8H12.24c-1.606 0-3.092-.68-3.98-1.82-1.592-2.048-3.647-3.822-6.11-5.27-.095-.055-.15-.137-.152-.23-.004-.1.046-.196.193-.297.56-.393 1.234-.6 1.926-.6a3.43 3.43 0 0 1 .691.069l4.922.994V10.972c0-.663.615-1.203 1.37-1.203s1.373.54 1.373 1.203v9.882h2.953c.273 0 .533.073.757.21l6.257 3.874c.027.017.045.042.07.06.41.296.586.77.426 1.22M4.1 16.614c-.024-.04-.042-.083-.065-.122a8.69 8.69 0 0 1-.509-.953c-.048-.107-.08-.223-.124-.333l-.305-.832c-.058-.202-.09-.416-.136-.624l-.13-.617a9.03 9.03 0 0 1-.094-1.305c0-2.107.714-4.04 1.9-5.56l.43-.5c.764-.84 1.682-1.523 2.71-2 1.058-.49 2.226-.77 3.46-.77s2.402.28 3.46.77c1.03.477 1.947 1.16 2.712 2l.428.5a9 9 0 0 1 1.901 5.559c0 3.577-2.056 6.636-5 8.026h-1.26v-8.882c0-1.067-.822-1.96-1.9-2.16-.15-.028-.304-.044-.463-.044-.22 0-.427.037-.628.09-.977.28-1.703 1.198-1.743 2.306v9.178l-1.11-.537C6.18 19.098 4.96 18 4.1 16.614M22.97 24.09l-6.256-3.874c-.102-.063-.218-.098-.33-.144 2.683-1.8 4.354-4.855 4.354-8.243 0-.486-.037-.964-.104-1.43a9.97 9.97 0 0 0-1.57-4.128l-.295-.408-.066-.092a10.05 10.05 0 0 0-.949-1.078c-.342-.334-.708-.643-1.094-.922-1.155-.834-2.492-1.412-3.94-1.65l-.732-.088-.748-.03a9.29 9.29 0 0 0-1.482.119c-1.447.238-2.786.816-3.94 1.65a9.33 9.33 0 0 0-.813.686 9.59 9.59 0 0 0-.845.877l-.385.437-.36.5-.288.468-.418.778-.04.09c-.593 1.28-.93 2.71-.93 4.222 0 3.832 2.182 7.342 5.56 8.938l1.437.68v4.946L5 25.64a4.44 4.44 0 0 0-.888-.086c-.017 0-.034.003-.05.003-.252.004-.503.033-.75.08a5.08 5.08 0 0 0-.237.056c-.193.046-.382.107-.568.18-.075.03-.15.057-.225.1-.25.114-.494.244-.723.405a1.31 1.31 0 0 0-.566 1.122 1.28 1.28 0 0 0 .645 1.051C4 29.925 5.96 31.614 7.473 33.563a5.06 5.06 0 0 0 .434.491c1.086 1.082 2.656 1.713 4.326 1.715h6.697c.748-.001 1.43-.333 1.858-.872.142-.18.256-.38.336-.602l2.757-7.74c.094-.26.13-.53.112-.794s-.088-.52-.203-.76a2.19 2.19 0 0 0-.821-.91\" fill-opacity=\".6\" fill=\"#000\" />\n            <path d=\"M22.444 24.94l-6.257-3.874a1.45 1.45 0 0 0-.757-.211h-2.953v-9.88c0-.663-.616-1.203-1.373-1.203s-1.37.54-1.37 1.203v16.643l-4.922-.994a3.44 3.44 0 0 0-.692-.069 3.35 3.35 0 0 0-1.925.598c-.147.102-.198.198-.194.298.004.094.058.176.153.23 2.462 1.448 4.517 3.22 6.11 5.27.887 1.14 2.373 1.82 3.98 1.82h6.686c.577 0 1.08-.326 1.253-.8l2.76-7.74c.16-.448-.017-.923-.426-1.22-.025-.02-.043-.043-.07-.06z\" fill=\"#fff\" />\n            <g transform=\"translate(0 .769)\">\n                <mask id=\"B\" fill=\"#fff\">\n                    <use xlink:href=\"#A\" />\n                </mask>\n                <path d=\"M23.993 24.992a1.96 1.96 0 0 1-.111.794l-2.758 7.74c-.08.22-.194.423-.336.602-.427.54-1.11.87-1.857.872h-6.698c-1.67-.002-3.24-.633-4.326-1.715-.154-.154-.3-.318-.434-.49C5.96 30.846 4 29.157 1.646 27.773c-.385-.225-.626-.618-.645-1.05a1.31 1.31 0 0 1 .566-1.122 4.56 4.56 0 0 1 .723-.405l.225-.1a4.3 4.3 0 0 1 .568-.18l.237-.056c.248-.046.5-.075.75-.08.018 0 .034-.003.05-.003.303-.001.597.027.89.086l3.722.752V20.68l-1.436-.68c-3.377-1.596-5.56-5.106-5.56-8.938 0-1.51.336-2.94.93-4.222.015-.03.025-.06.04-.09.127-.267.268-.525.418-.778.093-.16.186-.316.288-.468.063-.095.133-.186.2-.277L3.773 5c.118-.155.26-.29.385-.437.266-.3.544-.604.845-.877a9.33 9.33 0 0 1 .813-.686C6.97 2.167 8.31 1.59 9.757 1.35a9.27 9.27 0 0 1 1.481-.119 8.82 8.82 0 0 1 .748.031c.247.02.49.05.733.088 1.448.238 2.786.816 3.94 1.65.387.28.752.588 1.094.922a9.94 9.94 0 0 1 .949 1.078l.066.092c.102.133.203.268.295.408a9.97 9.97 0 0 1 1.571 4.128c.066.467.103.945.103 1.43 0 3.388-1.67 6.453-4.353 8.243.11.046.227.08.33.144l6.256 3.874c.37.23.645.55.82.9.115.24.185.498.203.76m.697-1.195c-.265-.55-.677-1.007-1.194-1.326l-5.323-3.297c2.255-2.037 3.564-4.97 3.564-8.114 0-2.19-.637-4.304-1.84-6.114-.126-.188-.26-.37-.4-.552-.645-.848-1.402-1.6-2.252-2.204C15.472.91 13.393.232 11.238.232A10.21 10.21 0 0 0 5.23 2.19c-.848.614-1.606 1.356-2.253 2.205-.136.18-.272.363-.398.55C1.374 6.756.737 8.87.737 11.06c0 4.218 2.407 8.08 6.133 9.842l.863.41v3.092l-2.525-.51c-.356-.07-.717-.106-1.076-.106a5.45 5.45 0 0 0-3.14.996c-.653.46-1.022 1.202-.99 1.983a2.28 2.28 0 0 0 1.138 1.872c2.24 1.318 4.106 2.923 5.543 4.772 1.26 1.62 3.333 2.59 5.55 2.592h6.698c1.42-.001 2.68-.86 3.134-2.138l2.76-7.74c.272-.757.224-1.584-.134-2.325\" fill-opacity=\".05\" fill=\"#000\" mask=\"url(#B)\" />\n            </g>\n        </g>\n    </g>\n</svg>";var ARGlyph="\n<svg version=\"1.1\" id=\"view_x5F_in_x5F_AR_x5F_icon\"\n\t xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\"\n\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<rect id=\"Bounding_Box\" x=\"0\" y=\"0\" fill=\"none\" width=\"24\" height=\"24\"/>\n<g id=\"Art_layer\">\n\t<path d=\"M3,4c0-0.55,0.45-1,1-1h2V1H4C2.35,1,1,2.35,1,4v2h2V4z\"/>\n\t<path d=\"M20,3c0.55,0,1,0.45,1,1v2h2V4c0-1.65-1.35-3-3-3h-2v2H20z\"/>\n\t<path d=\"M4,21c-0.55,0-1-0.45-1-1v-2H1v2c0,1.65,1.35,3,3,3h2v-2H4z\"/>\n\t<path d=\"M20,21c0.55,0,1-0.45,1-1v-2h2v2c0,1.65-1.35,3-3,3h-2v-2H20z\"/>\n\t<g>\n\t\t<path d=\"M18.25,7.6l-5.5-3.18c-0.46-0.27-1.04-0.27-1.5,0L5.75,7.6C5.29,7.87,5,8.36,5,8.9v6.35c0,0.54,0.29,1.03,0.75,1.3\n\t\t\tl5.5,3.18c0.46,0.27,1.04,0.27,1.5,0l5.5-3.18c0.46-0.27,0.75-0.76,0.75-1.3V8.9C19,8.36,18.71,7.87,18.25,7.6z M7,14.96v-4.62\n\t\t\tl4,2.32v4.61L7,14.96z M12,10.93L8,8.61l4-2.31l4,2.31L12,10.93z M13,17.27v-4.61l4-2.32v4.62L13,17.27z\"/>\n\t</g>\n</g>\n</svg>";var template=document.createElement('template');template.innerHTML="\n<style>\n:host {\n  display: block;\n  position: relative;\n  contain: strict;\n  width: 300px;\n  height: 150px;\n}\n\n/* NOTE: This ruleset is our integration surface area with the\n * :focus-visible polyfill.\n *\n * @see https://github.com/WICG/focus-visible/pull/196 */\n:host([data-js-focus-visible]:focus:not(.focus-visible)),\n:host([data-js-focus-visible]) :focus:not(.focus-visible) {\n  outline: none;\n}\n\n.container {\n  position: relative;\n}\n\n.userInput {\n  width: 100%;\n  height: 100%;\n  display: block;\n  position: relative;\n  overflow: hidden;\n}\n\ncanvas {\n  position: absolute;\n  display: none;\n  pointer-events: none;\n  /* NOTE(cdata): Chrome 76 and below apparently have a bug\n   * that causes our canvas not to display pixels unless it is\n   * on its own render layer\n   * @see https://github.com/google/model-viewer/pull/755#issuecomment-536597893\n   */\n  transform: translateZ(0);\n}\n\ncanvas.show {\n  display: block;\n}\n\n/* Adapted from HTML5 Boilerplate\n *\n * @see https://github.com/h5bp/html5-boilerplate/blob/ceb4620c78fc82e13534fc44202a3f168754873f/dist/css/main.css#L122-L133 */\n.screen-reader-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n}\n\n.slot {\n  position: absolute;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.slot > * {\n  pointer-events: initial;\n}\n\n.annotation-wrapper ::slotted(*) {\n  opacity: var(--max-hotspot-opacity, 1);\n  transition: opacity 0.3s;\n}\n\n.pointer-tumbling .annotation-wrapper ::slotted(*) {\n  pointer-events: none;\n}\n\n.annotation-wrapper ::slotted(*) {\n  pointer-events: initial;\n}\n\n.annotation-wrapper.hide ::slotted(*) {\n  opacity: var(--min-hotspot-opacity, 0.25);\n}\n\n.slot.poster {\n  opacity: 0;\n  transition: opacity 0.3s 0.3s;\n  background-color: inherit;\n}\n\n.slot.poster.show {\n  opacity: 1;\n  transition: none;\n}\n\n.slot.poster > * {\n  pointer-events: initial;\n}\n\n.slot.poster:not(.show) > * {\n  pointer-events: none;\n}\n\n#default-poster {\n  width: 100%;\n  height: 100%;\n  /* The default poster is a <button> so we need to set display\n   * to prevent it from being affected by text-align: */\n  display: block;\n  position: absolute;\n  border: none;\n  padding: 0;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: var(--poster-color, #fff);\n  background-image: var(--poster-image, none);\n}\n\n#default-progress-bar {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n}\n\n#default-progress-bar > .mask {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--progress-mask, #fff);\n  transition: opacity 0.3s;\n  opacity: 0.2;\n}\n\n#default-progress-bar > .bar {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--progress-bar-height, 5px);\n  transition: transform 0.09s;\n  transform-origin: top left;\n  transform: scaleX(0);\n  overflow: hidden;\n}\n\n#default-progress-bar > .bar:before {\n  content: '';\n  display: block;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  background-color: var(--progress-bar-color, rgba(0, 0, 0, 0.4));\n\n  transition: none;\n  transform-origin: top left;\n  transform: translateY(0);\n}\n\n#default-progress-bar > .bar.hide:before {\n  transition: transform 0.3s 1s;\n  transform: translateY(-100%);\n}\n\n.slot.interaction-prompt {\n  display: var(--interaction-prompt-display, flex);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  align-items: center;\n  justify-content: center;\n\n  opacity: 0;\n  will-change: opacity;\n  overflow: hidden;\n  transition: opacity 0.3s;\n}\n\n.slot.interaction-prompt.visible {\n  opacity: 1;\n}\n\n.slot.interaction-prompt > .animated-container {\n  will-change: transform, opacity;\n}\n\n.slot.interaction-prompt > * {\n  pointer-events: none;\n}\n\n.slot.ar-button {\n  -moz-user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  user-select: none;\n\n  display: var(--ar-button-display, block);\n}\n\n.slot.ar-button:not(.enabled) {\n  display: none;\n}\n\n.fab {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  background-color: #fff;\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 100px;\n}\n\n.fab > * {\n  opacity: 0.87;\n}\n\n#default-ar-button {\n  position: absolute;\n  bottom: 16px;\n  right: 16px;\n  transform: scale(var(--ar-button-scale, 1));\n  transform-origin: bottom right;\n}\n\n.slot.default {\n  pointer-events: none;\n}\n\n.slot.progress-bar {\n  pointer-events: none;\n}\n\n.slot.exit-webxr-ar-button {\n  pointer-events: none;\n}\n\n.slot.exit-webxr-ar-button:not(.enabled) {\n  display: none;\n}\n\n#default-exit-webxr-ar-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 16px;\n  left: 16px;\n  width: 40px;\n  height: 40px;\n  box-sizing: border-box;\n}\n\n#default-exit-webxr-ar-button > svg {\n  fill: #fff;\n}\n</style>\n<div class=\"container\">\n  <div class=\"userInput\" tabindex=\"0\" role=\"img\"\n      aria-label=\"A depiction of a 3D model\"\n      aria-live=\"polite\">\n    <canvas></canvas>\n  </div>\n\n  <!-- NOTE(cdata): We need to wrap slots because browsers without ShadowDOM\n        will have their <slot> elements removed by ShadyCSS -->\n  <div class=\"slot poster\">\n    <slot name=\"poster\">\n      <button type=\"button\" id=\"default-poster\" aria-hidden=\"true\" aria-label=\"Activate to view in 3D!\"></button>\n    </slot>\n  </div>\n\n  <div class=\"slot ar-button\">\n    <slot name=\"ar-button\">\n      <a id=\"default-ar-button\" class=\"fab\"\n          tabindex=\"2\"\n          aria-label=\"View this 3D model up close\">\n        ".concat(ARGlyph,"\n      </a>\n    </slot>\n  </div>\n\n  <div class=\"slot interaction-prompt\">\n    <div class=\"animated-container\" part=\"interaction-prompt\">\n      <slot name=\"interaction-prompt\" aria-hidden=\"true\">\n        ").concat(ControlsPrompt,"\n      </slot>\n    </div>\n  </div>\n\n  <div class=\"slot default\">\n    <slot></slot>\n\n    <div class=\"slot progress-bar\">\n      <slot name=\"progress-bar\">\n        <div id=\"default-progress-bar\" aria-hidden=\"true\">\n          <div class=\"mask\"></div>\n          <div class=\"bar\"></div>\n        </div>\n      </slot>\n    </div>\n    \n    <div class=\"slot exit-webxr-ar-button\">\n      <slot name=\"exit-webxr-ar-button\">\n        <a id=\"default-exit-webxr-ar-button\"\n            tabindex=\"3\"\n            aria-label=\"Exit AR\"\n            aria-hidden=\"true\">\n          ").concat(CloseIcon,"\n        </a>\n      </slot>\n    </div>\n  </div>\n</div>");var makeTemplate=function makeTemplate(tagName){var clone=document.createElement('template');clone.innerHTML=template.innerHTML;if(window.ShadyCSS){window.ShadyCSS.prepareTemplate(clone,tagName);}return clone;};// threejs.org/license
     var REVISION='121';var CullFaceNone=0;var CullFaceBack=1;var CullFaceFront=2;var PCFShadowMap=1;var PCFSoftShadowMap=2;var VSMShadowMap=3;var FrontSide=0;var BackSide=1;var DoubleSide=2;var FlatShading=1;var NoBlending=0;var NormalBlending=1;var AdditiveBlending=2;var SubtractiveBlending=3;var MultiplyBlending=4;var CustomBlending=5;var AddEquation=100;var SubtractEquation=101;var ReverseSubtractEquation=102;var MinEquation=103;var MaxEquation=104;var ZeroFactor=200;var OneFactor=201;var SrcColorFactor=202;var OneMinusSrcColorFactor=203;var SrcAlphaFactor=204;var OneMinusSrcAlphaFactor=205;var DstAlphaFactor=206;var OneMinusDstAlphaFactor=207;var DstColorFactor=208;var OneMinusDstColorFactor=209;var SrcAlphaSaturateFactor=210;var NeverDepth=0;var AlwaysDepth=1;var LessDepth=2;var LessEqualDepth=3;var EqualDepth=4;var GreaterEqualDepth=5;var GreaterDepth=6;var NotEqualDepth=7;var MultiplyOperation=0;var MixOperation=1;var AddOperation=2;var NoToneMapping=0;var LinearToneMapping=1;var ReinhardToneMapping=2;var CineonToneMapping=3;var ACESFilmicToneMapping=4;var CustomToneMapping=5;var UVMapping=300;var CubeReflectionMapping=301;var CubeRefractionMapping=302;var EquirectangularReflectionMapping=303;var EquirectangularRefractionMapping=304;var CubeUVReflectionMapping=306;var CubeUVRefractionMapping=307;var RepeatWrapping=1000;var ClampToEdgeWrapping=1001;var MirroredRepeatWrapping=1002;var NearestFilter=1003;var NearestMipmapNearestFilter=1004;var NearestMipmapLinearFilter=1005;var LinearFilter=1006;var LinearMipmapNearestFilter=1007;var LinearMipmapLinearFilter=1008;var UnsignedByteType=1009;var ByteType=1010;var ShortType=1011;var UnsignedShortType=1012;var IntType=1013;var UnsignedIntType=1014;var FloatType=1015;var HalfFloatType=1016;var UnsignedShort4444Type=1017;var UnsignedShort5551Type=1018;var UnsignedShort565Type=1019;var UnsignedInt248Type=1020;var AlphaFormat=1021;var RGBFormat=1022;var RGBAFormat=1023;var LuminanceFormat=1024;var LuminanceAlphaFormat=1025;var RGBEFormat=RGBAFormat;var DepthFormat=1026;var DepthStencilFormat=1027;var RedFormat=1028;var RedIntegerFormat=1029;var RGFormat=1030;var RGIntegerFormat=1031;var RGBIntegerFormat=1032;var RGBAIntegerFormat=1033;var RGB_S3TC_DXT1_Format=33776;var RGBA_S3TC_DXT1_Format=33777;var RGBA_S3TC_DXT3_Format=33778;var RGBA_S3TC_DXT5_Format=33779;var RGB_PVRTC_4BPPV1_Format=35840;var RGB_PVRTC_2BPPV1_Format=35841;var RGBA_PVRTC_4BPPV1_Format=35842;var RGBA_PVRTC_2BPPV1_Format=35843;var RGB_ETC1_Format=36196;var RGB_ETC2_Format=37492;var RGBA_ETC2_EAC_Format=37496;var RGBA_ASTC_4x4_Format=37808;var RGBA_ASTC_5x4_Format=37809;var RGBA_ASTC_5x5_Format=37810;var RGBA_ASTC_6x5_Format=37811;var RGBA_ASTC_6x6_Format=37812;var RGBA_ASTC_8x5_Format=37813;var RGBA_ASTC_8x6_Format=37814;var RGBA_ASTC_8x8_Format=37815;var RGBA_ASTC_10x5_Format=37816;var RGBA_ASTC_10x6_Format=37817;var RGBA_ASTC_10x8_Format=37818;var RGBA_ASTC_10x10_Format=37819;var RGBA_ASTC_12x10_Format=37820;var RGBA_ASTC_12x12_Format=37821;var RGBA_BPTC_Format=36492;var SRGB8_ALPHA8_ASTC_4x4_Format=37840;var SRGB8_ALPHA8_ASTC_5x4_Format=37841;var SRGB8_ALPHA8_ASTC_5x5_Format=37842;var SRGB8_ALPHA8_ASTC_6x5_Format=37843;var SRGB8_ALPHA8_ASTC_6x6_Format=37844;var SRGB8_ALPHA8_ASTC_8x5_Format=37845;var SRGB8_ALPHA8_ASTC_8x6_Format=37846;var SRGB8_ALPHA8_ASTC_8x8_Format=37847;var SRGB8_ALPHA8_ASTC_10x5_Format=37848;var SRGB8_ALPHA8_ASTC_10x6_Format=37849;var SRGB8_ALPHA8_ASTC_10x8_Format=37850;var SRGB8_ALPHA8_ASTC_10x10_Format=37851;var SRGB8_ALPHA8_ASTC_12x10_Format=37852;var SRGB8_ALPHA8_ASTC_12x12_Format=37853;var LoopOnce=2200;var LoopRepeat=2201;var LoopPingPong=2202;var InterpolateDiscrete=2300;var InterpolateLinear=2301;var InterpolateSmooth=2302;var ZeroCurvatureEnding=2400;var ZeroSlopeEnding=2401;var WrapAroundEnding=2402;var NormalAnimationBlendMode=2500;var AdditiveAnimationBlendMode=2501;var TrianglesDrawMode=0;var TriangleStripDrawMode=1;var TriangleFanDrawMode=2;var LinearEncoding=3000;var sRGBEncoding=3001;var GammaEncoding=3007;var RGBEEncoding=3002;var LogLuvEncoding=3003;var RGBM7Encoding=3004;var RGBM16Encoding=3005;var RGBDEncoding=3006;var BasicDepthPacking=3200;var RGBADepthPacking=3201;var TangentSpaceNormalMap=0;var ObjectSpaceNormalMap=1;var KeepStencilOp=7680;var AlwaysStencilFunc=519;var StaticDrawUsage=35044;var DynamicDrawUsage=35048;var GLSL3="300 es";/**
          * https://github.com/mrdoob/eventdispatcher.js/
          */function EventDispatcher(){}Object.assign(EventDispatcher.prototype,{addEventListener:function addEventListener(type,listener){if(this._listeners===undefined)this._listeners={};var listeners=this._listeners;if(listeners[type]===undefined){listeners[type]=[];}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener);}},hasEventListener:function hasEventListener(type,listener){if(this._listeners===undefined)return false;var listeners=this._listeners;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1;},removeEventListener:function removeEventListener(type,listener){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[type];if(listenerArray!==undefined){var index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1);}}},dispatchEvent:function dispatchEvent(event){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;// Make a copy, in case listeners are removed while iterating.
     var array=listenerArray.slice(0);for(var i=0,l=array.length;i<l;i++){array[i].call(this,event);}}}});var _lut=[];for(var i=0;i<256;i++){_lut[i]=(i<16?'0':'')+i.toString(16);}var _seed=1234567;var MathUtils={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function generateUUID(){// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
     var d0=Math.random()*0xffffffff|0;var d1=Math.random()*0xffffffff|0;var d2=Math.random()*0xffffffff|0;var d3=Math.random()*0xffffffff|0;var uuid=_lut[d0&0xff]+_lut[d0>>8&0xff]+_lut[d0>>16&0xff]+_lut[d0>>24&0xff]+'-'+_lut[d1&0xff]+_lut[d1>>8&0xff]+'-'+_lut[d1>>16&0x0f|0x40]+_lut[d1>>24&0xff]+'-'+_lut[d2&0x3f|0x80]+_lut[d2>>8&0xff]+'-'+_lut[d2>>16&0xff]+_lut[d2>>24&0xff]+_lut[d3&0xff]+_lut[d3>>8&0xff]+_lut[d3>>16&0xff]+_lut[d3>>24&0xff];// .toUpperCase() here flattens concatenated strings to save heap memory space.
     return uuid.toUpperCase();},clamp:function clamp(value,min,max){return Math.max(min,Math.min(max,value));},// compute euclidian modulo of m % n
     // https://en.wikipedia.org/wiki/Modulo_operation
     euclideanModulo:function euclideanModulo(n,m){return(n%m+m)%m;},// Linear mapping from range <a1, a2> to range <b1, b2>
     mapLinear:function mapLinear(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1);},// https://en.wikipedia.org/wiki/Linear_interpolation
     lerp:function lerp(x,y,t){return(1-t)*x+t*y;},// http://en.wikipedia.org/wiki/Smoothstep
     smoothstep:function smoothstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*(3-2*x);},smootherstep:function smootherstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*x*(x*(x*6-15)+10);},// Random integer from <low, high> interval
     randInt:function randInt(low,high){return low+Math.floor(Math.random()*(high-low+1));},// Random float from <low, high> interval
     randFloat:function randFloat(low,high){return low+Math.random()*(high-low);},// Random float from <-range/2, range/2> interval
     randFloatSpread:function randFloatSpread(range){return range*(0.5-Math.random());},// Deterministic pseudo-random float in the interval [ 0, 1 ]
     seededRandom:function seededRandom(s){if(s!==undefined)_seed=s%2147483647;// Park-Miller algorithm
     _seed=_seed*16807%2147483647;return(_seed-1)/2147483646;},degToRad:function degToRad(degrees){return degrees*MathUtils.DEG2RAD;},radToDeg:function radToDeg(radians){return radians*MathUtils.RAD2DEG;},isPowerOfTwo:function isPowerOfTwo(value){return(value&value-1)===0&&value!==0;},ceilPowerOfTwo:function ceilPowerOfTwo(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.LN2));},floorPowerOfTwo:function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2));},setQuaternionFromProperEuler:function setQuaternionFromProperEuler(q,a,b,c,order){// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
     // rotations are applied to the axes in the order specified by 'order'
     // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
     // angles are in radians
     var cos=Math.cos;var sin=Math.sin;var c2=cos(b/2);var s2=sin(b/2);var c13=cos((a+c)/2);var s13=sin((a+c)/2);var c1_3=cos((a-c)/2);var s1_3=sin((a-c)/2);var c3_1=cos((c-a)/2);var s3_1=sin((c-a)/2);switch(order){case'XYX':q.set(c2*s13,s2*c1_3,s2*s1_3,c2*c13);break;case'YZY':q.set(s2*s1_3,c2*s13,s2*c1_3,c2*c13);break;case'ZXZ':q.set(s2*c1_3,s2*s1_3,c2*s13,c2*c13);break;case'XZX':q.set(c2*s13,s2*s3_1,s2*c3_1,c2*c13);break;case'YXY':q.set(s2*c3_1,c2*s13,s2*s3_1,c2*c13);break;case'ZYZ':q.set(s2*s3_1,s2*c3_1,c2*s13,c2*c13);break;default:console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: '+order);}}};var Vector2=/*#__PURE__*/function(){function Vector2(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;_classCallCheck(this,Vector2);Object.defineProperty(this,'isVector2',{value:true});this.x=x;this.y=y;}_createClass(Vector2,[{key:"set",value:function set(x,y){this.x=x;this.y=y;return this;}},{key:"setScalar",value:function setScalar(scalar){this.x=scalar;this.y=scalar;return this;}},{key:"setX",value:function setX(x){this.x=x;return this;}},{key:"setY",value:function setY(y){this.y=y;return this;}},{key:"setComponent",value:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error('index is out of range: '+index);}return this;}},{key:"getComponent",value:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error('index is out of range: '+index);}}},{key:"clone",value:function clone(){return new this.constructor(this.x,this.y);}},{key:"copy",value:function copy(v){this.x=v.x;this.y=v.y;return this;}},{key:"add",value:function add(v,w){if(w!==undefined){console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;return this;}},{key:"addScalar",value:function addScalar(s){this.x+=s;this.y+=s;return this;}},{key:"addVectors",value:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this;}},{key:"addScaledVector",value:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;return this;}},{key:"sub",value:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;return this;}},{key:"subScalar",value:function subScalar(s){this.x-=s;this.y-=s;return this;}},{key:"subVectors",value:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this;}},{key:"multiply",value:function multiply(v){this.x*=v.x;this.y*=v.y;return this;}},{key:"multiplyScalar",value:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;return this;}},{key:"divide",value:function divide(v){this.x/=v.x;this.y/=v.y;return this;}},{key:"divideScalar",value:function divideScalar(scalar){return this.multiplyScalar(1/scalar);}},{key:"applyMatrix3",value:function applyMatrix3(m){var x=this.x,y=this.y;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6];this.y=e[1]*x+e[4]*y+e[7];return this;}},{key:"min",value:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this;}},{key:"max",value:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this;}},{key:"clamp",value:function clamp(min,max){// assumes min < max, componentwise
     this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));return this;}},{key:"clampScalar",value:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));return this;}},{key:"clampLength",value:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}},{key:"floor",value:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this;}},{key:"ceil",value:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this;}},{key:"round",value:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this;}},{key:"roundToZero",value:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this;}},{key:"negate",value:function negate(){this.x=-this.x;this.y=-this.y;return this;}},{key:"dot",value:function dot(v){return this.x*v.x+this.y*v.y;}},{key:"cross",value:function cross(v){return this.x*v.y-this.y*v.x;}},{key:"lengthSq",value:function lengthSq(){return this.x*this.x+this.y*this.y;}},{key:"length",value:function length(){return Math.sqrt(this.x*this.x+this.y*this.y);}},{key:"manhattanLength",value:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y);}},{key:"normalize",value:function normalize(){return this.divideScalar(this.length()||1);}},{key:"angle",value:function angle(){// computes the angle in radians with respect to the positive x-axis
     var angle=Math.atan2(-this.y,-this.x)+Math.PI;return angle;}},{key:"distanceTo",value:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}},{key:"distanceToSquared",value:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy;}},{key:"manhattanDistanceTo",value:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y);}},{key:"setLength",value:function setLength(length){return this.normalize().multiplyScalar(length);}},{key:"lerp",value:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this;}},{key:"lerpVectors",value:function lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;return this;}},{key:"equals",value:function equals(v){return v.x===this.x&&v.y===this.y;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);return this;}},{key:"rotateAround",value:function rotateAround(center,angle){var c=Math.cos(angle),s=Math.sin(angle);var x=this.x-center.x;var y=this.y-center.y;this.x=x*c-y*s+center.x;this.y=x*s+y*c+center.y;return this;}},{key:"random",value:function random(){this.x=Math.random();this.y=Math.random();return this;}},{key:"width",get:function get(){return this.x;},set:function set(value){this.x=value;}},{key:"height",get:function get(){return this.y;},set:function set(value){this.y=value;}}]);return Vector2;}();var Matrix3=/*#__PURE__*/function(){function Matrix3(){_classCallCheck(this,Matrix3);Object.defineProperty(this,'isMatrix3',{value:true});this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');}}_createClass(Matrix3,[{key:"set",value:function set(n11,n12,n13,n21,n22,n23,n31,n32,n33){var te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this;}},{key:"identity",value:function identity(){this.set(1,0,0,0,1,0,0,0,1);return this;}},{key:"clone",value:function clone(){return new this.constructor().fromArray(this.elements);}},{key:"copy",value:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];return this;}},{key:"extractBasis",value:function extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrix3Column(this,0);yAxis.setFromMatrix3Column(this,1);zAxis.setFromMatrix3Column(this,2);return this;}},{key:"setFromMatrix4",value:function setFromMatrix4(m){var me=m.elements;this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]);return this;}},{key:"multiply",value:function multiply(m){return this.multiplyMatrices(this,m);}},{key:"premultiply",value:function premultiply(m){return this.multiplyMatrices(m,this);}},{key:"multiplyMatrices",value:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[3],a13=ae[6];var a21=ae[1],a22=ae[4],a23=ae[7];var a31=ae[2],a32=ae[5],a33=ae[8];var b11=be[0],b12=be[3],b13=be[6];var b21=be[1],b22=be[4],b23=be[7];var b31=be[2],b32=be[5],b33=be[8];te[0]=a11*b11+a12*b21+a13*b31;te[3]=a11*b12+a12*b22+a13*b32;te[6]=a11*b13+a12*b23+a13*b33;te[1]=a21*b11+a22*b21+a23*b31;te[4]=a21*b12+a22*b22+a23*b32;te[7]=a21*b13+a22*b23+a23*b33;te[2]=a31*b11+a32*b21+a33*b31;te[5]=a31*b12+a32*b22+a33*b32;te[8]=a31*b13+a32*b23+a33*b33;return this;}},{key:"multiplyScalar",value:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this;}},{key:"determinant",value:function determinant(){var te=this.elements;var a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g;}},{key:"getInverse",value:function getInverse(matrix,throwOnDegenerate){if(throwOnDegenerate!==undefined){console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");}var me=matrix.elements,te=this.elements,n11=me[0],n21=me[1],n31=me[2],n12=me[3],n22=me[4],n32=me[5],n13=me[6],n23=me[7],n33=me[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0)return this.set(0,0,0,0,0,0,0,0,0);var detInv=1/det;te[0]=t11*detInv;te[1]=(n31*n23-n33*n21)*detInv;te[2]=(n32*n21-n31*n22)*detInv;te[3]=t12*detInv;te[4]=(n33*n11-n31*n13)*detInv;te[5]=(n31*n12-n32*n11)*detInv;te[6]=t13*detInv;te[7]=(n21*n13-n23*n11)*detInv;te[8]=(n22*n11-n21*n12)*detInv;return this;}},{key:"transpose",value:function transpose(){var tmp;var m=this.elements;tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this;}},{key:"getNormalMatrix",value:function getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).getInverse(this).transpose();}},{key:"transposeIntoArray",value:function transposeIntoArray(r){var m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this;}},{key:"setUvTransform",value:function setUvTransform(tx,ty,sx,sy,rotation,cx,cy){var c=Math.cos(rotation);var s=Math.sin(rotation);this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1);}},{key:"scale",value:function scale(sx,sy){var te=this.elements;te[0]*=sx;te[3]*=sx;te[6]*=sx;te[1]*=sy;te[4]*=sy;te[7]*=sy;return this;}},{key:"rotate",value:function rotate(theta){var c=Math.cos(theta);var s=Math.sin(theta);var te=this.elements;var a11=te[0],a12=te[3],a13=te[6];var a21=te[1],a22=te[4],a23=te[7];te[0]=c*a11+s*a21;te[3]=c*a12+s*a22;te[6]=c*a13+s*a23;te[1]=-s*a11+c*a21;te[4]=-s*a12+c*a22;te[7]=-s*a13+c*a23;return this;}},{key:"translate",value:function translate(tx,ty){var te=this.elements;te[0]+=tx*te[2];te[3]+=tx*te[5];te[6]+=tx*te[8];te[1]+=ty*te[2];te[4]+=ty*te[5];te[7]+=ty*te[8];return this;}},{key:"equals",value:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var _i=0;_i<9;_i++){if(te[_i]!==me[_i])return false;}return true;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;for(var _i2=0;_i2<9;_i2++){this.elements[_i2]=array[_i2+offset];}return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array;}}]);return Matrix3;}();var _canvas;var ImageUtils={getDataURL:function getDataURL(image){if(/^data:/i.test(image.src)){return image.src;}if(typeof HTMLCanvasElement=='undefined'){return image.src;}var canvas;if(_instanceof(image,HTMLCanvasElement)){canvas=image;}else{if(_canvas===undefined)_canvas=document.createElementNS('http://www.w3.org/1999/xhtml','canvas');_canvas.width=image.width;_canvas.height=image.height;var context=_canvas.getContext('2d');if(_instanceof(image,ImageData)){context.putImageData(image,0,0);}else{context.drawImage(image,0,0,image.width,image.height);}canvas=_canvas;}if(canvas.width>2048||canvas.height>2048){return canvas.toDataURL('image/jpeg',0.6);}else{return canvas.toDataURL('image/png');}}};var textureId=0;function Texture(image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){Object.defineProperty(this,'id',{value:textureId++});this.uuid=MathUtils.generateUUID();this.name='';this.image=image!==undefined?image:Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=mapping!==undefined?mapping:Texture.DEFAULT_MAPPING;this.wrapS=wrapS!==undefined?wrapS:ClampToEdgeWrapping;this.wrapT=wrapT!==undefined?wrapT:ClampToEdgeWrapping;this.magFilter=magFilter!==undefined?magFilter:LinearFilter;this.minFilter=minFilter!==undefined?minFilter:LinearMipmapLinearFilter;this.anisotropy=anisotropy!==undefined?anisotropy:1;this.format=format!==undefined?format:RGBAFormat;this.internalFormat=null;this.type=type!==undefined?type:UnsignedByteType;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3();this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
     // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
     //
     // Also changing the encoding after already used by a Material will not automatically make the Material
     // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
     this.encoding=encoding!==undefined?encoding:LinearEncoding;this.version=0;this.onUpdate=null;}Texture.DEFAULT_IMAGE=undefined;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Texture,isTexture:true,updateMatrix:function updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.name=source.name;this.image=source.image;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.internalFormat=source.internalFormat;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.center.copy(source.center);this.rotation=source.rotation;this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrix.copy(source.matrix);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=source.unpackAlignment;this.encoding=source.encoding;return this;},toJSON:function toJSON(meta){var isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.textures[this.uuid]!==undefined){return meta.textures[this.uuid];}var output={metadata:{version:4.5,type:'Texture',generator:'Texture.toJSON'},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==undefined){// TODO: Move to THREE.Image
     var image=this.image;if(image.uuid===undefined){image.uuid=MathUtils.generateUUID();// UGH
     }if(!isRootObject&&meta.images[image.uuid]===undefined){var url;if(Array.isArray(image)){// process array of images e.g. CubeTexture
     url=[];for(var _i3=0,l=image.length;_i3<l;_i3++){url.push(ImageUtils.getDataURL(image[_i3]));}}else{// process single image
     url=ImageUtils.getDataURL(image);}meta.images[image.uuid]={uuid:image.uuid,url:url};}output.image=image.uuid;}if(!isRootObject){meta.textures[this.uuid]=output;}return output;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});},transformUv:function transformUv(uv){if(this.mapping!==UVMapping)return uv;uv.applyMatrix3(this.matrix);if(uv.x<0||uv.x>1){switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.x)%2)===1){uv.x=Math.ceil(uv.x)-uv.x;}else{uv.x=uv.x-Math.floor(uv.x);}break;}}if(uv.y<0||uv.y>1){switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.y)%2)===1){uv.y=Math.ceil(uv.y)-uv.y;}else{uv.y=uv.y-Math.floor(uv.y);}break;}}if(this.flipY){uv.y=1-uv.y;}return uv;}});Object.defineProperty(Texture.prototype,"needsUpdate",{set:function set(value){if(value===true)this.version++;}});var Vector4=/*#__PURE__*/function(){function Vector4(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var w=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,Vector4);Object.defineProperty(this,'isVector4',{value:true});this.x=x;this.y=y;this.z=z;this.w=w;}_createClass(Vector4,[{key:"set",value:function set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this;}},{key:"setScalar",value:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;this.w=scalar;return this;}},{key:"setX",value:function setX(x){this.x=x;return this;}},{key:"setY",value:function setY(y){this.y=y;return this;}},{key:"setZ",value:function setZ(z){this.z=z;return this;}},{key:"setW",value:function setW(w){this.w=w;return this;}},{key:"setComponent",value:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error('index is out of range: '+index);}return this;}},{key:"getComponent",value:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error('index is out of range: '+index);}}},{key:"clone",value:function clone(){return new this.constructor(this.x,this.y,this.z,this.w);}},{key:"copy",value:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=v.w!==undefined?v.w:1;return this;}},{key:"add",value:function add(v,w){if(w!==undefined){console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this;}},{key:"addScalar",value:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this;}},{key:"addVectors",value:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this;}},{key:"addScaledVector",value:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this;}},{key:"sub",value:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this;}},{key:"subScalar",value:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;this.w-=s;return this;}},{key:"subVectors",value:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this;}},{key:"multiplyScalar",value:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;this.w*=scalar;return this;}},{key:"applyMatrix4",value:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z,w=this.w;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w;this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w;this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w;this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w;return this;}},{key:"divideScalar",value:function divideScalar(scalar){return this.multiplyScalar(1/scalar);}},{key:"setAxisAngleFromQuaternion",value:function setAxisAngleFromQuaternion(q){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
     // q is assumed to be normalized
     this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);if(s<0.0001){this.x=1;this.y=0;this.z=0;}else{this.x=q.x/s;this.y=q.y/s;this.z=q.z/s;}return this;}},{key:"setAxisAngleFromRotationMatrix",value:function setAxisAngleFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
     var angle,x,y,z;// variables for result
     var epsilon=0.01,// margin to allow for rounding errors
     epsilon2=0.1,// margin to distinguish between 0 and 180 degrees
     te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){// singularity found
     // first check for identity matrix which must have +1 for all terms
     // in leading diagonal and zero in other terms
     if(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2){// this singularity is identity matrix so angle = 0
     this.set(1,0,0,0);return this;// zero angle, arbitrary axis
     }// otherwise this singularity is angle = 180
     angle=Math.PI;var xx=(m11+1)/2;var yy=(m22+1)/2;var zz=(m33+1)/2;var xy=(m12+m21)/4;var xz=(m13+m31)/4;var yz=(m23+m32)/4;if(xx>yy&&xx>zz){// m11 is the largest diagonal term
     if(xx<epsilon){x=0;y=0.707106781;z=0.707106781;}else{x=Math.sqrt(xx);y=xy/x;z=xz/x;}}else if(yy>zz){// m22 is the largest diagonal term
     if(yy<epsilon){x=0.707106781;y=0;z=0.707106781;}else{y=Math.sqrt(yy);x=xy/y;z=yz/y;}}else{// m33 is the largest diagonal term so base result on this
     if(zz<epsilon){x=0.707106781;y=0.707106781;z=0;}else{z=Math.sqrt(zz);x=xz/z;y=yz/z;}}this.set(x,y,z,angle);return this;// return 180 deg rotation
     }// as we have reached here there are no singularities so we can handle normally
     var s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));// used to normalize
     if(Math.abs(s)<0.001)s=1;// prevent divide by zero, should not happen if matrix is orthogonal and should be
     // caught by singularity test above, but I've left it in just in case
     this.x=(m32-m23)/s;this.y=(m13-m31)/s;this.z=(m21-m12)/s;this.w=Math.acos((m11+m22+m33-1)/2);return this;}},{key:"min",value:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this;}},{key:"max",value:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this;}},{key:"clamp",value:function clamp(min,max){// assumes min < max, componentwise
     this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));this.w=Math.max(min.w,Math.min(max.w,this.w));return this;}},{key:"clampScalar",value:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));this.w=Math.max(minVal,Math.min(maxVal,this.w));return this;}},{key:"clampLength",value:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}},{key:"floor",value:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this;}},{key:"ceil",value:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this;}},{key:"round",value:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this;}},{key:"roundToZero",value:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this;}},{key:"negate",value:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this;}},{key:"dot",value:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w;}},{key:"lengthSq",value:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;}},{key:"length",value:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);}},{key:"manhattanLength",value:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w);}},{key:"normalize",value:function normalize(){return this.divideScalar(this.length()||1);}},{key:"setLength",value:function setLength(length){return this.normalize().multiplyScalar(length);}},{key:"lerp",value:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this;}},{key:"lerpVectors",value:function lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;this.w=v1.w+(v2.w-v1.w)*alpha;return this;}},{key:"equals",value:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);this.w=attribute.getW(index);return this;}},{key:"random",value:function random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this;}},{key:"width",get:function get(){return this.z;},set:function set(value){this.z=value;}},{key:"height",get:function get(){return this.w;},set:function set(value){this.w=value;}}]);return Vector4;}();/*
          In options, we can specify:
          * Texture parameters for an auto-generated target texture
          * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
         */function WebGLRenderTarget(width,height,options){this.width=width;this.height=height;this.scissor=new Vector4(0,0,width,height);this.scissorTest=false;this.viewport=new Vector4(0,0,width,height);options=options||{};this.texture=new Texture(undefined,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);this.texture.image={};this.texture.image.width=width;this.texture.image.height=height;this.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;this.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;this.depthBuffer=options.depthBuffer!==undefined?options.depthBuffer:true;this.stencilBuffer=options.stencilBuffer!==undefined?options.stencilBuffer:false;this.depthTexture=options.depthTexture!==undefined?options.depthTexture:null;}WebGLRenderTarget.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:WebGLRenderTarget,isWebGLRenderTarget:true,setSize:function setSize(width,height){if(this.width!==width||this.height!==height){this.width=width;this.height=height;this.texture.image.width=width;this.texture.image.height=height;this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.width=source.width;this.height=source.height;this.viewport.copy(source.viewport);this.texture=source.texture.clone();this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.depthTexture=source.depthTexture;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});function WebGLMultisampleRenderTarget(width,height,options){WebGLRenderTarget.call(this,width,height,options);this.samples=4;}WebGLMultisampleRenderTarget.prototype=Object.assign(Object.create(WebGLRenderTarget.prototype),{constructor:WebGLMultisampleRenderTarget,isWebGLMultisampleRenderTarget:true,copy:function copy(source){WebGLRenderTarget.prototype.copy.call(this,source);this.samples=source.samples;return this;}});var Quaternion=/*#__PURE__*/function(){function Quaternion(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var w=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,Quaternion);Object.defineProperty(this,'isQuaternion',{value:true});this._x=x;this._y=y;this._z=z;this._w=w;}_createClass(Quaternion,[{key:"set",value:function set(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this._onChangeCallback();return this;}},{key:"clone",value:function clone(){return new this.constructor(this._x,this._y,this._z,this._w);}},{key:"copy",value:function copy(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this._onChangeCallback();return this;}},{key:"setFromEuler",value:function setFromEuler(euler,update){if(!(euler&&euler.isEuler)){throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');}var x=euler._x,y=euler._y,z=euler._z,order=euler._order;// http://www.mathworks.com/matlabcentral/fileexchange/
     // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
     //	content/SpinCalc.m
     var cos=Math.cos;var sin=Math.sin;var c1=cos(x/2);var c2=cos(y/2);var c3=cos(z/2);var s1=sin(x/2);var s2=sin(y/2);var s3=sin(z/2);switch(order){case'XYZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'YXZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'ZXY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'ZYX':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'YZX':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'XZY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;default:console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: '+order);}if(update!==false)this._onChangeCallback();return this;}},{key:"setFromAxisAngle",value:function setFromAxisAngle(axis,angle){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
     // assumes axis is normalized
     var halfAngle=angle/2,s=Math.sin(halfAngle);this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(halfAngle);this._onChangeCallback();return this;}},{key:"setFromRotationMatrix",value:function setFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
     var te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33;if(trace>0){var s=0.5/Math.sqrt(trace+1.0);this._w=0.25/s;this._x=(m32-m23)*s;this._y=(m13-m31)*s;this._z=(m21-m12)*s;}else if(m11>m22&&m11>m33){var _s2=2.0*Math.sqrt(1.0+m11-m22-m33);this._w=(m32-m23)/_s2;this._x=0.25*_s2;this._y=(m12+m21)/_s2;this._z=(m13+m31)/_s2;}else if(m22>m33){var _s3=2.0*Math.sqrt(1.0+m22-m11-m33);this._w=(m13-m31)/_s3;this._x=(m12+m21)/_s3;this._y=0.25*_s3;this._z=(m23+m32)/_s3;}else{var _s4=2.0*Math.sqrt(1.0+m33-m11-m22);this._w=(m21-m12)/_s4;this._x=(m13+m31)/_s4;this._y=(m23+m32)/_s4;this._z=0.25*_s4;}this._onChangeCallback();return this;}},{key:"setFromUnitVectors",value:function setFromUnitVectors(vFrom,vTo){// assumes direction vectors vFrom and vTo are normalized
     var EPS=0.000001;var r=vFrom.dot(vTo)+1;if(r<EPS){r=0;if(Math.abs(vFrom.x)>Math.abs(vFrom.z)){this._x=-vFrom.y;this._y=vFrom.x;this._z=0;this._w=r;}else{this._x=0;this._y=-vFrom.z;this._z=vFrom.y;this._w=r;}}else{// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
     this._x=vFrom.y*vTo.z-vFrom.z*vTo.y;this._y=vFrom.z*vTo.x-vFrom.x*vTo.z;this._z=vFrom.x*vTo.y-vFrom.y*vTo.x;this._w=r;}return this.normalize();}},{key:"angleTo",value:function angleTo(q){return 2*Math.acos(Math.abs(MathUtils.clamp(this.dot(q),-1,1)));}},{key:"rotateTowards",value:function rotateTowards(q,step){var angle=this.angleTo(q);if(angle===0)return this;var t=Math.min(1,step/angle);this.slerp(q,t);return this;}},{key:"identity",value:function identity(){return this.set(0,0,0,1);}},{key:"inverse",value:function inverse(){// quaternion is assumed to have unit length
     return this.conjugate();}},{key:"conjugate",value:function conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this;}},{key:"dot",value:function dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w;}},{key:"lengthSq",value:function lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w;}},{key:"length",value:function length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w);}},{key:"normalize",value:function normalize(){var l=this.length();if(l===0){this._x=0;this._y=0;this._z=0;this._w=1;}else{l=1/l;this._x=this._x*l;this._y=this._y*l;this._z=this._z*l;this._w=this._w*l;}this._onChangeCallback();return this;}},{key:"multiply",value:function multiply(q,p){if(p!==undefined){console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');return this.multiplyQuaternions(q,p);}return this.multiplyQuaternions(this,q);}},{key:"premultiply",value:function premultiply(q){return this.multiplyQuaternions(q,this);}},{key:"multiplyQuaternions",value:function multiplyQuaternions(a,b){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
     var qax=a._x,qay=a._y,qaz=a._z,qaw=a._w;var qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;this._onChangeCallback();return this;}},{key:"slerp",value:function slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);var x=this._x,y=this._y,z=this._z,w=this._w;// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
     var cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0){this._w=-qb._w;this._x=-qb._x;this._y=-qb._y;this._z=-qb._z;cosHalfTheta=-cosHalfTheta;}else{this.copy(qb);}if(cosHalfTheta>=1.0){this._w=w;this._x=x;this._y=y;this._z=z;return this;}var sqrSinHalfTheta=1.0-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){var s=1-t;this._w=s*w+t*this._w;this._x=s*x+t*this._x;this._y=s*y+t*this._y;this._z=s*z+t*this._z;this.normalize();this._onChangeCallback();return this;}var sinHalfTheta=Math.sqrt(sqrSinHalfTheta);var halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);var ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this._w=w*ratioA+this._w*ratioB;this._x=x*ratioA+this._x*ratioB;this._y=y*ratioA+this._y*ratioB;this._z=z*ratioA+this._z*ratioB;this._onChangeCallback();return this;}},{key:"equals",value:function equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this._onChangeCallback();return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._w;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index){this._x=attribute.getX(index);this._y=attribute.getY(index);this._z=attribute.getZ(index);this._w=attribute.getW(index);return this;}},{key:"_onChange",value:function _onChange(callback){this._onChangeCallback=callback;return this;}},{key:"_onChangeCallback",value:function _onChangeCallback(){}},{key:"x",get:function get(){return this._x;},set:function set(value){this._x=value;this._onChangeCallback();}},{key:"y",get:function get(){return this._y;},set:function set(value){this._y=value;this._onChangeCallback();}},{key:"z",get:function get(){return this._z;},set:function set(value){this._z=value;this._onChangeCallback();}},{key:"w",get:function get(){return this._w;},set:function set(value){this._w=value;this._onChangeCallback();}}],[{key:"slerp",value:function slerp(qa,qb,qm,t){return qm.copy(qa).slerp(qb,t);}},{key:"slerpFlat",value:function slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){// fuzz-free, array-based Quaternion SLERP operation
     var x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3];var x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){var s=1-t;var cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;// Skip the Slerp for tiny steps to avoid numeric problems:
     if(sqrSin>Number.EPSILON){var sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin;t=Math.sin(t*len)/sin;}var tDir=t*dir;x0=x0*s+x1*tDir;y0=y0*s+y1*tDir;z0=z0*s+z1*tDir;w0=w0*s+w1*tDir;// Normalize in case we just did a lerp:
     if(s===1-t){var f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f;y0*=f;z0*=f;w0*=f;}}dst[dstOffset]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;}},{key:"multiplyQuaternionsFlat",value:function multiplyQuaternionsFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1){var x0=src0[srcOffset0];var y0=src0[srcOffset0+1];var z0=src0[srcOffset0+2];var w0=src0[srcOffset0+3];var x1=src1[srcOffset1];var y1=src1[srcOffset1+1];var z1=src1[srcOffset1+2];var w1=src1[srcOffset1+3];dst[dstOffset]=x0*w1+w0*x1+y0*z1-z0*y1;dst[dstOffset+1]=y0*w1+w0*y1+z0*x1-x0*z1;dst[dstOffset+2]=z0*w1+w0*z1+x0*y1-y0*x1;dst[dstOffset+3]=w0*w1-x0*x1-y0*y1-z0*z1;return dst;}}]);return Quaternion;}();var Vector3=/*#__PURE__*/function(){function Vector3(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;_classCallCheck(this,Vector3);Object.defineProperty(this,'isVector3',{value:true});this.x=x;this.y=y;this.z=z;}_createClass(Vector3,[{key:"set",value:function set(x,y,z){if(z===undefined)z=this.z;// sprite.scale.set(x,y)
     this.x=x;this.y=y;this.z=z;return this;}},{key:"setScalar",value:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;return this;}},{key:"setX",value:function setX(x){this.x=x;return this;}},{key:"setY",value:function setY(y){this.y=y;return this;}},{key:"setZ",value:function setZ(z){this.z=z;return this;}},{key:"setComponent",value:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error('index is out of range: '+index);}return this;}},{key:"getComponent",value:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error('index is out of range: '+index);}}},{key:"clone",value:function clone(){return new this.constructor(this.x,this.y,this.z);}},{key:"copy",value:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;}},{key:"add",value:function add(v,w){if(w!==undefined){console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;}},{key:"addScalar",value:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this;}},{key:"addVectors",value:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this;}},{key:"addScaledVector",value:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this;}},{key:"sub",value:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;}},{key:"subScalar",value:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this;}},{key:"subVectors",value:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this;}},{key:"multiply",value:function multiply(v,w){if(w!==undefined){console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');return this.multiplyVectors(v,w);}this.x*=v.x;this.y*=v.y;this.z*=v.z;return this;}},{key:"multiplyScalar",value:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this;}},{key:"multiplyVectors",value:function multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this;}},{key:"applyEuler",value:function applyEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');}return this.applyQuaternion(_quaternion.setFromEuler(euler));}},{key:"applyAxisAngle",value:function applyAxisAngle(axis,angle){return this.applyQuaternion(_quaternion.setFromAxisAngle(axis,angle));}},{key:"applyMatrix3",value:function applyMatrix3(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6]*z;this.y=e[1]*x+e[4]*y+e[7]*z;this.z=e[2]*x+e[5]*y+e[8]*z;return this;}},{key:"applyNormalMatrix",value:function applyNormalMatrix(m){return this.applyMatrix3(m).normalize();}},{key:"applyMatrix4",value:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;var w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this;}},{key:"applyQuaternion",value:function applyQuaternion(q){var x=this.x,y=this.y,z=this.z;var qx=q.x,qy=q.y,qz=q.z,qw=q.w;// calculate quat * vector
     var ix=qw*x+qy*z-qz*y;var iy=qw*y+qz*x-qx*z;var iz=qw*z+qx*y-qy*x;var iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
     this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this;}},{key:"project",value:function project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);}},{key:"unproject",value:function unproject(camera){return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);}},{key:"transformDirection",value:function transformDirection(m){// input: THREE.Matrix4 affine matrix
     // vector interpreted as a direction
     var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z;this.y=e[1]*x+e[5]*y+e[9]*z;this.z=e[2]*x+e[6]*y+e[10]*z;return this.normalize();}},{key:"divide",value:function divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this;}},{key:"divideScalar",value:function divideScalar(scalar){return this.multiplyScalar(1/scalar);}},{key:"min",value:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this;}},{key:"max",value:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this;}},{key:"clamp",value:function clamp(min,max){// assumes min < max, componentwise
     this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));return this;}},{key:"clampScalar",value:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));return this;}},{key:"clampLength",value:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}},{key:"floor",value:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this;}},{key:"ceil",value:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this;}},{key:"round",value:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this;}},{key:"roundToZero",value:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this;}},{key:"negate",value:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;}},{key:"dot",value:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z;}// TODO lengthSquared?
     },{key:"lengthSq",value:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z;}},{key:"length",value:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);}},{key:"manhattanLength",value:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z);}},{key:"normalize",value:function normalize(){return this.divideScalar(this.length()||1);}},{key:"setLength",value:function setLength(length){return this.normalize().multiplyScalar(length);}},{key:"lerp",value:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this;}},{key:"lerpVectors",value:function lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;return this;}},{key:"cross",value:function cross(v,w){if(w!==undefined){console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');return this.crossVectors(v,w);}return this.crossVectors(this,v);}},{key:"crossVectors",value:function crossVectors(a,b){var ax=a.x,ay=a.y,az=a.z;var bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this;}},{key:"projectOnVector",value:function projectOnVector(v){var denominator=v.lengthSq();if(denominator===0)return this.set(0,0,0);var scalar=v.dot(this)/denominator;return this.copy(v).multiplyScalar(scalar);}},{key:"projectOnPlane",value:function projectOnPlane(planeNormal){_vector.copy(this).projectOnVector(planeNormal);return this.sub(_vector);}},{key:"reflect",value:function reflect(normal){// reflect incident vector off plane orthogonal to normal
     // normal is assumed to have unit length
     return this.sub(_vector.copy(normal).multiplyScalar(2*this.dot(normal)));}},{key:"angleTo",value:function angleTo(v){var denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;var theta=this.dot(v)/denominator;// clamp, to handle numerical problems
     return Math.acos(MathUtils.clamp(theta,-1,1));}},{key:"distanceTo",value:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}},{key:"distanceToSquared",value:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz;}},{key:"manhattanDistanceTo",value:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z);}},{key:"setFromSpherical",value:function setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta);}},{key:"setFromSphericalCoords",value:function setFromSphericalCoords(radius,phi,theta){var sinPhiRadius=Math.sin(phi)*radius;this.x=sinPhiRadius*Math.sin(theta);this.y=Math.cos(phi)*radius;this.z=sinPhiRadius*Math.cos(theta);return this;}},{key:"setFromCylindrical",value:function setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y);}},{key:"setFromCylindricalCoords",value:function setFromCylindricalCoords(radius,theta,y){this.x=radius*Math.sin(theta);this.y=y;this.z=radius*Math.cos(theta);return this;}},{key:"setFromMatrixPosition",value:function setFromMatrixPosition(m){var e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this;}},{key:"setFromMatrixScale",value:function setFromMatrixScale(m){var sx=this.setFromMatrixColumn(m,0).length();var sy=this.setFromMatrixColumn(m,1).length();var sz=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=sz;return this;}},{key:"setFromMatrixColumn",value:function setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4);}},{key:"setFromMatrix3Column",value:function setFromMatrix3Column(m,index){return this.fromArray(m.elements,index*3);}},{key:"equals",value:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);return this;}},{key:"random",value:function random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this;}}]);return Vector3;}();var _vector=/*@__PURE__*/new Vector3();var _quaternion=/*@__PURE__*/new Quaternion();var Box3=/*#__PURE__*/function(){function Box3(min,max){_classCallCheck(this,Box3);Object.defineProperty(this,'isBox3',{value:true});this.min=min!==undefined?min:new Vector3(+Infinity,+Infinity,+Infinity);this.max=max!==undefined?max:new Vector3(-Infinity,-Infinity,-Infinity);}_createClass(Box3,[{key:"set",value:function set(min,max){this.min.copy(min);this.max.copy(max);return this;}},{key:"setFromArray",value:function setFromArray(array){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var _i4=0,l=array.length;_i4<l;_i4+=3){var x=array[_i4];var y=array[_i4+1];var z=array[_i4+2];if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;}},{key:"setFromBufferAttribute",value:function setFromBufferAttribute(attribute){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var _i5=0,l=attribute.count;_i5<l;_i5++){var x=attribute.getX(_i5);var y=attribute.getY(_i5);var z=attribute.getZ(_i5);if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;}},{key:"setFromPoints",value:function setFromPoints(points){this.makeEmpty();for(var _i6=0,il=points.length;_i6<il;_i6++){this.expandByPoint(points[_i6]);}return this;}},{key:"setFromCenterAndSize",value:function setFromCenterAndSize(center,size){var halfSize=_vector$1.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}},{key:"setFromObject",value:function setFromObject(object){this.makeEmpty();return this.expandByObject(object);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}},{key:"makeEmpty",value:function makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this;}},{key:"isEmpty",value:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
     return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z;}},{key:"getCenter",value:function getCenter(target){if(target===undefined){console.warn('THREE.Box3: .getCenter() target is now required');target=new Vector3();}return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}},{key:"getSize",value:function getSize(target){if(target===undefined){console.warn('THREE.Box3: .getSize() target is now required');target=new Vector3();}return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min);}},{key:"expandByPoint",value:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;}},{key:"expandByVector",value:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}},{key:"expandByScalar",value:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}},{key:"expandByObject",value:function expandByObject(object){// Computes the world-axis-aligned bounding box of an object (including its children),
     // accounting for both the object's, and children's, world transforms
     object.updateWorldMatrix(false,false);var geometry=object.geometry;if(geometry!==undefined){if(geometry.boundingBox===null){geometry.computeBoundingBox();}_box.copy(geometry.boundingBox);_box.applyMatrix4(object.matrixWorld);this.union(_box);}var children=object.children;for(var _i7=0,l=children.length;_i7<l;_i7++){this.expandByObject(children[_i7]);}return this;}},{key:"containsPoint",value:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z?false:true;}},{key:"containsBox",value:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z;}},{key:"getParameter",value:function getParameter(point,target){// This can potentially have a divide by zero if the box
     // has a size dimension of 0.
     if(target===undefined){console.warn('THREE.Box3: .getParameter() target is now required');target=new Vector3();}return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z));}},{key:"intersectsBox",value:function intersectsBox(box){// using 6 splitting planes to rule out intersections.
     return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z?false:true;}},{key:"intersectsSphere",value:function intersectsSphere(sphere){// Find the point on the AABB closest to the sphere center.
     this.clampPoint(sphere.center,_vector$1);// If that point is inside the sphere, the AABB and sphere intersect.
     return _vector$1.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius;}},{key:"intersectsPlane",value:function intersectsPlane(plane){// We compute the minimum and maximum dot product values. If those values
     // are on the same side (back or front) of the plane, then there is no intersection.
     var min,max;if(plane.normal.x>0){min=plane.normal.x*this.min.x;max=plane.normal.x*this.max.x;}else{min=plane.normal.x*this.max.x;max=plane.normal.x*this.min.x;}if(plane.normal.y>0){min+=plane.normal.y*this.min.y;max+=plane.normal.y*this.max.y;}else{min+=plane.normal.y*this.max.y;max+=plane.normal.y*this.min.y;}if(plane.normal.z>0){min+=plane.normal.z*this.min.z;max+=plane.normal.z*this.max.z;}else{min+=plane.normal.z*this.max.z;max+=plane.normal.z*this.min.z;}return min<=-plane.constant&&max>=-plane.constant;}},{key:"intersectsTriangle",value:function intersectsTriangle(triangle){if(this.isEmpty()){return false;}// compute box center and extents
     this.getCenter(_center);_extents.subVectors(this.max,_center);// translate triangle to aabb origin
     _v0.subVectors(triangle.a,_center);_v1.subVectors(triangle.b,_center);_v2.subVectors(triangle.c,_center);// compute edge vectors for triangle
     _f0.subVectors(_v1,_v0);_f1.subVectors(_v2,_v1);_f2.subVectors(_v0,_v2);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
     // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
     // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
     var axes=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(axes,_v0,_v1,_v2,_extents)){return false;}// test 3 face normals from the aabb
     axes=[1,0,0,0,1,0,0,0,1];if(!satForAxes(axes,_v0,_v1,_v2,_extents)){return false;}// finally testing the face normal of the triangle
     // use already existing triangle edge vectors here
     _triangleNormal.crossVectors(_f0,_f1);axes=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(axes,_v0,_v1,_v2,_extents);}},{key:"clampPoint",value:function clampPoint(point,target){if(target===undefined){console.warn('THREE.Box3: .clampPoint() target is now required');target=new Vector3();}return target.copy(point).clamp(this.min,this.max);}},{key:"distanceToPoint",value:function distanceToPoint(point){var clampedPoint=_vector$1.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();}},{key:"getBoundingSphere",value:function getBoundingSphere(target){if(target===undefined){console.error('THREE.Box3: .getBoundingSphere() target is now required');//target = new Sphere(); // removed to avoid cyclic dependency
     }this.getCenter(target.center);target.radius=this.getSize(_vector$1).length()*0.5;return target;}},{key:"intersect",value:function intersect(box){this.min.max(box.min);this.max.min(box.max);// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
     if(this.isEmpty())this.makeEmpty();return this;}},{key:"union",value:function union(box){this.min.min(box.min);this.max.max(box.max);return this;}},{key:"applyMatrix4",value:function applyMatrix4(matrix){// transform of empty box is an empty box.
     if(this.isEmpty())return this;// NOTE: I am using a binary pattern to specify all 2^3 combinations below
     _points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);// 000
     _points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);// 001
     _points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix);// 010
     _points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);// 011
     _points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);// 100
     _points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);// 101
     _points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);// 110
     _points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);// 111
     this.setFromPoints(_points);return this;}},{key:"translate",value:function translate(offset){this.min.add(offset);this.max.add(offset);return this;}},{key:"equals",value:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}]);return Box3;}();function satForAxes(axes,v0,v1,v2,extents){for(var _i8=0,j=axes.length-3;_i8<=j;_i8+=3){_testAxis.fromArray(axes,_i8);// project the aabb onto the seperating axis
     var r=extents.x*Math.abs(_testAxis.x)+extents.y*Math.abs(_testAxis.y)+extents.z*Math.abs(_testAxis.z);// project all 3 vertices of the triangle onto the seperating axis
     var p0=v0.dot(_testAxis);var p1=v1.dot(_testAxis);var p2=v2.dot(_testAxis);// actual test, basically see if either of the most extreme of the triangle points intersects r
     if(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r){// points of the projected triangle are outside the projected half-length of the aabb
     // the axis is seperating and we can exit
     return false;}}return true;}var _points=[/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3()];var _vector$1=/*@__PURE__*/new Vector3();var _box=/*@__PURE__*/new Box3();// triangle centered vertices
     var _v0=/*@__PURE__*/new Vector3();var _v1=/*@__PURE__*/new Vector3();var _v2=/*@__PURE__*/new Vector3();// triangle edge vectors
     var _f0=/*@__PURE__*/new Vector3();var _f1=/*@__PURE__*/new Vector3();var _f2=/*@__PURE__*/new Vector3();var _center=/*@__PURE__*/new Vector3();var _extents=/*@__PURE__*/new Vector3();var _triangleNormal=/*@__PURE__*/new Vector3();var _testAxis=/*@__PURE__*/new Vector3();var _box$1=/*@__PURE__*/new Box3();var Sphere=/*#__PURE__*/function(){function Sphere(center,radius){_classCallCheck(this,Sphere);this.center=center!==undefined?center:new Vector3();this.radius=radius!==undefined?radius:-1;}_createClass(Sphere,[{key:"set",value:function set(center,radius){this.center.copy(center);this.radius=radius;return this;}},{key:"setFromPoints",value:function setFromPoints(points,optionalCenter){var center=this.center;if(optionalCenter!==undefined){center.copy(optionalCenter);}else{_box$1.setFromPoints(points).getCenter(center);}var maxRadiusSq=0;for(var _i9=0,il=points.length;_i9<il;_i9++){maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[_i9]));}this.radius=Math.sqrt(maxRadiusSq);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this;}},{key:"isEmpty",value:function isEmpty(){return this.radius<0;}},{key:"makeEmpty",value:function makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this;}},{key:"containsPoint",value:function containsPoint(point){return point.distanceToSquared(this.center)<=this.radius*this.radius;}},{key:"distanceToPoint",value:function distanceToPoint(point){return point.distanceTo(this.center)-this.radius;}},{key:"intersectsSphere",value:function intersectsSphere(sphere){var radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum;}},{key:"intersectsBox",value:function intersectsBox(box){return box.intersectsSphere(this);}},{key:"intersectsPlane",value:function intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius;}},{key:"clampPoint",value:function clampPoint(point,target){var deltaLengthSq=this.center.distanceToSquared(point);if(target===undefined){console.warn('THREE.Sphere: .clampPoint() target is now required');target=new Vector3();}target.copy(point);if(deltaLengthSq>this.radius*this.radius){target.sub(this.center).normalize();target.multiplyScalar(this.radius).add(this.center);}return target;}},{key:"getBoundingBox",value:function getBoundingBox(target){if(target===undefined){console.warn('THREE.Sphere: .getBoundingBox() target is now required');target=new Box3();}if(this.isEmpty()){// Empty sphere produces empty bounding box
     target.makeEmpty();return target;}target.set(this.center,this.center);target.expandByScalar(this.radius);return target;}},{key:"applyMatrix4",value:function applyMatrix4(matrix){this.center.applyMatrix4(matrix);this.radius=this.radius*matrix.getMaxScaleOnAxis();return this;}},{key:"translate",value:function translate(offset){this.center.add(offset);return this;}},{key:"equals",value:function equals(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius;}}]);return Sphere;}();var _vector$2=/*@__PURE__*/new Vector3();var _segCenter=/*@__PURE__*/new Vector3();var _segDir=/*@__PURE__*/new Vector3();var _diff=/*@__PURE__*/new Vector3();var _edge1=/*@__PURE__*/new Vector3();var _edge2=/*@__PURE__*/new Vector3();var _normal=/*@__PURE__*/new Vector3();var Ray=/*#__PURE__*/function(){function Ray(origin,direction){_classCallCheck(this,Ray);this.origin=origin!==undefined?origin:new Vector3();this.direction=direction!==undefined?direction:new Vector3(0,0,-1);}_createClass(Ray,[{key:"set",value:function set(origin,direction){this.origin.copy(origin);this.direction.copy(direction);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this;}},{key:"at",value:function at(t,target){if(target===undefined){console.warn('THREE.Ray: .at() target is now required');target=new Vector3();}return target.copy(this.direction).multiplyScalar(t).add(this.origin);}},{key:"lookAt",value:function lookAt(v){this.direction.copy(v).sub(this.origin).normalize();return this;}},{key:"recast",value:function recast(t){this.origin.copy(this.at(t,_vector$2));return this;}},{key:"closestPointToPoint",value:function closestPointToPoint(point,target){if(target===undefined){console.warn('THREE.Ray: .closestPointToPoint() target is now required');target=new Vector3();}target.subVectors(point,this.origin);var directionDistance=target.dot(this.direction);if(directionDistance<0){return target.copy(this.origin);}return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);}},{key:"distanceToPoint",value:function distanceToPoint(point){return Math.sqrt(this.distanceSqToPoint(point));}},{key:"distanceSqToPoint",value:function distanceSqToPoint(point){var directionDistance=_vector$2.subVectors(point,this.origin).dot(this.direction);// point behind the ray
     if(directionDistance<0){return this.origin.distanceToSquared(point);}_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);return _vector$2.distanceToSquared(point);}},{key:"distanceSqToSegment",value:function distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
     // It returns the min distance between the ray and the segment
     // defined by v0 and v1
     // It can also set two optional targets :
     // - The closest point on the ray
     // - The closest point on the segment
     _segCenter.copy(v0).add(v1).multiplyScalar(0.5);_segDir.copy(v1).sub(v0).normalize();_diff.copy(this.origin).sub(_segCenter);var segExtent=v0.distanceTo(v1)*0.5;var a01=-this.direction.dot(_segDir);var b0=_diff.dot(this.direction);var b1=-_diff.dot(_segDir);var c=_diff.lengthSq();var det=Math.abs(1-a01*a01);var s0,s1,sqrDist,extDet;if(det>0){// The ray and segment are not parallel.
     s0=a01*b1-b0;s1=a01*b0-b1;extDet=segExtent*det;if(s0>=0){if(s1>=-extDet){if(s1<=extDet){// region 0
     // Minimum at interior points of ray and segment.
     var invDet=1/det;s0*=invDet;s1*=invDet;sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c;}else{// region 1
     s1=segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{// region 5
     s1=-segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{if(s1<=-extDet){// region 4
     s0=Math.max(0,-(-a01*segExtent+b0));s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}else if(s1<=extDet){// region 3
     s0=0;s1=Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=s1*(s1+2*b1)+c;}else{// region 2
     s0=Math.max(0,-(a01*segExtent+b0));s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}}else{// Ray and segment are parallel.
     s1=a01>0?-segExtent:segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}if(optionalPointOnRay){optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);}if(optionalPointOnSegment){optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);}return sqrDist;}},{key:"intersectSphere",value:function intersectSphere(sphere,target){_vector$2.subVectors(sphere.center,this.origin);var tca=_vector$2.dot(this.direction);var d2=_vector$2.dot(_vector$2)-tca*tca;var radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;var thc=Math.sqrt(radius2-d2);// t0 = first intersect point - entrance on front of sphere
     var t0=tca-thc;// t1 = second intersect point - exit point on back of sphere
     var t1=tca+thc;// test to see if both t0 and t1 are behind the ray - if so, return null
     if(t0<0&&t1<0)return null;// test to see if t0 is behind the ray:
     // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
     // in order to always return an intersect point that is in front of the ray.
     if(t0<0)return this.at(t1,target);// else t0 is in front of the ray, so return the first collision point scaled by t0
     return this.at(t0,target);}},{key:"intersectsSphere",value:function intersectsSphere(sphere){return this.distanceSqToPoint(sphere.center)<=sphere.radius*sphere.radius;}},{key:"distanceToPlane",value:function distanceToPlane(plane){var denominator=plane.normal.dot(this.direction);if(denominator===0){// line is coplanar, return origin
     if(plane.distanceToPoint(this.origin)===0){return 0;}// Null is preferable to undefined since undefined means.... it is undefined
     return null;}var t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;// Return if the ray never intersects the plane
     return t>=0?t:null;}},{key:"intersectPlane",value:function intersectPlane(plane,target){var t=this.distanceToPlane(plane);if(t===null){return null;}return this.at(t,target);}},{key:"intersectsPlane",value:function intersectsPlane(plane){// check if the ray lies on the plane first
     var distToPoint=plane.distanceToPoint(this.origin);if(distToPoint===0){return true;}var denominator=plane.normal.dot(this.direction);if(denominator*distToPoint<0){return true;}// ray origin is behind the plane (and is pointing behind it)
     return false;}},{key:"intersectBox",value:function intersectBox(box,target){var tmin,tmax,tymin,tymax,tzmin,tzmax;var invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z;var origin=this.origin;if(invdirx>=0){tmin=(box.min.x-origin.x)*invdirx;tmax=(box.max.x-origin.x)*invdirx;}else{tmin=(box.max.x-origin.x)*invdirx;tmax=(box.min.x-origin.x)*invdirx;}if(invdiry>=0){tymin=(box.min.y-origin.y)*invdiry;tymax=(box.max.y-origin.y)*invdiry;}else{tymin=(box.max.y-origin.y)*invdiry;tymax=(box.min.y-origin.y)*invdiry;}if(tmin>tymax||tymin>tmax)return null;// These lines also handle the case where tmin or tmax is NaN
     // (result of 0 * Infinity). x !== x returns true if x is NaN
     if(tymin>tmin||tmin!==tmin)tmin=tymin;if(tymax<tmax||tmax!==tmax)tmax=tymax;if(invdirz>=0){tzmin=(box.min.z-origin.z)*invdirz;tzmax=(box.max.z-origin.z)*invdirz;}else{tzmin=(box.max.z-origin.z)*invdirz;tzmax=(box.min.z-origin.z)*invdirz;}if(tmin>tzmax||tzmin>tmax)return null;if(tzmin>tmin||tmin!==tmin)tmin=tzmin;if(tzmax<tmax||tmax!==tmax)tmax=tzmax;//return point closest to the ray (positive side)
     if(tmax<0)return null;return this.at(tmin>=0?tmin:tmax,target);}},{key:"intersectsBox",value:function intersectsBox(box){return this.intersectBox(box,_vector$2)!==null;}},{key:"intersectTriangle",value:function intersectTriangle(a,b,c,backfaceCulling,target){// Compute the offset origin, edges, and normal.
     // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
     _edge1.subVectors(b,a);_edge2.subVectors(c,a);_normal.crossVectors(_edge1,_edge2);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
     // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
     //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
     //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
     //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
     var DdN=this.direction.dot(_normal);var sign;if(DdN>0){if(backfaceCulling)return null;sign=1;}else if(DdN<0){sign=-1;DdN=-DdN;}else{return null;}_diff.subVectors(this.origin,a);var DdQxE2=sign*this.direction.dot(_edge2.crossVectors(_diff,_edge2));// b1 < 0, no intersection
     if(DdQxE2<0){return null;}var DdE1xQ=sign*this.direction.dot(_edge1.cross(_diff));// b2 < 0, no intersection
     if(DdE1xQ<0){return null;}// b1+b2 > 1, no intersection
     if(DdQxE2+DdE1xQ>DdN){return null;}// Line intersects triangle, check if ray does.
     var QdN=-sign*_diff.dot(_normal);// t < 0, no intersection
     if(QdN<0){return null;}// Ray intersects triangle.
     return this.at(QdN/DdN,target);}},{key:"applyMatrix4",value:function applyMatrix4(matrix4){this.origin.applyMatrix4(matrix4);this.direction.transformDirection(matrix4);return this;}},{key:"equals",value:function equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction);}}]);return Ray;}();var Matrix4=/*#__PURE__*/function(){function Matrix4(){_classCallCheck(this,Matrix4);Object.defineProperty(this,'isMatrix4',{value:true});this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');}}_createClass(Matrix4,[{key:"set",value:function set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){var te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this;}},{key:"identity",value:function identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this;}},{key:"clone",value:function clone(){return new Matrix4().fromArray(this.elements);}},{key:"copy",value:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];te[9]=me[9];te[10]=me[10];te[11]=me[11];te[12]=me[12];te[13]=me[13];te[14]=me[14];te[15]=me[15];return this;}},{key:"copyPosition",value:function copyPosition(m){var te=this.elements,me=m.elements;te[12]=me[12];te[13]=me[13];te[14]=me[14];return this;}},{key:"extractBasis",value:function extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this;}},{key:"makeBasis",value:function makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this;}},{key:"extractRotation",value:function extractRotation(m){// this method does not support reflection matrices
     var te=this.elements;var me=m.elements;var scaleX=1/_v1$1.setFromMatrixColumn(m,0).length();var scaleY=1/_v1$1.setFromMatrixColumn(m,1).length();var scaleZ=1/_v1$1.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[3]=0;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[7]=0;te[8]=me[8]*scaleZ;te[9]=me[9]*scaleZ;te[10]=me[10]*scaleZ;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}},{key:"makeRotationFromEuler",value:function makeRotationFromEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');}var te=this.elements;var x=euler.x,y=euler.y,z=euler.z;var a=Math.cos(x),b=Math.sin(x);var c=Math.cos(y),d=Math.sin(y);var e=Math.cos(z),f=Math.sin(z);if(euler.order==='XYZ'){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c;}else if(euler.order==='YXZ'){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c;}else if(euler.order==='ZXY'){var _ce=c*e,_cf=c*f,_de=d*e,_df=d*f;te[0]=_ce-_df*b;te[4]=-a*f;te[8]=_de+_cf*b;te[1]=_cf+_de*b;te[5]=a*e;te[9]=_df-_ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c;}else if(euler.order==='ZYX'){var _ae=a*e,_af=a*f,_be=b*e,_bf=b*f;te[0]=c*e;te[4]=_be*d-_af;te[8]=_ae*d+_bf;te[1]=c*f;te[5]=_bf*d+_ae;te[9]=_af*d-_be;te[2]=-d;te[6]=b*c;te[10]=a*c;}else if(euler.order==='YZX'){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f;}else if(euler.order==='XZY'){var _ac=a*c,_ad=a*d,_bc=b*c,_bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=_ac*f+_bd;te[5]=a*e;te[9]=_ad*f-_bc;te[2]=_bc*f-_ad;te[6]=b*e;te[10]=_bd*f+_ac;}// bottom row
     te[3]=0;te[7]=0;te[11]=0;// last column
     te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}},{key:"makeRotationFromQuaternion",value:function makeRotationFromQuaternion(q){return this.compose(_zero,q,_one);}},{key:"lookAt",value:function lookAt(eye,target,up){var te=this.elements;_z.subVectors(eye,target);if(_z.lengthSq()===0){// eye and target are in the same position
     _z.z=1;}_z.normalize();_x.crossVectors(up,_z);if(_x.lengthSq()===0){// up and z are parallel
     if(Math.abs(up.z)===1){_z.x+=0.0001;}else{_z.z+=0.0001;}_z.normalize();_x.crossVectors(up,_z);}_x.normalize();_y.crossVectors(_z,_x);te[0]=_x.x;te[4]=_y.x;te[8]=_z.x;te[1]=_x.y;te[5]=_y.y;te[9]=_z.y;te[2]=_x.z;te[6]=_y.z;te[10]=_z.z;return this;}},{key:"multiply",value:function multiply(m,n){if(n!==undefined){console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');return this.multiplyMatrices(m,n);}return this.multiplyMatrices(this,m);}},{key:"premultiply",value:function premultiply(m){return this.multiplyMatrices(m,this);}},{key:"multiplyMatrices",value:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];var a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];var a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];var a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];var b11=be[0],b12=be[4],b13=be[8],b14=be[12];var b21=be[1],b22=be[5],b23=be[9],b24=be[13];var b31=be[2],b32=be[6],b33=be[10],b34=be[14];var b41=be[3],b42=be[7],b43=be[11],b44=be[15];te[0]=a11*b11+a12*b21+a13*b31+a14*b41;te[4]=a11*b12+a12*b22+a13*b32+a14*b42;te[8]=a11*b13+a12*b23+a13*b33+a14*b43;te[12]=a11*b14+a12*b24+a13*b34+a14*b44;te[1]=a21*b11+a22*b21+a23*b31+a24*b41;te[5]=a21*b12+a22*b22+a23*b32+a24*b42;te[9]=a21*b13+a22*b23+a23*b33+a24*b43;te[13]=a21*b14+a22*b24+a23*b34+a24*b44;te[2]=a31*b11+a32*b21+a33*b31+a34*b41;te[6]=a31*b12+a32*b22+a33*b32+a34*b42;te[10]=a31*b13+a32*b23+a33*b33+a34*b43;te[14]=a31*b14+a32*b24+a33*b34+a34*b44;te[3]=a41*b11+a42*b21+a43*b31+a44*b41;te[7]=a41*b12+a42*b22+a43*b32+a44*b42;te[11]=a41*b13+a42*b23+a43*b33+a44*b43;te[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this;}},{key:"multiplyScalar",value:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this;}},{key:"determinant",value:function determinant(){var te=this.elements;var n11=te[0],n12=te[4],n13=te[8],n14=te[12];var n21=te[1],n22=te[5],n23=te[9],n24=te[13];var n31=te[2],n32=te[6],n33=te[10],n34=te[14];var n41=te[3],n42=te[7],n43=te[11],n44=te[15];//TODO: make this more efficient
     //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
     return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31);}},{key:"transpose",value:function transpose(){var te=this.elements;var tmp;tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];te[11]=te[14];te[14]=tmp;return this;}},{key:"setPosition",value:function setPosition(x,y,z){var te=this.elements;if(x.isVector3){te[12]=x.x;te[13]=x.y;te[14]=x.z;}else{te[12]=x;te[13]=y;te[14]=z;}return this;}},{key:"getInverse",value:function getInverse(m,throwOnDegenerate){if(throwOnDegenerate!==undefined){console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");}// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
     var te=this.elements,me=m.elements,n11=me[0],n21=me[1],n31=me[2],n41=me[3],n12=me[4],n22=me[5],n32=me[6],n42=me[7],n13=me[8],n23=me[9],n33=me[10],n43=me[11],n14=me[12],n24=me[13],n34=me[14],n44=me[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34;var det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);var detInv=1/det;te[0]=t11*detInv;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv;te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv;te[4]=t12*detInv;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv;te[8]=t13*detInv;te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv;te[12]=t14*detInv;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv;te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv;return this;}},{key:"scale",value:function scale(v){var te=this.elements;var x=v.x,y=v.y,z=v.z;te[0]*=x;te[4]*=y;te[8]*=z;te[1]*=x;te[5]*=y;te[9]*=z;te[2]*=x;te[6]*=y;te[10]*=z;te[3]*=x;te[7]*=y;te[11]*=z;return this;}},{key:"getMaxScaleOnAxis",value:function getMaxScaleOnAxis(){var te=this.elements;var scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2];var scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6];var scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq));}},{key:"makeTranslation",value:function makeTranslation(x,y,z){this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);return this;}},{key:"makeRotationX",value:function makeRotationX(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);return this;}},{key:"makeRotationY",value:function makeRotationY(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);return this;}},{key:"makeRotationZ",value:function makeRotationZ(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return this;}},{key:"makeRotationAxis",value:function makeRotationAxis(axis,angle){// Based on http://www.gamedev.net/reference/articles/article1199.asp
     var c=Math.cos(angle);var s=Math.sin(angle);var t=1-c;var x=axis.x,y=axis.y,z=axis.z;var tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1);return this;}},{key:"makeScale",value:function makeScale(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this;}},{key:"makeShear",value:function makeShear(x,y,z){this.set(1,y,z,0,x,1,z,0,x,y,1,0,0,0,0,1);return this;}},{key:"compose",value:function compose(position,quaternion,scale){var te=this.elements;var x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w;var x2=x+x,y2=y+y,z2=z+z;var xx=x*x2,xy=x*y2,xz=x*z2;var yy=y*y2,yz=y*z2,zz=z*z2;var wx=w*x2,wy=w*y2,wz=w*z2;var sx=scale.x,sy=scale.y,sz=scale.z;te[0]=(1-(yy+zz))*sx;te[1]=(xy+wz)*sx;te[2]=(xz-wy)*sx;te[3]=0;te[4]=(xy-wz)*sy;te[5]=(1-(xx+zz))*sy;te[6]=(yz+wx)*sy;te[7]=0;te[8]=(xz+wy)*sz;te[9]=(yz-wx)*sz;te[10]=(1-(xx+yy))*sz;te[11]=0;te[12]=position.x;te[13]=position.y;te[14]=position.z;te[15]=1;return this;}},{key:"decompose",value:function decompose(position,quaternion,scale){var te=this.elements;var sx=_v1$1.set(te[0],te[1],te[2]).length();var sy=_v1$1.set(te[4],te[5],te[6]).length();var sz=_v1$1.set(te[8],te[9],te[10]).length();// if determine is negative, we need to invert one scale
     var det=this.determinant();if(det<0)sx=-sx;position.x=te[12];position.y=te[13];position.z=te[14];// scale the rotation part
     _m1.copy(this);var invSX=1/sx;var invSY=1/sy;var invSZ=1/sz;_m1.elements[0]*=invSX;_m1.elements[1]*=invSX;_m1.elements[2]*=invSX;_m1.elements[4]*=invSY;_m1.elements[5]*=invSY;_m1.elements[6]*=invSY;_m1.elements[8]*=invSZ;_m1.elements[9]*=invSZ;_m1.elements[10]*=invSZ;quaternion.setFromRotationMatrix(_m1);scale.x=sx;scale.y=sy;scale.z=sz;return this;}},{key:"makePerspective",value:function makePerspective(left,right,top,bottom,near,far){if(far===undefined){console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');}var te=this.elements;var x=2*near/(right-left);var y=2*near/(top-bottom);var a=(right+left)/(right-left);var b=(top+bottom)/(top-bottom);var c=-(far+near)/(far-near);var d=-2*far*near/(far-near);te[0]=x;te[4]=0;te[8]=a;te[12]=0;te[1]=0;te[5]=y;te[9]=b;te[13]=0;te[2]=0;te[6]=0;te[10]=c;te[14]=d;te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this;}},{key:"makeOrthographic",value:function makeOrthographic(left,right,top,bottom,near,far){var te=this.elements;var w=1.0/(right-left);var h=1.0/(top-bottom);var p=1.0/(far-near);var x=(right+left)*w;var y=(top+bottom)*h;var z=(far+near)*p;te[0]=2*w;te[4]=0;te[8]=0;te[12]=-x;te[1]=0;te[5]=2*h;te[9]=0;te[13]=-y;te[2]=0;te[6]=0;te[10]=-2*p;te[14]=-z;te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this;}},{key:"equals",value:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var _i10=0;_i10<16;_i10++){if(te[_i10]!==me[_i10])return false;}return true;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;for(var _i11=0;_i11<16;_i11++){this.elements[_i11]=array[_i11+offset];}return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array;}}]);return Matrix4;}();var _v1$1=/*@__PURE__*/new Vector3();var _m1=/*@__PURE__*/new Matrix4();var _zero=/*@__PURE__*/new Vector3(0,0,0);var _one=/*@__PURE__*/new Vector3(1,1,1);var _x=/*@__PURE__*/new Vector3();var _y=/*@__PURE__*/new Vector3();var _z=/*@__PURE__*/new Vector3();var Euler=/*#__PURE__*/function(){function Euler(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var order=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Euler.DefaultOrder;_classCallCheck(this,Euler);Object.defineProperty(this,'isEuler',{value:true});this._x=x;this._y=y;this._z=z;this._order=order;}_createClass(Euler,[{key:"set",value:function set(x,y,z,order){this._x=x;this._y=y;this._z=z;this._order=order||this._order;this._onChangeCallback();return this;}},{key:"clone",value:function clone(){return new this.constructor(this._x,this._y,this._z,this._order);}},{key:"copy",value:function copy(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this._onChangeCallback();return this;}},{key:"setFromRotationMatrix",value:function setFromRotationMatrix(m,order,update){var clamp=MathUtils.clamp;// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
     var te=m.elements;var m11=te[0],m12=te[4],m13=te[8];var m21=te[1],m22=te[5],m23=te[9];var m31=te[2],m32=te[6],m33=te[10];order=order||this._order;switch(order){case'XYZ':this._y=Math.asin(clamp(m13,-1,1));if(Math.abs(m13)<0.9999999){this._x=Math.atan2(-m23,m33);this._z=Math.atan2(-m12,m11);}else{this._x=Math.atan2(m32,m22);this._z=0;}break;case'YXZ':this._x=Math.asin(-clamp(m23,-1,1));if(Math.abs(m23)<0.9999999){this._y=Math.atan2(m13,m33);this._z=Math.atan2(m21,m22);}else{this._y=Math.atan2(-m31,m11);this._z=0;}break;case'ZXY':this._x=Math.asin(clamp(m32,-1,1));if(Math.abs(m32)<0.9999999){this._y=Math.atan2(-m31,m33);this._z=Math.atan2(-m12,m22);}else{this._y=0;this._z=Math.atan2(m21,m11);}break;case'ZYX':this._y=Math.asin(-clamp(m31,-1,1));if(Math.abs(m31)<0.9999999){this._x=Math.atan2(m32,m33);this._z=Math.atan2(m21,m11);}else{this._x=0;this._z=Math.atan2(-m12,m22);}break;case'YZX':this._z=Math.asin(clamp(m21,-1,1));if(Math.abs(m21)<0.9999999){this._x=Math.atan2(-m23,m22);this._y=Math.atan2(-m31,m11);}else{this._x=0;this._y=Math.atan2(m13,m33);}break;case'XZY':this._z=Math.asin(-clamp(m12,-1,1));if(Math.abs(m12)<0.9999999){this._x=Math.atan2(m32,m22);this._y=Math.atan2(m13,m11);}else{this._x=Math.atan2(-m23,m33);this._y=0;}break;default:console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: '+order);}this._order=order;if(update!==false)this._onChangeCallback();return this;}},{key:"setFromQuaternion",value:function setFromQuaternion(q,order,update){_matrix.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(_matrix,order,update);}},{key:"setFromVector3",value:function setFromVector3(v,order){return this.set(v.x,v.y,v.z,order||this._order);}},{key:"reorder",value:function reorder(newOrder){// WARNING: this discards revolution information -bhouston
     _quaternion$1.setFromEuler(this);return this.setFromQuaternion(_quaternion$1,newOrder);}},{key:"equals",value:function equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order;}},{key:"fromArray",value:function fromArray(array){this._x=array[0];this._y=array[1];this._z=array[2];if(array[3]!==undefined)this._order=array[3];this._onChangeCallback();return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array;}},{key:"toVector3",value:function toVector3(optionalResult){if(optionalResult){return optionalResult.set(this._x,this._y,this._z);}else{return new Vector3(this._x,this._y,this._z);}}},{key:"_onChange",value:function _onChange(callback){this._onChangeCallback=callback;return this;}},{key:"_onChangeCallback",value:function _onChangeCallback(){}},{key:"x",get:function get(){return this._x;},set:function set(value){this._x=value;this._onChangeCallback();}},{key:"y",get:function get(){return this._y;},set:function set(value){this._y=value;this._onChangeCallback();}},{key:"z",get:function get(){return this._z;},set:function set(value){this._z=value;this._onChangeCallback();}},{key:"order",get:function get(){return this._order;},set:function set(value){this._order=value;this._onChangeCallback();}}]);return Euler;}();Euler.DefaultOrder='XYZ';Euler.RotationOrders=['XYZ','YZX','ZXY','XZY','YXZ','ZYX'];var _matrix=/*@__PURE__*/new Matrix4();var _quaternion$1=/*@__PURE__*/new Quaternion();var Layers=/*#__PURE__*/function(){function Layers(){_classCallCheck(this,Layers);this.mask=1|0;}_createClass(Layers,[{key:"set",value:function set(channel){this.mask=1<<channel|0;}},{key:"enable",value:function enable(channel){this.mask|=1<<channel|0;}},{key:"enableAll",value:function enableAll(){this.mask=0xffffffff|0;}},{key:"toggle",value:function toggle(channel){this.mask^=1<<channel|0;}},{key:"disable",value:function disable(channel){this.mask&=~(1<<channel|0);}},{key:"disableAll",value:function disableAll(){this.mask=0;}},{key:"test",value:function test(layers){return(this.mask&layers.mask)!==0;}}]);return Layers;}();var _object3DId=0;var _v1$2=new Vector3();var _q1=new Quaternion();var _m1$1=new Matrix4();var _target=new Vector3();var _position=new Vector3();var _scale=new Vector3();var _quaternion$2=new Quaternion();var _xAxis=new Vector3(1,0,0);var _yAxis=new Vector3(0,1,0);var _zAxis=new Vector3(0,0,1);var _addedEvent={type:'added'};var _removedEvent={type:'removed'};function Object3D(){Object.defineProperty(this,'id',{value:_object3DId++});this.uuid=MathUtils.generateUUID();this.name='';this.type='Object3D';this.parent=null;this.children=[];this.up=Object3D.DefaultUp.clone();var position=new Vector3();var rotation=new Euler();var quaternion=new Quaternion();var scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,false);}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,undefined,false);}rotation._onChange(onRotationChange);quaternion._onChange(onQuaternionChange);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:position},rotation:{configurable:true,enumerable:true,value:rotation},quaternion:{configurable:true,enumerable:true,value:quaternion},scale:{configurable:true,enumerable:true,value:scale},modelViewMatrix:{value:new Matrix4()},normalMatrix:{value:new Matrix3()}});this.matrix=new Matrix4();this.matrixWorld=new Matrix4();this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers();this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.userData={};}Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Object3D,isObject3D:true,onBeforeRender:function onBeforeRender(){},onAfterRender:function onAfterRender(){},applyMatrix4:function applyMatrix4(matrix){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(matrix);this.matrix.decompose(this.position,this.quaternion,this.scale);},applyQuaternion:function applyQuaternion(q){this.quaternion.premultiply(q);return this;},setRotationFromAxisAngle:function setRotationFromAxisAngle(axis,angle){// assumes axis is normalized
     this.quaternion.setFromAxisAngle(axis,angle);},setRotationFromEuler:function setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,true);},setRotationFromMatrix:function setRotationFromMatrix(m){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
     this.quaternion.setFromRotationMatrix(m);},setRotationFromQuaternion:function setRotationFromQuaternion(q){// assumes q is normalized
     this.quaternion.copy(q);},rotateOnAxis:function rotateOnAxis(axis,angle){// rotate object on axis in object space
     // axis is assumed to be normalized
     _q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(_q1);return this;},rotateOnWorldAxis:function rotateOnWorldAxis(axis,angle){// rotate object on axis in world space
     // axis is assumed to be normalized
     // method assumes no rotated parent
     _q1.setFromAxisAngle(axis,angle);this.quaternion.premultiply(_q1);return this;},rotateX:function rotateX(angle){return this.rotateOnAxis(_xAxis,angle);},rotateY:function rotateY(angle){return this.rotateOnAxis(_yAxis,angle);},rotateZ:function rotateZ(angle){return this.rotateOnAxis(_zAxis,angle);},translateOnAxis:function translateOnAxis(axis,distance){// translate object by distance along axis in object space
     // axis is assumed to be normalized
     _v1$2.copy(axis).applyQuaternion(this.quaternion);this.position.add(_v1$2.multiplyScalar(distance));return this;},translateX:function translateX(distance){return this.translateOnAxis(_xAxis,distance);},translateY:function translateY(distance){return this.translateOnAxis(_yAxis,distance);},translateZ:function translateZ(distance){return this.translateOnAxis(_zAxis,distance);},localToWorld:function localToWorld(vector){return vector.applyMatrix4(this.matrixWorld);},worldToLocal:function worldToLocal(vector){return vector.applyMatrix4(_m1$1.getInverse(this.matrixWorld));},lookAt:function lookAt(x,y,z){// This method does not support objects having non-uniformly-scaled parent(s)
     if(x.isVector3){_target.copy(x);}else{_target.set(x,y,z);}var parent=this.parent;this.updateWorldMatrix(true,false);_position.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position,_target,this.up);}else{_m1$1.lookAt(_target,_position,this.up);}this.quaternion.setFromRotationMatrix(_m1$1);if(parent){_m1$1.extractRotation(parent.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.inverse());}},add:function add(object){if(arguments.length>1){for(var _i12=0;_i12<arguments.length;_i12++){this.add(arguments[_i12]);}return this;}if(object===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",object);return this;}if(object&&object.isObject3D){if(object.parent!==null){object.parent.remove(object);}object.parent=this;this.children.push(object);object.dispatchEvent(_addedEvent);}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object);}return this;},remove:function remove(object){if(arguments.length>1){for(var _i13=0;_i13<arguments.length;_i13++){this.remove(arguments[_i13]);}return this;}var index=this.children.indexOf(object);if(index!==-1){object.parent=null;this.children.splice(index,1);object.dispatchEvent(_removedEvent);}return this;},attach:function attach(object){// adds object as a child of this, while maintaining the object's world transform
     this.updateWorldMatrix(true,false);_m1$1.getInverse(this.matrixWorld);if(object.parent!==null){object.parent.updateWorldMatrix(true,false);_m1$1.multiply(object.parent.matrixWorld);}object.applyMatrix4(_m1$1);object.updateWorldMatrix(false,false);this.add(object);return this;},getObjectById:function getObjectById(id){return this.getObjectByProperty('id',id);},getObjectByName:function getObjectByName(name){return this.getObjectByProperty('name',name);},getObjectByProperty:function getObjectByProperty(name,value){if(this[name]===value)return this;for(var _i14=0,l=this.children.length;_i14<l;_i14++){var child=this.children[_i14];var object=child.getObjectByProperty(name,value);if(object!==undefined){return object;}}return undefined;},getWorldPosition:function getWorldPosition(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldPosition() target is now required');target=new Vector3();}this.updateWorldMatrix(true,false);return target.setFromMatrixPosition(this.matrixWorld);},getWorldQuaternion:function getWorldQuaternion(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');target=new Quaternion();}this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position,target,_scale);return target;},getWorldScale:function getWorldScale(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldScale() target is now required');target=new Vector3();}this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position,_quaternion$2,target);return target;},getWorldDirection:function getWorldDirection(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldDirection() target is now required');target=new Vector3();}this.updateWorldMatrix(true,false);var e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize();},raycast:function raycast(){},traverse:function traverse(callback){callback(this);var children=this.children;for(var _i15=0,l=children.length;_i15<l;_i15++){children[_i15].traverse(callback);}},traverseVisible:function traverseVisible(callback){if(this.visible===false)return;callback(this);var children=this.children;for(var _i16=0,l=children.length;_i16<l;_i16++){children[_i16].traverseVisible(callback);}},traverseAncestors:function traverseAncestors(callback){var parent=this.parent;if(parent!==null){callback(parent);parent.traverseAncestors(callback);}},updateMatrix:function updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true;},updateMatrixWorld:function updateMatrixWorld(force){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||force){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}this.matrixWorldNeedsUpdate=false;force=true;}// update children
     var children=this.children;for(var _i17=0,l=children.length;_i17<l;_i17++){children[_i17].updateMatrixWorld(force);}},updateWorldMatrix:function updateWorldMatrix(updateParents,updateChildren){var parent=this.parent;if(updateParents===true&&parent!==null){parent.updateWorldMatrix(true,false);}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}// update children
     if(updateChildren===true){var children=this.children;for(var _i18=0,l=children.length;_i18<l;_i18++){children[_i18].updateWorldMatrix(false,true);}}},toJSON:function toJSON(meta){// meta is a string when called from JSON.stringify
     var isRootObject=meta===undefined||typeof meta==='string';var output={};// meta is a hash used to collect geometries, materials.
     // not providing it implies that this is the root object
     // being serialized.
     if(isRootObject){// initialize meta obj
     meta={geometries:{},materials:{},textures:{},images:{},shapes:{}};output.metadata={version:4.5,type:'Object',generator:'Object3D.toJSON'};}// standard Object3D serialization
     var object={};object.uuid=this.uuid;object.type=this.type;if(this.name!=='')object.name=this.name;if(this.castShadow===true)object.castShadow=true;if(this.receiveShadow===true)object.receiveShadow=true;if(this.visible===false)object.visible=false;if(this.frustumCulled===false)object.frustumCulled=false;if(this.renderOrder!==0)object.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=='{}')object.userData=this.userData;object.layers=this.layers.mask;object.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)object.matrixAutoUpdate=false;// object specific properties
     if(this.isInstancedMesh){object.type='InstancedMesh';object.count=this.count;object.instanceMatrix=this.instanceMatrix.toJSON();}//
     function serialize(library,element){if(library[element.uuid]===undefined){library[element.uuid]=element.toJSON(meta);}return element.uuid;}if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);var parameters=this.geometry.parameters;if(parameters!==undefined&&parameters.shapes!==undefined){var shapes=parameters.shapes;if(Array.isArray(shapes)){for(var _i19=0,l=shapes.length;_i19<l;_i19++){var shape=shapes[_i19];serialize(meta.shapes,shape);}}else{serialize(meta.shapes,shapes);}}}if(this.material!==undefined){if(Array.isArray(this.material)){var uuids=[];for(var _i20=0,_l2=this.material.length;_i20<_l2;_i20++){uuids.push(serialize(meta.materials,this.material[_i20]));}object.material=uuids;}else{object.material=serialize(meta.materials,this.material);}}//
     if(this.children.length>0){object.children=[];for(var _i21=0;_i21<this.children.length;_i21++){object.children.push(this.children[_i21].toJSON(meta).object);}}if(isRootObject){var geometries=extractFromCache(meta.geometries);var materials=extractFromCache(meta.materials);var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);var _shapes=extractFromCache(meta.shapes);if(geometries.length>0)output.geometries=geometries;if(materials.length>0)output.materials=materials;if(textures.length>0)output.textures=textures;if(images.length>0)output.images=images;if(_shapes.length>0)output.shapes=_shapes;}output.object=object;return output;// extract data from the cache hash
     // remove metadata on each item
     // and return as array
     function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}return values;}},clone:function clone(recursive){return new this.constructor().copy(this,recursive);},copy:function copy(source,recursive){if(recursive===undefined)recursive=true;this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.rotation.order=source.rotation.order;this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.layers.mask=source.layers.mask;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.userData=JSON.parse(JSON.stringify(source.userData));if(recursive===true){for(var _i22=0;_i22<source.children.length;_i22++){var child=source.children[_i22];this.add(child.clone());}}return this;}});var _vector1=/*@__PURE__*/new Vector3();var _vector2=/*@__PURE__*/new Vector3();var _normalMatrix=/*@__PURE__*/new Matrix3();var Plane=/*#__PURE__*/function(){function Plane(normal,constant){_classCallCheck(this,Plane);Object.defineProperty(this,'isPlane',{value:true});// normal is assumed to be normalized
     this.normal=normal!==undefined?normal:new Vector3(1,0,0);this.constant=constant!==undefined?constant:0;}_createClass(Plane,[{key:"set",value:function set(normal,constant){this.normal.copy(normal);this.constant=constant;return this;}},{key:"setComponents",value:function setComponents(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this;}},{key:"setFromNormalAndCoplanarPoint",value:function setFromNormalAndCoplanarPoint(normal,point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this;}},{key:"setFromCoplanarPoints",value:function setFromCoplanarPoints(a,b,c){var normal=_vector1.subVectors(c,b).cross(_vector2.subVectors(a,b)).normalize();// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
     this.setFromNormalAndCoplanarPoint(normal,a);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this;}},{key:"normalize",value:function normalize(){// Note: will lead to a divide by zero if the plane is invalid.
     var inverseNormalLength=1.0/this.normal.length();this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this;}},{key:"negate",value:function negate(){this.constant*=-1;this.normal.negate();return this;}},{key:"distanceToPoint",value:function distanceToPoint(point){return this.normal.dot(point)+this.constant;}},{key:"distanceToSphere",value:function distanceToSphere(sphere){return this.distanceToPoint(sphere.center)-sphere.radius;}},{key:"projectPoint",value:function projectPoint(point,target){if(target===undefined){console.warn('THREE.Plane: .projectPoint() target is now required');target=new Vector3();}return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);}},{key:"intersectLine",value:function intersectLine(line,target){if(target===undefined){console.warn('THREE.Plane: .intersectLine() target is now required');target=new Vector3();}var direction=line.delta(_vector1);var denominator=this.normal.dot(direction);if(denominator===0){// line is coplanar, return origin
     if(this.distanceToPoint(line.start)===0){return target.copy(line.start);}// Unsure if this is the correct method to handle this case.
     return undefined;}var t=-(line.start.dot(this.normal)+this.constant)/denominator;if(t<0||t>1){return undefined;}return target.copy(direction).multiplyScalar(t).add(line.start);}},{key:"intersectsLine",value:function intersectsLine(line){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
     var startSign=this.distanceToPoint(line.start);var endSign=this.distanceToPoint(line.end);return startSign<0&&endSign>0||endSign<0&&startSign>0;}},{key:"intersectsBox",value:function intersectsBox(box){return box.intersectsPlane(this);}},{key:"intersectsSphere",value:function intersectsSphere(sphere){return sphere.intersectsPlane(this);}},{key:"coplanarPoint",value:function coplanarPoint(target){if(target===undefined){console.warn('THREE.Plane: .coplanarPoint() target is now required');target=new Vector3();}return target.copy(this.normal).multiplyScalar(-this.constant);}},{key:"applyMatrix4",value:function applyMatrix4(matrix,optionalNormalMatrix){var normalMatrix=optionalNormalMatrix||_normalMatrix.getNormalMatrix(matrix);var referencePoint=this.coplanarPoint(_vector1).applyMatrix4(matrix);var normal=this.normal.applyMatrix3(normalMatrix).normalize();this.constant=-referencePoint.dot(normal);return this;}},{key:"translate",value:function translate(offset){this.constant-=offset.dot(this.normal);return this;}},{key:"equals",value:function equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant;}}]);return Plane;}();var _v0$1=/*@__PURE__*/new Vector3();var _v1$3=/*@__PURE__*/new Vector3();var _v2$1=/*@__PURE__*/new Vector3();var _v3=/*@__PURE__*/new Vector3();var _vab=/*@__PURE__*/new Vector3();var _vac=/*@__PURE__*/new Vector3();var _vbc=/*@__PURE__*/new Vector3();var _vap=/*@__PURE__*/new Vector3();var _vbp=/*@__PURE__*/new Vector3();var _vcp=/*@__PURE__*/new Vector3();var Triangle=/*#__PURE__*/function(){function Triangle(a,b,c){_classCallCheck(this,Triangle);this.a=a!==undefined?a:new Vector3();this.b=b!==undefined?b:new Vector3();this.c=c!==undefined?c:new Vector3();}_createClass(Triangle,[{key:"set",value:function set(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;}},{key:"setFromPointsAndIndices",value:function setFromPointsAndIndices(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this;}},{key:"getArea",value:function getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*0.5;}},{key:"getMidpoint",value:function getMidpoint(target){if(target===undefined){console.warn('THREE.Triangle: .getMidpoint() target is now required');target=new Vector3();}return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);}},{key:"getNormal",value:function getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target);}},{key:"getPlane",value:function getPlane(target){if(target===undefined){console.warn('THREE.Triangle: .getPlane() target is now required');target=new Plane();}return target.setFromCoplanarPoints(this.a,this.b,this.c);}},{key:"getBarycoord",value:function getBarycoord(point,target){return Triangle.getBarycoord(point,this.a,this.b,this.c,target);}},{key:"getUV",value:function getUV(point,uv1,uv2,uv3,target){return Triangle.getUV(point,this.a,this.b,this.c,uv1,uv2,uv3,target);}},{key:"containsPoint",value:function containsPoint(point){return Triangle.containsPoint(point,this.a,this.b,this.c);}},{key:"isFrontFacing",value:function isFrontFacing(direction){return Triangle.isFrontFacing(this.a,this.b,this.c,direction);}},{key:"intersectsBox",value:function intersectsBox(box){return box.intersectsTriangle(this);}},{key:"closestPointToPoint",value:function closestPointToPoint(p,target){if(target===undefined){console.warn('THREE.Triangle: .closestPointToPoint() target is now required');target=new Vector3();}var a=this.a,b=this.b,c=this.c;var v,w;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
     // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
     // under the accompanying license; see chapter 5.1.5 for detailed explanation.
     // basically, we're distinguishing which of the voronoi regions of the triangle
     // the point lies in with the minimum amount of redundant computation.
     _vab.subVectors(b,a);_vac.subVectors(c,a);_vap.subVectors(p,a);var d1=_vab.dot(_vap);var d2=_vac.dot(_vap);if(d1<=0&&d2<=0){// vertex region of A; barycentric coords (1, 0, 0)
     return target.copy(a);}_vbp.subVectors(p,b);var d3=_vab.dot(_vbp);var d4=_vac.dot(_vbp);if(d3>=0&&d4<=d3){// vertex region of B; barycentric coords (0, 1, 0)
     return target.copy(b);}var vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0){v=d1/(d1-d3);// edge region of AB; barycentric coords (1-v, v, 0)
     return target.copy(a).addScaledVector(_vab,v);}_vcp.subVectors(p,c);var d5=_vab.dot(_vcp);var d6=_vac.dot(_vcp);if(d6>=0&&d5<=d6){// vertex region of C; barycentric coords (0, 0, 1)
     return target.copy(c);}var vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0){w=d2/(d2-d6);// edge region of AC; barycentric coords (1-w, 0, w)
     return target.copy(a).addScaledVector(_vac,w);}var va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0){_vbc.subVectors(c,b);w=(d4-d3)/(d4-d3+(d5-d6));// edge region of BC; barycentric coords (0, 1-w, w)
     return target.copy(b).addScaledVector(_vbc,w);// edge region of BC
     }// face region
     var denom=1/(va+vb+vc);// u = va * denom
     v=vb*denom;w=vc*denom;return target.copy(a).addScaledVector(_vab,v).addScaledVector(_vac,w);}},{key:"equals",value:function equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c);}}],[{key:"getNormal",value:function getNormal(a,b,c,target){if(target===undefined){console.warn('THREE.Triangle: .getNormal() target is now required');target=new Vector3();}target.subVectors(c,b);_v0$1.subVectors(a,b);target.cross(_v0$1);var targetLengthSq=target.lengthSq();if(targetLengthSq>0){return target.multiplyScalar(1/Math.sqrt(targetLengthSq));}return target.set(0,0,0);}// static/instance method to calculate barycentric coordinates
     // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
     },{key:"getBarycoord",value:function getBarycoord(point,a,b,c,target){_v0$1.subVectors(c,a);_v1$3.subVectors(b,a);_v2$1.subVectors(point,a);var dot00=_v0$1.dot(_v0$1);var dot01=_v0$1.dot(_v1$3);var dot02=_v0$1.dot(_v2$1);var dot11=_v1$3.dot(_v1$3);var dot12=_v1$3.dot(_v2$1);var denom=dot00*dot11-dot01*dot01;if(target===undefined){console.warn('THREE.Triangle: .getBarycoord() target is now required');target=new Vector3();}// collinear or singular triangle
     if(denom===0){// arbitrary location outside of triangle?
     // not sure if this is the best idea, maybe should be returning undefined
     return target.set(-2,-1,-1);}var invDenom=1/denom;var u=(dot11*dot02-dot01*dot12)*invDenom;var v=(dot00*dot12-dot01*dot02)*invDenom;// barycentric coordinates must always sum to 1
     return target.set(1-u-v,v,u);}},{key:"containsPoint",value:function containsPoint(point,a,b,c){this.getBarycoord(point,a,b,c,_v3);return _v3.x>=0&&_v3.y>=0&&_v3.x+_v3.y<=1;}},{key:"getUV",value:function getUV(point,p1,p2,p3,uv1,uv2,uv3,target){this.getBarycoord(point,p1,p2,p3,_v3);target.set(0,0);target.addScaledVector(uv1,_v3.x);target.addScaledVector(uv2,_v3.y);target.addScaledVector(uv3,_v3.z);return target;}},{key:"isFrontFacing",value:function isFrontFacing(a,b,c,direction){_v0$1.subVectors(c,b);_v1$3.subVectors(a,b);// strictly front facing
     return _v0$1.cross(_v1$3).dot(direction)<0?true:false;}}]);return Triangle;}();var _colorKeywords={'aliceblue':0xF0F8FF,'antiquewhite':0xFAEBD7,'aqua':0x00FFFF,'aquamarine':0x7FFFD4,'azure':0xF0FFFF,'beige':0xF5F5DC,'bisque':0xFFE4C4,'black':0x000000,'blanchedalmond':0xFFEBCD,'blue':0x0000FF,'blueviolet':0x8A2BE2,'brown':0xA52A2A,'burlywood':0xDEB887,'cadetblue':0x5F9EA0,'chartreuse':0x7FFF00,'chocolate':0xD2691E,'coral':0xFF7F50,'cornflowerblue':0x6495ED,'cornsilk':0xFFF8DC,'crimson':0xDC143C,'cyan':0x00FFFF,'darkblue':0x00008B,'darkcyan':0x008B8B,'darkgoldenrod':0xB8860B,'darkgray':0xA9A9A9,'darkgreen':0x006400,'darkgrey':0xA9A9A9,'darkkhaki':0xBDB76B,'darkmagenta':0x8B008B,'darkolivegreen':0x556B2F,'darkorange':0xFF8C00,'darkorchid':0x9932CC,'darkred':0x8B0000,'darksalmon':0xE9967A,'darkseagreen':0x8FBC8F,'darkslateblue':0x483D8B,'darkslategray':0x2F4F4F,'darkslategrey':0x2F4F4F,'darkturquoise':0x00CED1,'darkviolet':0x9400D3,'deeppink':0xFF1493,'deepskyblue':0x00BFFF,'dimgray':0x696969,'dimgrey':0x696969,'dodgerblue':0x1E90FF,'firebrick':0xB22222,'floralwhite':0xFFFAF0,'forestgreen':0x228B22,'fuchsia':0xFF00FF,'gainsboro':0xDCDCDC,'ghostwhite':0xF8F8FF,'gold':0xFFD700,'goldenrod':0xDAA520,'gray':0x808080,'green':0x008000,'greenyellow':0xADFF2F,'grey':0x808080,'honeydew':0xF0FFF0,'hotpink':0xFF69B4,'indianred':0xCD5C5C,'indigo':0x4B0082,'ivory':0xFFFFF0,'khaki':0xF0E68C,'lavender':0xE6E6FA,'lavenderblush':0xFFF0F5,'lawngreen':0x7CFC00,'lemonchiffon':0xFFFACD,'lightblue':0xADD8E6,'lightcoral':0xF08080,'lightcyan':0xE0FFFF,'lightgoldenrodyellow':0xFAFAD2,'lightgray':0xD3D3D3,'lightgreen':0x90EE90,'lightgrey':0xD3D3D3,'lightpink':0xFFB6C1,'lightsalmon':0xFFA07A,'lightseagreen':0x20B2AA,'lightskyblue':0x87CEFA,'lightslategray':0x778899,'lightslategrey':0x778899,'lightsteelblue':0xB0C4DE,'lightyellow':0xFFFFE0,'lime':0x00FF00,'limegreen':0x32CD32,'linen':0xFAF0E6,'magenta':0xFF00FF,'maroon':0x800000,'mediumaquamarine':0x66CDAA,'mediumblue':0x0000CD,'mediumorchid':0xBA55D3,'mediumpurple':0x9370DB,'mediumseagreen':0x3CB371,'mediumslateblue':0x7B68EE,'mediumspringgreen':0x00FA9A,'mediumturquoise':0x48D1CC,'mediumvioletred':0xC71585,'midnightblue':0x191970,'mintcream':0xF5FFFA,'mistyrose':0xFFE4E1,'moccasin':0xFFE4B5,'navajowhite':0xFFDEAD,'navy':0x000080,'oldlace':0xFDF5E6,'olive':0x808000,'olivedrab':0x6B8E23,'orange':0xFFA500,'orangered':0xFF4500,'orchid':0xDA70D6,'palegoldenrod':0xEEE8AA,'palegreen':0x98FB98,'paleturquoise':0xAFEEEE,'palevioletred':0xDB7093,'papayawhip':0xFFEFD5,'peachpuff':0xFFDAB9,'peru':0xCD853F,'pink':0xFFC0CB,'plum':0xDDA0DD,'powderblue':0xB0E0E6,'purple':0x800080,'rebeccapurple':0x663399,'red':0xFF0000,'rosybrown':0xBC8F8F,'royalblue':0x4169E1,'saddlebrown':0x8B4513,'salmon':0xFA8072,'sandybrown':0xF4A460,'seagreen':0x2E8B57,'seashell':0xFFF5EE,'sienna':0xA0522D,'silver':0xC0C0C0,'skyblue':0x87CEEB,'slateblue':0x6A5ACD,'slategray':0x708090,'slategrey':0x708090,'snow':0xFFFAFA,'springgreen':0x00FF7F,'steelblue':0x4682B4,'tan':0xD2B48C,'teal':0x008080,'thistle':0xD8BFD8,'tomato':0xFF6347,'turquoise':0x40E0D0,'violet':0xEE82EE,'wheat':0xF5DEB3,'white':0xFFFFFF,'whitesmoke':0xF5F5F5,'yellow':0xFFFF00,'yellowgreen':0x9ACD32};var _hslA={h:0,s:0,l:0};var _hslB={h:0,s:0,l:0};function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*6*(2/3-t);return p;}function SRGBToLinear(c){return c<0.04045?c*0.0773993808:Math.pow(c*0.9478672986+0.0521327014,2.4);}function LinearToSRGB(c){return c<0.0031308?c*12.92:1.055*Math.pow(c,0.41666)-0.055;}var Color=/*#__PURE__*/function(){function Color(r,g,b){_classCallCheck(this,Color);Object.defineProperty(this,'isColor',{value:true});if(g===undefined&&b===undefined){// r is THREE.Color, hex or string
     return this.set(r);}return this.setRGB(r,g,b);}_createClass(Color,[{key:"set",value:function set(value){if(value&&value.isColor){this.copy(value);}else if(typeof value==='number'){this.setHex(value);}else if(typeof value==='string'){this.setStyle(value);}return this;}},{key:"setScalar",value:function setScalar(scalar){this.r=scalar;this.g=scalar;this.b=scalar;return this;}},{key:"setHex",value:function setHex(hex){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;return this;}},{key:"setRGB",value:function setRGB(r,g,b){this.r=r;this.g=g;this.b=b;return this;}},{key:"setHSL",value:function setHSL(h,s,l){// h,s,l ranges are in 0.0 - 1.0
     h=MathUtils.euclideanModulo(h,1);s=MathUtils.clamp(s,0,1);l=MathUtils.clamp(l,0,1);if(s===0){this.r=this.g=this.b=l;}else{var p=l<=0.5?l*(1+s):l+s-l*s;var q=2*l-p;this.r=hue2rgb(q,p,h+1/3);this.g=hue2rgb(q,p,h);this.b=hue2rgb(q,p,h-1/3);}return this;}},{key:"setStyle",value:function setStyle(style){function handleAlpha(string){if(string===undefined)return;if(parseFloat(string)<1){console.warn('THREE.Color: Alpha component of '+style+' will be ignored.');}}var m;if(m=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)){// rgb / hsl
     var color;var name=m[1];var components=m[2];switch(name){case'rgb':case'rgba':if(color=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){// rgb(255,0,0) rgba(255,0,0,0.5)
     this.r=Math.min(255,parseInt(color[1],10))/255;this.g=Math.min(255,parseInt(color[2],10))/255;this.b=Math.min(255,parseInt(color[3],10))/255;handleAlpha(color[5]);return this;}if(color=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
     this.r=Math.min(100,parseInt(color[1],10))/100;this.g=Math.min(100,parseInt(color[2],10))/100;this.b=Math.min(100,parseInt(color[3],10))/100;handleAlpha(color[5]);return this;}break;case'hsl':case'hsla':if(color=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
     var h=parseFloat(color[1])/360;var s=parseInt(color[2],10)/100;var l=parseInt(color[3],10)/100;handleAlpha(color[5]);return this.setHSL(h,s,l);}break;}}else if(m=/^\#([A-Fa-f0-9]+)$/.exec(style)){// hex color
     var hex=m[1];var size=hex.length;if(size===3){// #ff0
     this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255;this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255;this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255;return this;}else if(size===6){// #ff0000
     this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255;this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255;this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255;return this;}}if(style&&style.length>0){return this.setColorName(style);}return this;}},{key:"setColorName",value:function setColorName(style){// color keywords
     var hex=_colorKeywords[style];if(hex!==undefined){// red
     this.setHex(hex);}else{// unknown color
     console.warn('THREE.Color: Unknown color '+style);}return this;}},{key:"clone",value:function clone(){return new this.constructor(this.r,this.g,this.b);}},{key:"copy",value:function copy(color){this.r=color.r;this.g=color.g;this.b=color.b;return this;}},{key:"copyGammaToLinear",value:function copyGammaToLinear(color,gammaFactor){if(gammaFactor===undefined)gammaFactor=2.0;this.r=Math.pow(color.r,gammaFactor);this.g=Math.pow(color.g,gammaFactor);this.b=Math.pow(color.b,gammaFactor);return this;}},{key:"copyLinearToGamma",value:function copyLinearToGamma(color,gammaFactor){if(gammaFactor===undefined)gammaFactor=2.0;var safeInverse=gammaFactor>0?1.0/gammaFactor:1.0;this.r=Math.pow(color.r,safeInverse);this.g=Math.pow(color.g,safeInverse);this.b=Math.pow(color.b,safeInverse);return this;}},{key:"convertGammaToLinear",value:function convertGammaToLinear(gammaFactor){this.copyGammaToLinear(this,gammaFactor);return this;}},{key:"convertLinearToGamma",value:function convertLinearToGamma(gammaFactor){this.copyLinearToGamma(this,gammaFactor);return this;}},{key:"copySRGBToLinear",value:function copySRGBToLinear(color){this.r=SRGBToLinear(color.r);this.g=SRGBToLinear(color.g);this.b=SRGBToLinear(color.b);return this;}},{key:"copyLinearToSRGB",value:function copyLinearToSRGB(color){this.r=LinearToSRGB(color.r);this.g=LinearToSRGB(color.g);this.b=LinearToSRGB(color.b);return this;}},{key:"convertSRGBToLinear",value:function convertSRGBToLinear(){this.copySRGBToLinear(this);return this;}},{key:"convertLinearToSRGB",value:function convertLinearToSRGB(){this.copyLinearToSRGB(this);return this;}},{key:"getHex",value:function getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0;}},{key:"getHexString",value:function getHexString(){return('000000'+this.getHex().toString(16)).slice(-6);}},{key:"getHSL",value:function getHSL(target){// h,s,l ranges are in 0.0 - 1.0
     if(target===undefined){console.warn('THREE.Color: .getHSL() target is now required');target={h:0,s:0,l:0};}var r=this.r,g=this.g,b=this.b;var max=Math.max(r,g,b);var min=Math.min(r,g,b);var hue,saturation;var lightness=(min+max)/2.0;if(min===max){hue=0;saturation=0;}else{var delta=max-min;saturation=lightness<=0.5?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break;}hue/=6;}target.h=hue;target.s=saturation;target.l=lightness;return target;}},{key:"getStyle",value:function getStyle(){return'rgb('+(this.r*255|0)+','+(this.g*255|0)+','+(this.b*255|0)+')';}},{key:"offsetHSL",value:function offsetHSL(h,s,l){this.getHSL(_hslA);_hslA.h+=h;_hslA.s+=s;_hslA.l+=l;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this;}},{key:"add",value:function add(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this;}},{key:"addColors",value:function addColors(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this;}},{key:"addScalar",value:function addScalar(s){this.r+=s;this.g+=s;this.b+=s;return this;}},{key:"sub",value:function sub(color){this.r=Math.max(0,this.r-color.r);this.g=Math.max(0,this.g-color.g);this.b=Math.max(0,this.b-color.b);return this;}},{key:"multiply",value:function multiply(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this;}},{key:"multiplyScalar",value:function multiplyScalar(s){this.r*=s;this.g*=s;this.b*=s;return this;}},{key:"lerp",value:function lerp(color,alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this;}},{key:"lerpHSL",value:function lerpHSL(color,alpha){this.getHSL(_hslA);color.getHSL(_hslB);var h=MathUtils.lerp(_hslA.h,_hslB.h,alpha);var s=MathUtils.lerp(_hslA.s,_hslB.s,alpha);var l=MathUtils.lerp(_hslA.l,_hslB.l,alpha);this.setHSL(h,s,l);return this;}},{key:"equals",value:function equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b;}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index){this.r=attribute.getX(index);this.g=attribute.getY(index);this.b=attribute.getZ(index);if(attribute.normalized===true){// assuming Uint8Array
     this.r/=255;this.g/=255;this.b/=255;}return this;}},{key:"toJSON",value:function toJSON(){return this.getHex();}}]);return Color;}();Color.NAMES=_colorKeywords;Color.prototype.r=1;Color.prototype.g=1;Color.prototype.b=1;var Face3=/*#__PURE__*/function(){function Face3(a,b,c,normal,color,materialIndex){_classCallCheck(this,Face3);this.a=a;this.b=b;this.c=c;this.normal=normal&&normal.isVector3?normal:new Vector3();this.vertexNormals=Array.isArray(normal)?normal:[];this.color=color&&color.isColor?color:new Color();this.vertexColors=Array.isArray(color)?color:[];this.materialIndex=materialIndex!==undefined?materialIndex:0;}_createClass(Face3,[{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(source){this.a=source.a;this.b=source.b;this.c=source.c;this.normal.copy(source.normal);this.color.copy(source.color);this.materialIndex=source.materialIndex;for(var _i23=0,il=source.vertexNormals.length;_i23<il;_i23++){this.vertexNormals[_i23]=source.vertexNormals[_i23].clone();}for(var _i24=0,_il=source.vertexColors.length;_i24<_il;_i24++){this.vertexColors[_i24]=source.vertexColors[_i24].clone();}return this;}}]);return Face3;}();var materialId=0;function Material(){Object.defineProperty(this,'id',{value:materialId++});this.uuid=MathUtils.generateUUID();this.name='';this.type='Material';this.fog=true;this.blending=NormalBlending;this.side=FrontSide;this.flatShading=false;this.vertexColors=false;this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=0xff;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=0xff;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;// override the renderer's default precision for this material
     this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaTest=0;this.premultipliedAlpha=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;}Material.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Material,isMaterial:true,onBeforeCompile:function onBeforeCompile()/* shaderobject, renderer */{},customProgramCacheKey:function customProgramCacheKey(){return this.onBeforeCompile.toString();},setValues:function setValues(values){if(values===undefined)return;for(var key in values){var newValue=values[key];if(newValue===undefined){console.warn("THREE.Material: '"+key+"' parameter is undefined.");continue;}// for backward compatability if shading is set in the constructor
     if(key==='shading'){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=newValue===FlatShading?true:false;continue;}var currentValue=this[key];if(currentValue===undefined){console.warn("THREE."+this.type+": '"+key+"' is not a property of this material.");continue;}if(currentValue&&currentValue.isColor){currentValue.set(newValue);}else if(currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3){currentValue.copy(newValue);}else{this[key]=newValue;}}},toJSON:function toJSON(meta){var isRoot=meta===undefined||typeof meta==='string';if(isRoot){meta={textures:{},images:{}};}var data={metadata:{version:4.5,type:'Material',generator:'Material.toJSON'}};// standard Material serialization
     data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.color&&this.color.isColor)data.color=this.color.getHex();if(this.roughness!==undefined)data.roughness=this.roughness;if(this.metalness!==undefined)data.metalness=this.metalness;if(this.sheen&&this.sheen.isColor)data.sheen=this.sheen.getHex();if(this.emissive&&this.emissive.isColor)data.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)data.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)data.specular=this.specular.getHex();if(this.shininess!==undefined)data.shininess=this.shininess;if(this.clearcoat!==undefined)data.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)data.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid;}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid;}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid;data.clearcoatNormalScale=this.clearcoatNormalScale.toArray();}if(this.map&&this.map.isTexture)data.map=this.map.toJSON(meta).uuid;if(this.matcap&&this.matcap.isTexture)data.matcap=this.matcap.toJSON(meta).uuid;if(this.alphaMap&&this.alphaMap.isTexture)data.alphaMap=this.alphaMap.toJSON(meta).uuid;if(this.lightMap&&this.lightMap.isTexture)data.lightMap=this.lightMap.toJSON(meta).uuid;if(this.aoMap&&this.aoMap.isTexture){data.aoMap=this.aoMap.toJSON(meta).uuid;data.aoMapIntensity=this.aoMapIntensity;}if(this.bumpMap&&this.bumpMap.isTexture){data.bumpMap=this.bumpMap.toJSON(meta).uuid;data.bumpScale=this.bumpScale;}if(this.normalMap&&this.normalMap.isTexture){data.normalMap=this.normalMap.toJSON(meta).uuid;data.normalMapType=this.normalMapType;data.normalScale=this.normalScale.toArray();}if(this.displacementMap&&this.displacementMap.isTexture){data.displacementMap=this.displacementMap.toJSON(meta).uuid;data.displacementScale=this.displacementScale;data.displacementBias=this.displacementBias;}if(this.roughnessMap&&this.roughnessMap.isTexture)data.roughnessMap=this.roughnessMap.toJSON(meta).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)data.metalnessMap=this.metalnessMap.toJSON(meta).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)data.emissiveMap=this.emissiveMap.toJSON(meta).uuid;if(this.specularMap&&this.specularMap.isTexture)data.specularMap=this.specularMap.toJSON(meta).uuid;if(this.envMap&&this.envMap.isTexture){data.envMap=this.envMap.toJSON(meta).uuid;data.reflectivity=this.reflectivity;// Scale behind envMap
     data.refractionRatio=this.refractionRatio;if(this.combine!==undefined)data.combine=this.combine;if(this.envMapIntensity!==undefined)data.envMapIntensity=this.envMapIntensity;}if(this.gradientMap&&this.gradientMap.isTexture){data.gradientMap=this.gradientMap.toJSON(meta).uuid;}if(this.size!==undefined)data.size=this.size;if(this.sizeAttenuation!==undefined)data.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)data.blending=this.blending;if(this.flatShading===true)data.flatShading=this.flatShading;if(this.side!==FrontSide)data.side=this.side;if(this.vertexColors)data.vertexColors=true;if(this.opacity<1)data.opacity=this.opacity;if(this.transparent===true)data.transparent=this.transparent;data.depthFunc=this.depthFunc;data.depthTest=this.depthTest;data.depthWrite=this.depthWrite;data.stencilWrite=this.stencilWrite;data.stencilWriteMask=this.stencilWriteMask;data.stencilFunc=this.stencilFunc;data.stencilRef=this.stencilRef;data.stencilFuncMask=this.stencilFuncMask;data.stencilFail=this.stencilFail;data.stencilZFail=this.stencilZFail;data.stencilZPass=this.stencilZPass;// rotation (SpriteMaterial)
     if(this.rotation&&this.rotation!==0)data.rotation=this.rotation;if(this.polygonOffset===true)data.polygonOffset=true;if(this.polygonOffsetFactor!==0)data.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)data.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth&&this.linewidth!==1)data.linewidth=this.linewidth;if(this.dashSize!==undefined)data.dashSize=this.dashSize;if(this.gapSize!==undefined)data.gapSize=this.gapSize;if(this.scale!==undefined)data.scale=this.scale;if(this.dithering===true)data.dithering=true;if(this.alphaTest>0)data.alphaTest=this.alphaTest;if(this.premultipliedAlpha===true)data.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)data.wireframe=this.wireframe;if(this.wireframeLinewidth>1)data.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=='round')data.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=='round')data.wireframeLinejoin=this.wireframeLinejoin;if(this.morphTargets===true)data.morphTargets=true;if(this.morphNormals===true)data.morphNormals=true;if(this.skinning===true)data.skinning=true;if(this.visible===false)data.visible=false;if(this.toneMapped===false)data.toneMapped=false;if(JSON.stringify(this.userData)!=='{}')data.userData=this.userData;// TODO: Copied from Object3D.toJSON
     function extractFromCache(cache){var values=[];for(var key in cache){var _data=cache[key];delete _data.metadata;values.push(_data);}return values;}if(isRoot){var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);if(textures.length>0)data.textures=textures;if(images.length>0)data.images=images;}return data;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.name=source.name;this.fog=source.fog;this.blending=source.blending;this.side=source.side;this.flatShading=source.flatShading;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=source.depthWrite;this.stencilWriteMask=source.stencilWriteMask;this.stencilFunc=source.stencilFunc;this.stencilRef=source.stencilRef;this.stencilFuncMask=source.stencilFuncMask;this.stencilFail=source.stencilFail;this.stencilZFail=source.stencilZFail;this.stencilZPass=source.stencilZPass;this.stencilWrite=source.stencilWrite;var srcPlanes=source.clippingPlanes;var dstPlanes=null;if(srcPlanes!==null){var n=srcPlanes.length;dstPlanes=new Array(n);for(var _i25=0;_i25!==n;++_i25){dstPlanes[_i25]=srcPlanes[_i25].clone();}}this.clippingPlanes=dstPlanes;this.clipIntersection=source.clipIntersection;this.clipShadows=source.clipShadows;this.shadowSide=source.shadowSide;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.dithering=source.dithering;this.alphaTest=source.alphaTest;this.premultipliedAlpha=source.premultipliedAlpha;this.visible=source.visible;this.toneMapped=source.toneMapped;this.userData=JSON.parse(JSON.stringify(source.userData));return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});Object.defineProperty(Material.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});/**
          * parameters = {
          *  color: <hex>,
          *  opacity: <float>,
          *  map: new THREE.Texture( <Image> ),
          *
          *  lightMap: new THREE.Texture( <Image> ),
          *  lightMapIntensity: <float>
          *
          *  aoMap: new THREE.Texture( <Image> ),
          *  aoMapIntensity: <float>
          *
          *  specularMap: new THREE.Texture( <Image> ),
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
          *  combine: THREE.Multiply,
          *  reflectivity: <float>,
          *  refractionRatio: <float>,
          *
          *  depthTest: <bool>,
          *  depthWrite: <bool>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>
          * }
          */function MeshBasicMaterial(parameters){Material.call(this);this.type='MeshBasicMaterial';this.color=new Color(0xffffff);// emissive
     this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.setValues(parameters);}MeshBasicMaterial.prototype=Object.create(Material.prototype);MeshBasicMaterial.prototype.constructor=MeshBasicMaterial;MeshBasicMaterial.prototype.isMeshBasicMaterial=true;MeshBasicMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;return this;};var _vector$3=new Vector3();var _vector2$1=new Vector2();function BufferAttribute(array,itemSize,normalized){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.name='';this.array=array;this.itemSize=itemSize;this.count=array!==undefined?array.length/itemSize:0;this.normalized=normalized===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;}Object.defineProperty(BufferAttribute.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(BufferAttribute.prototype,{isBufferAttribute:true,onUploadCallback:function onUploadCallback(){},setUsage:function setUsage(value){this.usage=value;return this;},copy:function copy(source){this.name=source.name;this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.count=source.count;this.normalized=source.normalized;this.usage=source.usage;return this;},copyAt:function copyAt(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(var _i26=0,l=this.itemSize;_i26<l;_i26++){this.array[index1+_i26]=attribute.array[index2+_i26];}return this;},copyArray:function copyArray(array){this.array.set(array);return this;},copyColorsArray:function copyColorsArray(colors){var array=this.array;var offset=0;for(var _i27=0,l=colors.length;_i27<l;_i27++){var color=colors[_i27];if(color===undefined){console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined',_i27);color=new Color();}array[offset++]=color.r;array[offset++]=color.g;array[offset++]=color.b;}return this;},copyVector2sArray:function copyVector2sArray(vectors){var array=this.array;var offset=0;for(var _i28=0,l=vectors.length;_i28<l;_i28++){var vector=vectors[_i28];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined',_i28);vector=new Vector2();}array[offset++]=vector.x;array[offset++]=vector.y;}return this;},copyVector3sArray:function copyVector3sArray(vectors){var array=this.array;var offset=0;for(var _i29=0,l=vectors.length;_i29<l;_i29++){var vector=vectors[_i29];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined',_i29);vector=new Vector3();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;}return this;},copyVector4sArray:function copyVector4sArray(vectors){var array=this.array;var offset=0;for(var _i30=0,l=vectors.length;_i30<l;_i30++){var vector=vectors[_i30];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined',_i30);vector=new Vector4();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;array[offset++]=vector.w;}return this;},applyMatrix3:function applyMatrix3(m){if(this.itemSize===2){for(var _i31=0,l=this.count;_i31<l;_i31++){_vector2$1.fromBufferAttribute(this,_i31);_vector2$1.applyMatrix3(m);this.setXY(_i31,_vector2$1.x,_vector2$1.y);}}else if(this.itemSize===3){for(var _i32=0,_l3=this.count;_i32<_l3;_i32++){_vector$3.fromBufferAttribute(this,_i32);_vector$3.applyMatrix3(m);this.setXYZ(_i32,_vector$3.x,_vector$3.y,_vector$3.z);}}return this;},applyMatrix4:function applyMatrix4(m){for(var _i33=0,l=this.count;_i33<l;_i33++){_vector$3.x=this.getX(_i33);_vector$3.y=this.getY(_i33);_vector$3.z=this.getZ(_i33);_vector$3.applyMatrix4(m);this.setXYZ(_i33,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},applyNormalMatrix:function applyNormalMatrix(m){for(var _i34=0,l=this.count;_i34<l;_i34++){_vector$3.x=this.getX(_i34);_vector$3.y=this.getY(_i34);_vector$3.z=this.getZ(_i34);_vector$3.applyNormalMatrix(m);this.setXYZ(_i34,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},transformDirection:function transformDirection(m){for(var _i35=0,l=this.count;_i35<l;_i35++){_vector$3.x=this.getX(_i35);_vector$3.y=this.getY(_i35);_vector$3.z=this.getZ(_i35);_vector$3.transformDirection(m);this.setXYZ(_i35,_vector$3.x,_vector$3.y,_vector$3.z);}return this;},set:function set(value,offset){if(offset===undefined)offset=0;this.array.set(value,offset);return this;},getX:function getX(index){return this.array[index*this.itemSize];},setX:function setX(index,x){this.array[index*this.itemSize]=x;return this;},getY:function getY(index){return this.array[index*this.itemSize+1];},setY:function setY(index,y){this.array[index*this.itemSize+1]=y;return this;},getZ:function getZ(index){return this.array[index*this.itemSize+2];},setZ:function setZ(index,z){this.array[index*this.itemSize+2]=z;return this;},getW:function getW(index){return this.array[index*this.itemSize+3];},setW:function setW(index,w){this.array[index*this.itemSize+3]=w;return this;},setXY:function setXY(index,x,y){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;return this;},setXYZ:function setXYZ(index,x,y,z){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this;},setXYZW:function setXYZW(index,x,y,z,w){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this;},onUpload:function onUpload(callback){this.onUploadCallback=callback;return this;},clone:function clone(){return new this.constructor(this.array,this.itemSize).copy(this);},toJSON:function toJSON(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};}});//
     function Int8BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int8Array(array),itemSize,normalized);}Int8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int8BufferAttribute.prototype.constructor=Int8BufferAttribute;function Uint8BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint8Array(array),itemSize,normalized);}Uint8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8BufferAttribute.prototype.constructor=Uint8BufferAttribute;function Uint8ClampedBufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint8ClampedArray(array),itemSize,normalized);}Uint8ClampedBufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8ClampedBufferAttribute.prototype.constructor=Uint8ClampedBufferAttribute;function Int16BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int16Array(array),itemSize,normalized);}Int16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int16BufferAttribute.prototype.constructor=Int16BufferAttribute;function Uint16BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint16Array(array),itemSize,normalized);}Uint16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint16BufferAttribute.prototype.constructor=Uint16BufferAttribute;function Int32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int32Array(array),itemSize,normalized);}Int32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int32BufferAttribute.prototype.constructor=Int32BufferAttribute;function Uint32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint32Array(array),itemSize,normalized);}Uint32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint32BufferAttribute.prototype.constructor=Uint32BufferAttribute;function Float32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Float32Array(array),itemSize,normalized);}Float32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float32BufferAttribute.prototype.constructor=Float32BufferAttribute;function Float64BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Float64Array(array),itemSize,normalized);}Float64BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float64BufferAttribute.prototype.constructor=Float64BufferAttribute;var DirectGeometry=/*#__PURE__*/function(){function DirectGeometry(){_classCallCheck(this,DirectGeometry);this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];// this.lineDistances = [];
     this.boundingBox=null;this.boundingSphere=null;// update flags
     this.verticesNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.uvsNeedUpdate=false;this.groupsNeedUpdate=false;}_createClass(DirectGeometry,[{key:"computeGroups",value:function computeGroups(geometry){var groups=[];var group,i;var materialIndex=undefined;var faces=geometry.faces;for(i=0;i<faces.length;i++){var face=faces[i];// materials
     if(face.materialIndex!==materialIndex){materialIndex=face.materialIndex;if(group!==undefined){group.count=i*3-group.start;groups.push(group);}group={start:i*3,materialIndex:materialIndex};}}if(group!==undefined){group.count=i*3-group.start;groups.push(group);}this.groups=groups;}},{key:"fromGeometry",value:function fromGeometry(geometry){var faces=geometry.faces;var vertices=geometry.vertices;var faceVertexUvs=geometry.faceVertexUvs;var hasFaceVertexUv=faceVertexUvs[0]&&faceVertexUvs[0].length>0;var hasFaceVertexUv2=faceVertexUvs[1]&&faceVertexUvs[1].length>0;// morphs
     var morphTargets=geometry.morphTargets;var morphTargetsLength=morphTargets.length;var morphTargetsPosition;if(morphTargetsLength>0){morphTargetsPosition=[];for(var _i36=0;_i36<morphTargetsLength;_i36++){morphTargetsPosition[_i36]={name:morphTargets[_i36].name,data:[]};}this.morphTargets.position=morphTargetsPosition;}var morphNormals=geometry.morphNormals;var morphNormalsLength=morphNormals.length;var morphTargetsNormal;if(morphNormalsLength>0){morphTargetsNormal=[];for(var _i37=0;_i37<morphNormalsLength;_i37++){morphTargetsNormal[_i37]={name:morphNormals[_i37].name,data:[]};}this.morphTargets.normal=morphTargetsNormal;}// skins
     var skinIndices=geometry.skinIndices;var skinWeights=geometry.skinWeights;var hasSkinIndices=skinIndices.length===vertices.length;var hasSkinWeights=skinWeights.length===vertices.length;//
     if(vertices.length>0&&faces.length===0){console.error('THREE.DirectGeometry: Faceless geometries are not supported.');}for(var _i38=0;_i38<faces.length;_i38++){var face=faces[_i38];this.vertices.push(vertices[face.a],vertices[face.b],vertices[face.c]);var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){this.normals.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]);}else{var normal=face.normal;this.normals.push(normal,normal,normal);}var vertexColors=face.vertexColors;if(vertexColors.length===3){this.colors.push(vertexColors[0],vertexColors[1],vertexColors[2]);}else{var color=face.color;this.colors.push(color,color,color);}if(hasFaceVertexUv===true){var vertexUvs=faceVertexUvs[0][_i38];if(vertexUvs!==undefined){this.uvs.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]);}else{console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ',_i38);this.uvs.push(new Vector2(),new Vector2(),new Vector2());}}if(hasFaceVertexUv2===true){var _vertexUvs=faceVertexUvs[1][_i38];if(_vertexUvs!==undefined){this.uvs2.push(_vertexUvs[0],_vertexUvs[1],_vertexUvs[2]);}else{console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ',_i38);this.uvs2.push(new Vector2(),new Vector2(),new Vector2());}}// morphs
     for(var j=0;j<morphTargetsLength;j++){var morphTarget=morphTargets[j].vertices;morphTargetsPosition[j].data.push(morphTarget[face.a],morphTarget[face.b],morphTarget[face.c]);}for(var _j2=0;_j2<morphNormalsLength;_j2++){var morphNormal=morphNormals[_j2].vertexNormals[_i38];morphTargetsNormal[_j2].data.push(morphNormal.a,morphNormal.b,morphNormal.c);}// skins
     if(hasSkinIndices){this.skinIndices.push(skinIndices[face.a],skinIndices[face.b],skinIndices[face.c]);}if(hasSkinWeights){this.skinWeights.push(skinWeights[face.a],skinWeights[face.b],skinWeights[face.c]);}}this.computeGroups(geometry);this.verticesNeedUpdate=geometry.verticesNeedUpdate;this.normalsNeedUpdate=geometry.normalsNeedUpdate;this.colorsNeedUpdate=geometry.colorsNeedUpdate;this.uvsNeedUpdate=geometry.uvsNeedUpdate;this.groupsNeedUpdate=geometry.groupsNeedUpdate;if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}return this;}}]);return DirectGeometry;}();function arrayMax(array){if(array.length===0)return-Infinity;var max=array[0];for(var _i39=1,l=array.length;_i39<l;++_i39){if(array[_i39]>max)max=array[_i39];}return max;}var _bufferGeometryId=1;// BufferGeometry uses odd numbers as Id
     var _m1$2=new Matrix4();var _obj=new Object3D();var _offset=new Vector3();var _box$2=new Box3();var _boxMorphTargets=new Box3();var _vector$4=new Vector3();function BufferGeometry(){Object.defineProperty(this,'id',{value:_bufferGeometryId+=2});this.uuid=MathUtils.generateUUID();this.name='';this.type='BufferGeometry';this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={};}BufferGeometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:BufferGeometry,isBufferGeometry:true,getIndex:function getIndex(){return this.index;},setIndex:function setIndex(index){if(Array.isArray(index)){this.index=new(arrayMax(index)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(index,1);}else{this.index=index;}return this;},getAttribute:function getAttribute(name){return this.attributes[name];},setAttribute:function setAttribute(name,attribute){this.attributes[name]=attribute;return this;},deleteAttribute:function deleteAttribute(name){delete this.attributes[name];return this;},addGroup:function addGroup(start,count,materialIndex){this.groups.push({start:start,count:count,materialIndex:materialIndex!==undefined?materialIndex:0});},clearGroups:function clearGroups(){this.groups=[];},setDrawRange:function setDrawRange(start,count){this.drawRange.start=start;this.drawRange.count=count;},applyMatrix4:function applyMatrix4(matrix){var position=this.attributes.position;if(position!==undefined){position.applyMatrix4(matrix);position.needsUpdate=true;}var normal=this.attributes.normal;if(normal!==undefined){var normalMatrix=new Matrix3().getNormalMatrix(matrix);normal.applyNormalMatrix(normalMatrix);normal.needsUpdate=true;}var tangent=this.attributes.tangent;if(tangent!==undefined){tangent.transformDirection(matrix);tangent.needsUpdate=true;}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}return this;},rotateX:function rotateX(angle){// rotate geometry around world x-axis
     _m1$2.makeRotationX(angle);this.applyMatrix4(_m1$2);return this;},rotateY:function rotateY(angle){// rotate geometry around world y-axis
     _m1$2.makeRotationY(angle);this.applyMatrix4(_m1$2);return this;},rotateZ:function rotateZ(angle){// rotate geometry around world z-axis
     _m1$2.makeRotationZ(angle);this.applyMatrix4(_m1$2);return this;},translate:function translate(x,y,z){// translate geometry
     _m1$2.makeTranslation(x,y,z);this.applyMatrix4(_m1$2);return this;},scale:function scale(x,y,z){// scale geometry
     _m1$2.makeScale(x,y,z);this.applyMatrix4(_m1$2);return this;},lookAt:function lookAt(vector){_obj.lookAt(vector);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this;},center:function center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this;},setFromObject:function setFromObject(object){// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
     var geometry=object.geometry;if(object.isPoints||object.isLine){var positions=new Float32BufferAttribute(geometry.vertices.length*3,3);var colors=new Float32BufferAttribute(geometry.colors.length*3,3);this.setAttribute('position',positions.copyVector3sArray(geometry.vertices));this.setAttribute('color',colors.copyColorsArray(geometry.colors));if(geometry.lineDistances&&geometry.lineDistances.length===geometry.vertices.length){var lineDistances=new Float32BufferAttribute(geometry.lineDistances.length,1);this.setAttribute('lineDistance',lineDistances.copyArray(geometry.lineDistances));}if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}}else if(object.isMesh){if(geometry&&geometry.isGeometry){this.fromGeometry(geometry);}}return this;},setFromPoints:function setFromPoints(points){var position=[];for(var _i40=0,l=points.length;_i40<l;_i40++){var point=points[_i40];position.push(point.x,point.y,point.z||0);}this.setAttribute('position',new Float32BufferAttribute(position,3));return this;},updateFromObject:function updateFromObject(object){var geometry=object.geometry;if(object.isMesh){var direct=geometry.__directGeometry;if(geometry.elementsNeedUpdate===true){direct=undefined;geometry.elementsNeedUpdate=false;}if(direct===undefined){return this.fromGeometry(geometry);}direct.verticesNeedUpdate=geometry.verticesNeedUpdate;direct.normalsNeedUpdate=geometry.normalsNeedUpdate;direct.colorsNeedUpdate=geometry.colorsNeedUpdate;direct.uvsNeedUpdate=geometry.uvsNeedUpdate;direct.groupsNeedUpdate=geometry.groupsNeedUpdate;geometry.verticesNeedUpdate=false;geometry.normalsNeedUpdate=false;geometry.colorsNeedUpdate=false;geometry.uvsNeedUpdate=false;geometry.groupsNeedUpdate=false;geometry=direct;}if(geometry.verticesNeedUpdate===true){var attribute=this.attributes.position;if(attribute!==undefined){attribute.copyVector3sArray(geometry.vertices);attribute.needsUpdate=true;}geometry.verticesNeedUpdate=false;}if(geometry.normalsNeedUpdate===true){var _attribute=this.attributes.normal;if(_attribute!==undefined){_attribute.copyVector3sArray(geometry.normals);_attribute.needsUpdate=true;}geometry.normalsNeedUpdate=false;}if(geometry.colorsNeedUpdate===true){var _attribute2=this.attributes.color;if(_attribute2!==undefined){_attribute2.copyColorsArray(geometry.colors);_attribute2.needsUpdate=true;}geometry.colorsNeedUpdate=false;}if(geometry.uvsNeedUpdate){var _attribute3=this.attributes.uv;if(_attribute3!==undefined){_attribute3.copyVector2sArray(geometry.uvs);_attribute3.needsUpdate=true;}geometry.uvsNeedUpdate=false;}if(geometry.lineDistancesNeedUpdate){var _attribute4=this.attributes.lineDistance;if(_attribute4!==undefined){_attribute4.copyArray(geometry.lineDistances);_attribute4.needsUpdate=true;}geometry.lineDistancesNeedUpdate=false;}if(geometry.groupsNeedUpdate){geometry.computeGroups(object.geometry);this.groups=geometry.groups;geometry.groupsNeedUpdate=false;}return this;},fromGeometry:function fromGeometry(geometry){geometry.__directGeometry=new DirectGeometry().fromGeometry(geometry);return this.fromDirectGeometry(geometry.__directGeometry);},fromDirectGeometry:function fromDirectGeometry(geometry){var positions=new Float32Array(geometry.vertices.length*3);this.setAttribute('position',new BufferAttribute(positions,3).copyVector3sArray(geometry.vertices));if(geometry.normals.length>0){var normals=new Float32Array(geometry.normals.length*3);this.setAttribute('normal',new BufferAttribute(normals,3).copyVector3sArray(geometry.normals));}if(geometry.colors.length>0){var colors=new Float32Array(geometry.colors.length*3);this.setAttribute('color',new BufferAttribute(colors,3).copyColorsArray(geometry.colors));}if(geometry.uvs.length>0){var uvs=new Float32Array(geometry.uvs.length*2);this.setAttribute('uv',new BufferAttribute(uvs,2).copyVector2sArray(geometry.uvs));}if(geometry.uvs2.length>0){var uvs2=new Float32Array(geometry.uvs2.length*2);this.setAttribute('uv2',new BufferAttribute(uvs2,2).copyVector2sArray(geometry.uvs2));}// groups
     this.groups=geometry.groups;// morphs
     for(var name in geometry.morphTargets){var array=[];var morphTargets=geometry.morphTargets[name];for(var _i41=0,l=morphTargets.length;_i41<l;_i41++){var morphTarget=morphTargets[_i41];var attribute=new Float32BufferAttribute(morphTarget.data.length*3,3);attribute.name=morphTarget.name;array.push(attribute.copyVector3sArray(morphTarget.data));}this.morphAttributes[name]=array;}// skinning
     if(geometry.skinIndices.length>0){var skinIndices=new Float32BufferAttribute(geometry.skinIndices.length*4,4);this.setAttribute('skinIndex',skinIndices.copyVector4sArray(geometry.skinIndices));}if(geometry.skinWeights.length>0){var skinWeights=new Float32BufferAttribute(geometry.skinWeights.length*4,4);this.setAttribute('skinWeight',skinWeights.copyVector4sArray(geometry.skinWeights));}//
     if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}return this;},computeBoundingBox:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}var position=this.attributes.position;var morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return;}if(position!==undefined){this.boundingBox.setFromBufferAttribute(position);// process morph attributes if present
     if(morphAttributesPosition){for(var _i42=0,il=morphAttributesPosition.length;_i42<il;_i42++){var morphAttribute=morphAttributesPosition[_i42];_box$2.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$4.addVectors(this.boundingBox.min,_box$2.min);this.boundingBox.expandByPoint(_vector$4);_vector$4.addVectors(this.boundingBox.max,_box$2.max);this.boundingBox.expandByPoint(_vector$4);}else{this.boundingBox.expandByPoint(_box$2.min);this.boundingBox.expandByPoint(_box$2.max);}}}}else{this.boundingBox.makeEmpty();}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this);}},computeBoundingSphere:function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}var position=this.attributes.position;var morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new Vector3(),Infinity);return;}if(position){// first, find the center of the bounding sphere
     var center=this.boundingSphere.center;_box$2.setFromBufferAttribute(position);// process morph attributes if present
     if(morphAttributesPosition){for(var _i43=0,il=morphAttributesPosition.length;_i43<il;_i43++){var morphAttribute=morphAttributesPosition[_i43];_boxMorphTargets.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$4.addVectors(_box$2.min,_boxMorphTargets.min);_box$2.expandByPoint(_vector$4);_vector$4.addVectors(_box$2.max,_boxMorphTargets.max);_box$2.expandByPoint(_vector$4);}else{_box$2.expandByPoint(_boxMorphTargets.min);_box$2.expandByPoint(_boxMorphTargets.max);}}}_box$2.getCenter(center);// second, try to find a boundingSphere with a radius smaller than the
     // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
     var maxRadiusSq=0;for(var _i44=0,_il2=position.count;_i44<_il2;_i44++){_vector$4.fromBufferAttribute(position,_i44);maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$4));}// process morph attributes if present
     if(morphAttributesPosition){for(var _i45=0,_il3=morphAttributesPosition.length;_i45<_il3;_i45++){var _morphAttribute=morphAttributesPosition[_i45];var morphTargetsRelative=this.morphTargetsRelative;for(var j=0,jl=_morphAttribute.count;j<jl;j++){_vector$4.fromBufferAttribute(_morphAttribute,j);if(morphTargetsRelative){_offset.fromBufferAttribute(position,j);_vector$4.add(_offset);}maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$4));}}}this.boundingSphere.radius=Math.sqrt(maxRadiusSq);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this);}}},computeFaceNormals:function computeFaceNormals(){// backwards compatibility
     },computeVertexNormals:function computeVertexNormals(){var index=this.index;var positionAttribute=this.getAttribute('position');if(positionAttribute!==undefined){var normalAttribute=this.getAttribute('normal');if(normalAttribute===undefined){normalAttribute=new BufferAttribute(new Float32Array(positionAttribute.count*3),3);this.setAttribute('normal',normalAttribute);}else{// reset existing normals to zero
     for(var _i46=0,il=normalAttribute.count;_i46<il;_i46++){normalAttribute.setXYZ(_i46,0,0,0);}}var pA=new Vector3(),pB=new Vector3(),pC=new Vector3();var nA=new Vector3(),nB=new Vector3(),nC=new Vector3();var cb=new Vector3(),ab=new Vector3();// indexed elements
     if(index){for(var _i47=0,_il4=index.count;_i47<_il4;_i47+=3){var vA=index.getX(_i47+0);var vB=index.getX(_i47+1);var vC=index.getX(_i47+2);pA.fromBufferAttribute(positionAttribute,vA);pB.fromBufferAttribute(positionAttribute,vB);pC.fromBufferAttribute(positionAttribute,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);nA.fromBufferAttribute(normalAttribute,vA);nB.fromBufferAttribute(normalAttribute,vB);nC.fromBufferAttribute(normalAttribute,vC);nA.add(cb);nB.add(cb);nC.add(cb);normalAttribute.setXYZ(vA,nA.x,nA.y,nA.z);normalAttribute.setXYZ(vB,nB.x,nB.y,nB.z);normalAttribute.setXYZ(vC,nC.x,nC.y,nC.z);}}else{// non-indexed elements (unconnected triangle soup)
     for(var _i48=0,_il5=positionAttribute.count;_i48<_il5;_i48+=3){pA.fromBufferAttribute(positionAttribute,_i48+0);pB.fromBufferAttribute(positionAttribute,_i48+1);pC.fromBufferAttribute(positionAttribute,_i48+2);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normalAttribute.setXYZ(_i48+0,cb.x,cb.y,cb.z);normalAttribute.setXYZ(_i48+1,cb.x,cb.y,cb.z);normalAttribute.setXYZ(_i48+2,cb.x,cb.y,cb.z);}}this.normalizeNormals();normalAttribute.needsUpdate=true;}},merge:function merge(geometry,offset){if(!(geometry&&geometry.isBufferGeometry)){console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',geometry);return;}if(offset===undefined){offset=0;console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '+'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');}var attributes=this.attributes;for(var key in attributes){if(geometry.attributes[key]===undefined)continue;var attribute1=attributes[key];var attributeArray1=attribute1.array;var attribute2=geometry.attributes[key];var attributeArray2=attribute2.array;var attributeOffset=attribute2.itemSize*offset;var length=Math.min(attributeArray2.length,attributeArray1.length-attributeOffset);for(var _i49=0,j=attributeOffset;_i49<length;_i49++,j++){attributeArray1[j]=attributeArray2[_i49];}}return this;},normalizeNormals:function normalizeNormals(){var normals=this.attributes.normal;for(var _i50=0,il=normals.count;_i50<il;_i50++){_vector$4.fromBufferAttribute(normals,_i50);_vector$4.normalize();normals.setXYZ(_i50,_vector$4.x,_vector$4.y,_vector$4.z);}},toNonIndexed:function toNonIndexed(){function convertBufferAttribute(attribute,indices){var array=attribute.array;var itemSize=attribute.itemSize;var normalized=attribute.normalized;var array2=new array.constructor(indices.length*itemSize);var index=0,index2=0;for(var _i51=0,l=indices.length;_i51<l;_i51++){index=indices[_i51]*itemSize;for(var j=0;j<itemSize;j++){array2[index2++]=array[index++];}}return new BufferAttribute(array2,itemSize,normalized);}//
     if(this.index===null){console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');return this;}var geometry2=new BufferGeometry();var indices=this.index.array;var attributes=this.attributes;// attributes
     for(var name in attributes){var attribute=attributes[name];var newAttribute=convertBufferAttribute(attribute,indices);geometry2.setAttribute(name,newAttribute);}// morph attributes
     var morphAttributes=this.morphAttributes;for(var _name in morphAttributes){var morphArray=[];var morphAttribute=morphAttributes[_name];// morphAttribute: array of Float32BufferAttributes
     for(var _i52=0,il=morphAttribute.length;_i52<il;_i52++){var _attribute5=morphAttribute[_i52];var _newAttribute=convertBufferAttribute(_attribute5,indices);morphArray.push(_newAttribute);}geometry2.morphAttributes[_name]=morphArray;}geometry2.morphTargetsRelative=this.morphTargetsRelative;// groups
     var groups=this.groups;for(var _i53=0,l=groups.length;_i53<l;_i53++){var group=groups[_i53];geometry2.addGroup(group.start,group.count,group.materialIndex);}return geometry2;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'BufferGeometry',generator:'BufferGeometry.toJSON'}};// standard BufferGeometry serialization
     data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(Object.keys(this.userData).length>0)data.userData=this.userData;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}data.data={attributes:{}};var index=this.index;if(index!==null){data.data.index={type:index.array.constructor.name,array:Array.prototype.slice.call(index.array)};}var attributes=this.attributes;for(var _key in attributes){var attribute=attributes[_key];var attributeData=attribute.toJSON(data.data);if(attribute.name!=='')attributeData.name=attribute.name;data.data.attributes[_key]=attributeData;}var morphAttributes={};var hasMorphAttributes=false;for(var _key2 in this.morphAttributes){var attributeArray=this.morphAttributes[_key2];var array=[];for(var _i54=0,il=attributeArray.length;_i54<il;_i54++){var _attribute6=attributeArray[_i54];var _attributeData=_attribute6.toJSON(data.data);if(_attribute6.name!=='')_attributeData.name=_attribute6.name;array.push(_attributeData);}if(array.length>0){morphAttributes[_key2]=array;hasMorphAttributes=true;}}if(hasMorphAttributes){data.data.morphAttributes=morphAttributes;data.data.morphTargetsRelative=this.morphTargetsRelative;}var groups=this.groups;if(groups.length>0){data.data.groups=JSON.parse(JSON.stringify(groups));}var boundingSphere=this.boundingSphere;if(boundingSphere!==null){data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius};}return data;},clone:function clone(){/*
                    // Handle primitives
     
                    const parameters = this.parameters;
     
                    if ( parameters !== undefined ) {
     
                    const values = [];
     
                    for ( const key in parameters ) {
     
                    values.push( parameters[ key ] );
     
                    }
     
                    const geometry = Object.create( this.constructor.prototype );
                    this.constructor.apply( geometry, values );
                    return geometry;
     
                    }
     
                    return new this.constructor().copy( this );
                    */return new BufferGeometry().copy(this);},copy:function copy(source){// reset
     this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;// used for storing cloned, shared data
     var data={};// name
     this.name=source.name;// index
     var index=source.index;if(index!==null){this.setIndex(index.clone(data));}// attributes
     var attributes=source.attributes;for(var name in attributes){var attribute=attributes[name];this.setAttribute(name,attribute.clone(data));}// morph attributes
     var morphAttributes=source.morphAttributes;for(var _name2 in morphAttributes){var array=[];var morphAttribute=morphAttributes[_name2];// morphAttribute: array of Float32BufferAttributes
     for(var _i55=0,l=morphAttribute.length;_i55<l;_i55++){array.push(morphAttribute[_i55].clone(data));}this.morphAttributes[_name2]=array;}this.morphTargetsRelative=source.morphTargetsRelative;// groups
     var groups=source.groups;for(var _i56=0,_l4=groups.length;_i56<_l4;_i56++){var group=groups[_i56];this.addGroup(group.start,group.count,group.materialIndex);}// bounding box
     var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
     var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// draw range
     this.drawRange.start=source.drawRange.start;this.drawRange.count=source.drawRange.count;// user data
     this.userData=source.userData;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});var _inverseMatrix=new Matrix4();var _ray=new Ray();var _sphere=new Sphere();var _vA=new Vector3();var _vB=new Vector3();var _vC=new Vector3();var _tempA=new Vector3();var _tempB=new Vector3();var _tempC=new Vector3();var _morphA=new Vector3();var _morphB=new Vector3();var _morphC=new Vector3();var _uvA=new Vector2();var _uvB=new Vector2();var _uvC=new Vector2();var _intersectionPoint=new Vector3();var _intersectionPointWorld=new Vector3();function Mesh(geometry,material){Object3D.call(this);this.type='Mesh';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new MeshBasicMaterial();this.updateMorphTargets();}Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);if(source.morphTargetInfluences!==undefined){this.morphTargetInfluences=source.morphTargetInfluences.slice();}if(source.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary);}this.material=source.material;this.geometry=source.geometry;return this;},updateMorphTargets:function updateMorphTargets(){var geometry=this.geometry;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var m=0,ml=morphAttribute.length;m<ml;m++){var name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}},raycast:function raycast(raycaster,intersects){var geometry=this.geometry;var material=this.material;var matrixWorld=this.matrixWorld;if(material===undefined)return;// Checking boundingSphere distance to ray
     if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere.copy(geometry.boundingSphere);_sphere.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(_sphere)===false)return;//
     _inverseMatrix.getInverse(matrixWorld);_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);// Check boundingBox before continuing
     if(geometry.boundingBox!==null){if(_ray.intersectsBox(geometry.boundingBox)===false)return;}var intersection;if(geometry.isBufferGeometry){var index=geometry.index;var position=geometry.attributes.position;var morphPosition=geometry.morphAttributes.position;var morphTargetsRelative=geometry.morphTargetsRelative;var uv=geometry.attributes.uv;var uv2=geometry.attributes.uv2;var groups=geometry.groups;var drawRange=geometry.drawRange;if(index!==null){// indexed buffer geometry
     if(Array.isArray(material)){for(var _i57=0,il=groups.length;_i57<il;_i57++){var group=groups[_i57];var groupMaterial=material[group.materialIndex];var start=Math.max(group.start,drawRange.start);var end=Math.min(group.start+group.count,drawRange.start+drawRange.count);for(var j=start,jl=end;j<jl;j+=3){var a=index.getX(j);var b=index.getX(j+1);var c=index.getX(j+2);intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in indexed buffer semantics
     intersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else{var _start2=Math.max(0,drawRange.start);var _end2=Math.min(index.count,drawRange.start+drawRange.count);for(var _i58=_start2,_il6=_end2;_i58<_il6;_i58+=3){var _a2=index.getX(_i58);var _b2=index.getX(_i58+1);var _c2=index.getX(_i58+2);intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,_a2,_b2,_c2);if(intersection){intersection.faceIndex=Math.floor(_i58/3);// triangle number in indexed buffer semantics
     intersects.push(intersection);}}}}else if(position!==undefined){// non-indexed buffer geometry
     if(Array.isArray(material)){for(var _i59=0,_il7=groups.length;_i59<_il7;_i59++){var _group=groups[_i59];var _groupMaterial=material[_group.materialIndex];var _start3=Math.max(_group.start,drawRange.start);var _end3=Math.min(_group.start+_group.count,drawRange.start+drawRange.count);for(var _j3=_start3,_jl=_end3;_j3<_jl;_j3+=3){var _a3=_j3;var _b3=_j3+1;var _c3=_j3+2;intersection=checkBufferGeometryIntersection(this,_groupMaterial,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,_a3,_b3,_c3);if(intersection){intersection.faceIndex=Math.floor(_j3/3);// triangle number in non-indexed buffer semantics
     intersection.face.materialIndex=_group.materialIndex;intersects.push(intersection);}}}}else{var _start4=Math.max(0,drawRange.start);var _end4=Math.min(position.count,drawRange.start+drawRange.count);for(var _i60=_start4,_il8=_end4;_i60<_il8;_i60+=3){var _a4=_i60;var _b4=_i60+1;var _c4=_i60+2;intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray,position,morphPosition,morphTargetsRelative,uv,uv2,_a4,_b4,_c4);if(intersection){intersection.faceIndex=Math.floor(_i60/3);// triangle number in non-indexed buffer semantics
     intersects.push(intersection);}}}}}else if(geometry.isGeometry){var isMultiMaterial=Array.isArray(material);var vertices=geometry.vertices;var faces=geometry.faces;var uvs;var faceVertexUvs=geometry.faceVertexUvs[0];if(faceVertexUvs.length>0)uvs=faceVertexUvs;for(var f=0,fl=faces.length;f<fl;f++){var face=faces[f];var faceMaterial=isMultiMaterial?material[face.materialIndex]:material;if(faceMaterial===undefined)continue;var fvA=vertices[face.a];var fvB=vertices[face.b];var fvC=vertices[face.c];intersection=checkIntersection(this,faceMaterial,raycaster,_ray,fvA,fvB,fvC,_intersectionPoint);if(intersection){if(uvs&&uvs[f]){var uvs_f=uvs[f];_uvA.copy(uvs_f[0]);_uvB.copy(uvs_f[1]);_uvC.copy(uvs_f[2]);intersection.uv=Triangle.getUV(_intersectionPoint,fvA,fvB,fvC,_uvA,_uvB,_uvC,new Vector2());}intersection.face=face;intersection.faceIndex=f;intersects.push(intersection);}}}}});function checkIntersection(object,material,raycaster,ray,pA,pB,pC,point){var intersect;if(material.side===BackSide){intersect=ray.intersectTriangle(pC,pB,pA,true,point);}else{intersect=ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point);}if(intersect===null)return null;_intersectionPointWorld.copy(point);_intersectionPointWorld.applyMatrix4(object.matrixWorld);var distance=raycaster.ray.origin.distanceTo(_intersectionPointWorld);if(distance<raycaster.near||distance>raycaster.far)return null;return{distance:distance,point:_intersectionPointWorld.clone(),object:object};}function checkBufferGeometryIntersection(object,material,raycaster,ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c){_vA.fromBufferAttribute(position,a);_vB.fromBufferAttribute(position,b);_vC.fromBufferAttribute(position,c);var morphInfluences=object.morphTargetInfluences;if(material.morphTargets&&morphPosition&&morphInfluences){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(var _i61=0,il=morphPosition.length;_i61<il;_i61++){var influence=morphInfluences[_i61];var morphAttribute=morphPosition[_i61];if(influence===0)continue;_tempA.fromBufferAttribute(morphAttribute,a);_tempB.fromBufferAttribute(morphAttribute,b);_tempC.fromBufferAttribute(morphAttribute,c);if(morphTargetsRelative){_morphA.addScaledVector(_tempA,influence);_morphB.addScaledVector(_tempB,influence);_morphC.addScaledVector(_tempC,influence);}else{_morphA.addScaledVector(_tempA.sub(_vA),influence);_morphB.addScaledVector(_tempB.sub(_vB),influence);_morphC.addScaledVector(_tempC.sub(_vC),influence);}}_vA.add(_morphA);_vB.add(_morphB);_vC.add(_morphC);}if(object.isSkinnedMesh){object.boneTransform(a,_vA);object.boneTransform(b,_vB);object.boneTransform(c,_vC);}var intersection=checkIntersection(object,material,raycaster,ray,_vA,_vB,_vC,_intersectionPoint);if(intersection){if(uv){_uvA.fromBufferAttribute(uv,a);_uvB.fromBufferAttribute(uv,b);_uvC.fromBufferAttribute(uv,c);intersection.uv=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2());}if(uv2){_uvA.fromBufferAttribute(uv2,a);_uvB.fromBufferAttribute(uv2,b);_uvC.fromBufferAttribute(uv2,c);intersection.uv2=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2());}var face=new Face3(a,b,c);Triangle.getNormal(_vA,_vB,_vC,face.normal);intersection.face=face;}return intersection;}var BoxBufferGeometry=/*#__PURE__*/function(_BufferGeometry){_inherits(BoxBufferGeometry,_BufferGeometry);var _super2=_createSuper(BoxBufferGeometry);function BoxBufferGeometry(){var _this9;var width=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var widthSegments=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var heightSegments=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1;var depthSegments=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1;_classCallCheck(this,BoxBufferGeometry);_this9=_super2.call(this);_this9.type='BoxBufferGeometry';_this9.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};var scope=_assertThisInitialized(_this9);// segments
     widthSegments=Math.floor(widthSegments);heightSegments=Math.floor(heightSegments);depthSegments=Math.floor(depthSegments);// buffers
     var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
     var numberOfVertices=0;var groupStart=0;// build each side of the box geometry
     buildPlane('z','y','x',-1,-1,depth,height,width,depthSegments,heightSegments,0);// px
     buildPlane('z','y','x',1,-1,depth,height,-width,depthSegments,heightSegments,1);// nx
     buildPlane('x','z','y',1,1,width,depth,height,widthSegments,depthSegments,2);// py
     buildPlane('x','z','y',1,-1,width,depth,-height,widthSegments,depthSegments,3);// ny
     buildPlane('x','y','z',1,-1,width,height,depth,widthSegments,heightSegments,4);// pz
     buildPlane('x','y','z',-1,-1,width,height,-depth,widthSegments,heightSegments,5);// nz
     // build geometry
     _this9.setIndex(indices);_this9.setAttribute('position',new Float32BufferAttribute(vertices,3));_this9.setAttribute('normal',new Float32BufferAttribute(normals,3));_this9.setAttribute('uv',new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){var segmentWidth=width/gridX;var segmentHeight=height/gridY;var widthHalf=width/2;var heightHalf=height/2;var depthHalf=depth/2;var gridX1=gridX+1;var gridY1=gridY+1;var vertexCounter=0;var groupCount=0;var vector=new Vector3();// generate vertices, normals and uvs
     for(var iy=0;iy<gridY1;iy++){var y=iy*segmentHeight-heightHalf;for(var ix=0;ix<gridX1;ix++){var x=ix*segmentWidth-widthHalf;// set values to correct vector component
     vector[u]=x*udir;vector[v]=y*vdir;vector[w]=depthHalf;// now apply vector to vertex buffer
     vertices.push(vector.x,vector.y,vector.z);// set values to correct vector component
     vector[u]=0;vector[v]=0;vector[w]=depth>0?1:-1;// now apply vector to normal buffer
     normals.push(vector.x,vector.y,vector.z);// uvs
     uvs.push(ix/gridX);uvs.push(1-iy/gridY);// counters
     vertexCounter+=1;}}// indices
     // 1. you need three indices to draw a single face
     // 2. a single segment consists of two faces
     // 3. so we need to generate six (2*3) indices per segment
     for(var _iy=0;_iy<gridY;_iy++){for(var _ix=0;_ix<gridX;_ix++){var a=numberOfVertices+_ix+gridX1*_iy;var b=numberOfVertices+_ix+gridX1*(_iy+1);var c=numberOfVertices+(_ix+1)+gridX1*(_iy+1);var d=numberOfVertices+(_ix+1)+gridX1*_iy;// faces
     indices.push(a,b,d);indices.push(b,c,d);// increase counter
     groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
     scope.addGroup(groupStart,groupCount,materialIndex);// calculate new start value for groups
     groupStart+=groupCount;// update total number of vertices
     numberOfVertices+=vertexCounter;}return _this9;}return BoxBufferGeometry;}(BufferGeometry);/**
          * Uniform Utilities
          */function cloneUniforms(src){var dst={};for(var u in src){dst[u]={};for(var p in src[u]){var _property2=src[u][p];if(_property2&&(_property2.isColor||_property2.isMatrix3||_property2.isMatrix4||_property2.isVector2||_property2.isVector3||_property2.isVector4||_property2.isTexture)){dst[u][p]=_property2.clone();}else if(Array.isArray(_property2)){dst[u][p]=_property2.slice();}else{dst[u][p]=_property2;}}}return dst;}function mergeUniforms(uniforms){var merged={};for(var u=0;u<uniforms.length;u++){var _tmp=cloneUniforms(uniforms[u]);for(var p in _tmp){merged[p]=_tmp[p];}}return merged;}// Legacy
     var UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";/**
          * parameters = {
          *  defines: { "label" : "value" },
          *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
          *
          *  fragmentShader: <string>,
          *  vertexShader: <string>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>,
          *
          *  lights: <bool>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function ShaderMaterial(parameters){Material.call(this);this.type='ShaderMaterial';this.defines={};this.uniforms={};this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;// set to use scene fog
     this.lights=false;// set to use scene lights
     this.clipping=false;// set to use user-defined clipping planes
     this.skinning=false;// set to use skinning attribute streams
     this.morphTargets=false;// set to use morph targets
     this.morphNormals=false;// set to use morph normals
     this.extensions={derivatives:false,// set to use derivatives
     fragDepth:false,// set to use fragment depth values
     drawBuffers:false,// set to use draw buffers
     shaderTextureLOD:false// set to use shader texture LOD
     };// When rendered geometry doesn't include these attributes but the material does,
     // use these default values in WebGL. This avoids errors when buffer data is missing.
     this.defaultAttributeValues={'color':[1,1,1],'uv':[0,0],'uv2':[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(parameters!==undefined){if(parameters.attributes!==undefined){console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');}this.setValues(parameters);}}ShaderMaterial.prototype=Object.create(Material.prototype);ShaderMaterial.prototype.constructor=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=true;ShaderMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=cloneUniforms(source.uniforms);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.lights=source.lights;this.clipping=source.clipping;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;this.extensions=Object.assign({},source.extensions);this.glslVersion=source.glslVersion;return this;};ShaderMaterial.prototype.toJSON=function(meta){var data=Material.prototype.toJSON.call(this,meta);data.glslVersion=this.glslVersion;data.uniforms={};for(var name in this.uniforms){var uniform=this.uniforms[name];var value=uniform.value;if(value&&value.isTexture){data.uniforms[name]={type:'t',value:value.toJSON(meta).uuid};}else if(value&&value.isColor){data.uniforms[name]={type:'c',value:value.getHex()};}else if(value&&value.isVector2){data.uniforms[name]={type:'v2',value:value.toArray()};}else if(value&&value.isVector3){data.uniforms[name]={type:'v3',value:value.toArray()};}else if(value&&value.isVector4){data.uniforms[name]={type:'v4',value:value.toArray()};}else if(value&&value.isMatrix3){data.uniforms[name]={type:'m3',value:value.toArray()};}else if(value&&value.isMatrix4){data.uniforms[name]={type:'m4',value:value.toArray()};}else{data.uniforms[name]={value:value};// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
     }}if(Object.keys(this.defines).length>0)data.defines=this.defines;data.vertexShader=this.vertexShader;data.fragmentShader=this.fragmentShader;var extensions={};for(var key in this.extensions){if(this.extensions[key]===true)extensions[key]=true;}if(Object.keys(extensions).length>0)data.extensions=extensions;return data;};function Camera(){Object3D.call(this);this.type='Camera';this.matrixWorldInverse=new Matrix4();this.projectionMatrix=new Matrix4();this.projectionMatrixInverse=new Matrix4();}Camera.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Camera,isCamera:true,copy:function copy(source,recursive){Object3D.prototype.copy.call(this,source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);return this;},getWorldDirection:function getWorldDirection(target){if(target===undefined){console.warn('THREE.Camera: .getWorldDirection() target is now required');target=new Vector3();}this.updateMatrixWorld(true);var e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize();},updateMatrixWorld:function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);this.matrixWorldInverse.getInverse(this.matrixWorld);},updateWorldMatrix:function updateWorldMatrix(updateParents,updateChildren){Object3D.prototype.updateWorldMatrix.call(this,updateParents,updateChildren);this.matrixWorldInverse.getInverse(this.matrixWorld);},clone:function clone(){return new this.constructor().copy(this);}});function PerspectiveCamera(fov,aspect,near,far){Camera.call(this);this.type='PerspectiveCamera';this.fov=fov!==undefined?fov:50;this.zoom=1;this.near=near!==undefined?near:0.1;this.far=far!==undefined?far:2000;this.focus=10;this.aspect=aspect!==undefined?aspect:1;this.view=null;this.filmGauge=35;// width of the film (default in millimeters)
     this.filmOffset=0;// horizontal film offset (same unit as gauge)
     this.updateProjectionMatrix();}PerspectiveCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:PerspectiveCamera,isPerspectiveCamera:true,copy:function copy(source,recursive){Camera.prototype.copy.call(this,source,recursive);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=source.view===null?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this;},/**
               * Sets the FOV by focal length in respect to the current .filmGauge.
               *
               * The default film gauge is 35, so that the focal length can be specified for
               * a 35mm (full frame) camera.
               *
               * Values for focal length and film gauge must have the same unit.
               */setFocalLength:function setFocalLength(focalLength){// see http://www.bobatkins.com/photography/technical/field_of_view.html
     var vExtentSlope=0.5*this.getFilmHeight()/focalLength;this.fov=MathUtils.RAD2DEG*2*Math.atan(vExtentSlope);this.updateProjectionMatrix();},/**
               * Calculates the focal length from the current .fov and .filmGauge.
               */getFocalLength:function getFocalLength(){var vExtentSlope=Math.tan(MathUtils.DEG2RAD*0.5*this.fov);return 0.5*this.getFilmHeight()/vExtentSlope;},getEffectiveFOV:function getEffectiveFOV(){return MathUtils.RAD2DEG*2*Math.atan(Math.tan(MathUtils.DEG2RAD*0.5*this.fov)/this.zoom);},getFilmWidth:function getFilmWidth(){// film not completely covered in portrait format (aspect < 1)
     return this.filmGauge*Math.min(this.aspect,1);},getFilmHeight:function getFilmHeight(){// film not completely covered in landscape format (aspect > 1)
     return this.filmGauge/Math.max(this.aspect,1);},/**
               * Sets an offset in a larger frustum. This is useful for multi-window or
               * multi-monitor/multi-machine setups.
               *
               * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
               * the monitors are in grid like this
               *
               *   +---+---+---+
               *   | A | B | C |
               *   +---+---+---+
               *   | D | E | F |
               *   +---+---+---+
               *
               * then for each monitor you would call it like this
               *
               *   const w = 1920;
               *   const h = 1080;
               *   const fullWidth = w * 3;
               *   const fullHeight = h * 2;
               *
               *   --A--
               *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
               *   --B--
               *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
               *   --C--
               *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
               *   --D--
               *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
               *   --E--
               *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
               *   --F--
               *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
               *
               *   Note there is no reason monitors have to be the same size or in a grid.
               */setViewOffset:function setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();},clearViewOffset:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();},updateProjectionMatrix:function updateProjectionMatrix(){var near=this.near;var top=near*Math.tan(MathUtils.DEG2RAD*0.5*this.fov)/this.zoom;var height=2*top;var width=this.aspect*height;var left=-0.5*width;var view=this.view;if(this.view!==null&&this.view.enabled){var fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight;}var skew=this.filmOffset;if(skew!==0)left+=near*skew/this.getFilmWidth();this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.fov=this.fov;data.object.zoom=this.zoom;data.object.near=this.near;data.object.far=this.far;data.object.focus=this.focus;data.object.aspect=this.aspect;if(this.view!==null)data.object.view=Object.assign({},this.view);data.object.filmGauge=this.filmGauge;data.object.filmOffset=this.filmOffset;return data;}});var fov=90,aspect=1;function CubeCamera(near,far,renderTarget){Object3D.call(this);this.type='CubeCamera';if(renderTarget.isWebGLCubeRenderTarget!==true){console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');return;}this.renderTarget=renderTarget;var cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.layers=this.layers;cameraPX.up.set(0,-1,0);cameraPX.lookAt(new Vector3(1,0,0));this.add(cameraPX);var cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.layers=this.layers;cameraNX.up.set(0,-1,0);cameraNX.lookAt(new Vector3(-1,0,0));this.add(cameraNX);var cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.layers=this.layers;cameraPY.up.set(0,0,1);cameraPY.lookAt(new Vector3(0,1,0));this.add(cameraPY);var cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.layers=this.layers;cameraNY.up.set(0,0,-1);cameraNY.lookAt(new Vector3(0,-1,0));this.add(cameraNY);var cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.layers=this.layers;cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(new Vector3(0,0,1));this.add(cameraPZ);var cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.layers=this.layers;cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(new Vector3(0,0,-1));this.add(cameraNZ);this.update=function(renderer,scene){if(this.parent===null)this.updateMatrixWorld();var currentXrEnabled=renderer.xr.enabled;var currentRenderTarget=renderer.getRenderTarget();renderer.xr.enabled=false;var generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=false;renderer.setRenderTarget(renderTarget,0);renderer.render(scene,cameraPX);renderer.setRenderTarget(renderTarget,1);renderer.render(scene,cameraNX);renderer.setRenderTarget(renderTarget,2);renderer.render(scene,cameraPY);renderer.setRenderTarget(renderTarget,3);renderer.render(scene,cameraNY);renderer.setRenderTarget(renderTarget,4);renderer.render(scene,cameraPZ);renderTarget.texture.generateMipmaps=generateMipmaps;renderer.setRenderTarget(renderTarget,5);renderer.render(scene,cameraNZ);renderer.setRenderTarget(currentRenderTarget);renderer.xr.enabled=currentXrEnabled;};this.clear=function(renderer,color,depth,stencil){var currentRenderTarget=renderer.getRenderTarget();for(var _i62=0;_i62<6;_i62++){renderer.setRenderTarget(renderTarget,_i62);renderer.clear(color,depth,stencil);}renderer.setRenderTarget(currentRenderTarget);};}CubeCamera.prototype=Object.create(Object3D.prototype);CubeCamera.prototype.constructor=CubeCamera;function CubeTexture(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=images!==undefined?images:[];mapping=mapping!==undefined?mapping:CubeReflectionMapping;format=format!==undefined?format:RGBFormat;Texture.call(this,images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.flipY=false;this._needsFlipEnvMap=true;}CubeTexture.prototype=Object.create(Texture.prototype);CubeTexture.prototype.constructor=CubeTexture;CubeTexture.prototype.isCubeTexture=true;Object.defineProperty(CubeTexture.prototype,'images',{get:function get(){return this.image;},set:function set(value){this.image=value;}});function WebGLCubeRenderTarget(size,options,dummy){if(Number.isInteger(options)){console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');options=dummy;}WebGLRenderTarget.call(this,size,size,options);options=options||{};this.texture=new CubeTexture(undefined,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);this.texture._needsFlipEnvMap=false;}WebGLCubeRenderTarget.prototype=Object.create(WebGLRenderTarget.prototype);WebGLCubeRenderTarget.prototype.constructor=WebGLCubeRenderTarget;WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;WebGLCubeRenderTarget.prototype.fromEquirectangularTexture=function(renderer,texture){this.texture.type=texture.type;this.texture.format=RGBAFormat;// see #18859
     this.texture.encoding=texture.encoding;this.texture.generateMipmaps=texture.generateMipmaps;this.texture.minFilter=texture.minFilter;this.texture.magFilter=texture.magFilter;var shader={uniforms:{tEquirect:{value:null}},vertexShader:/* glsl */"\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t#include <begin_vertex>\n\t\t\t\t#include <project_vertex>\n\n\t\t\t}\n\t\t",fragmentShader:/* glsl */"\n\n\t\t\tuniform sampler2D tEquirect;\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t}\n\t\t"};var geometry=new BoxBufferGeometry(5,5,5);var material=new ShaderMaterial({name:'CubemapFromEquirect',uniforms:cloneUniforms(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,side:BackSide,blending:NoBlending});material.uniforms.tEquirect.value=texture;var mesh=new Mesh(geometry,material);var currentMinFilter=texture.minFilter;// Avoid blurred poles
     if(texture.minFilter===LinearMipmapLinearFilter)texture.minFilter=LinearFilter;var camera=new CubeCamera(1,10,this);camera.update(renderer,mesh);texture.minFilter=currentMinFilter;mesh.geometry.dispose();mesh.material.dispose();return this;};function DataTexture(data,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={data:data||null,width:width||1,height:height||1};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;this.needsUpdate=true;}DataTexture.prototype=Object.create(Texture.prototype);DataTexture.prototype.constructor=DataTexture;DataTexture.prototype.isDataTexture=true;var _sphere$1=/*@__PURE__*/new Sphere();var _vector$5=/*@__PURE__*/new Vector3();var Frustum=/*#__PURE__*/function(){function Frustum(p0,p1,p2,p3,p4,p5){_classCallCheck(this,Frustum);this.planes=[p0!==undefined?p0:new Plane(),p1!==undefined?p1:new Plane(),p2!==undefined?p2:new Plane(),p3!==undefined?p3:new Plane(),p4!==undefined?p4:new Plane(),p5!==undefined?p5:new Plane()];}_createClass(Frustum,[{key:"set",value:function set(p0,p1,p2,p3,p4,p5){var planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(frustum){var planes=this.planes;for(var _i63=0;_i63<6;_i63++){planes[_i63].copy(frustum.planes[_i63]);}return this;}},{key:"setFromProjectionMatrix",value:function setFromProjectionMatrix(m){var planes=this.planes;var me=m.elements;var me0=me[0],me1=me[1],me2=me[2],me3=me[3];var me4=me[4],me5=me[5],me6=me[6],me7=me[7];var me8=me[8],me9=me[9],me10=me[10],me11=me[11];var me12=me[12],me13=me[13],me14=me[14],me15=me[15];planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize();planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize();planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize();return this;}},{key:"intersectsObject",value:function intersectsObject(object){var geometry=object.geometry;if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);return this.intersectsSphere(_sphere$1);}},{key:"intersectsSprite",value:function intersectsSprite(sprite){_sphere$1.center.set(0,0,0);_sphere$1.radius=0.7071067811865476;_sphere$1.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(_sphere$1);}},{key:"intersectsSphere",value:function intersectsSphere(sphere){var planes=this.planes;var center=sphere.center;var negRadius=-sphere.radius;for(var _i64=0;_i64<6;_i64++){var distance=planes[_i64].distanceToPoint(center);if(distance<negRadius){return false;}}return true;}},{key:"intersectsBox",value:function intersectsBox(box){var planes=this.planes;for(var _i65=0;_i65<6;_i65++){var plane=planes[_i65];// corner at max distance
     _vector$5.x=plane.normal.x>0?box.max.x:box.min.x;_vector$5.y=plane.normal.y>0?box.max.y:box.min.y;_vector$5.z=plane.normal.z>0?box.max.z:box.min.z;if(plane.distanceToPoint(_vector$5)<0){return false;}}return true;}},{key:"containsPoint",value:function containsPoint(point){var planes=this.planes;for(var _i66=0;_i66<6;_i66++){if(planes[_i66].distanceToPoint(point)<0){return false;}}return true;}}]);return Frustum;}();function WebGLAnimation(){var context=null;var isAnimating=false;var animationLoop=null;var requestId=null;function onAnimationFrame(time,frame){animationLoop(time,frame);requestId=context.requestAnimationFrame(onAnimationFrame);}return{start:function start(){if(isAnimating===true)return;if(animationLoop===null)return;requestId=context.requestAnimationFrame(onAnimationFrame);isAnimating=true;},stop:function stop(){context.cancelAnimationFrame(requestId);isAnimating=false;},setAnimationLoop:function setAnimationLoop(callback){animationLoop=callback;},setContext:function setContext(value){context=value;}};}function WebGLAttributes(gl,capabilities){var isWebGL2=capabilities.isWebGL2;var buffers=new WeakMap();function createBuffer(attribute,bufferType){var array=attribute.array;var usage=attribute.usage;var buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer);gl.bufferData(bufferType,array,usage);attribute.onUploadCallback();var type=5126;if(_instanceof(array,Float32Array)){type=5126;}else if(_instanceof(array,Float64Array)){console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');}else if(_instanceof(array,Uint16Array)){type=5123;}else if(_instanceof(array,Int16Array)){type=5122;}else if(_instanceof(array,Uint32Array)){type=5125;}else if(_instanceof(array,Int32Array)){type=5124;}else if(_instanceof(array,Int8Array)){type=5120;}else if(_instanceof(array,Uint8Array)){type=5121;}return{buffer:buffer,type:type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version};}function updateBuffer(buffer,attribute,bufferType){var array=attribute.array;var updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer);if(updateRange.count===-1){// Not using update ranges
     gl.bufferSubData(bufferType,0,array);}else{if(isWebGL2){gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array,updateRange.offset,updateRange.count);}else{gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count));}updateRange.count=-1;// reset range
     }}//
     function get(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;return buffers.get(attribute);}function remove(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data){gl.deleteBuffer(data.buffer);buffers.delete(attribute);}}function update(attribute,bufferType){if(attribute.isGLBufferAttribute){var cached=buffers.get(attribute);if(!cached||cached.version<attribute.version){buffers.set(attribute,{buffer:attribute.buffer,type:attribute.type,bytesPerElement:attribute.elementSize,version:attribute.version});}return;}if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data===undefined){buffers.set(attribute,createBuffer(attribute,bufferType));}else if(data.version<attribute.version){updateBuffer(data.buffer,attribute,bufferType);data.version=attribute.version;}}return{get:get,remove:remove,update:update};}var PlaneBufferGeometry=/*#__PURE__*/function(_BufferGeometry2){_inherits(PlaneBufferGeometry,_BufferGeometry2);var _super3=_createSuper(PlaneBufferGeometry);function PlaneBufferGeometry(width,height,widthSegments,heightSegments){var _this10;_classCallCheck(this,PlaneBufferGeometry);_this10=_super3.call(this);_this10.type='PlaneBufferGeometry';_this10.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};width=width||1;height=height||1;var width_half=width/2;var height_half=height/2;var gridX=Math.floor(widthSegments)||1;var gridY=Math.floor(heightSegments)||1;var gridX1=gridX+1;var gridY1=gridY+1;var segment_width=width/gridX;var segment_height=height/gridY;// buffers
     var indices=[];var vertices=[];var normals=[];var uvs=[];// generate vertices, normals and uvs
     for(var iy=0;iy<gridY1;iy++){var y=iy*segment_height-height_half;for(var ix=0;ix<gridX1;ix++){var x=ix*segment_width-width_half;vertices.push(x,-y,0);normals.push(0,0,1);uvs.push(ix/gridX);uvs.push(1-iy/gridY);}}// indices
     for(var _iy2=0;_iy2<gridY;_iy2++){for(var _ix2=0;_ix2<gridX;_ix2++){var a=_ix2+gridX1*_iy2;var b=_ix2+gridX1*(_iy2+1);var c=_ix2+1+gridX1*(_iy2+1);var d=_ix2+1+gridX1*_iy2;// faces
     indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
     _this10.setIndex(indices);_this10.setAttribute('position',new Float32BufferAttribute(vertices,3));_this10.setAttribute('normal',new Float32BufferAttribute(normals,3));_this10.setAttribute('uv',new Float32BufferAttribute(uvs,2));return _this10;}return PlaneBufferGeometry;}(BufferGeometry);var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";var normal_fragment_begin="#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmissionmap_fragment="#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";var transmissionmap_pars_fragment="#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";var uv_vertex="#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";var background_frag="uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var background_vert="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";var cube_frag="#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var cube_vert="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";var depth_frag="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";var depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";var distanceRGBA_frag="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";var distanceRGBA_vert="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";var equirect_frag="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var equirect_vert="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";var linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";var meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";var meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshmatcap_frag="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshmatcap_vert="#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";var meshtoon_frag="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshtoon_vert="#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshphysical_frag="#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshphysical_vert="#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var normal_frag="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";var normal_vert="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";var points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";var shadow_frag="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var shadow_vert="#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var sprite_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var sprite_vert="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";var ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmissionmap_fragment:transmissionmap_fragment,transmissionmap_pars_fragment:transmissionmap_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_frag:background_frag,background_vert:background_vert,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshmatcap_frag:meshmatcap_frag,meshmatcap_vert:meshmatcap_vert,meshtoon_frag:meshtoon_frag,meshtoon_vert:meshtoon_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert,sprite_frag:sprite_frag,sprite_vert:sprite_vert};/**
          * Uniforms library for shared webgl shaders
          */var UniformsLib={common:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},map:{value:null},uvTransform:{value:new Matrix3()},uv2Transform:{value:new Matrix3()},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1.0},refractionRatio:{value:0.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new Color(0xffffff)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
     rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},size:{value:1.0},scale:{value:1.0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3()}},sprite:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},center:{value:new Vector2(0.5,0.5)},rotation:{value:0.0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3()}}};var ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},specular:{value:new Color(0x111111)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},roughness:{value:1.0},metalness:{value:0.0},envMapIntensity:{value:1// temporary
     }}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3()},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},/* -------------------------------------------------------------------------
              //	Cube map shader
               ------------------------------------------------------------------------- */cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0x00000)},opacity:{value:1.0}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Color(0x000000)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};function WebGLBackground(renderer,cubemaps,state,objects,premultipliedAlpha){var clearColor=new Color(0x000000);var clearAlpha=0;var planeMesh;var boxMesh;var currentBackground=null;var currentBackgroundVersion=0;var currentTonemapping=null;function render(renderList,scene,camera,forceClear){var background=scene.isScene===true?scene.background:null;if(background&&background.isTexture){background=cubemaps.get(background);}// Ignore background in AR
     // TODO: Reconsider this.
     var xr=renderer.xr;var session=xr.getSession&&xr.getSession();if(session&&session.environmentBlendMode==='additive'){background=null;}if(background===null){setClear(clearColor,clearAlpha);}else if(background&&background.isColor){setClear(background,1);forceClear=true;}if(renderer.autoClear||forceClear){renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil);}if(background&&(background.isCubeTexture||background.isWebGLCubeRenderTarget||background.mapping===CubeUVReflectionMapping)){if(boxMesh===undefined){boxMesh=new Mesh(new BoxBufferGeometry(1,1,1),new ShaderMaterial({name:'BackgroundCubeMaterial',uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));boxMesh.geometry.deleteAttribute('normal');boxMesh.geometry.deleteAttribute('uv');boxMesh.onBeforeRender=function(renderer,scene,camera){this.matrixWorld.copyPosition(camera.matrixWorld);};// enable code injection for non-built-in material
     Object.defineProperty(boxMesh.material,'envMap',{get:function get(){return this.uniforms.envMap.value;}});objects.update(boxMesh);}if(background.isWebGLCubeRenderTarget){// TODO Deprecate
     background=background.texture;}boxMesh.material.uniforms.envMap.value=background;boxMesh.material.uniforms.flipEnvMap.value=background.isCubeTexture&&background._needsFlipEnvMap?-1:1;if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){boxMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
     renderList.unshift(boxMesh,boxMesh.geometry,boxMesh.material,0,0,null);}else if(background&&background.isTexture){if(planeMesh===undefined){planeMesh=new Mesh(new PlaneBufferGeometry(2,2),new ShaderMaterial({name:'BackgroundMaterial',uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));planeMesh.geometry.deleteAttribute('normal');// enable code injection for non-built-in material
     Object.defineProperty(planeMesh.material,'map',{get:function get(){return this.uniforms.t2D.value;}});objects.update(planeMesh);}planeMesh.material.uniforms.t2D.value=background;if(background.matrixAutoUpdate===true){background.updateMatrix();}planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){planeMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
     renderList.unshift(planeMesh,planeMesh.geometry,planeMesh.material,0,0,null);}}function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha);}return{getClearColor:function getClearColor(){return clearColor;},setClearColor:function setClearColor(color,alpha){clearColor.set(color);clearAlpha=alpha!==undefined?alpha:1;setClear(clearColor,clearAlpha);},getClearAlpha:function getClearAlpha(){return clearAlpha;},setClearAlpha:function setClearAlpha(alpha){clearAlpha=alpha;setClear(clearColor,clearAlpha);},render:render};}function WebGLBindingStates(gl,extensions,attributes,capabilities){var maxVertexAttributes=gl.getParameter(34921);var extension=capabilities.isWebGL2?null:extensions.get('OES_vertex_array_object');var vaoAvailable=capabilities.isWebGL2||extension!==null;var bindingStates={};var defaultState=createBindingState(null);var currentState=defaultState;function setup(object,material,program,geometry,index){var updateBuffers=false;if(vaoAvailable){var state=getBindingState(geometry,program,material);if(currentState!==state){currentState=state;bindVertexArrayObject(currentState.object);}updateBuffers=needsUpdate(geometry,index);if(updateBuffers)saveCache(geometry,index);}else{var wireframe=material.wireframe===true;if(currentState.geometry!==geometry.id||currentState.program!==program.id||currentState.wireframe!==wireframe){currentState.geometry=geometry.id;currentState.program=program.id;currentState.wireframe=wireframe;updateBuffers=true;}}if(object.isInstancedMesh===true){updateBuffers=true;}if(index!==null){attributes.update(index,34963);}if(updateBuffers){setupVertexAttributes(object,material,program,geometry);if(index!==null){gl.bindBuffer(34963,attributes.get(index).buffer);}}}function createVertexArrayObject(){if(capabilities.isWebGL2)return gl.createVertexArray();return extension.createVertexArrayOES();}function bindVertexArrayObject(vao){if(capabilities.isWebGL2)return gl.bindVertexArray(vao);return extension.bindVertexArrayOES(vao);}function deleteVertexArrayObject(vao){if(capabilities.isWebGL2)return gl.deleteVertexArray(vao);return extension.deleteVertexArrayOES(vao);}function getBindingState(geometry,program,material){var wireframe=material.wireframe===true;var programMap=bindingStates[geometry.id];if(programMap===undefined){programMap={};bindingStates[geometry.id]=programMap;}var stateMap=programMap[program.id];if(stateMap===undefined){stateMap={};programMap[program.id]=stateMap;}var state=stateMap[wireframe];if(state===undefined){state=createBindingState(createVertexArrayObject());stateMap[wireframe]=state;}return state;}function createBindingState(vao){var newAttributes=[];var enabledAttributes=[];var attributeDivisors=[];for(var _i67=0;_i67<maxVertexAttributes;_i67++){newAttributes[_i67]=0;enabledAttributes[_i67]=0;attributeDivisors[_i67]=0;}return{// for backward compatibility on non-VAO support browser
     geometry:null,program:null,wireframe:false,newAttributes:newAttributes,enabledAttributes:enabledAttributes,attributeDivisors:attributeDivisors,object:vao,attributes:{},index:null};}function needsUpdate(geometry,index){var cachedAttributes=currentState.attributes;var geometryAttributes=geometry.attributes;if(Object.keys(cachedAttributes).length!==Object.keys(geometryAttributes).length)return true;for(var key in geometryAttributes){var cachedAttribute=cachedAttributes[key];var geometryAttribute=geometryAttributes[key];if(cachedAttribute===undefined)return true;if(cachedAttribute.attribute!==geometryAttribute)return true;if(cachedAttribute.data!==geometryAttribute.data)return true;}if(currentState.index!==index)return true;return false;}function saveCache(geometry,index){var cache={};var attributes=geometry.attributes;for(var key in attributes){var attribute=attributes[key];var data={};data.attribute=attribute;if(attribute.data){data.data=attribute.data;}cache[key]=data;}currentState.attributes=cache;currentState.index=index;}function initAttributes(){var newAttributes=currentState.newAttributes;for(var _i68=0,il=newAttributes.length;_i68<il;_i68++){newAttributes[_i68]=0;}}function enableAttribute(attribute){enableAttributeAndDivisor(attribute,0);}function enableAttributeAndDivisor(attribute,meshPerAttribute){var newAttributes=currentState.newAttributes;var enabledAttributes=currentState.enabledAttributes;var attributeDivisors=currentState.attributeDivisors;newAttributes[attribute]=1;if(enabledAttributes[attribute]===0){gl.enableVertexAttribArray(attribute);enabledAttributes[attribute]=1;}if(attributeDivisors[attribute]!==meshPerAttribute){var _extension=capabilities.isWebGL2?gl:extensions.get('ANGLE_instanced_arrays');_extension[capabilities.isWebGL2?'vertexAttribDivisor':'vertexAttribDivisorANGLE'](attribute,meshPerAttribute);attributeDivisors[attribute]=meshPerAttribute;}}function disableUnusedAttributes(){var newAttributes=currentState.newAttributes;var enabledAttributes=currentState.enabledAttributes;for(var _i69=0,il=enabledAttributes.length;_i69<il;_i69++){if(enabledAttributes[_i69]!==newAttributes[_i69]){gl.disableVertexAttribArray(_i69);enabledAttributes[_i69]=0;}}}function vertexAttribPointer(index,size,type,normalized,stride,offset){if(capabilities.isWebGL2===true&&(type===5124||type===5125)){gl.vertexAttribIPointer(index,size,type,stride,offset);}else{gl.vertexAttribPointer(index,size,type,normalized,stride,offset);}}function setupVertexAttributes(object,material,program,geometry){if(capabilities.isWebGL2===false&&(object.isInstancedMesh||geometry.isInstancedBufferGeometry)){if(extensions.get('ANGLE_instanced_arrays')===null)return;}initAttributes();var geometryAttributes=geometry.attributes;var programAttributes=program.getAttributes();var materialDefaultAttributeValues=material.defaultAttributeValues;for(var name in programAttributes){var programAttribute=programAttributes[name];if(programAttribute>=0){var geometryAttribute=geometryAttributes[name];if(geometryAttribute!==undefined){var normalized=geometryAttribute.normalized;var size=geometryAttribute.itemSize;var attribute=attributes.get(geometryAttribute);// TODO Attribute may not be available on context restore
     if(attribute===undefined)continue;var buffer=attribute.buffer;var type=attribute.type;var bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){var data=geometryAttribute.data;var stride=data.stride;var offset=geometryAttribute.offset;if(data&&data.isInstancedInterleavedBuffer){enableAttributeAndDivisor(programAttribute,data.meshPerAttribute);if(geometry._maxInstanceCount===undefined){geometry._maxInstanceCount=data.meshPerAttribute*data.count;}}else{enableAttribute(programAttribute);}gl.bindBuffer(34962,buffer);vertexAttribPointer(programAttribute,size,type,normalized,stride*bytesPerElement,offset*bytesPerElement);}else{if(geometryAttribute.isInstancedBufferAttribute){enableAttributeAndDivisor(programAttribute,geometryAttribute.meshPerAttribute);if(geometry._maxInstanceCount===undefined){geometry._maxInstanceCount=geometryAttribute.meshPerAttribute*geometryAttribute.count;}}else{enableAttribute(programAttribute);}gl.bindBuffer(34962,buffer);vertexAttribPointer(programAttribute,size,type,normalized,0,0);}}else if(name==='instanceMatrix'){var _attribute7=attributes.get(object.instanceMatrix);// TODO Attribute may not be available on context restore
     if(_attribute7===undefined)continue;var _buffer=_attribute7.buffer;var _type=_attribute7.type;enableAttributeAndDivisor(programAttribute+0,1);enableAttributeAndDivisor(programAttribute+1,1);enableAttributeAndDivisor(programAttribute+2,1);enableAttributeAndDivisor(programAttribute+3,1);gl.bindBuffer(34962,_buffer);gl.vertexAttribPointer(programAttribute+0,4,_type,false,64,0);gl.vertexAttribPointer(programAttribute+1,4,_type,false,64,16);gl.vertexAttribPointer(programAttribute+2,4,_type,false,64,32);gl.vertexAttribPointer(programAttribute+3,4,_type,false,64,48);}else if(name==='instanceColor'){var _attribute8=attributes.get(object.instanceColor);// TODO Attribute may not be available on context restore
     if(_attribute8===undefined)continue;var _buffer2=_attribute8.buffer;var _type2=_attribute8.type;enableAttributeAndDivisor(programAttribute,1);gl.bindBuffer(34962,_buffer2);gl.vertexAttribPointer(programAttribute,3,_type2,false,12,0);}else if(materialDefaultAttributeValues!==undefined){var value=materialDefaultAttributeValues[name];if(value!==undefined){switch(value.length){case 2:gl.vertexAttrib2fv(programAttribute,value);break;case 3:gl.vertexAttrib3fv(programAttribute,value);break;case 4:gl.vertexAttrib4fv(programAttribute,value);break;default:gl.vertexAttrib1fv(programAttribute,value);}}}}}disableUnusedAttributes();}function dispose(){reset();for(var geometryId in bindingStates){var programMap=bindingStates[geometryId];for(var programId in programMap){var stateMap=programMap[programId];for(var wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[programId];}delete bindingStates[geometryId];}}function releaseStatesOfGeometry(geometry){if(bindingStates[geometry.id]===undefined)return;var programMap=bindingStates[geometry.id];for(var programId in programMap){var stateMap=programMap[programId];for(var wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[programId];}delete bindingStates[geometry.id];}function releaseStatesOfProgram(program){for(var geometryId in bindingStates){var programMap=bindingStates[geometryId];if(programMap[program.id]===undefined)continue;var stateMap=programMap[program.id];for(var wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[program.id];}}function reset(){resetDefaultState();if(currentState===defaultState)return;currentState=defaultState;bindVertexArrayObject(currentState.object);}// for backward-compatilibity
     function resetDefaultState(){defaultState.geometry=null;defaultState.program=null;defaultState.wireframe=false;}return{setup:setup,reset:reset,resetDefaultState:resetDefaultState,dispose:dispose,releaseStatesOfGeometry:releaseStatesOfGeometry,releaseStatesOfProgram:releaseStatesOfProgram,initAttributes:initAttributes,enableAttribute:enableAttribute,disableUnusedAttributes:disableUnusedAttributes};}function WebGLBufferRenderer(gl,extensions,info,capabilities){var isWebGL2=capabilities.isWebGL2;var mode;function setMode(value){mode=value;}function render(start,count){gl.drawArrays(mode,start,count);info.update(count,mode,1);}function renderInstances(start,count,primcount){if(primcount===0)return;var extension,methodName;if(isWebGL2){extension=gl;methodName='drawArraysInstanced';}else{extension=extensions.get('ANGLE_instanced_arrays');methodName='drawArraysInstancedANGLE';if(extension===null){console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,start,count,primcount);info.update(count,mode,primcount);}//
     this.setMode=setMode;this.render=render;this.renderInstances=renderInstances;}function WebGLCapabilities(gl,extensions,parameters){var maxAnisotropy;function getMaxAnisotropy(){if(maxAnisotropy!==undefined)return maxAnisotropy;var extension=extensions.get('EXT_texture_filter_anisotropic');if(extension!==null){maxAnisotropy=gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}else{maxAnisotropy=0;}return maxAnisotropy;}function getMaxPrecision(precision){if(precision==='highp'){if(gl.getShaderPrecisionFormat(35633,36338).precision>0&&gl.getShaderPrecisionFormat(35632,36338).precision>0){return'highp';}precision='mediump';}if(precision==='mediump'){if(gl.getShaderPrecisionFormat(35633,36337).precision>0&&gl.getShaderPrecisionFormat(35632,36337).precision>0){return'mediump';}}return'lowp';}/* eslint-disable no-undef */var isWebGL2=typeof WebGL2RenderingContext!=='undefined'&&_instanceof(gl,WebGL2RenderingContext)||typeof WebGL2ComputeRenderingContext!=='undefined'&&_instanceof(gl,WebGL2ComputeRenderingContext);/* eslint-enable no-undef */var precision=parameters.precision!==undefined?parameters.precision:'highp';var maxPrecision=getMaxPrecision(precision);if(maxPrecision!==precision){console.warn('THREE.WebGLRenderer:',precision,'not supported, using',maxPrecision,'instead.');precision=maxPrecision;}var logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===true;var maxTextures=gl.getParameter(34930);var maxVertexTextures=gl.getParameter(35660);var maxTextureSize=gl.getParameter(3379);var maxCubemapSize=gl.getParameter(34076);var maxAttributes=gl.getParameter(34921);var maxVertexUniforms=gl.getParameter(36347);var maxVaryings=gl.getParameter(36348);var maxFragmentUniforms=gl.getParameter(36349);var vertexTextures=maxVertexTextures>0;var floatFragmentTextures=isWebGL2||!!extensions.get('OES_texture_float');var floatVertexTextures=vertexTextures&&floatFragmentTextures;var maxSamples=isWebGL2?gl.getParameter(36183):0;return{isWebGL2:isWebGL2,getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,precision:precision,logarithmicDepthBuffer:logarithmicDepthBuffer,maxTextures:maxTextures,maxVertexTextures:maxVertexTextures,maxTextureSize:maxTextureSize,maxCubemapSize:maxCubemapSize,maxAttributes:maxAttributes,maxVertexUniforms:maxVertexUniforms,maxVaryings:maxVaryings,maxFragmentUniforms:maxFragmentUniforms,vertexTextures:vertexTextures,floatFragmentTextures:floatFragmentTextures,floatVertexTextures:floatVertexTextures,maxSamples:maxSamples};}function WebGLClipping(properties){var scope=this;var globalState=null,numGlobalPlanes=0,localClippingEnabled=false,renderingShadows=false;var plane=new Plane(),viewNormalMatrix=new Matrix3(),uniform={value:null,needsUpdate:false};this.uniform=uniform;this.numPlanes=0;this.numIntersection=0;this.init=function(planes,enableLocalClipping,camera){var enabled=planes.length!==0||enableLocalClipping||// enable state of previous frame - the clipping code has to
     // run another frame in order to reset the state:
     numGlobalPlanes!==0||localClippingEnabled;localClippingEnabled=enableLocalClipping;globalState=projectPlanes(planes,camera,0);numGlobalPlanes=planes.length;return enabled;};this.beginShadows=function(){renderingShadows=true;projectPlanes(null);};this.endShadows=function(){renderingShadows=false;resetGlobalState();};this.setState=function(material,camera,useCache){var planes=material.clippingPlanes,clipIntersection=material.clipIntersection,clipShadows=material.clipShadows;var materialProperties=properties.get(material);if(!localClippingEnabled||planes===null||planes.length===0||renderingShadows&&!clipShadows){// there's no local clipping
     if(renderingShadows){// there's no global clipping
     projectPlanes(null);}else{resetGlobalState();}}else{var nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=nGlobal*4;var dstArray=materialProperties.clippingState||null;uniform.value=dstArray;// ensure unique state
     dstArray=projectPlanes(planes,camera,lGlobal,useCache);for(var _i70=0;_i70!==lGlobal;++_i70){dstArray[_i70]=globalState[_i70];}materialProperties.clippingState=dstArray;this.numIntersection=clipIntersection?this.numPlanes:0;this.numPlanes+=nGlobal;}};function resetGlobalState(){if(uniform.value!==globalState){uniform.value=globalState;uniform.needsUpdate=numGlobalPlanes>0;}scope.numPlanes=numGlobalPlanes;scope.numIntersection=0;}function projectPlanes(planes,camera,dstOffset,skipTransform){var nPlanes=planes!==null?planes.length:0;var dstArray=null;if(nPlanes!==0){dstArray=uniform.value;if(skipTransform!==true||dstArray===null){var flatSize=dstOffset+nPlanes*4,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix);if(dstArray===null||dstArray.length<flatSize){dstArray=new Float32Array(flatSize);}for(var _i71=0,i4=dstOffset;_i71!==nPlanes;++_i71,i4+=4){plane.copy(planes[_i71]).applyMatrix4(viewMatrix,viewNormalMatrix);plane.normal.toArray(dstArray,i4);dstArray[i4+3]=plane.constant;}}uniform.value=dstArray;uniform.needsUpdate=true;}scope.numPlanes=nPlanes;scope.numIntersection=0;return dstArray;}}function WebGLCubeMaps(renderer){var cubemaps=new WeakMap();function mapTextureMapping(texture,mapping){if(mapping===EquirectangularReflectionMapping){texture.mapping=CubeReflectionMapping;}else if(mapping===EquirectangularRefractionMapping){texture.mapping=CubeRefractionMapping;}return texture;}function get(texture){if(texture&&texture.isTexture){var mapping=texture.mapping;if(mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping){if(cubemaps.has(texture)){var cubemap=cubemaps.get(texture).texture;return mapTextureMapping(cubemap,texture.mapping);}else{var image=texture.image;if(image&&image.height>0){var currentRenderList=renderer.getRenderList();var currentRenderTarget=renderer.getRenderTarget();var currentRenderState=renderer.getRenderState();var renderTarget=new WebGLCubeRenderTarget(image.height/2);renderTarget.fromEquirectangularTexture(renderer,texture);cubemaps.set(texture,renderTarget);renderer.setRenderTarget(currentRenderTarget);renderer.setRenderList(currentRenderList);renderer.setRenderState(currentRenderState);return mapTextureMapping(renderTarget.texture,texture.mapping);}else{// image not yet ready. try the conversion next frame
     return null;}}}}return texture;}function dispose(){cubemaps=new WeakMap();}return{get:get,dispose:dispose};}function WebGLExtensions(gl){var extensions={};return{has:function has(name){if(extensions[name]!==undefined){return extensions[name]!==null;}var extension;switch(name){case'WEBGL_depth_texture':extension=gl.getExtension('WEBGL_depth_texture')||gl.getExtension('MOZ_WEBGL_depth_texture')||gl.getExtension('WEBKIT_WEBGL_depth_texture');break;case'EXT_texture_filter_anisotropic':extension=gl.getExtension('EXT_texture_filter_anisotropic')||gl.getExtension('MOZ_EXT_texture_filter_anisotropic')||gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');break;case'WEBGL_compressed_texture_s3tc':extension=gl.getExtension('WEBGL_compressed_texture_s3tc')||gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');break;case'WEBGL_compressed_texture_pvrtc':extension=gl.getExtension('WEBGL_compressed_texture_pvrtc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');break;default:extension=gl.getExtension(name);}extensions[name]=extension;return extension!==null;},get:function get(name){if(!this.has(name)){console.warn('THREE.WebGLRenderer: '+name+' extension not supported.');}return extensions[name];}};}function WebGLGeometries(gl,attributes,info,bindingStates){var geometries=new WeakMap();var wireframeAttributes=new WeakMap();function onGeometryDispose(event){var geometry=event.target;var buffergeometry=geometries.get(geometry);if(buffergeometry.index!==null){attributes.remove(buffergeometry.index);}for(var name in buffergeometry.attributes){attributes.remove(buffergeometry.attributes[name]);}geometry.removeEventListener('dispose',onGeometryDispose);geometries.delete(geometry);var attribute=wireframeAttributes.get(buffergeometry);if(attribute){attributes.remove(attribute);wireframeAttributes.delete(buffergeometry);}bindingStates.releaseStatesOfGeometry(geometry);if(geometry.isInstancedBufferGeometry===true){delete geometry._maxInstanceCount;}//
     info.memory.geometries--;}function get(object,geometry){var buffergeometry=geometries.get(geometry);if(buffergeometry)return buffergeometry;geometry.addEventListener('dispose',onGeometryDispose);if(geometry.isBufferGeometry){buffergeometry=geometry;}else if(geometry.isGeometry){if(geometry._bufferGeometry===undefined){geometry._bufferGeometry=new BufferGeometry().setFromObject(object);}buffergeometry=geometry._bufferGeometry;}geometries.set(geometry,buffergeometry);info.memory.geometries++;return buffergeometry;}function update(geometry){var geometryAttributes=geometry.attributes;// Updating index buffer in VAO now. See WebGLBindingStates.
     for(var name in geometryAttributes){attributes.update(geometryAttributes[name],34962);}// morph targets
     var morphAttributes=geometry.morphAttributes;for(var _name3 in morphAttributes){var array=morphAttributes[_name3];for(var _i72=0,l=array.length;_i72<l;_i72++){attributes.update(array[_i72],34962);}}}function updateWireframeAttribute(geometry){var indices=[];var geometryIndex=geometry.index;var geometryPosition=geometry.attributes.position;var version=0;if(geometryIndex!==null){var array=geometryIndex.array;version=geometryIndex.version;for(var _i73=0,l=array.length;_i73<l;_i73+=3){var a=array[_i73+0];var b=array[_i73+1];var c=array[_i73+2];indices.push(a,b,b,c,c,a);}}else{var _array=geometryPosition.array;version=geometryPosition.version;for(var _i74=0,_l5=_array.length/3-1;_i74<_l5;_i74+=3){var _a5=_i74+0;var _b5=_i74+1;var _c5=_i74+2;indices.push(_a5,_b5,_b5,_c5,_c5,_a5);}}var attribute=new(arrayMax(indices)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1);attribute.version=version;// Updating index buffer in VAO now. See WebGLBindingStates
     //
     var previousAttribute=wireframeAttributes.get(geometry);if(previousAttribute)attributes.remove(previousAttribute);//
     wireframeAttributes.set(geometry,attribute);}function getWireframeAttribute(geometry){var currentAttribute=wireframeAttributes.get(geometry);if(currentAttribute){var geometryIndex=geometry.index;if(geometryIndex!==null){// if the attribute is obsolete, create a new one
     if(currentAttribute.version<geometryIndex.version){updateWireframeAttribute(geometry);}}}else{updateWireframeAttribute(geometry);}return wireframeAttributes.get(geometry);}return{get:get,update:update,getWireframeAttribute:getWireframeAttribute};}function WebGLIndexedBufferRenderer(gl,extensions,info,capabilities){var isWebGL2=capabilities.isWebGL2;var mode;function setMode(value){mode=value;}var type,bytesPerElement;function setIndex(value){type=value.type;bytesPerElement=value.bytesPerElement;}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement);info.update(count,mode,1);}function renderInstances(start,count,primcount){if(primcount===0)return;var extension,methodName;if(isWebGL2){extension=gl;methodName='drawElementsInstanced';}else{extension=extensions.get('ANGLE_instanced_arrays');methodName='drawElementsInstancedANGLE';if(extension===null){console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,count,type,start*bytesPerElement,primcount);info.update(count,mode,primcount);}//
     this.setMode=setMode;this.setIndex=setIndex;this.render=render;this.renderInstances=renderInstances;}function WebGLInfo(gl){var memory={geometries:0,textures:0};var render={frame:0,calls:0,triangles:0,points:0,lines:0};function update(count,mode,instanceCount){render.calls++;switch(mode){case 4:render.triangles+=instanceCount*(count/3);break;case 1:render.lines+=instanceCount*(count/2);break;case 3:render.lines+=instanceCount*(count-1);break;case 2:render.lines+=instanceCount*count;break;case 0:render.points+=instanceCount*count;break;default:console.error('THREE.WebGLInfo: Unknown draw mode:',mode);break;}}function reset(){render.frame++;render.calls=0;render.triangles=0;render.points=0;render.lines=0;}return{memory:memory,render:render,programs:null,autoReset:true,reset:reset,update:update};}function numericalSort(a,b){return a[0]-b[0];}function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1]);}function WebGLMorphtargets(gl){var influencesList={};var morphInfluences=new Float32Array(8);var workInfluences=[];for(var _i75=0;_i75<8;_i75++){workInfluences[_i75]=[_i75,0];}function update(object,geometry,material,program){var objectInfluences=object.morphTargetInfluences;// When object doesn't have morph target influences defined, we treat it as a 0-length array
     // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
     var length=objectInfluences===undefined?0:objectInfluences.length;var influences=influencesList[geometry.id];if(influences===undefined){// initialise list
     influences=[];for(var _i76=0;_i76<length;_i76++){influences[_i76]=[_i76,0];}influencesList[geometry.id]=influences;}// Collect influences
     for(var _i77=0;_i77<length;_i77++){var influence=influences[_i77];influence[0]=_i77;influence[1]=objectInfluences[_i77];}influences.sort(absNumericalSort);for(var _i78=0;_i78<8;_i78++){if(_i78<length&&influences[_i78][1]){workInfluences[_i78][0]=influences[_i78][0];workInfluences[_i78][1]=influences[_i78][1];}else{workInfluences[_i78][0]=Number.MAX_SAFE_INTEGER;workInfluences[_i78][1]=0;}}workInfluences.sort(numericalSort);var morphTargets=material.morphTargets&&geometry.morphAttributes.position;var morphNormals=material.morphNormals&&geometry.morphAttributes.normal;var morphInfluencesSum=0;for(var _i79=0;_i79<8;_i79++){var _influence=workInfluences[_i79];var index=_influence[0];var value=_influence[1];if(index!==Number.MAX_SAFE_INTEGER&&value){if(morphTargets&&geometry.getAttribute('morphTarget'+_i79)!==morphTargets[index]){geometry.setAttribute('morphTarget'+_i79,morphTargets[index]);}if(morphNormals&&geometry.getAttribute('morphNormal'+_i79)!==morphNormals[index]){geometry.setAttribute('morphNormal'+_i79,morphNormals[index]);}morphInfluences[_i79]=value;morphInfluencesSum+=value;}else{if(morphTargets&&geometry.getAttribute('morphTarget'+_i79)!==undefined){geometry.deleteAttribute('morphTarget'+_i79);}if(morphNormals&&geometry.getAttribute('morphNormal'+_i79)!==undefined){geometry.deleteAttribute('morphNormal'+_i79);}morphInfluences[_i79]=0;}}// GLSL shader uses formula baseinfluence * base + sum(target * influence)
     // This allows us to switch between absolute morphs and relative morphs without changing shader code
     // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
     var morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,'morphTargetBaseInfluence',morphBaseInfluence);program.getUniforms().setValue(gl,'morphTargetInfluences',morphInfluences);}return{update:update};}function WebGLObjects(gl,geometries,attributes,info){var updateMap=new WeakMap();function update(object){var frame=info.render.frame;var geometry=object.geometry;var buffergeometry=geometries.get(object,geometry);// Update once per frame
     if(updateMap.get(buffergeometry)!==frame){if(geometry.isGeometry){buffergeometry.updateFromObject(object);}geometries.update(buffergeometry);updateMap.set(buffergeometry,frame);}if(object.isInstancedMesh){attributes.update(object.instanceMatrix,34962);if(object.instanceColor!==null){attributes.update(object.instanceColor,34962);}}return buffergeometry;}function dispose(){updateMap=new WeakMap();}return{update:update,dispose:dispose};}function DataTexture2DArray(data,width,height,depth){Texture.call(this,null);this.image={data:data||null,width:width||1,height:height||1,depth:depth||1};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true;}DataTexture2DArray.prototype=Object.create(Texture.prototype);DataTexture2DArray.prototype.constructor=DataTexture2DArray;DataTexture2DArray.prototype.isDataTexture2DArray=true;function DataTexture3D(data,width,height,depth){// We're going to add .setXXX() methods for setting properties later.
     // Users can still set in DataTexture3D directly.
     //
     //	const texture = new THREE.DataTexture3D( data, width, height, depth );
     // 	texture.anisotropy = 16;
     //
     // See #14839
     Texture.call(this,null);this.image={data:data||null,width:width||1,height:height||1,depth:depth||1};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true;}DataTexture3D.prototype=Object.create(Texture.prototype);DataTexture3D.prototype.constructor=DataTexture3D;DataTexture3D.prototype.isDataTexture3D=true;/**
          * Uniforms of a program.
          * Those form a tree structure with a special top-level container for the root,
          * which you get by calling 'new WebGLUniforms( gl, program )'.
          *
          *
          * Properties of inner nodes including the top-level container:
          *
          * .seq - array of nested uniforms
          * .map - nested uniforms by name
          *
          *
          * Methods of all nodes except the top-level container:
          *
          * .setValue( gl, value, [textures] )
          *
          * 		uploads a uniform value(s)
          *  	the 'textures' parameter is needed for sampler uniforms
          *
          *
          * Static methods of the top-level container (textures factorizations):
          *
          * .upload( gl, seq, values, textures )
          *
          * 		sets uniforms in 'seq' to 'values[id].value'
          *
          * .seqWithValue( seq, values ) : filteredSeq
          *
          * 		filters 'seq' entries with corresponding entry in values
          *
          *
          * Methods of the top-level container (textures factorizations):
          *
          * .setValue( gl, name, value, textures )
          *
          * 		sets uniform with  name 'name' to 'value'
          *
          * .setOptional( gl, obj, prop )
          *
          * 		like .set for an optional property of the object
          *
          */var emptyTexture=new Texture();var emptyTexture2dArray=new DataTexture2DArray();var emptyTexture3d=new DataTexture3D();var emptyCubeTexture=new CubeTexture();// --- Utilities ---
     // Array Caches (provide typed arrays for temporary by size)
     var arrayCacheF32=[];var arrayCacheI32=[];// Float32Array caches used for uploading Matrix uniforms
     var mat4array=new Float32Array(16);var mat3array=new Float32Array(9);var mat2array=new Float32Array(4);// Flattening for arrays of vectors and matrices
     function flatten(array,nBlocks,blockSize){var firstElem=array[0];if(firstElem<=0||firstElem>0)return array;// unoptimized: ! isNaN( firstElem )
     // see http://jacksondunstan.com/articles/983
     var n=nBlocks*blockSize;var r=arrayCacheF32[n];if(r===undefined){r=new Float32Array(n);arrayCacheF32[n]=r;}if(nBlocks!==0){firstElem.toArray(r,0);for(var _i80=1,offset=0;_i80!==nBlocks;++_i80){offset+=blockSize;array[_i80].toArray(r,offset);}}return r;}function arraysEqual(a,b){if(a.length!==b.length)return false;for(var _i81=0,l=a.length;_i81<l;_i81++){if(a[_i81]!==b[_i81])return false;}return true;}function copyArray(a,b){for(var _i82=0,l=b.length;_i82<l;_i82++){a[_i82]=b[_i82];}}// Texture unit allocation
     function allocTexUnits(textures,n){var r=arrayCacheI32[n];if(r===undefined){r=new Int32Array(n);arrayCacheI32[n]=r;}for(var _i83=0;_i83!==n;++_i83){r[_i83]=textures.allocateTextureUnit();}return r;}// --- Setters ---
     // Note: Defining these methods externally, because they come in a bunch
     // and this way their names minify.
     // Single scalar
     function setValueV1f(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1f(this.addr,v);cache[0]=v;}// Single float vector (from flat array or THREE.VectorN)
     function setValueV2f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y){gl.uniform2f(this.addr,v.x,v.y);cache[0]=v.x;cache[1]=v.y;}}else{if(arraysEqual(cache,v))return;gl.uniform2fv(this.addr,v);copyArray(cache,v);}}function setValueV3f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z){gl.uniform3f(this.addr,v.x,v.y,v.z);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;}}else if(v.r!==undefined){if(cache[0]!==v.r||cache[1]!==v.g||cache[2]!==v.b){gl.uniform3f(this.addr,v.r,v.g,v.b);cache[0]=v.r;cache[1]=v.g;cache[2]=v.b;}}else{if(arraysEqual(cache,v))return;gl.uniform3fv(this.addr,v);copyArray(cache,v);}}function setValueV4f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w){gl.uniform4f(this.addr,v.x,v.y,v.z,v.w);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;cache[3]=v.w;}}else{if(arraysEqual(cache,v))return;gl.uniform4fv(this.addr,v);copyArray(cache,v);}}// Single matrix (from flat array or MatrixN)
     function setValueM2(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix2fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat2array.set(elements);gl.uniformMatrix2fv(this.addr,false,mat2array);copyArray(cache,elements);}}function setValueM3(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix3fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat3array.set(elements);gl.uniformMatrix3fv(this.addr,false,mat3array);copyArray(cache,elements);}}function setValueM4(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix4fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat4array.set(elements);gl.uniformMatrix4fv(this.addr,false,mat4array);copyArray(cache,elements);}}// Single texture (2D / Cube)
     function setValueT1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.safeSetTexture2D(v||emptyTexture,unit);}function setValueT2DArray1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture2DArray(v||emptyTexture2dArray,unit);}function setValueT3D1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture3D(v||emptyTexture3d,unit);}function setValueT6(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.safeSetTextureCube(v||emptyCubeTexture,unit);}// Integer / Boolean vectors or arrays thereof (always flat arrays)
     function setValueV1i(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1i(this.addr,v);cache[0]=v;}function setValueV2i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2iv(this.addr,v);copyArray(cache,v);}function setValueV3i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3iv(this.addr,v);copyArray(cache,v);}function setValueV4i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4iv(this.addr,v);copyArray(cache,v);}// uint
     function setValueV1ui(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1ui(this.addr,v);cache[0]=v;}// Helper to pick the right setter for the singular case
     function getSingularSetter(type){switch(type){case 0x1406:return setValueV1f;// FLOAT
     case 0x8b50:return setValueV2f;// _VEC2
     case 0x8b51:return setValueV3f;// _VEC3
     case 0x8b52:return setValueV4f;// _VEC4
     case 0x8b5a:return setValueM2;// _MAT2
     case 0x8b5b:return setValueM3;// _MAT3
     case 0x8b5c:return setValueM4;// _MAT4
     case 0x1404:case 0x8b56:return setValueV1i;// INT, BOOL
     case 0x8b53:case 0x8b57:return setValueV2i;// _VEC2
     case 0x8b54:case 0x8b58:return setValueV3i;// _VEC3
     case 0x8b55:case 0x8b59:return setValueV4i;// _VEC4
     case 0x1405:return setValueV1ui;// UINT
     case 0x8b5e:// SAMPLER_2D
     case 0x8d66:// SAMPLER_EXTERNAL_OES
     case 0x8dca:// INT_SAMPLER_2D
     case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
     case 0x8b62:// SAMPLER_2D_SHADOW
     return setValueT1;case 0x8b5f:// SAMPLER_3D
     case 0x8dcb:// INT_SAMPLER_3D
     case 0x8dd3:// UNSIGNED_INT_SAMPLER_3D
     return setValueT3D1;case 0x8b60:// SAMPLER_CUBE
     case 0x8dcc:// INT_SAMPLER_CUBE
     case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
     case 0x8dc5:// SAMPLER_CUBE_SHADOW
     return setValueT6;case 0x8dc1:// SAMPLER_2D_ARRAY
     case 0x8dcf:// INT_SAMPLER_2D_ARRAY
     case 0x8dd7:// UNSIGNED_INT_SAMPLER_2D_ARRAY
     case 0x8dc4:// SAMPLER_2D_ARRAY_SHADOW
     return setValueT2DArray1;}}// Array of scalars
     function setValueV1fArray(gl,v){gl.uniform1fv(this.addr,v);}// Integer / Boolean vectors or arrays thereof (always flat arrays)
     function setValueV1iArray(gl,v){gl.uniform1iv(this.addr,v);}function setValueV2iArray(gl,v){gl.uniform2iv(this.addr,v);}function setValueV3iArray(gl,v){gl.uniform3iv(this.addr,v);}function setValueV4iArray(gl,v){gl.uniform4iv(this.addr,v);}// Array of vectors (flat or from THREE classes)
     function setValueV2fArray(gl,v){var data=flatten(v,this.size,2);gl.uniform2fv(this.addr,data);}function setValueV3fArray(gl,v){var data=flatten(v,this.size,3);gl.uniform3fv(this.addr,data);}function setValueV4fArray(gl,v){var data=flatten(v,this.size,4);gl.uniform4fv(this.addr,data);}// Array of matrices (flat or from THREE clases)
     function setValueM2Array(gl,v){var data=flatten(v,this.size,4);gl.uniformMatrix2fv(this.addr,false,data);}function setValueM3Array(gl,v){var data=flatten(v,this.size,9);gl.uniformMatrix3fv(this.addr,false,data);}function setValueM4Array(gl,v){var data=flatten(v,this.size,16);gl.uniformMatrix4fv(this.addr,false,data);}// Array of textures (2D / Cube)
     function setValueT1Array(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var _i84=0;_i84!==n;++_i84){textures.safeSetTexture2D(v[_i84]||emptyTexture,units[_i84]);}}function setValueT6Array(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var _i85=0;_i85!==n;++_i85){textures.safeSetTextureCube(v[_i85]||emptyCubeTexture,units[_i85]);}}// Helper to pick the right setter for a pure (bottom-level) array
     function getPureArraySetter(type){switch(type){case 0x1406:return setValueV1fArray;// FLOAT
     case 0x8b50:return setValueV2fArray;// _VEC2
     case 0x8b51:return setValueV3fArray;// _VEC3
     case 0x8b52:return setValueV4fArray;// _VEC4
     case 0x8b5a:return setValueM2Array;// _MAT2
     case 0x8b5b:return setValueM3Array;// _MAT3
     case 0x8b5c:return setValueM4Array;// _MAT4
     case 0x1404:case 0x8b56:return setValueV1iArray;// INT, BOOL
     case 0x8b53:case 0x8b57:return setValueV2iArray;// _VEC2
     case 0x8b54:case 0x8b58:return setValueV3iArray;// _VEC3
     case 0x8b55:case 0x8b59:return setValueV4iArray;// _VEC4
     case 0x8b5e:// SAMPLER_2D
     case 0x8d66:// SAMPLER_EXTERNAL_OES
     case 0x8dca:// INT_SAMPLER_2D
     case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
     case 0x8b62:// SAMPLER_2D_SHADOW
     return setValueT1Array;case 0x8b60:// SAMPLER_CUBE
     case 0x8dcc:// INT_SAMPLER_CUBE
     case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
     case 0x8dc5:// SAMPLER_CUBE_SHADOW
     return setValueT6Array;}}// --- Uniform Classes ---
     function SingleUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.setValue=getSingularSetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
     }function PureArrayUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.size=activeInfo.size;this.setValue=getPureArraySetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
     }PureArrayUniform.prototype.updateCache=function(data){var cache=this.cache;if(_instanceof(data,Float32Array)&&cache.length!==data.length){this.cache=new Float32Array(data.length);}copyArray(cache,data);};function StructuredUniform(id){this.id=id;this.seq=[];this.map={};}StructuredUniform.prototype.setValue=function(gl,value,textures){var seq=this.seq;for(var _i86=0,n=seq.length;_i86!==n;++_i86){var u=seq[_i86];u.setValue(gl,value[u.id],textures);}};// --- Top-level ---
     // Parser - builds up the property tree from the path strings
     var RePathPart=/([\w\d_]+)(\])?(\[|\.)?/g;// extracts
     // 	- the identifier (member name or array index)
     //  - followed by an optional right bracket (found when array index)
     //  - followed by an optional left bracket or dot (type of subscript)
     //
     // Note: These portions can be read in a non-overlapping fashion and
     // allow straightforward parsing of the hierarchy that WebGL encodes
     // in the uniform names.
     function addUniform(container,uniformObject){container.seq.push(uniformObject);container.map[uniformObject.id]=uniformObject;}function parseUniform(activeInfo,addr,container){var path=activeInfo.name,pathLength=path.length;// reset RegExp object, because of the early exit of a previous run
     RePathPart.lastIndex=0;while(true){var match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex;var id=match[1];var idIsIndex=match[2]===']',subscript=match[3];if(idIsIndex)id=id|0;// convert to integer
     if(subscript===undefined||subscript==='['&&matchEnd+2===pathLength){// bare name or "pure" bottom-level array "[0]" suffix
     addUniform(container,subscript===undefined?new SingleUniform(id,activeInfo,addr):new PureArrayUniform(id,activeInfo,addr));break;}else{// step into inner node / create it in case it doesn't exist
     var map=container.map;var next=map[id];if(next===undefined){next=new StructuredUniform(id);addUniform(container,next);}container=next;}}}// Root Container
     function WebGLUniforms(gl,program){this.seq=[];this.map={};var n=gl.getProgramParameter(program,35718);for(var _i87=0;_i87<n;++_i87){var info=gl.getActiveUniform(program,_i87),addr=gl.getUniformLocation(program,info.name);parseUniform(info,addr,this);}}WebGLUniforms.prototype.setValue=function(gl,name,value,textures){var u=this.map[name];if(u!==undefined)u.setValue(gl,value,textures);};WebGLUniforms.prototype.setOptional=function(gl,object,name){var v=object[name];if(v!==undefined)this.setValue(gl,name,v);};// Static interface
     WebGLUniforms.upload=function(gl,seq,values,textures){for(var _i88=0,n=seq.length;_i88!==n;++_i88){var u=seq[_i88],v=values[u.id];if(v.needsUpdate!==false){// note: always updating when .needsUpdate is undefined
     u.setValue(gl,v.value,textures);}}};WebGLUniforms.seqWithValue=function(seq,values){var r=[];for(var _i89=0,n=seq.length;_i89!==n;++_i89){var u=seq[_i89];if(u.id in values)r.push(u);}return r;};function WebGLShader(gl,type,string){var shader=gl.createShader(type);gl.shaderSource(shader,string);gl.compileShader(shader);return shader;}var programIdCount=0;function addLineNumbers(string){var lines=string.split('\n');for(var _i90=0;_i90<lines.length;_i90++){lines[_i90]=_i90+1+': '+lines[_i90];}return lines.join('\n');}function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return['Linear','( value )'];case sRGBEncoding:return['sRGB','( value )'];case RGBEEncoding:return['RGBE','( value )'];case RGBM7Encoding:return['RGBM','( value, 7.0 )'];case RGBM16Encoding:return['RGBM','( value, 16.0 )'];case RGBDEncoding:return['RGBD','( value, 256.0 )'];case GammaEncoding:return['Gamma','( value, float( GAMMA_FACTOR ) )'];case LogLuvEncoding:return['LogLuv','( value )'];default:console.warn('THREE.WebGLProgram: Unsupported encoding:',encoding);return['Linear','( value )'];}}function getShaderErrors(gl,shader,type){var status=gl.getShaderParameter(shader,35713);var log=gl.getShaderInfoLog(shader).trim();if(status&&log==='')return'';// --enable-privileged-webgl-extension
     // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
     var source=gl.getShaderSource(shader);return'THREE.WebGLShader: gl.getShaderInfoLog() '+type+'\n'+log+addLineNumbers(source);}function getTexelDecodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return'vec4 '+functionName+'( vec4 value ) { return '+components[0]+'ToLinear'+components[1]+'; }';}function getTexelEncodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return'vec4 '+functionName+'( vec4 value ) { return LinearTo'+components[0]+components[1]+'; }';}function getToneMappingFunction(functionName,toneMapping){var toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName='Linear';break;case ReinhardToneMapping:toneMappingName='Reinhard';break;case CineonToneMapping:toneMappingName='OptimizedCineon';break;case ACESFilmicToneMapping:toneMappingName='ACESFilmic';break;case CustomToneMapping:toneMappingName='Custom';break;default:console.warn('THREE.WebGLProgram: Unsupported toneMapping:',toneMapping);toneMappingName='Linear';}return'vec3 '+functionName+'( vec3 color ) { return '+toneMappingName+'ToneMapping( color ); }';}function generateExtensions(parameters){var chunks=[parameters.extensionDerivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.tangentSpaceNormalMap||parameters.clearcoatNormalMap||parameters.flatShading||parameters.shaderID==='physical'?'#extension GL_OES_standard_derivatives : enable':'',(parameters.extensionFragDepth||parameters.logarithmicDepthBuffer)&&parameters.rendererExtensionFragDepth?'#extension GL_EXT_frag_depth : enable':'',parameters.extensionDrawBuffers&&parameters.rendererExtensionDrawBuffers?'#extension GL_EXT_draw_buffers : require':'',(parameters.extensionShaderTextureLOD||parameters.envMap)&&parameters.rendererExtensionShaderTextureLod?'#extension GL_EXT_shader_texture_lod : enable':''];return chunks.filter(filterEmptyLine).join('\n');}function generateDefines(defines){var chunks=[];for(var name in defines){var value=defines[name];if(value===false)continue;chunks.push('#define '+name+' '+value);}return chunks.join('\n');}function fetchAttributeLocations(gl,program){var attributes={};var n=gl.getProgramParameter(program,35721);for(var _i91=0;_i91<n;_i91++){var info=gl.getActiveAttrib(program,_i91);var name=info.name;// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
     attributes[name]=gl.getAttribLocation(program,name);}return attributes;}function filterEmptyLine(string){return string!=='';}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,parameters.numPointLightShadows);}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection);}// Resolve Includes
     var includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(string){return string.replace(includePattern,includeReplacer);}function includeReplacer(match,include){var string=ShaderChunk[include];if(string===undefined){throw new Error('Can not resolve #include <'+include+'>');}return resolveIncludes(string);}// Unroll Loops
     var deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;var unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(string){return string.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer);}function deprecatedLoopReplacer(match,start,end,snippet){console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');return loopReplacer(match,start,end,snippet);}function loopReplacer(match,start,end,snippet){var string='';for(var _i92=parseInt(start);_i92<parseInt(end);_i92++){string+=snippet.replace(/\[\s*i\s*\]/g,'[ '+_i92+' ]').replace(/UNROLLED_LOOP_INDEX/g,_i92);}return string;}//
     function generatePrecision(parameters){var precisionstring="precision "+parameters.precision+" float;\nprecision "+parameters.precision+" int;";if(parameters.precision==="highp"){precisionstring+="\n#define HIGH_PRECISION";}else if(parameters.precision==="mediump"){precisionstring+="\n#define MEDIUM_PRECISION";}else if(parameters.precision==="lowp"){precisionstring+="\n#define LOW_PRECISION";}return precisionstring;}function generateShadowMapTypeDefine(parameters){var shadowMapTypeDefine='SHADOWMAP_TYPE_BASIC';if(parameters.shadowMapType===PCFShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF';}else if(parameters.shadowMapType===PCFSoftShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF_SOFT';}else if(parameters.shadowMapType===VSMShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_VSM';}return shadowMapTypeDefine;}function generateEnvMapTypeDefine(parameters){var envMapTypeDefine='ENVMAP_TYPE_CUBE';if(parameters.envMap){switch(parameters.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE';break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE_UV';break;}}return envMapTypeDefine;}function generateEnvMapModeDefine(parameters){var envMapModeDefine='ENVMAP_MODE_REFLECTION';if(parameters.envMap){switch(parameters.envMapMode){case CubeRefractionMapping:case CubeUVRefractionMapping:envMapModeDefine='ENVMAP_MODE_REFRACTION';break;}}return envMapModeDefine;}function generateEnvMapBlendingDefine(parameters){var envMapBlendingDefine='ENVMAP_BLENDING_NONE';if(parameters.envMap){switch(parameters.combine){case MultiplyOperation:envMapBlendingDefine='ENVMAP_BLENDING_MULTIPLY';break;case MixOperation:envMapBlendingDefine='ENVMAP_BLENDING_MIX';break;case AddOperation:envMapBlendingDefine='ENVMAP_BLENDING_ADD';break;}}return envMapBlendingDefine;}function WebGLProgram(renderer,cacheKey,parameters,bindingStates){var gl=renderer.getContext();var defines=parameters.defines;var vertexShader=parameters.vertexShader;var fragmentShader=parameters.fragmentShader;var shadowMapTypeDefine=generateShadowMapTypeDefine(parameters);var envMapTypeDefine=generateEnvMapTypeDefine(parameters);var envMapModeDefine=generateEnvMapModeDefine(parameters);var envMapBlendingDefine=generateEnvMapBlendingDefine(parameters);var gammaFactorDefine=renderer.gammaFactor>0?renderer.gammaFactor:1.0;var customExtensions=parameters.isWebGL2?'':generateExtensions(parameters);var customDefines=generateDefines(defines);var program=gl.createProgram();var prefixVertex,prefixFragment;var versionString=parameters.glslVersion?'#version '+parameters.glslVersion+"\n":'';if(parameters.isRawShaderMaterial){prefixVertex=[customDefines].filter(filterEmptyLine).join('\n');if(prefixVertex.length>0){prefixVertex+='\n';}prefixFragment=[customExtensions,customDefines].filter(filterEmptyLine).join('\n');if(prefixFragment.length>0){prefixFragment+='\n';}}else{prefixVertex=[generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.instancing?'#define USE_INSTANCING':'',parameters.instancingColor?'#define USE_INSTANCING_COLOR':'',parameters.supportsVertexTextures?'#define VERTEX_TEXTURES':'','#define GAMMA_FACTOR '+gammaFactorDefine,'#define MAX_BONES '+parameters.maxBones,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoatMap?'#define USE_CLEARCOATMAP':'',parameters.clearcoatRoughnessMap?'#define USE_CLEARCOAT_ROUGHNESSMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.displacementMap&&parameters.supportsVertexTextures?'#define USE_DISPLACEMENTMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.transmissionMap?'#define USE_TRANSMISSIONMAP':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.skinning?'#define USE_SKINNING':'',parameters.useVertexTexture?'#define BONE_TEXTURE':'',parameters.morphTargets?'#define USE_MORPHTARGETS':'',parameters.morphNormals&&parameters.flatShading===false?'#define USE_MORPHNORMALS':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.sizeAttenuation?'#define USE_SIZEATTENUATION':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'','uniform mat4 modelMatrix;','uniform mat4 modelViewMatrix;','uniform mat4 projectionMatrix;','uniform mat4 viewMatrix;','uniform mat3 normalMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;','#ifdef USE_INSTANCING','	attribute mat4 instanceMatrix;','#endif','#ifdef USE_INSTANCING_COLOR','	attribute vec3 instanceColor;','#endif','attribute vec3 position;','attribute vec3 normal;','attribute vec2 uv;','#ifdef USE_TANGENT','	attribute vec4 tangent;','#endif','#ifdef USE_COLOR','	attribute vec3 color;','#endif','#ifdef USE_MORPHTARGETS','	attribute vec3 morphTarget0;','	attribute vec3 morphTarget1;','	attribute vec3 morphTarget2;','	attribute vec3 morphTarget3;','	#ifdef USE_MORPHNORMALS','		attribute vec3 morphNormal0;','		attribute vec3 morphNormal1;','		attribute vec3 morphNormal2;','		attribute vec3 morphNormal3;','	#else','		attribute vec3 morphTarget4;','		attribute vec3 morphTarget5;','		attribute vec3 morphTarget6;','		attribute vec3 morphTarget7;','	#endif','#endif','#ifdef USE_SKINNING','	attribute vec4 skinIndex;','	attribute vec4 skinWeight;','#endif','\n'].filter(filterEmptyLine).join('\n');prefixFragment=[customExtensions,generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.alphaTest?'#define ALPHATEST '+parameters.alphaTest+(parameters.alphaTest%1?'':'.0'):'',// add '.0' if integer
     '#define GAMMA_FACTOR '+gammaFactorDefine,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.matcap?'#define USE_MATCAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapTypeDefine:'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.envMap?'#define '+envMapBlendingDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoatMap?'#define USE_CLEARCOATMAP':'',parameters.clearcoatRoughnessMap?'#define USE_CLEARCOAT_ROUGHNESSMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.sheen?'#define USE_SHEEN':'',parameters.transmissionMap?'#define USE_TRANSMISSIONMAP':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors||parameters.instancingColor?'#define USE_COLOR':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.gradientMap?'#define USE_GRADIENTMAP':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.premultipliedAlpha?'#define PREMULTIPLIED_ALPHA':'',parameters.physicallyCorrectLights?'#define PHYSICALLY_CORRECT_LIGHTS':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'',(parameters.extensionShaderTextureLOD||parameters.envMap)&&parameters.rendererExtensionShaderTextureLod?'#define TEXTURE_LOD_EXT':'','uniform mat4 viewMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;',parameters.toneMapping!==NoToneMapping?'#define TONE_MAPPING':'',parameters.toneMapping!==NoToneMapping?ShaderChunk['tonemapping_pars_fragment']:'',// this code is required here because it is used by the toneMapping() function defined below
     parameters.toneMapping!==NoToneMapping?getToneMappingFunction('toneMapping',parameters.toneMapping):'',parameters.dithering?'#define DITHERING':'',ShaderChunk['encodings_pars_fragment'],// this code is required here because it is used by the various encoding/decoding function defined below
     parameters.map?getTexelDecodingFunction('mapTexelToLinear',parameters.mapEncoding):'',parameters.matcap?getTexelDecodingFunction('matcapTexelToLinear',parameters.matcapEncoding):'',parameters.envMap?getTexelDecodingFunction('envMapTexelToLinear',parameters.envMapEncoding):'',parameters.emissiveMap?getTexelDecodingFunction('emissiveMapTexelToLinear',parameters.emissiveMapEncoding):'',parameters.lightMap?getTexelDecodingFunction('lightMapTexelToLinear',parameters.lightMapEncoding):'',getTexelEncodingFunction('linearToOutputTexel',parameters.outputEncoding),parameters.depthPacking?'#define DEPTH_PACKING '+parameters.depthPacking:'','\n'].filter(filterEmptyLine).join('\n');}vertexShader=resolveIncludes(vertexShader);vertexShader=replaceLightNums(vertexShader,parameters);vertexShader=replaceClippingPlaneNums(vertexShader,parameters);fragmentShader=resolveIncludes(fragmentShader);fragmentShader=replaceLightNums(fragmentShader,parameters);fragmentShader=replaceClippingPlaneNums(fragmentShader,parameters);vertexShader=unrollLoops(vertexShader);fragmentShader=unrollLoops(fragmentShader);if(parameters.isWebGL2&&parameters.isRawShaderMaterial!==true){// GLSL 3.0 conversion for built-in materials and ShaderMaterial
     versionString='#version 300 es\n';prefixVertex=['#define attribute in','#define varying out','#define texture2D texture'].join('\n')+'\n'+prefixVertex;prefixFragment=['#define varying in',parameters.glslVersion===GLSL3?'':'out highp vec4 pc_fragColor;',parameters.glslVersion===GLSL3?'':'#define gl_FragColor pc_fragColor','#define gl_FragDepthEXT gl_FragDepth','#define texture2D texture','#define textureCube texture','#define texture2DProj textureProj','#define texture2DLodEXT textureLod','#define texture2DProjLodEXT textureProjLod','#define textureCubeLodEXT textureLod','#define texture2DGradEXT textureGrad','#define texture2DProjGradEXT textureProjGrad','#define textureCubeGradEXT textureGrad'].join('\n')+'\n'+prefixFragment;}var vertexGlsl=versionString+prefixVertex+vertexShader;var fragmentGlsl=versionString+prefixFragment+fragmentShader;// console.log( '*VERTEX*', vertexGlsl );
     // console.log( '*FRAGMENT*', fragmentGlsl );
     var glVertexShader=WebGLShader(gl,35633,vertexGlsl);var glFragmentShader=WebGLShader(gl,35632,fragmentGlsl);gl.attachShader(program,glVertexShader);gl.attachShader(program,glFragmentShader);// Force a particular attribute to index 0.
     if(parameters.index0AttributeName!==undefined){gl.bindAttribLocation(program,0,parameters.index0AttributeName);}else if(parameters.morphTargets===true){// programs with morphTargets displace position out of attribute 0
     gl.bindAttribLocation(program,0,'position');}gl.linkProgram(program);// check for link errors
     if(renderer.debug.checkShaderErrors){var programLog=gl.getProgramInfoLog(program).trim();var vertexLog=gl.getShaderInfoLog(glVertexShader).trim();var fragmentLog=gl.getShaderInfoLog(glFragmentShader).trim();var runnable=true;var haveDiagnostics=true;if(gl.getProgramParameter(program,35714)===false){runnable=false;var vertexErrors=getShaderErrors(gl,glVertexShader,'vertex');var fragmentErrors=getShaderErrors(gl,glFragmentShader,'fragment');console.error('THREE.WebGLProgram: shader error: ',gl.getError(),'35715',gl.getProgramParameter(program,35715),'gl.getProgramInfoLog',programLog,vertexErrors,fragmentErrors);}else if(programLog!==''){console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()',programLog);}else if(vertexLog===''||fragmentLog===''){haveDiagnostics=false;}if(haveDiagnostics){this.diagnostics={runnable:runnable,programLog:programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}};}}// Clean up
     // Crashes in iOS9 and iOS10. #18402
     // gl.detachShader( program, glVertexShader );
     // gl.detachShader( program, glFragmentShader );
     gl.deleteShader(glVertexShader);gl.deleteShader(glFragmentShader);// set up caching for uniform locations
     var cachedUniforms;this.getUniforms=function(){if(cachedUniforms===undefined){cachedUniforms=new WebGLUniforms(gl,program);}return cachedUniforms;};// set up caching for attribute locations
     var cachedAttributes;this.getAttributes=function(){if(cachedAttributes===undefined){cachedAttributes=fetchAttributeLocations(gl,program);}return cachedAttributes;};// free resource
     this.destroy=function(){bindingStates.releaseStatesOfProgram(this);gl.deleteProgram(program);this.program=undefined;};//
     this.name=parameters.shaderName;this.id=programIdCount++;this.cacheKey=cacheKey;this.usedTimes=1;this.program=program;this.vertexShader=glVertexShader;this.fragmentShader=glFragmentShader;return this;}function WebGLPrograms(renderer,cubemaps,extensions,capabilities,bindingStates,clipping){var programs=[];var isWebGL2=capabilities.isWebGL2;var logarithmicDepthBuffer=capabilities.logarithmicDepthBuffer;var floatVertexTextures=capabilities.floatVertexTextures;var maxVertexUniforms=capabilities.maxVertexUniforms;var vertexTextures=capabilities.vertexTextures;var precision=capabilities.precision;var shaderIDs={MeshDepthMaterial:'depth',MeshDistanceMaterial:'distanceRGBA',MeshNormalMaterial:'normal',MeshBasicMaterial:'basic',MeshLambertMaterial:'lambert',MeshPhongMaterial:'phong',MeshToonMaterial:'toon',MeshStandardMaterial:'physical',MeshPhysicalMaterial:'physical',MeshMatcapMaterial:'matcap',LineBasicMaterial:'basic',LineDashedMaterial:'dashed',PointsMaterial:'points',ShadowMaterial:'shadow',SpriteMaterial:'sprite'};var parameterNames=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping",'physicallyCorrectLights',"alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function getMaxBones(object){var skeleton=object.skeleton;var bones=skeleton.bones;if(floatVertexTextures){return 1024;}else{// default for when object is not specified
     // ( for example when prebuilding shader to be used with multiple objects )
     //
     //  - leave some extra space for other uniforms
     //  - limit here is ANGLE's 254 max uniform vectors
     //    (up to 54 should be safe)
     var nVertexUniforms=maxVertexUniforms;var nVertexMatrices=Math.floor((nVertexUniforms-20)/4);var maxBones=Math.min(nVertexMatrices,bones.length);if(maxBones<bones.length){console.warn('THREE.WebGLRenderer: Skeleton has '+bones.length+' bones. This GPU supports '+maxBones+'.');return 0;}return maxBones;}}function getTextureEncodingFromMap(map){var encoding;if(!map){encoding=LinearEncoding;}else if(map.isTexture){encoding=map.encoding;}else if(map.isWebGLRenderTarget){console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");encoding=map.texture.encoding;}return encoding;}function getParameters(material,lights,shadows,scene,object){var fog=scene.fog;var environment=material.isMeshStandardMaterial?scene.environment:null;var envMap=cubemaps.get(material.envMap||environment);var shaderID=shaderIDs[material.type];// heuristics to create shader parameters according to lights in the scene
     // (not to blow over maxLights budget)
     var maxBones=object.isSkinnedMesh?getMaxBones(object):0;if(material.precision!==null){precision=capabilities.getMaxPrecision(material.precision);if(precision!==material.precision){console.warn('THREE.WebGLProgram.getParameters:',material.precision,'not supported, using',precision,'instead.');}}var vertexShader,fragmentShader;if(shaderID){var shader=ShaderLib[shaderID];vertexShader=shader.vertexShader;fragmentShader=shader.fragmentShader;}else{vertexShader=material.vertexShader;fragmentShader=material.fragmentShader;}var currentRenderTarget=renderer.getRenderTarget();var parameters={isWebGL2:isWebGL2,shaderID:shaderID,shaderName:material.type,vertexShader:vertexShader,fragmentShader:fragmentShader,defines:material.defines,isRawShaderMaterial:material.isRawShaderMaterial===true,glslVersion:material.glslVersion,precision:precision,instancing:object.isInstancedMesh===true,instancingColor:object.isInstancedMesh===true&&object.instanceColor!==null,supportsVertexTextures:vertexTextures,outputEncoding:currentRenderTarget!==null?getTextureEncodingFromMap(currentRenderTarget.texture):renderer.outputEncoding,map:!!material.map,mapEncoding:getTextureEncodingFromMap(material.map),matcap:!!material.matcap,matcapEncoding:getTextureEncodingFromMap(material.matcap),envMap:!!envMap,envMapMode:envMap&&envMap.mapping,envMapEncoding:getTextureEncodingFromMap(envMap),envMapCubeUV:!!envMap&&(envMap.mapping===CubeUVReflectionMapping||envMap.mapping===CubeUVRefractionMapping),lightMap:!!material.lightMap,lightMapEncoding:getTextureEncodingFromMap(material.lightMap),aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,emissiveMapEncoding:getTextureEncodingFromMap(material.emissiveMap),bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:material.normalMapType===TangentSpaceNormalMap,clearcoatMap:!!material.clearcoatMap,clearcoatRoughnessMap:!!material.clearcoatRoughnessMap,clearcoatNormalMap:!!material.clearcoatNormalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,alphaMap:!!material.alphaMap,gradientMap:!!material.gradientMap,sheen:!!material.sheen,transmissionMap:!!material.transmissionMap,combine:material.combine,vertexTangents:material.normalMap&&material.vertexTangents,vertexColors:material.vertexColors,vertexUvs:!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatMap||!!material.clearcoatRoughnessMap||!!material.clearcoatNormalMap||!!material.displacementMap||!!material.transmissionMap,uvsVertexOnly:!(!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatNormalMap||!!material.transmissionMap)&&!!material.displacementMap,fog:!!fog,useFog:material.fog,fogExp2:fog&&fog.isFogExp2,flatShading:material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer:logarithmicDepthBuffer,skinning:material.skinning&&maxBones>0,maxBones:maxBones,useVertexTexture:floatVertexTextures,morphTargets:material.morphTargets,morphNormals:material.morphNormals,maxMorphTargets:renderer.maxMorphTargets,maxMorphNormals:renderer.maxMorphNormals,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numDirLightShadows:lights.directionalShadowMap.length,numPointLightShadows:lights.pointShadowMap.length,numSpotLightShadows:lights.spotShadowMap.length,numClippingPlanes:clipping.numPlanes,numClipIntersection:clipping.numIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:material.toneMapped?renderer.toneMapping:NoToneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,alphaTest:material.alphaTest,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,depthPacking:material.depthPacking!==undefined?material.depthPacking:false,index0AttributeName:material.index0AttributeName,extensionDerivatives:material.extensions&&material.extensions.derivatives,extensionFragDepth:material.extensions&&material.extensions.fragDepth,extensionDrawBuffers:material.extensions&&material.extensions.drawBuffers,extensionShaderTextureLOD:material.extensions&&material.extensions.shaderTextureLOD,rendererExtensionFragDepth:isWebGL2||extensions.has('EXT_frag_depth'),rendererExtensionDrawBuffers:isWebGL2||extensions.has('WEBGL_draw_buffers'),rendererExtensionShaderTextureLod:isWebGL2||extensions.has('EXT_shader_texture_lod'),customProgramCacheKey:material.customProgramCacheKey()};return parameters;}function getProgramCacheKey(parameters){var array=[];if(parameters.shaderID){array.push(parameters.shaderID);}else{array.push(parameters.fragmentShader);array.push(parameters.vertexShader);}if(parameters.defines!==undefined){for(var name in parameters.defines){array.push(name);array.push(parameters.defines[name]);}}if(parameters.isRawShaderMaterial===false){for(var _i93=0;_i93<parameterNames.length;_i93++){array.push(parameters[parameterNames[_i93]]);}array.push(renderer.outputEncoding);array.push(renderer.gammaFactor);}array.push(parameters.customProgramCacheKey);return array.join();}function getUniforms(material){var shaderID=shaderIDs[material.type];var uniforms;if(shaderID){var shader=ShaderLib[shaderID];uniforms=UniformsUtils.clone(shader.uniforms);}else{uniforms=material.uniforms;}return uniforms;}function acquireProgram(parameters,cacheKey){var program;// Check if code has been already compiled
     for(var p=0,pl=programs.length;p<pl;p++){var preexistingProgram=programs[p];if(preexistingProgram.cacheKey===cacheKey){program=preexistingProgram;++program.usedTimes;break;}}if(program===undefined){program=new WebGLProgram(renderer,cacheKey,parameters,bindingStates);programs.push(program);}return program;}function releaseProgram(program){if(--program.usedTimes===0){// Remove from unordered set
     var _i94=programs.indexOf(program);programs[_i94]=programs[programs.length-1];programs.pop();// Free WebGL resources
     program.destroy();}}return{getParameters:getParameters,getProgramCacheKey:getProgramCacheKey,getUniforms:getUniforms,acquireProgram:acquireProgram,releaseProgram:releaseProgram,// Exposed for resource monitoring & error feedback via renderer.info:
     programs:programs};}function WebGLProperties(){var properties=new WeakMap();function get(object){var map=properties.get(object);if(map===undefined){map={};properties.set(object,map);}return map;}function remove(object){properties.delete(object);}function update(object,key,value){properties.get(object)[key]=value;}function dispose(){properties=new WeakMap();}return{get:get,remove:remove,update:update,dispose:dispose};}function painterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.program!==b.program){return a.program.id-b.program.id;}else if(a.material.id!==b.material.id){return a.material.id-b.material.id;}else if(a.z!==b.z){return a.z-b.z;}else{return a.id-b.id;}}function reversePainterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.z!==b.z){return b.z-a.z;}else{return a.id-b.id;}}function WebGLRenderList(properties){var renderItems=[];var renderItemsIndex=0;var opaque=[];var transparent=[];var defaultProgram={id:-1};function init(){renderItemsIndex=0;opaque.length=0;transparent.length=0;}function getNextRenderItem(object,geometry,material,groupOrder,z,group){var renderItem=renderItems[renderItemsIndex];var materialProperties=properties.get(material);if(renderItem===undefined){renderItem={id:object.id,object:object,geometry:geometry,material:material,program:materialProperties.program||defaultProgram,groupOrder:groupOrder,renderOrder:object.renderOrder,z:z,group:group};renderItems[renderItemsIndex]=renderItem;}else{renderItem.id=object.id;renderItem.object=object;renderItem.geometry=geometry;renderItem.material=material;renderItem.program=materialProperties.program||defaultProgram;renderItem.groupOrder=groupOrder;renderItem.renderOrder=object.renderOrder;renderItem.z=z;renderItem.group=group;}renderItemsIndex++;return renderItem;}function push(object,geometry,material,groupOrder,z,group){var renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);(material.transparent===true?transparent:opaque).push(renderItem);}function unshift(object,geometry,material,groupOrder,z,group){var renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);(material.transparent===true?transparent:opaque).unshift(renderItem);}function sort(customOpaqueSort,customTransparentSort){if(opaque.length>1)opaque.sort(customOpaqueSort||painterSortStable);if(transparent.length>1)transparent.sort(customTransparentSort||reversePainterSortStable);}function finish(){// Clear references from inactive renderItems in the list
     for(var _i95=renderItemsIndex,il=renderItems.length;_i95<il;_i95++){var renderItem=renderItems[_i95];if(renderItem.id===null)break;renderItem.id=null;renderItem.object=null;renderItem.geometry=null;renderItem.material=null;renderItem.program=null;renderItem.group=null;}}return{opaque:opaque,transparent:transparent,init:init,push:push,unshift:unshift,finish:finish,sort:sort};}function WebGLRenderLists(properties){var lists=new WeakMap();function get(scene,camera){var cameras=lists.get(scene);var list;if(cameras===undefined){list=new WebGLRenderList(properties);lists.set(scene,new WeakMap());lists.get(scene).set(camera,list);}else{list=cameras.get(camera);if(list===undefined){list=new WebGLRenderList(properties);cameras.set(camera,list);}}return list;}function dispose(){lists=new WeakMap();}return{get:get,dispose:dispose};}function UniformsCache(){var lights={};return{get:function get(light){if(lights[light.id]!==undefined){return lights[light.id];}var uniforms;switch(light.type){case'DirectionalLight':uniforms={direction:new Vector3(),color:new Color()};break;case'SpotLight':uniforms={position:new Vector3(),direction:new Vector3(),color:new Color(),distance:0,coneCos:0,penumbraCos:0,decay:0};break;case'PointLight':uniforms={position:new Vector3(),color:new Color(),distance:0,decay:0};break;case'HemisphereLight':uniforms={direction:new Vector3(),skyColor:new Color(),groundColor:new Color()};break;case'RectAreaLight':uniforms={color:new Color(),position:new Vector3(),halfWidth:new Vector3(),halfHeight:new Vector3()};break;}lights[light.id]=uniforms;return uniforms;}};}function ShadowUniformsCache(){var lights={};return{get:function get(light){if(lights[light.id]!==undefined){return lights[light.id];}var uniforms;switch(light.type){case'DirectionalLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'SpotLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'PointLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2(),shadowCameraNear:1,shadowCameraFar:1000};break;// TODO (abelnation): set RectAreaLight shadow uniforms
     }lights[light.id]=uniforms;return uniforms;}};}var nextVersion=0;function shadowCastingLightsFirst(lightA,lightB){return(lightB.castShadow?1:0)-(lightA.castShadow?1:0);}function WebGLLights(){var cache=new UniformsCache();var shadowCache=ShadowUniformsCache();var state={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(var _i96=0;_i96<9;_i96++){state.probe.push(new Vector3());}var vector3=new Vector3();var matrix4=new Matrix4();var matrix42=new Matrix4();function setup(lights,shadows,camera){var r=0,g=0,b=0;for(var _i97=0;_i97<9;_i97++){state.probe[_i97].set(0,0,0);}var directionalLength=0;var pointLength=0;var spotLength=0;var rectAreaLength=0;var hemiLength=0;var numDirectionalShadows=0;var numPointShadows=0;var numSpotShadows=0;var viewMatrix=camera.matrixWorldInverse;lights.sort(shadowCastingLightsFirst);for(var _i98=0,l=lights.length;_i98<l;_i98++){var light=lights[_i98];var color=light.color;var intensity=light.intensity;var distance=light.distance;var shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null;if(light.isAmbientLight){r+=color.r*intensity;g+=color.g*intensity;b+=color.b*intensity;}else if(light.isLightProbe){for(var j=0;j<9;j++){state.probe[j].addScaledVector(light.sh.coefficients[j],intensity);}}else if(light.isDirectionalLight){var uniforms=cache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity);uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);if(light.castShadow){var shadow=light.shadow;var shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias;shadowUniforms.shadowNormalBias=shadow.normalBias;shadowUniforms.shadowRadius=shadow.radius;shadowUniforms.shadowMapSize=shadow.mapSize;state.directionalShadow[directionalLength]=shadowUniforms;state.directionalShadowMap[directionalLength]=shadowMap;state.directionalShadowMatrix[directionalLength]=light.shadow.matrix;numDirectionalShadows++;}state.directional[directionalLength]=uniforms;directionalLength++;}else if(light.isSpotLight){var _uniforms=cache.get(light);_uniforms.position.setFromMatrixPosition(light.matrixWorld);_uniforms.position.applyMatrix4(viewMatrix);_uniforms.color.copy(color).multiplyScalar(intensity);_uniforms.distance=distance;_uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);_uniforms.direction.sub(vector3);_uniforms.direction.transformDirection(viewMatrix);_uniforms.coneCos=Math.cos(light.angle);_uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra));_uniforms.decay=light.decay;if(light.castShadow){var _shadow=light.shadow;var _shadowUniforms=shadowCache.get(light);_shadowUniforms.shadowBias=_shadow.bias;_shadowUniforms.shadowNormalBias=_shadow.normalBias;_shadowUniforms.shadowRadius=_shadow.radius;_shadowUniforms.shadowMapSize=_shadow.mapSize;state.spotShadow[spotLength]=_shadowUniforms;state.spotShadowMap[spotLength]=shadowMap;state.spotShadowMatrix[spotLength]=light.shadow.matrix;numSpotShadows++;}state.spot[spotLength]=_uniforms;spotLength++;}else if(light.isRectAreaLight){var _uniforms2=cache.get(light);// (a) intensity is the total visible light emitted
     //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
     // (b) intensity is the brightness of the light
     _uniforms2.color.copy(color).multiplyScalar(intensity);_uniforms2.position.setFromMatrixPosition(light.matrixWorld);_uniforms2.position.applyMatrix4(viewMatrix);// extract local rotation of light to derive width/height half vectors
     matrix42.identity();matrix4.copy(light.matrixWorld);matrix4.premultiply(viewMatrix);matrix42.extractRotation(matrix4);_uniforms2.halfWidth.set(light.width*0.5,0.0,0.0);_uniforms2.halfHeight.set(0.0,light.height*0.5,0.0);_uniforms2.halfWidth.applyMatrix4(matrix42);_uniforms2.halfHeight.applyMatrix4(matrix42);// TODO (abelnation): RectAreaLight distance?
     // uniforms.distance = distance;
     state.rectArea[rectAreaLength]=_uniforms2;rectAreaLength++;}else if(light.isPointLight){var _uniforms3=cache.get(light);_uniforms3.position.setFromMatrixPosition(light.matrixWorld);_uniforms3.position.applyMatrix4(viewMatrix);_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);_uniforms3.distance=light.distance;_uniforms3.decay=light.decay;if(light.castShadow){var _shadow2=light.shadow;var _shadowUniforms2=shadowCache.get(light);_shadowUniforms2.shadowBias=_shadow2.bias;_shadowUniforms2.shadowNormalBias=_shadow2.normalBias;_shadowUniforms2.shadowRadius=_shadow2.radius;_shadowUniforms2.shadowMapSize=_shadow2.mapSize;_shadowUniforms2.shadowCameraNear=_shadow2.camera.near;_shadowUniforms2.shadowCameraFar=_shadow2.camera.far;state.pointShadow[pointLength]=_shadowUniforms2;state.pointShadowMap[pointLength]=shadowMap;state.pointShadowMatrix[pointLength]=light.shadow.matrix;numPointShadows++;}state.point[pointLength]=_uniforms3;pointLength++;}else if(light.isHemisphereLight){var _uniforms4=cache.get(light);_uniforms4.direction.setFromMatrixPosition(light.matrixWorld);_uniforms4.direction.transformDirection(viewMatrix);_uniforms4.direction.normalize();_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);state.hemi[hemiLength]=_uniforms4;hemiLength++;}}if(rectAreaLength>0){state.rectAreaLTC1=UniformsLib.LTC_1;state.rectAreaLTC2=UniformsLib.LTC_2;}state.ambient[0]=r;state.ambient[1]=g;state.ambient[2]=b;var hash=state.hash;if(hash.directionalLength!==directionalLength||hash.pointLength!==pointLength||hash.spotLength!==spotLength||hash.rectAreaLength!==rectAreaLength||hash.hemiLength!==hemiLength||hash.numDirectionalShadows!==numDirectionalShadows||hash.numPointShadows!==numPointShadows||hash.numSpotShadows!==numSpotShadows){state.directional.length=directionalLength;state.spot.length=spotLength;state.rectArea.length=rectAreaLength;state.point.length=pointLength;state.hemi.length=hemiLength;state.directionalShadow.length=numDirectionalShadows;state.directionalShadowMap.length=numDirectionalShadows;state.pointShadow.length=numPointShadows;state.pointShadowMap.length=numPointShadows;state.spotShadow.length=numSpotShadows;state.spotShadowMap.length=numSpotShadows;state.directionalShadowMatrix.length=numDirectionalShadows;state.pointShadowMatrix.length=numPointShadows;state.spotShadowMatrix.length=numSpotShadows;hash.directionalLength=directionalLength;hash.pointLength=pointLength;hash.spotLength=spotLength;hash.rectAreaLength=rectAreaLength;hash.hemiLength=hemiLength;hash.numDirectionalShadows=numDirectionalShadows;hash.numPointShadows=numPointShadows;hash.numSpotShadows=numSpotShadows;state.version=nextVersion++;}}return{setup:setup,state:state};}function WebGLRenderState(){var lights=new WebGLLights();var lightsArray=[];var shadowsArray=[];function init(){lightsArray.length=0;shadowsArray.length=0;}function pushLight(light){lightsArray.push(light);}function pushShadow(shadowLight){shadowsArray.push(shadowLight);}function setupLights(camera){lights.setup(lightsArray,shadowsArray,camera);}var state={lightsArray:lightsArray,shadowsArray:shadowsArray,lights:lights};return{init:init,state:state,setupLights:setupLights,pushLight:pushLight,pushShadow:pushShadow};}function WebGLRenderStates(){var renderStates=new WeakMap();function get(scene,camera){var renderState;if(renderStates.has(scene)===false){renderState=new WebGLRenderState();renderStates.set(scene,new WeakMap());renderStates.get(scene).set(camera,renderState);}else{if(renderStates.get(scene).has(camera)===false){renderState=new WebGLRenderState();renderStates.get(scene).set(camera,renderState);}else{renderState=renderStates.get(scene).get(camera);}}return renderState;}function dispose(){renderStates=new WeakMap();}return{get:get,dispose:dispose};}/**
          * parameters = {
          *
          *  opacity: <float>,
          *
          *  map: new THREE.Texture( <Image> ),
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>
          * }
          */function MeshDepthMaterial(parameters){Material.call(this);this.type='MeshDepthMaterial';this.depthPacking=BasicDepthPacking;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.setValues(parameters);}MeshDepthMaterial.prototype=Object.create(Material.prototype);MeshDepthMaterial.prototype.constructor=MeshDepthMaterial;MeshDepthMaterial.prototype.isMeshDepthMaterial=true;MeshDepthMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.depthPacking=source.depthPacking;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this;};/**
          * parameters = {
          *
          *  referencePosition: <float>,
          *  nearDistance: <float>,
          *  farDistance: <float>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *
          *  map: new THREE.Texture( <Image> ),
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>
          *
          * }
          */function MeshDistanceMaterial(parameters){Material.call(this);this.type='MeshDistanceMaterial';this.referencePosition=new Vector3();this.nearDistance=1;this.farDistance=1000;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.setValues(parameters);}MeshDistanceMaterial.prototype=Object.create(Material.prototype);MeshDistanceMaterial.prototype.constructor=MeshDistanceMaterial;MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;MeshDistanceMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.referencePosition.copy(source.referencePosition);this.nearDistance=source.nearDistance;this.farDistance=source.farDistance;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;return this;};var vsm_frag="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";var vsm_vert="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";function WebGLShadowMap(_renderer,_objects,maxTextureSize){var _frustum=new Frustum();var _shadowMapSize=new Vector2(),_viewportSize=new Vector2(),_viewport=new Vector4(),_depthMaterials=[],_distanceMaterials=[],_materialCache={};var shadowSide={0:BackSide,1:FrontSide,2:DoubleSide};var shadowMaterialVertical=new ShaderMaterial({defines:{SAMPLE_RATE:2.0/8.0,HALF_SAMPLE_RATE:1.0/8.0},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2()},radius:{value:4.0}},vertexShader:vsm_vert,fragmentShader:vsm_frag});var shadowMaterialHorizonal=shadowMaterialVertical.clone();shadowMaterialHorizonal.defines.HORIZONAL_PASS=1;var fullScreenTri=new BufferGeometry();fullScreenTri.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));var fullScreenMesh=new Mesh(fullScreenTri,shadowMaterialVertical);var scope=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(lights,scene,camera){if(scope.enabled===false)return;if(scope.autoUpdate===false&&scope.needsUpdate===false)return;if(lights.length===0)return;var currentRenderTarget=_renderer.getRenderTarget();var activeCubeFace=_renderer.getActiveCubeFace();var activeMipmapLevel=_renderer.getActiveMipmapLevel();var _state=_renderer.state;// Set GL state for depth map.
     _state.setBlending(NoBlending);_state.buffers.color.setClear(1,1,1,1);_state.buffers.depth.setTest(true);_state.setScissorTest(false);// render depth map
     for(var _i99=0,il=lights.length;_i99<il;_i99++){var light=lights[_i99];var shadow=light.shadow;if(shadow===undefined){console.warn('THREE.WebGLShadowMap:',light,'has no shadow.');continue;}if(shadow.autoUpdate===false&&shadow.needsUpdate===false)continue;_shadowMapSize.copy(shadow.mapSize);var shadowFrameExtents=shadow.getFrameExtents();_shadowMapSize.multiply(shadowFrameExtents);_viewportSize.copy(shadow.mapSize);if(_shadowMapSize.x>maxTextureSize||_shadowMapSize.y>maxTextureSize){if(_shadowMapSize.x>maxTextureSize){_viewportSize.x=Math.floor(maxTextureSize/shadowFrameExtents.x);_shadowMapSize.x=_viewportSize.x*shadowFrameExtents.x;shadow.mapSize.x=_viewportSize.x;}if(_shadowMapSize.y>maxTextureSize){_viewportSize.y=Math.floor(maxTextureSize/shadowFrameExtents.y);_shadowMapSize.y=_viewportSize.y*shadowFrameExtents.y;shadow.mapSize.y=_viewportSize.y;}}if(shadow.map===null&&!shadow.isPointLightShadow&&this.type===VSMShadowMap){var pars={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+".shadowMap";shadow.mapPass=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.camera.updateProjectionMatrix();}if(shadow.map===null){var _pars={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,_pars);shadow.map.texture.name=light.name+".shadowMap";shadow.camera.updateProjectionMatrix();}_renderer.setRenderTarget(shadow.map);_renderer.clear();var viewportCount=shadow.getViewportCount();for(var vp=0;vp<viewportCount;vp++){var viewport=shadow.getViewport(vp);_viewport.set(_viewportSize.x*viewport.x,_viewportSize.y*viewport.y,_viewportSize.x*viewport.z,_viewportSize.y*viewport.w);_state.viewport(_viewport);shadow.updateMatrices(light,vp);_frustum=shadow.getFrustum();renderObject(scene,camera,shadow.camera,light,this.type);}// do blur pass for VSM
     if(!shadow.isPointLightShadow&&this.type===VSMShadowMap){VSMPass(shadow,camera);}shadow.needsUpdate=false;}scope.needsUpdate=false;_renderer.setRenderTarget(currentRenderTarget,activeCubeFace,activeMipmapLevel);};function VSMPass(shadow,camera){var geometry=_objects.update(fullScreenMesh);// vertical pass
     shadowMaterialVertical.uniforms.shadow_pass.value=shadow.map.texture;shadowMaterialVertical.uniforms.resolution.value=shadow.mapSize;shadowMaterialVertical.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.mapPass);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialVertical,fullScreenMesh,null);// horizonal pass
     shadowMaterialHorizonal.uniforms.shadow_pass.value=shadow.mapPass.texture;shadowMaterialHorizonal.uniforms.resolution.value=shadow.mapSize;shadowMaterialHorizonal.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.map);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialHorizonal,fullScreenMesh,null);}function getDepthMaterialVariant(useMorphing,useSkinning,useInstancing){var index=useMorphing<<0|useSkinning<<1|useInstancing<<2;var material=_depthMaterials[index];if(material===undefined){material=new MeshDepthMaterial({depthPacking:RGBADepthPacking,morphTargets:useMorphing,skinning:useSkinning});_depthMaterials[index]=material;}return material;}function getDistanceMaterialVariant(useMorphing,useSkinning,useInstancing){var index=useMorphing<<0|useSkinning<<1|useInstancing<<2;var material=_distanceMaterials[index];if(material===undefined){material=new MeshDistanceMaterial({morphTargets:useMorphing,skinning:useSkinning});_distanceMaterials[index]=material;}return material;}function getDepthMaterial(object,geometry,material,light,shadowCameraNear,shadowCameraFar,type){var result=null;var getMaterialVariant=getDepthMaterialVariant;var customMaterial=object.customDepthMaterial;if(light.isPointLight===true){getMaterialVariant=getDistanceMaterialVariant;customMaterial=object.customDistanceMaterial;}if(customMaterial===undefined){var useMorphing=false;if(material.morphTargets===true){useMorphing=geometry.morphAttributes&&geometry.morphAttributes.position&&geometry.morphAttributes.position.length>0;}var useSkinning=false;if(object.isSkinnedMesh===true){if(material.skinning===true){useSkinning=true;}else{console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:',object);}}var useInstancing=object.isInstancedMesh===true;result=getMaterialVariant(useMorphing,useSkinning,useInstancing);}else{result=customMaterial;}if(_renderer.localClippingEnabled&&material.clipShadows===true&&material.clippingPlanes.length!==0){// in this case we need a unique material instance reflecting the
     // appropriate state
     var keyA=result.uuid,keyB=material.uuid;var materialsForVariant=_materialCache[keyA];if(materialsForVariant===undefined){materialsForVariant={};_materialCache[keyA]=materialsForVariant;}var cachedMaterial=materialsForVariant[keyB];if(cachedMaterial===undefined){cachedMaterial=result.clone();materialsForVariant[keyB]=cachedMaterial;}result=cachedMaterial;}result.visible=material.visible;result.wireframe=material.wireframe;if(type===VSMShadowMap){result.side=material.shadowSide!==null?material.shadowSide:material.side;}else{result.side=material.shadowSide!==null?material.shadowSide:shadowSide[material.side];}result.clipShadows=material.clipShadows;result.clippingPlanes=material.clippingPlanes;result.clipIntersection=material.clipIntersection;result.wireframeLinewidth=material.wireframeLinewidth;result.linewidth=material.linewidth;if(light.isPointLight===true&&result.isMeshDistanceMaterial===true){result.referencePosition.setFromMatrixPosition(light.matrixWorld);result.nearDistance=shadowCameraNear;result.farDistance=shadowCameraFar;}return result;}function renderObject(object,camera,shadowCamera,light,type){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible&&(object.isMesh||object.isLine||object.isPoints)){if((object.castShadow||object.receiveShadow&&type===VSMShadowMap)&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);var geometry=_objects.update(object);var material=object.material;if(Array.isArray(material)){var groups=geometry.groups;for(var k=0,kl=groups.length;k<kl;k++){var group=groups[k];var groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){var depthMaterial=getDepthMaterial(object,geometry,groupMaterial,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group);}}}else if(material.visible){var _depthMaterial=getDepthMaterial(object,geometry,material,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,_depthMaterial,object,null);}}}var children=object.children;for(var _i100=0,l=children.length;_i100<l;_i100++){renderObject(children[_i100],camera,shadowCamera,light,type);}}}function WebGLState(gl,extensions,capabilities){var _equationToGL,_factorToGL;var isWebGL2=capabilities.isWebGL2;function ColorBuffer(){var locked=false;var color=new Vector4();var currentColorMask=null;var currentColorClear=new Vector4(0,0,0,0);return{setMask:function setMask(colorMask){if(currentColorMask!==colorMask&&!locked){gl.colorMask(colorMask,colorMask,colorMask,colorMask);currentColorMask=colorMask;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(r,g,b,a,premultipliedAlpha){if(premultipliedAlpha===true){r*=a;g*=a;b*=a;}color.set(r,g,b,a);if(currentColorClear.equals(color)===false){gl.clearColor(r,g,b,a);currentColorClear.copy(color);}},reset:function reset(){locked=false;currentColorMask=null;currentColorClear.set(-1,0,0,0);// set to invalid state
     }};}function DepthBuffer(){var locked=false;var currentDepthMask=null;var currentDepthFunc=null;var currentDepthClear=null;return{setTest:function setTest(depthTest){if(depthTest){enable(2929);}else{disable(2929);}},setMask:function setMask(depthMask){if(currentDepthMask!==depthMask&&!locked){gl.depthMask(depthMask);currentDepthMask=depthMask;}},setFunc:function setFunc(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc){switch(depthFunc){case NeverDepth:gl.depthFunc(512);break;case AlwaysDepth:gl.depthFunc(519);break;case LessDepth:gl.depthFunc(513);break;case LessEqualDepth:gl.depthFunc(515);break;case EqualDepth:gl.depthFunc(514);break;case GreaterEqualDepth:gl.depthFunc(518);break;case GreaterDepth:gl.depthFunc(516);break;case NotEqualDepth:gl.depthFunc(517);break;default:gl.depthFunc(515);}}else{gl.depthFunc(515);}currentDepthFunc=depthFunc;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(depth){if(currentDepthClear!==depth){gl.clearDepth(depth);currentDepthClear=depth;}},reset:function reset(){locked=false;currentDepthMask=null;currentDepthFunc=null;currentDepthClear=null;}};}function StencilBuffer(){var locked=false;var currentStencilMask=null;var currentStencilFunc=null;var currentStencilRef=null;var currentStencilFuncMask=null;var currentStencilFail=null;var currentStencilZFail=null;var currentStencilZPass=null;var currentStencilClear=null;return{setTest:function setTest(stencilTest){if(!locked){if(stencilTest){enable(2960);}else{disable(2960);}}},setMask:function setMask(stencilMask){if(currentStencilMask!==stencilMask&&!locked){gl.stencilMask(stencilMask);currentStencilMask=stencilMask;}},setFunc:function setFunc(stencilFunc,stencilRef,stencilMask){if(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask){gl.stencilFunc(stencilFunc,stencilRef,stencilMask);currentStencilFunc=stencilFunc;currentStencilRef=stencilRef;currentStencilFuncMask=stencilMask;}},setOp:function setOp(stencilFail,stencilZFail,stencilZPass){if(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass){gl.stencilOp(stencilFail,stencilZFail,stencilZPass);currentStencilFail=stencilFail;currentStencilZFail=stencilZFail;currentStencilZPass=stencilZPass;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(stencil){if(currentStencilClear!==stencil){gl.clearStencil(stencil);currentStencilClear=stencil;}},reset:function reset(){locked=false;currentStencilMask=null;currentStencilFunc=null;currentStencilRef=null;currentStencilFuncMask=null;currentStencilFail=null;currentStencilZFail=null;currentStencilZPass=null;currentStencilClear=null;}};}//
     var colorBuffer=new ColorBuffer();var depthBuffer=new DepthBuffer();var stencilBuffer=new StencilBuffer();var enabledCapabilities={};var currentProgram=null;var currentBlendingEnabled=null;var currentBlending=null;var currentBlendEquation=null;var currentBlendSrc=null;var currentBlendDst=null;var currentBlendEquationAlpha=null;var currentBlendSrcAlpha=null;var currentBlendDstAlpha=null;var currentPremultipledAlpha=false;var currentFlipSided=null;var currentCullFace=null;var currentLineWidth=null;var currentPolygonOffsetFactor=null;var currentPolygonOffsetUnits=null;var maxTextures=gl.getParameter(35661);var lineWidthAvailable=false;var version=0;var glVersion=gl.getParameter(7938);if(glVersion.indexOf('WebGL')!==-1){version=parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);lineWidthAvailable=version>=1.0;}else if(glVersion.indexOf('OpenGL ES')!==-1){version=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);lineWidthAvailable=version>=2.0;}var currentTextureSlot=null;var currentBoundTextures={};var currentScissor=new Vector4();var currentViewport=new Vector4();function createTexture(type,target,count){var data=new Uint8Array(4);// 4 is required to match default unpack alignment of 4.
     var texture=gl.createTexture();gl.bindTexture(type,texture);gl.texParameteri(type,10241,9728);gl.texParameteri(type,10240,9728);for(var _i101=0;_i101<count;_i101++){gl.texImage2D(target+_i101,0,6408,1,1,0,6408,5121,data);}return texture;}var emptyTextures={};emptyTextures[3553]=createTexture(3553,3553,1);emptyTextures[34067]=createTexture(34067,34069,6);// init
     colorBuffer.setClear(0,0,0,1);depthBuffer.setClear(1);stencilBuffer.setClear(0);enable(2929);depthBuffer.setFunc(LessEqualDepth);setFlipSided(false);setCullFace(CullFaceBack);enable(2884);setBlending(NoBlending);//
     function enable(id){if(enabledCapabilities[id]!==true){gl.enable(id);enabledCapabilities[id]=true;}}function disable(id){if(enabledCapabilities[id]!==false){gl.disable(id);enabledCapabilities[id]=false;}}function useProgram(program){if(currentProgram!==program){gl.useProgram(program);currentProgram=program;return true;}return false;}var equationToGL=(_equationToGL={},_defineProperty(_equationToGL,AddEquation,32774),_defineProperty(_equationToGL,SubtractEquation,32778),_defineProperty(_equationToGL,ReverseSubtractEquation,32779),_equationToGL);if(isWebGL2){equationToGL[MinEquation]=32775;equationToGL[MaxEquation]=32776;}else{var extension=extensions.get('EXT_blend_minmax');if(extension!==null){equationToGL[MinEquation]=extension.MIN_EXT;equationToGL[MaxEquation]=extension.MAX_EXT;}}var factorToGL=(_factorToGL={},_defineProperty(_factorToGL,ZeroFactor,0),_defineProperty(_factorToGL,OneFactor,1),_defineProperty(_factorToGL,SrcColorFactor,768),_defineProperty(_factorToGL,SrcAlphaFactor,770),_defineProperty(_factorToGL,SrcAlphaSaturateFactor,776),_defineProperty(_factorToGL,DstColorFactor,774),_defineProperty(_factorToGL,DstAlphaFactor,772),_defineProperty(_factorToGL,OneMinusSrcColorFactor,769),_defineProperty(_factorToGL,OneMinusSrcAlphaFactor,771),_defineProperty(_factorToGL,OneMinusDstColorFactor,775),_defineProperty(_factorToGL,OneMinusDstAlphaFactor,773),_factorToGL);function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending===NoBlending){if(currentBlendingEnabled){disable(3042);currentBlendingEnabled=false;}return;}if(!currentBlendingEnabled){enable(3042);currentBlendingEnabled=true;}if(blending!==CustomBlending){if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha){if(currentBlendEquation!==AddEquation||currentBlendEquationAlpha!==AddEquation){gl.blendEquation(32774);currentBlendEquation=AddEquation;currentBlendEquationAlpha=AddEquation;}if(premultipliedAlpha){switch(blending){case NormalBlending:gl.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:gl.blendFunc(1,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,0,769,771);break;case MultiplyBlending:gl.blendFuncSeparate(0,768,0,770);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}else{switch(blending){case NormalBlending:gl.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:gl.blendFunc(770,1);break;case SubtractiveBlending:gl.blendFunc(0,769);break;case MultiplyBlending:gl.blendFunc(0,768);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}currentBlendSrc=null;currentBlendDst=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentBlending=blending;currentPremultipledAlpha=premultipliedAlpha;}return;}// custom blending
     blendEquationAlpha=blendEquationAlpha||blendEquation;blendSrcAlpha=blendSrcAlpha||blendSrc;blendDstAlpha=blendDstAlpha||blendDst;if(blendEquation!==currentBlendEquation||blendEquationAlpha!==currentBlendEquationAlpha){gl.blendEquationSeparate(equationToGL[blendEquation],equationToGL[blendEquationAlpha]);currentBlendEquation=blendEquation;currentBlendEquationAlpha=blendEquationAlpha;}if(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha){gl.blendFuncSeparate(factorToGL[blendSrc],factorToGL[blendDst],factorToGL[blendSrcAlpha],factorToGL[blendDstAlpha]);currentBlendSrc=blendSrc;currentBlendDst=blendDst;currentBlendSrcAlpha=blendSrcAlpha;currentBlendDstAlpha=blendDstAlpha;}currentBlending=blending;currentPremultipledAlpha=null;}function setMaterial(material,frontFaceCW){material.side===DoubleSide?disable(2884):enable(2884);var flipSided=material.side===BackSide;if(frontFaceCW)flipSided=!flipSided;setFlipSided(flipSided);material.blending===NormalBlending&&material.transparent===false?setBlending(NoBlending):setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha);depthBuffer.setFunc(material.depthFunc);depthBuffer.setTest(material.depthTest);depthBuffer.setMask(material.depthWrite);colorBuffer.setMask(material.colorWrite);var stencilWrite=material.stencilWrite;stencilBuffer.setTest(stencilWrite);if(stencilWrite){stencilBuffer.setMask(material.stencilWriteMask);stencilBuffer.setFunc(material.stencilFunc,material.stencilRef,material.stencilFuncMask);stencilBuffer.setOp(material.stencilFail,material.stencilZFail,material.stencilZPass);}setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits);}//
     function setFlipSided(flipSided){if(currentFlipSided!==flipSided){if(flipSided){gl.frontFace(2304);}else{gl.frontFace(2305);}currentFlipSided=flipSided;}}function setCullFace(cullFace){if(cullFace!==CullFaceNone){enable(2884);if(cullFace!==currentCullFace){if(cullFace===CullFaceBack){gl.cullFace(1029);}else if(cullFace===CullFaceFront){gl.cullFace(1028);}else{gl.cullFace(1032);}}}else{disable(2884);}currentCullFace=cullFace;}function setLineWidth(width){if(width!==currentLineWidth){if(lineWidthAvailable)gl.lineWidth(width);currentLineWidth=width;}}function setPolygonOffset(polygonOffset,factor,units){if(polygonOffset){enable(32823);if(currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units){gl.polygonOffset(factor,units);currentPolygonOffsetFactor=factor;currentPolygonOffsetUnits=units;}}else{disable(32823);}}function setScissorTest(scissorTest){if(scissorTest){enable(3089);}else{disable(3089);}}// texture
     function activeTexture(webglSlot){if(webglSlot===undefined)webglSlot=33984+maxTextures-1;if(currentTextureSlot!==webglSlot){gl.activeTexture(webglSlot);currentTextureSlot=webglSlot;}}function bindTexture(webglType,webglTexture){if(currentTextureSlot===null){activeTexture();}var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture===undefined){boundTexture={type:undefined,texture:undefined};currentBoundTextures[currentTextureSlot]=boundTexture;}if(boundTexture.type!==webglType||boundTexture.texture!==webglTexture){gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]);boundTexture.type=webglType;boundTexture.texture=webglTexture;}}function unbindTexture(){var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture!==undefined&&boundTexture.type!==undefined){gl.bindTexture(boundTexture.type,null);boundTexture.type=undefined;boundTexture.texture=undefined;}}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage3D(){try{gl.texImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}//
     function scissor(scissor){if(currentScissor.equals(scissor)===false){gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w);currentScissor.copy(scissor);}}function viewport(viewport){if(currentViewport.equals(viewport)===false){gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w);currentViewport.copy(viewport);}}//
     function reset(){enabledCapabilities={};currentTextureSlot=null;currentBoundTextures={};currentProgram=null;currentBlending=null;currentFlipSided=null;currentCullFace=null;colorBuffer.reset();depthBuffer.reset();stencilBuffer.reset();}return{buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},enable:enable,disable:disable,useProgram:useProgram,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,unbindTexture:unbindTexture,compressedTexImage2D:compressedTexImage2D,texImage2D:texImage2D,texImage3D:texImage3D,scissor:scissor,viewport:viewport,reset:reset};}function WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info){var _wrappingToGL,_filterToGL;var isWebGL2=capabilities.isWebGL2;var maxTextures=capabilities.maxTextures;var maxCubemapSize=capabilities.maxCubemapSize;var maxTextureSize=capabilities.maxTextureSize;var maxSamples=capabilities.maxSamples;var _videoTextures=new WeakMap();var _canvas;// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
     // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
     // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
     var useOffscreenCanvas=false;try{useOffscreenCanvas=typeof OffscreenCanvas!=='undefined'&&new OffscreenCanvas(1,1).getContext("2d")!==null;}catch(err){// Ignore any errors
     }function createCanvas(width,height){// Use OffscreenCanvas when available. Specially needed in web workers
     return useOffscreenCanvas?new OffscreenCanvas(width,height):document.createElementNS('http://www.w3.org/1999/xhtml','canvas');}function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){var scale=1;// handle case if texture exceeds max size
     if(image.width>maxSize||image.height>maxSize){scale=maxSize/Math.max(image.width,image.height);}// only perform resize if necessary
     if(scale<1||needsPowerOfTwo===true){// only perform resize for certain image types
     if(typeof HTMLImageElement!=='undefined'&&_instanceof(image,HTMLImageElement)||typeof HTMLCanvasElement!=='undefined'&&_instanceof(image,HTMLCanvasElement)||typeof ImageBitmap!=='undefined'&&_instanceof(image,ImageBitmap)){var floor=needsPowerOfTwo?MathUtils.floorPowerOfTwo:Math.floor;var width=floor(scale*image.width);var height=floor(scale*image.height);if(_canvas===undefined)_canvas=createCanvas(width,height);// cube textures can't reuse the same canvas
     var canvas=needsNewCanvas?createCanvas(width,height):_canvas;canvas.width=width;canvas.height=height;var context=canvas.getContext('2d');context.drawImage(image,0,0,width,height);console.warn('THREE.WebGLRenderer: Texture has been resized from ('+image.width+'x'+image.height+') to ('+width+'x'+height+').');return canvas;}else{if('data'in image){console.warn('THREE.WebGLRenderer: Image in DataTexture is too big ('+image.width+'x'+image.height+').');}return image;}}return image;}function isPowerOfTwo(image){return MathUtils.isPowerOfTwo(image.width)&&MathUtils.isPowerOfTwo(image.height);}function textureNeedsPowerOfTwo(texture){if(isWebGL2)return false;return texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function generateMipmap(target,texture,width,height){_gl.generateMipmap(target);var textureProperties=properties.get(texture);// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
     textureProperties.__maxMipLevel=Math.log(Math.max(width,height))*Math.LOG2E;}function getInternalFormat(internalFormatName,glFormat,glType){if(isWebGL2===false)return glFormat;if(internalFormatName!==null){if(_gl[internalFormatName]!==undefined)return _gl[internalFormatName];console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \''+internalFormatName+'\'');}var internalFormat=glFormat;if(glFormat===6403){if(glType===5126)internalFormat=33326;if(glType===5131)internalFormat=33325;if(glType===5121)internalFormat=33321;}if(glFormat===6407){if(glType===5126)internalFormat=34837;if(glType===5131)internalFormat=34843;if(glType===5121)internalFormat=32849;}if(glFormat===6408){if(glType===5126)internalFormat=34836;if(glType===5131)internalFormat=34842;if(glType===5121)internalFormat=32856;}if(internalFormat===33325||internalFormat===33326||internalFormat===34842||internalFormat===34836){extensions.get('EXT_color_buffer_float');}return internalFormat;}// Fallback filters for non-power-of-2 textures
     function filterFallback(f){if(f===NearestFilter||f===NearestMipmapNearestFilter||f===NearestMipmapLinearFilter){return 9728;}return 9729;}//
     function onTextureDispose(event){var texture=event.target;texture.removeEventListener('dispose',onTextureDispose);deallocateTexture(texture);if(texture.isVideoTexture){_videoTextures.delete(texture);}info.memory.textures--;}function onRenderTargetDispose(event){var renderTarget=event.target;renderTarget.removeEventListener('dispose',onRenderTargetDispose);deallocateRenderTarget(renderTarget);info.memory.textures--;}//
     function deallocateTexture(texture){var textureProperties=properties.get(texture);if(textureProperties.__webglInit===undefined)return;_gl.deleteTexture(textureProperties.__webglTexture);properties.remove(texture);}function deallocateRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(renderTarget.texture);if(!renderTarget)return;if(textureProperties.__webglTexture!==undefined){_gl.deleteTexture(textureProperties.__webglTexture);}if(renderTarget.depthTexture){renderTarget.depthTexture.dispose();}if(renderTarget.isWebGLCubeRenderTarget){for(var _i102=0;_i102<6;_i102++){_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[_i102]);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[_i102]);}}else{_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);if(renderTargetProperties.__webglMultisampledFramebuffer)_gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);if(renderTargetProperties.__webglColorRenderbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);if(renderTargetProperties.__webglDepthRenderbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);}properties.remove(renderTarget.texture);properties.remove(renderTarget);}//
     var textureUnits=0;function resetTextureUnits(){textureUnits=0;}function allocateTextureUnit(){var textureUnit=textureUnits;if(textureUnit>=maxTextures){console.warn('THREE.WebGLTextures: Trying to use '+textureUnit+' texture units while this GPU supports only '+maxTextures);}textureUnits+=1;return textureUnit;}//
     function setTexture2D(texture,slot){var textureProperties=properties.get(texture);if(texture.isVideoTexture)updateVideoTexture(texture);if(texture.version>0&&textureProperties.__version!==texture.version){var image=texture.image;if(image===undefined){console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');}else if(image.complete===false){console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');}else{uploadTexture(textureProperties,texture,slot);return;}}state.activeTexture(33984+slot);state.bindTexture(3553,textureProperties.__webglTexture);}function setTexture2DArray(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(35866,textureProperties.__webglTexture);}function setTexture3D(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(32879,textureProperties.__webglTexture);}function setTextureCube(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadCubeTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);}var wrappingToGL=(_wrappingToGL={},_defineProperty(_wrappingToGL,RepeatWrapping,10497),_defineProperty(_wrappingToGL,ClampToEdgeWrapping,33071),_defineProperty(_wrappingToGL,MirroredRepeatWrapping,33648),_wrappingToGL);var filterToGL=(_filterToGL={},_defineProperty(_filterToGL,NearestFilter,9728),_defineProperty(_filterToGL,NearestMipmapNearestFilter,9984),_defineProperty(_filterToGL,NearestMipmapLinearFilter,9986),_defineProperty(_filterToGL,LinearFilter,9729),_defineProperty(_filterToGL,LinearMipmapNearestFilter,9985),_defineProperty(_filterToGL,LinearMipmapLinearFilter,9987),_filterToGL);function setTextureParameters(textureType,texture,supportsMips){if(supportsMips){_gl.texParameteri(textureType,10242,wrappingToGL[texture.wrapS]);_gl.texParameteri(textureType,10243,wrappingToGL[texture.wrapT]);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,wrappingToGL[texture.wrapR]);}_gl.texParameteri(textureType,10240,filterToGL[texture.magFilter]);_gl.texParameteri(textureType,10241,filterToGL[texture.minFilter]);}else{_gl.texParameteri(textureType,10242,33071);_gl.texParameteri(textureType,10243,33071);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,33071);}if(texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');}_gl.texParameteri(textureType,10240,filterFallback(texture.magFilter));_gl.texParameteri(textureType,10241,filterFallback(texture.minFilter));if(texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');}}var extension=extensions.get('EXT_texture_filter_anisotropic');if(extension){if(texture.type===FloatType&&extensions.get('OES_texture_float_linear')===null)return;if(texture.type===HalfFloatType&&(isWebGL2||extensions.get('OES_texture_half_float_linear'))===null)return;if(texture.anisotropy>1||properties.get(texture).__currentAnisotropy){_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy()));properties.get(texture).__currentAnisotropy=texture.anisotropy;}}}function initTexture(textureProperties,texture){if(textureProperties.__webglInit===undefined){textureProperties.__webglInit=true;texture.addEventListener('dispose',onTextureDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;}}function uploadTexture(textureProperties,texture,slot){var textureType=3553;if(texture.isDataTexture2DArray)textureType=35866;if(texture.isDataTexture3D)textureType=32879;initTexture(textureProperties,texture);state.activeTexture(33984+slot);state.bindTexture(textureType,textureProperties.__webglTexture);_gl.pixelStorei(37440,texture.flipY);_gl.pixelStorei(37441,texture.premultiplyAlpha);_gl.pixelStorei(3317,texture.unpackAlignment);var needsPowerOfTwo=textureNeedsPowerOfTwo(texture)&&isPowerOfTwo(texture.image)===false;var image=resizeImage(texture.image,needsPowerOfTwo,false,maxTextureSize);var supportsMips=isPowerOfTwo(image)||isWebGL2,glFormat=utils.convert(texture.format);var glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType);setTextureParameters(textureType,texture,supportsMips);var mipmap;var mipmaps=texture.mipmaps;if(texture.isDepthTexture){// populate depth texture with dummy data
     glInternalFormat=6402;if(isWebGL2){if(texture.type===FloatType){glInternalFormat=36012;}else if(texture.type===UnsignedIntType){glInternalFormat=33190;}else if(texture.type===UnsignedInt248Type){glInternalFormat=35056;}else{glInternalFormat=33189;// WebGL2 requires sized internalformat for glTexImage2D
     }}else{if(texture.type===FloatType){console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');}}// validation checks for WebGL 1
     if(texture.format===DepthFormat&&glInternalFormat===6402){// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
     // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
     // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
     if(texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType){console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');texture.type=UnsignedShortType;glType=utils.convert(texture.type);}}if(texture.format===DepthStencilFormat&&glInternalFormat===6402){// Depth stencil textures need the DEPTH_STENCIL internal format
     // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
     glInternalFormat=34041;// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
     // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
     // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
     if(texture.type!==UnsignedInt248Type){console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');texture.type=UnsignedInt248Type;glType=utils.convert(texture.type);}}//
     state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}else if(texture.isDataTexture){// use manually created mipmaps if available
     // if there are no manual mipmaps
     // set 0 level mipmap and then use GL to generate other mipmap levels
     if(mipmaps.length>0&&supportsMips){for(var _i103=0,il=mipmaps.length;_i103<il;_i103++){mipmap=mipmaps[_i103];state.texImage2D(3553,_i103,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}texture.generateMipmaps=false;textureProperties.__maxMipLevel=mipmaps.length-1;}else{state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}}else if(texture.isCompressedTexture){for(var _i104=0,_il9=mipmaps.length;_i104<_il9;_i104++){mipmap=mipmaps[_i104];if(texture.format!==RGBAFormat&&texture.format!==RGBFormat){if(glFormat!==null){state.compressedTexImage2D(3553,_i104,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}else{console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');}}else{state.texImage2D(3553,_i104,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}textureProperties.__maxMipLevel=mipmaps.length-1;}else if(texture.isDataTexture2DArray){state.texImage3D(35866,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}else if(texture.isDataTexture3D){state.texImage3D(32879,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}else{// regular Texture (image, video, canvas)
     // use manually created mipmaps if available
     // if there are no manual mipmaps
     // set 0 level mipmap and then use GL to generate other mipmap levels
     if(mipmaps.length>0&&supportsMips){for(var _i105=0,_il10=mipmaps.length;_i105<_il10;_i105++){mipmap=mipmaps[_i105];state.texImage2D(3553,_i105,glInternalFormat,glFormat,glType,mipmap);}texture.generateMipmaps=false;textureProperties.__maxMipLevel=mipmaps.length-1;}else{state.texImage2D(3553,0,glInternalFormat,glFormat,glType,image);textureProperties.__maxMipLevel=0;}}if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(textureType,texture,image.width,image.height);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}function uploadCubeTexture(textureProperties,texture,slot){if(texture.image.length!==6)return;initTexture(textureProperties,texture);state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);_gl.pixelStorei(37440,texture.flipY);var isCompressed=texture&&(texture.isCompressedTexture||texture.image[0].isCompressedTexture);var isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;var cubeImage=[];for(var _i106=0;_i106<6;_i106++){if(!isCompressed&&!isDataTexture){cubeImage[_i106]=resizeImage(texture.image[_i106],false,true,maxCubemapSize);}else{cubeImage[_i106]=isDataTexture?texture.image[_i106].image:texture.image[_i106];}}var image=cubeImage[0],supportsMips=isPowerOfTwo(image)||isWebGL2,glFormat=utils.convert(texture.format),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType);setTextureParameters(34067,texture,supportsMips);var mipmaps;if(isCompressed){for(var _i107=0;_i107<6;_i107++){mipmaps=cubeImage[_i107].mipmaps;for(var j=0;j<mipmaps.length;j++){var mipmap=mipmaps[j];if(texture.format!==RGBAFormat&&texture.format!==RGBFormat){if(glFormat!==null){state.compressedTexImage2D(34069+_i107,j,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}else{console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');}}else{state.texImage2D(34069+_i107,j,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}textureProperties.__maxMipLevel=mipmaps.length-1;}else{mipmaps=texture.mipmaps;for(var _i108=0;_i108<6;_i108++){if(isDataTexture){state.texImage2D(34069+_i108,0,glInternalFormat,cubeImage[_i108].width,cubeImage[_i108].height,0,glFormat,glType,cubeImage[_i108].data);for(var _j4=0;_j4<mipmaps.length;_j4++){var _mipmap=mipmaps[_j4];var mipmapImage=_mipmap.image[_i108].image;state.texImage2D(34069+_i108,_j4+1,glInternalFormat,mipmapImage.width,mipmapImage.height,0,glFormat,glType,mipmapImage.data);}}else{state.texImage2D(34069+_i108,0,glInternalFormat,glFormat,glType,cubeImage[_i108]);for(var _j5=0;_j5<mipmaps.length;_j5++){var _mipmap2=mipmaps[_j5];state.texImage2D(34069+_i108,_j5+1,glInternalFormat,glFormat,glType,_mipmap2.image[_i108]);}}}textureProperties.__maxMipLevel=mipmaps.length;}if(textureNeedsGenerateMipmaps(texture,supportsMips)){// We assume images for cube map have the same size.
     generateMipmap(34067,texture,image.width,image.height);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}// Render targets
     // Setup storage for target texture and bind it to correct framebuffer
     function setupFrameBufferTexture(framebuffer,renderTarget,attachment,textureTarget){var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var glInternalFormat=getInternalFormat(renderTarget.texture.internalFormat,glFormat,glType);state.texImage2D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null);_gl.bindFramebuffer(36160,framebuffer);_gl.framebufferTexture2D(36160,attachment,textureTarget,properties.get(renderTarget.texture).__webglTexture,0);_gl.bindFramebuffer(36160,null);}// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
     function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){_gl.bindRenderbuffer(36161,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){var glInternalFormat=33189;if(isMultisample){var depthTexture=renderTarget.depthTexture;if(depthTexture&&depthTexture.isDepthTexture){if(depthTexture.type===FloatType){glInternalFormat=36012;}else if(depthTexture.type===UnsignedIntType){glInternalFormat=33190;}}var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}else{_gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer){if(isMultisample){var _samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,_samples,35056,renderTarget.width,renderTarget.height);}else{_gl.renderbufferStorage(36161,34041,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);}else{var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var _glInternalFormat=getInternalFormat(renderTarget.texture.internalFormat,glFormat,glType);if(isMultisample){var _samples2=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,_samples2,_glInternalFormat,renderTarget.width,renderTarget.height);}else{_gl.renderbufferStorage(36161,_glInternalFormat,renderTarget.width,renderTarget.height);}}_gl.bindRenderbuffer(36161,null);}// Setup resources for a Depth Texture for a FBO (needs an extension)
     function setupDepthTexture(framebuffer,renderTarget){var isCube=renderTarget&&renderTarget.isWebGLCubeRenderTarget;if(isCube)throw new Error('Depth Texture with cube render targets is not supported');_gl.bindFramebuffer(36160,framebuffer);if(!(renderTarget.depthTexture&&renderTarget.depthTexture.isDepthTexture)){throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');}// upload an empty depth texture with framebuffer size
     if(!properties.get(renderTarget.depthTexture).__webglTexture||renderTarget.depthTexture.image.width!==renderTarget.width||renderTarget.depthTexture.image.height!==renderTarget.height){renderTarget.depthTexture.image.width=renderTarget.width;renderTarget.depthTexture.image.height=renderTarget.height;renderTarget.depthTexture.needsUpdate=true;}setTexture2D(renderTarget.depthTexture,0);var webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture;if(renderTarget.depthTexture.format===DepthFormat){_gl.framebufferTexture2D(36160,36096,3553,webglDepthTexture,0);}else if(renderTarget.depthTexture.format===DepthStencilFormat){_gl.framebufferTexture2D(36160,33306,3553,webglDepthTexture,0);}else{throw new Error('Unknown depthTexture format');}}// Setup GL resources for a non-texture depth buffer
     function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget);var isCube=renderTarget.isWebGLCubeRenderTarget===true;if(renderTarget.depthTexture){if(isCube)throw new Error('target.depthTexture not supported in Cube render targets');setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget);}else{if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(var _i109=0;_i109<6;_i109++){_gl.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer[_i109]);renderTargetProperties.__webglDepthbuffer[_i109]=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[_i109],renderTarget,false);}}else{_gl.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer);renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget,false);}}_gl.bindFramebuffer(36160,null);}// Set up GL resources for the render target
     function setupRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(renderTarget.texture);renderTarget.addEventListener('dispose',onRenderTargetDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;var isCube=renderTarget.isWebGLCubeRenderTarget===true;var isMultisample=renderTarget.isWebGLMultisampleRenderTarget===true;var supportsMips=isPowerOfTwo(renderTarget)||isWebGL2;// Handles WebGL2 RGBFormat fallback - #18858
     if(isWebGL2&&renderTarget.texture.format===RGBFormat&&(renderTarget.texture.type===FloatType||renderTarget.texture.type===HalfFloatType)){renderTarget.texture.format=RGBAFormat;console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');}// Setup framebuffer
     if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var _i110=0;_i110<6;_i110++){renderTargetProperties.__webglFramebuffer[_i110]=_gl.createFramebuffer();}}else{renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isMultisample){if(isWebGL2){renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer();renderTargetProperties.__webglColorRenderbuffer=_gl.createRenderbuffer();_gl.bindRenderbuffer(36161,renderTargetProperties.__webglColorRenderbuffer);var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var glInternalFormat=getInternalFormat(renderTarget.texture.internalFormat,glFormat,glType);var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);_gl.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer);_gl.framebufferRenderbuffer(36160,36064,36161,renderTargetProperties.__webglColorRenderbuffer);_gl.bindRenderbuffer(36161,null);if(renderTarget.depthBuffer){renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,true);}_gl.bindFramebuffer(36160,null);}else{console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');}}}// Setup color buffer
     if(isCube){state.bindTexture(34067,textureProperties.__webglTexture);setTextureParameters(34067,renderTarget.texture,supportsMips);for(var _i111=0;_i111<6;_i111++){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i111],renderTarget,36064,34069+_i111);}if(textureNeedsGenerateMipmaps(renderTarget.texture,supportsMips)){generateMipmap(34067,renderTarget.texture,renderTarget.width,renderTarget.height);}state.bindTexture(34067,null);}else{state.bindTexture(3553,textureProperties.__webglTexture);setTextureParameters(3553,renderTarget.texture,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,36064,3553);if(textureNeedsGenerateMipmaps(renderTarget.texture,supportsMips)){generateMipmap(3553,renderTarget.texture,renderTarget.width,renderTarget.height);}state.bindTexture(3553,null);}// Setup depth and stencil buffers
     if(renderTarget.depthBuffer){setupDepthRenderbuffer(renderTarget);}}function updateRenderTargetMipmap(renderTarget){var texture=renderTarget.texture;var supportsMips=isPowerOfTwo(renderTarget)||isWebGL2;if(textureNeedsGenerateMipmaps(texture,supportsMips)){var _target2=renderTarget.isWebGLCubeRenderTarget?34067:3553;var webglTexture=properties.get(texture).__webglTexture;state.bindTexture(_target2,webglTexture);generateMipmap(_target2,texture,renderTarget.width,renderTarget.height);state.bindTexture(_target2,null);}}function updateMultisampleRenderTarget(renderTarget){if(renderTarget.isWebGLMultisampleRenderTarget){if(isWebGL2){var renderTargetProperties=properties.get(renderTarget);_gl.bindFramebuffer(36008,renderTargetProperties.__webglMultisampledFramebuffer);_gl.bindFramebuffer(36009,renderTargetProperties.__webglFramebuffer);var width=renderTarget.width;var height=renderTarget.height;var mask=16384;if(renderTarget.depthBuffer)mask|=256;if(renderTarget.stencilBuffer)mask|=1024;_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,9728);_gl.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer);// see #18905
     }else{console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');}}}function getRenderTargetSamples(renderTarget){return isWebGL2&&renderTarget.isWebGLMultisampleRenderTarget?Math.min(maxSamples,renderTarget.samples):0;}function updateVideoTexture(texture){var frame=info.render.frame;// Check the last frame we updated the VideoTexture
     if(_videoTextures.get(texture)!==frame){_videoTextures.set(texture,frame);texture.update();}}// backwards compatibility
     var warnedTexture2D=false;var warnedTextureCube=false;function safeSetTexture2D(texture,slot){if(texture&&texture.isWebGLRenderTarget){if(warnedTexture2D===false){console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");warnedTexture2D=true;}texture=texture.texture;}setTexture2D(texture,slot);}function safeSetTextureCube(texture,slot){if(texture&&texture.isWebGLCubeRenderTarget){if(warnedTextureCube===false){console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");warnedTextureCube=true;}texture=texture.texture;}setTextureCube(texture,slot);}//
     this.allocateTextureUnit=allocateTextureUnit;this.resetTextureUnits=resetTextureUnits;this.setTexture2D=setTexture2D;this.setTexture2DArray=setTexture2DArray;this.setTexture3D=setTexture3D;this.setTextureCube=setTextureCube;this.setupRenderTarget=setupRenderTarget;this.updateRenderTargetMipmap=updateRenderTargetMipmap;this.updateMultisampleRenderTarget=updateMultisampleRenderTarget;this.safeSetTexture2D=safeSetTexture2D;this.safeSetTextureCube=safeSetTextureCube;}function WebGLUtils(gl,extensions,capabilities){var isWebGL2=capabilities.isWebGL2;function convert(p){var extension;if(p===UnsignedByteType)return 5121;if(p===UnsignedShort4444Type)return 32819;if(p===UnsignedShort5551Type)return 32820;if(p===UnsignedShort565Type)return 33635;if(p===ByteType)return 5120;if(p===ShortType)return 5122;if(p===UnsignedShortType)return 5123;if(p===IntType)return 5124;if(p===UnsignedIntType)return 5125;if(p===FloatType)return 5126;if(p===HalfFloatType){if(isWebGL2)return 5131;extension=extensions.get('OES_texture_half_float');if(extension!==null){return extension.HALF_FLOAT_OES;}else{return null;}}if(p===AlphaFormat)return 6406;if(p===RGBFormat)return 6407;if(p===RGBAFormat)return 6408;if(p===LuminanceFormat)return 6409;if(p===LuminanceAlphaFormat)return 6410;if(p===DepthFormat)return 6402;if(p===DepthStencilFormat)return 34041;if(p===RedFormat)return 6403;// WebGL2 formats.
     if(p===RedIntegerFormat)return 36244;if(p===RGFormat)return 33319;if(p===RGIntegerFormat)return 33320;if(p===RGBIntegerFormat)return 36248;if(p===RGBAIntegerFormat)return 36249;if(p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format){extension=extensions.get('WEBGL_compressed_texture_s3tc');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;}else{return null;}}if(p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format){extension=extensions.get('WEBGL_compressed_texture_pvrtc');if(extension!==null){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;}else{return null;}}if(p===RGB_ETC1_Format){extension=extensions.get('WEBGL_compressed_texture_etc1');if(extension!==null){return extension.COMPRESSED_RGB_ETC1_WEBGL;}else{return null;}}if(p===RGB_ETC2_Format||p===RGBA_ETC2_EAC_Format){extension=extensions.get('WEBGL_compressed_texture_etc');if(extension!==null){if(p===RGB_ETC2_Format)return extension.COMPRESSED_RGB8_ETC2;if(p===RGBA_ETC2_EAC_Format)return extension.COMPRESSED_RGBA8_ETC2_EAC;}}if(p===RGBA_ASTC_4x4_Format||p===RGBA_ASTC_5x4_Format||p===RGBA_ASTC_5x5_Format||p===RGBA_ASTC_6x5_Format||p===RGBA_ASTC_6x6_Format||p===RGBA_ASTC_8x5_Format||p===RGBA_ASTC_8x6_Format||p===RGBA_ASTC_8x8_Format||p===RGBA_ASTC_10x5_Format||p===RGBA_ASTC_10x6_Format||p===RGBA_ASTC_10x8_Format||p===RGBA_ASTC_10x10_Format||p===RGBA_ASTC_12x10_Format||p===RGBA_ASTC_12x12_Format||p===SRGB8_ALPHA8_ASTC_4x4_Format||p===SRGB8_ALPHA8_ASTC_5x4_Format||p===SRGB8_ALPHA8_ASTC_5x5_Format||p===SRGB8_ALPHA8_ASTC_6x5_Format||p===SRGB8_ALPHA8_ASTC_6x6_Format||p===SRGB8_ALPHA8_ASTC_8x5_Format||p===SRGB8_ALPHA8_ASTC_8x6_Format||p===SRGB8_ALPHA8_ASTC_8x8_Format||p===SRGB8_ALPHA8_ASTC_10x5_Format||p===SRGB8_ALPHA8_ASTC_10x6_Format||p===SRGB8_ALPHA8_ASTC_10x8_Format||p===SRGB8_ALPHA8_ASTC_10x10_Format||p===SRGB8_ALPHA8_ASTC_12x10_Format||p===SRGB8_ALPHA8_ASTC_12x12_Format){extension=extensions.get('WEBGL_compressed_texture_astc');if(extension!==null){// TODO Complete?
     return p;}else{return null;}}if(p===RGBA_BPTC_Format){extension=extensions.get('EXT_texture_compression_bptc');if(extension!==null){// TODO Complete?
     return p;}else{return null;}}if(p===UnsignedInt248Type){if(isWebGL2)return 34042;extension=extensions.get('WEBGL_depth_texture');if(extension!==null){return extension.UNSIGNED_INT_24_8_WEBGL;}else{return null;}}}return{convert:convert};}function ArrayCamera(array){PerspectiveCamera.call(this);this.cameras=array||[];}ArrayCamera.prototype=Object.assign(Object.create(PerspectiveCamera.prototype),{constructor:ArrayCamera,isArrayCamera:true});function Group(){Object3D.call(this);this.type='Group';}Group.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Group,isGroup:true});function WebXRController(){this._targetRay=null;this._grip=null;this._hand=null;}Object.assign(WebXRController.prototype,{constructor:WebXRController,getHandSpace:function getHandSpace(){if(this._hand===null){this._hand=new Group();this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints=[];this._hand.inputState={pinching:false};if(window.XRHand){for(var _i112=0;_i112<=window.XRHand.LITTLE_PHALANX_TIP;_i112++){// The transform of this joint will be updated with the joint pose on each frame
     var joint=new Group();joint.matrixAutoUpdate=false;joint.visible=false;this._hand.joints.push(joint);// ??
     this._hand.add(joint);}}}return this._hand;},getTargetRaySpace:function getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Group();this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;}return this._targetRay;},getGripSpace:function getGripSpace(){if(this._grip===null){this._grip=new Group();this._grip.matrixAutoUpdate=false;this._grip.visible=false;}return this._grip;},dispatchEvent:function dispatchEvent(event){if(this._targetRay!==null){this._targetRay.dispatchEvent(event);}if(this._grip!==null){this._grip.dispatchEvent(event);}if(this._hand!==null){this._hand.dispatchEvent(event);}return this;},disconnect:function disconnect(inputSource){this.dispatchEvent({type:'disconnected',data:inputSource});if(this._targetRay!==null){this._targetRay.visible=false;}if(this._grip!==null){this._grip.visible=false;}if(this._hand!==null){this._hand.visible=false;}return this;},update:function update(inputSource,frame,referenceSpace){var inputPose=null;var gripPose=null;var handPose=null;var targetRay=this._targetRay;var grip=this._grip;var hand=this._hand;if(inputSource){if(hand&&inputSource.hand){handPose=true;for(var _i113=0;_i113<=window.XRHand.LITTLE_PHALANX_TIP;_i113++){if(inputSource.hand[_i113]){// Update the joints groups with the XRJoint poses
     var jointPose=frame.getJointPose(inputSource.hand[_i113],referenceSpace);var joint=hand.joints[_i113];if(jointPose!==null){joint.matrix.fromArray(jointPose.transform.matrix);joint.matrix.decompose(joint.position,joint.rotation,joint.scale);joint.jointRadius=jointPose.radius;}joint.visible=jointPose!==null;// Custom events
     // Check pinch
     var indexTip=hand.joints[window.XRHand.INDEX_PHALANX_TIP];var thumbTip=hand.joints[window.XRHand.THUMB_PHALANX_TIP];var distance=indexTip.position.distanceTo(thumbTip.position);var distanceToPinch=0.02;var threshold=0.005;if(hand.inputState.pinching&&distance>distanceToPinch+threshold){hand.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:inputSource.handedness,target:this});}else if(!hand.inputState.pinching&&distance<=distanceToPinch-threshold){hand.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:inputSource.handedness,target:this});}}}}else{if(targetRay!==null){inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace);if(inputPose!==null){targetRay.matrix.fromArray(inputPose.transform.matrix);targetRay.matrix.decompose(targetRay.position,targetRay.rotation,targetRay.scale);}}if(grip!==null&&inputSource.gripSpace){gripPose=frame.getPose(inputSource.gripSpace,referenceSpace);if(gripPose!==null){grip.matrix.fromArray(gripPose.transform.matrix);grip.matrix.decompose(grip.position,grip.rotation,grip.scale);}}}}if(targetRay!==null){targetRay.visible=inputPose!==null;}if(grip!==null){grip.visible=gripPose!==null;}if(hand!==null){hand.visible=handPose!==null;}return this;}});function WebXRManager(renderer,gl){var scope=this;var session=null;var framebufferScaleFactor=1.0;var referenceSpace=null;var referenceSpaceType='local-floor';var pose=null;var controllers=[];var inputSourcesMap=new Map();//
     var cameraL=new PerspectiveCamera();cameraL.layers.enable(1);cameraL.viewport=new Vector4();var cameraR=new PerspectiveCamera();cameraR.layers.enable(2);cameraR.viewport=new Vector4();var cameras=[cameraL,cameraR];var cameraVR=new ArrayCamera();cameraVR.layers.enable(1);cameraVR.layers.enable(2);var _currentDepthNear=null;var _currentDepthFar=null;//
     this.enabled=false;this.isPresenting=false;this.getController=function(index){var controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getTargetRaySpace();};this.getControllerGrip=function(index){var controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getGripSpace();};this.getHand=function(index){var controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getHandSpace();};//
     function onSessionEvent(event){var controller=inputSourcesMap.get(event.inputSource);if(controller){controller.dispatchEvent({type:event.type,data:event.inputSource});}}function onSessionEnd(){inputSourcesMap.forEach(function(controller,inputSource){controller.disconnect(inputSource);});inputSourcesMap.clear();//
     renderer.setFramebuffer(null);renderer.setRenderTarget(renderer.getRenderTarget());// Hack #15830
     animation.stop();scope.isPresenting=false;scope.dispatchEvent({type:'sessionend'});}function onRequestReferenceSpace(value){referenceSpace=value;animation.setContext(session);animation.start();scope.isPresenting=true;scope.dispatchEvent({type:'sessionstart'});}this.setFramebufferScaleFactor=function(value){framebufferScaleFactor=value;if(scope.isPresenting===true){console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');}};this.setReferenceSpaceType=function(value){referenceSpaceType=value;if(scope.isPresenting===true){console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');}};this.getReferenceSpace=function(){return referenceSpace;};this.getSession=function(){return session;};this.setSession=function(value){session=value;if(session!==null){session.addEventListener('select',onSessionEvent);session.addEventListener('selectstart',onSessionEvent);session.addEventListener('selectend',onSessionEvent);session.addEventListener('squeeze',onSessionEvent);session.addEventListener('squeezestart',onSessionEvent);session.addEventListener('squeezeend',onSessionEvent);session.addEventListener('end',onSessionEnd);var attributes=gl.getContextAttributes();if(attributes.xrCompatible!==true){gl.makeXRCompatible();}var layerInit={antialias:attributes.antialias,alpha:attributes.alpha,depth:attributes.depth,stencil:attributes.stencil,framebufferScaleFactor:framebufferScaleFactor};// eslint-disable-next-line no-undef
     var baseLayer=new XRWebGLLayer(session,gl,layerInit);session.updateRenderState({baseLayer:baseLayer});session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace);//
     session.addEventListener('inputsourceschange',updateInputSources);}};function updateInputSources(event){var inputSources=session.inputSources;// Assign inputSources to available controllers
     for(var _i114=0;_i114<controllers.length;_i114++){inputSourcesMap.set(inputSources[_i114],controllers[_i114]);}// Notify disconnected
     for(var _i115=0;_i115<event.removed.length;_i115++){var inputSource=event.removed[_i115];var controller=inputSourcesMap.get(inputSource);if(controller){controller.dispatchEvent({type:'disconnected',data:inputSource});inputSourcesMap.delete(inputSource);}}// Notify connected
     for(var _i116=0;_i116<event.added.length;_i116++){var _inputSource=event.added[_i116];var _controller=inputSourcesMap.get(_inputSource);if(_controller){_controller.dispatchEvent({type:'connected',data:_inputSource});}}}//
     var cameraLPos=new Vector3();var cameraRPos=new Vector3();/**
               * Assumes 2 cameras that are parallel and share an X-axis, and that
               * the cameras' projection and world matrices have already been set.
               * And that near and far planes are identical for both cameras.
               * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
               */function setProjectionFromUnion(camera,cameraL,cameraR){cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);var ipd=cameraLPos.distanceTo(cameraRPos);var projL=cameraL.projectionMatrix.elements;var projR=cameraR.projectionMatrix.elements;// VR systems will have identical far and near planes, and
     // most likely identical top and bottom frustum extents.
     // Use the left camera for these values.
     var near=projL[14]/(projL[10]-1);var far=projL[14]/(projL[10]+1);var topFov=(projL[9]+1)/projL[5];var bottomFov=(projL[9]-1)/projL[5];var leftFov=(projL[8]-1)/projL[0];var rightFov=(projR[8]+1)/projR[0];var left=near*leftFov;var right=near*rightFov;// Calculate the new camera's position offset from the
     // left camera. xOffset should be roughly half `ipd`.
     var zOffset=ipd/(-leftFov+rightFov);var xOffset=zOffset*-leftFov;// TODO: Better way to apply this offset?
     cameraL.matrixWorld.decompose(camera.position,camera.quaternion,camera.scale);camera.translateX(xOffset);camera.translateZ(zOffset);camera.matrixWorld.compose(camera.position,camera.quaternion,camera.scale);camera.matrixWorldInverse.getInverse(camera.matrixWorld);// Find the union of the frustum values of the cameras and scale
     // the values so that the near plane's position does not change in world space,
     // although must now be relative to the new union camera.
     var near2=near+zOffset;var far2=far+zOffset;var left2=left-xOffset;var right2=right+(ipd-xOffset);var top2=topFov*far/far2*near2;var bottom2=bottomFov*far/far2*near2;camera.projectionMatrix.makePerspective(left2,right2,top2,bottom2,near2,far2);}function updateCamera(camera,parent){if(parent===null){camera.matrixWorld.copy(camera.matrix);}else{camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix);}camera.matrixWorldInverse.getInverse(camera.matrixWorld);}this.getCamera=function(camera){cameraVR.near=cameraR.near=cameraL.near=camera.near;cameraVR.far=cameraR.far=cameraL.far=camera.far;if(_currentDepthNear!==cameraVR.near||_currentDepthFar!==cameraVR.far){// Note that the new renderState won't apply until the next frame. See #18320
     session.updateRenderState({depthNear:cameraVR.near,depthFar:cameraVR.far});_currentDepthNear=cameraVR.near;_currentDepthFar=cameraVR.far;}var parent=camera.parent;var cameras=cameraVR.cameras;updateCamera(cameraVR,parent);for(var _i117=0;_i117<cameras.length;_i117++){updateCamera(cameras[_i117],parent);}// update camera and its children
     camera.matrixWorld.copy(cameraVR.matrixWorld);var children=camera.children;for(var _i118=0,l=children.length;_i118<l;_i118++){children[_i118].updateMatrixWorld(true);}// update projection matrix for proper view frustum culling
     if(cameras.length===2){setProjectionFromUnion(cameraVR,cameraL,cameraR);}else{// assume single camera setup (AR)
     cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);}return cameraVR;};// Animation Loop
     var onAnimationFrameCallback=null;function onAnimationFrame(time,frame){pose=frame.getViewerPose(referenceSpace);if(pose!==null){var views=pose.views;var baseLayer=session.renderState.baseLayer;renderer.setFramebuffer(baseLayer.framebuffer);var cameraVRNeedsUpdate=false;// check if it's necessary to rebuild cameraVR's camera list
     if(views.length!==cameraVR.cameras.length){cameraVR.cameras.length=0;cameraVRNeedsUpdate=true;}for(var _i119=0;_i119<views.length;_i119++){var _view=views[_i119];var viewport=baseLayer.getViewport(_view);var camera=cameras[_i119];camera.matrix.fromArray(_view.transform.matrix);camera.projectionMatrix.fromArray(_view.projectionMatrix);camera.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height);if(_i119===0){cameraVR.matrix.copy(camera.matrix);}if(cameraVRNeedsUpdate===true){cameraVR.cameras.push(camera);}}}//
     var inputSources=session.inputSources;for(var _i120=0;_i120<controllers.length;_i120++){var controller=controllers[_i120];var inputSource=inputSources[_i120];controller.update(inputSource,frame,referenceSpace);}if(onAnimationFrameCallback)onAnimationFrameCallback(time,frame);}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;};this.dispose=function(){};}Object.assign(WebXRManager.prototype,EventDispatcher.prototype);function WebGLMaterials(properties){function refreshFogUniforms(uniforms,fog){uniforms.fogColor.value.copy(fog.color);if(fog.isFog){uniforms.fogNear.value=fog.near;uniforms.fogFar.value=fog.far;}else if(fog.isFogExp2){uniforms.fogDensity.value=fog.density;}}function refreshMaterialUniforms(uniforms,material,pixelRatio,height){if(material.isMeshBasicMaterial){refreshUniformsCommon(uniforms,material);}else if(material.isMeshLambertMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsLambert(uniforms,material);}else if(material.isMeshToonMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsToon(uniforms,material);}else if(material.isMeshPhongMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsPhong(uniforms,material);}else if(material.isMeshStandardMaterial){refreshUniformsCommon(uniforms,material);if(material.isMeshPhysicalMaterial){refreshUniformsPhysical(uniforms,material);}else{refreshUniformsStandard(uniforms,material);}}else if(material.isMeshMatcapMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsMatcap(uniforms,material);}else if(material.isMeshDepthMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsDepth(uniforms,material);}else if(material.isMeshDistanceMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsDistance(uniforms,material);}else if(material.isMeshNormalMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsNormal(uniforms,material);}else if(material.isLineBasicMaterial){refreshUniformsLine(uniforms,material);if(material.isLineDashedMaterial){refreshUniformsDash(uniforms,material);}}else if(material.isPointsMaterial){refreshUniformsPoints(uniforms,material,pixelRatio,height);}else if(material.isSpriteMaterial){refreshUniformsSprites(uniforms,material);}else if(material.isShadowMaterial){uniforms.color.value.copy(material.color);uniforms.opacity.value=material.opacity;}else if(material.isShaderMaterial){material.uniformsNeedUpdate=false;// #15581
     }}function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity;if(material.color){uniforms.diffuse.value.copy(material.color);}if(material.emissive){uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);}if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.specularMap){uniforms.specularMap.value=material.specularMap;}var envMap=properties.get(material).envMap;if(envMap){uniforms.envMap.value=envMap;uniforms.flipEnvMap.value=envMap.isCubeTexture&&envMap._needsFlipEnvMap?-1:1;uniforms.reflectivity.value=material.reflectivity;uniforms.refractionRatio.value=material.refractionRatio;var maxMipLevel=properties.get(envMap).__maxMipLevel;if(maxMipLevel!==undefined){uniforms.maxMipLevel.value=maxMipLevel;}}if(material.lightMap){uniforms.lightMap.value=material.lightMap;uniforms.lightMapIntensity.value=material.lightMapIntensity;}if(material.aoMap){uniforms.aoMap.value=material.aoMap;uniforms.aoMapIntensity.value=material.aoMapIntensity;}// uv repeat and offset setting priorities
     // 1. color map
     // 2. specular map
     // 3. displacementMap map
     // 4. normal map
     // 5. bump map
     // 6. roughnessMap map
     // 7. metalnessMap map
     // 8. alphaMap map
     // 9. emissiveMap map
     // 10. clearcoat map
     // 11. clearcoat normal map
     // 12. clearcoat roughnessMap map
     var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.specularMap){uvScaleMap=material.specularMap;}else if(material.displacementMap){uvScaleMap=material.displacementMap;}else if(material.normalMap){uvScaleMap=material.normalMap;}else if(material.bumpMap){uvScaleMap=material.bumpMap;}else if(material.roughnessMap){uvScaleMap=material.roughnessMap;}else if(material.metalnessMap){uvScaleMap=material.metalnessMap;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}else if(material.emissiveMap){uvScaleMap=material.emissiveMap;}else if(material.clearcoatMap){uvScaleMap=material.clearcoatMap;}else if(material.clearcoatNormalMap){uvScaleMap=material.clearcoatNormalMap;}else if(material.clearcoatRoughnessMap){uvScaleMap=material.clearcoatRoughnessMap;}if(uvScaleMap!==undefined){// backwards compatibility
     if(uvScaleMap.isWebGLRenderTarget){uvScaleMap=uvScaleMap.texture;}if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}// uv repeat and offset setting priorities for uv2
     // 1. ao map
     // 2. light map
     var uv2ScaleMap;if(material.aoMap){uv2ScaleMap=material.aoMap;}else if(material.lightMap){uv2ScaleMap=material.lightMap;}if(uv2ScaleMap!==undefined){// backwards compatibility
     if(uv2ScaleMap.isWebGLRenderTarget){uv2ScaleMap=uv2ScaleMap.texture;}if(uv2ScaleMap.matrixAutoUpdate===true){uv2ScaleMap.updateMatrix();}uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);}}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize;uniforms.totalSize.value=material.dashSize+material.gapSize;uniforms.scale.value=material.scale;}function refreshUniformsPoints(uniforms,material,pixelRatio,height){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.size.value=material.size*pixelRatio;uniforms.scale.value=height*0.5;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}// uv repeat and offset setting priorities
     // 1. color map
     // 2. alpha map
     var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsSprites(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.rotation.value=material.rotation;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}// uv repeat and offset setting priorities
     // 1. color map
     // 2. alpha map
     var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsLambert(uniforms,material){if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}}function refreshUniformsPhong(uniforms,material){uniforms.specular.value.copy(material.specular);uniforms.shininess.value=Math.max(material.shininess,1e-4);// to prevent pow( 0.0, 0.0 )
     if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsToon(uniforms,material){if(material.gradientMap){uniforms.gradientMap.value=material.gradientMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness;uniforms.metalness.value=material.metalness;if(material.roughnessMap){uniforms.roughnessMap.value=material.roughnessMap;}if(material.metalnessMap){uniforms.metalnessMap.value=material.metalnessMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}var envMap=properties.get(material).envMap;if(envMap){//uniforms.envMap.value = material.envMap; // part of uniforms common
     uniforms.envMapIntensity.value=material.envMapIntensity;}}function refreshUniformsPhysical(uniforms,material){refreshUniformsStandard(uniforms,material);uniforms.reflectivity.value=material.reflectivity;// also part of uniforms common
     uniforms.clearcoat.value=material.clearcoat;uniforms.clearcoatRoughness.value=material.clearcoatRoughness;if(material.sheen)uniforms.sheen.value.copy(material.sheen);if(material.clearcoatMap){uniforms.clearcoatMap.value=material.clearcoatMap;}if(material.clearcoatRoughnessMap){uniforms.clearcoatRoughnessMap.value=material.clearcoatRoughnessMap;}if(material.clearcoatNormalMap){uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);uniforms.clearcoatNormalMap.value=material.clearcoatNormalMap;if(material.side===BackSide){uniforms.clearcoatNormalScale.value.negate();}}uniforms.transmission.value=material.transmission;if(material.transmissionMap){uniforms.transmissionMap.value=material.transmissionMap;}}function refreshUniformsMatcap(uniforms,material){if(material.matcap){uniforms.matcap.value=material.matcap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDepth(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDistance(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}uniforms.referencePosition.value.copy(material.referencePosition);uniforms.nearDistance.value=material.nearDistance;uniforms.farDistance.value=material.farDistance;}function refreshUniformsNormal(uniforms,material){if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}return{refreshFogUniforms:refreshFogUniforms,refreshMaterialUniforms:refreshMaterialUniforms};}function WebGLRenderer(parameters){parameters=parameters||{};var _canvas=parameters.canvas!==undefined?parameters.canvas:document.createElementNS('http://www.w3.org/1999/xhtml','canvas'),_context=parameters.context!==undefined?parameters.context:null,_alpha=parameters.alpha!==undefined?parameters.alpha:false,_depth=parameters.depth!==undefined?parameters.depth:true,_stencil=parameters.stencil!==undefined?parameters.stencil:true,_antialias=parameters.antialias!==undefined?parameters.antialias:false,_premultipliedAlpha=parameters.premultipliedAlpha!==undefined?parameters.premultipliedAlpha:true,_preserveDrawingBuffer=parameters.preserveDrawingBuffer!==undefined?parameters.preserveDrawingBuffer:false,_powerPreference=parameters.powerPreference!==undefined?parameters.powerPreference:'default',_failIfMajorPerformanceCaveat=parameters.failIfMajorPerformanceCaveat!==undefined?parameters.failIfMajorPerformanceCaveat:false;var currentRenderList=null;var currentRenderState=null;// public properties
     this.domElement=_canvas;// Debug configuration container
     this.debug={/**
                    * Enables error checking and reporting when shader programs are being compiled
                    * @type {boolean}
                    */checkShaderErrors:true};// clearing
     this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;// scene graph
     this.sortObjects=true;// user-defined clipping
     this.clippingPlanes=[];this.localClippingEnabled=false;// physically based shading
     this.gammaFactor=2.0;// for backwards compatibility
     this.outputEncoding=LinearEncoding;// physical lights
     this.physicallyCorrectLights=false;// tone mapping
     this.toneMapping=NoToneMapping;this.toneMappingExposure=1.0;// morphs
     this.maxMorphTargets=8;this.maxMorphNormals=4;// internal properties
     var _this=this;var _isContextLost=false;// internal state cache
     var _framebuffer=null;var _currentActiveCubeFace=0;var _currentActiveMipmapLevel=0;var _currentRenderTarget=null;var _currentFramebuffer=null;var _currentMaterialId=-1;var _currentCamera=null;var _currentArrayCamera=null;var _currentViewport=new Vector4();var _currentScissor=new Vector4();var _currentScissorTest=null;//
     var _width=_canvas.width;var _height=_canvas.height;var _pixelRatio=1;var _opaqueSort=null;var _transparentSort=null;var _viewport=new Vector4(0,0,_width,_height);var _scissor=new Vector4(0,0,_width,_height);var _scissorTest=false;// frustum
     var _frustum=new Frustum();// clipping
     var _clippingEnabled=false;var _localClippingEnabled=false;// camera matrices cache
     var _projScreenMatrix=new Matrix4();var _vector3=new Vector3();var _emptyScene={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function getTargetPixelRatio(){return _currentRenderTarget===null?_pixelRatio:1;}// initialize
     var _gl=_context;function getContext(contextNames,contextAttributes){for(var _i121=0;_i121<contextNames.length;_i121++){var contextName=contextNames[_i121];var context=_canvas.getContext(contextName,contextAttributes);if(context!==null)return context;}return null;}try{var contextAttributes={alpha:_alpha,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,powerPreference:_powerPreference,failIfMajorPerformanceCaveat:_failIfMajorPerformanceCaveat};// event listeners must be registered before WebGL context is created, see #12753
     _canvas.addEventListener('webglcontextlost',onContextLost,false);_canvas.addEventListener('webglcontextrestored',onContextRestore,false);if(_gl===null){var contextNames=['webgl2','webgl','experimental-webgl'];if(_this.isWebGL1Renderer===true){contextNames.shift();}_gl=getContext(contextNames,contextAttributes);if(_gl===null){if(getContext(contextNames)){throw new Error('Error creating WebGL context with your selected attributes.');}else{throw new Error('Error creating WebGL context.');}}}// Some experimental-webgl implementations do not have getShaderPrecisionFormat
     if(_gl.getShaderPrecisionFormat===undefined){_gl.getShaderPrecisionFormat=function(){return{'rangeMin':1,'rangeMax':1,'precision':1};};}}catch(error){console.error('THREE.WebGLRenderer: '+error.message);throw error;}var extensions,capabilities,state,info;var properties,textures,cubemaps,attributes,geometries,objects;var programCache,materials,renderLists,renderStates,clipping;var background,morphtargets,bufferRenderer,indexedBufferRenderer;var utils,bindingStates;function initGLContext(){extensions=new WebGLExtensions(_gl);capabilities=new WebGLCapabilities(_gl,extensions,parameters);if(capabilities.isWebGL2===false){extensions.get('WEBGL_depth_texture');extensions.get('OES_texture_float');extensions.get('OES_texture_half_float');extensions.get('OES_texture_half_float_linear');extensions.get('OES_standard_derivatives');extensions.get('OES_element_index_uint');extensions.get('OES_vertex_array_object');extensions.get('ANGLE_instanced_arrays');}extensions.get('OES_texture_float_linear');utils=new WebGLUtils(_gl,extensions,capabilities);state=new WebGLState(_gl,extensions,capabilities);state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());info=new WebGLInfo(_gl);properties=new WebGLProperties();textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info);cubemaps=new WebGLCubeMaps(_this);attributes=new WebGLAttributes(_gl,capabilities);bindingStates=new WebGLBindingStates(_gl,extensions,attributes,capabilities);geometries=new WebGLGeometries(_gl,attributes,info,bindingStates);objects=new WebGLObjects(_gl,geometries,attributes,info);morphtargets=new WebGLMorphtargets(_gl);clipping=new WebGLClipping(properties);programCache=new WebGLPrograms(_this,cubemaps,extensions,capabilities,bindingStates,clipping);materials=new WebGLMaterials(properties);renderLists=new WebGLRenderLists(properties);renderStates=new WebGLRenderStates();background=new WebGLBackground(_this,cubemaps,state,objects,_premultipliedAlpha);bufferRenderer=new WebGLBufferRenderer(_gl,extensions,info,capabilities);indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities);info.programs=programCache.programs;_this.capabilities=capabilities;_this.extensions=extensions;_this.properties=properties;_this.renderLists=renderLists;_this.state=state;_this.info=info;}initGLContext();// xr
     var xr=new WebXRManager(_this,_gl);this.xr=xr;// shadow map
     var shadowMap=new WebGLShadowMap(_this,objects,capabilities.maxTextureSize);this.shadowMap=shadowMap;// API
     this.getContext=function(){return _gl;};this.getContextAttributes=function(){return _gl.getContextAttributes();};this.forceContextLoss=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.loseContext();};this.forceContextRestore=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.restoreContext();};this.getPixelRatio=function(){return _pixelRatio;};this.setPixelRatio=function(value){if(value===undefined)return;_pixelRatio=value;this.setSize(_width,_height,false);};this.getSize=function(target){if(target===undefined){console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');target=new Vector2();}return target.set(_width,_height);};this.setSize=function(width,height,updateStyle){if(xr.isPresenting){console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');return;}_width=width;_height=height;_canvas.width=Math.floor(width*_pixelRatio);_canvas.height=Math.floor(height*_pixelRatio);if(updateStyle!==false){_canvas.style.width=width+'px';_canvas.style.height=height+'px';}this.setViewport(0,0,width,height);};this.getDrawingBufferSize=function(target){if(target===undefined){console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');target=new Vector2();}return target.set(_width*_pixelRatio,_height*_pixelRatio).floor();};this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width;_height=height;_pixelRatio=pixelRatio;_canvas.width=Math.floor(width*pixelRatio);_canvas.height=Math.floor(height*pixelRatio);this.setViewport(0,0,width,height);};this.getCurrentViewport=function(target){if(target===undefined){console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');target=new Vector4();}return target.copy(_currentViewport);};this.getViewport=function(target){return target.copy(_viewport);};this.setViewport=function(x,y,width,height){if(x.isVector4){_viewport.set(x.x,x.y,x.z,x.w);}else{_viewport.set(x,y,width,height);}state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());};this.getScissor=function(target){return target.copy(_scissor);};this.setScissor=function(x,y,width,height){if(x.isVector4){_scissor.set(x.x,x.y,x.z,x.w);}else{_scissor.set(x,y,width,height);}state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());};this.getScissorTest=function(){return _scissorTest;};this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean);};this.setOpaqueSort=function(method){_opaqueSort=method;};this.setTransparentSort=function(method){_transparentSort=method;};// Clearing
     this.getClearColor=function(){return background.getClearColor();};this.setClearColor=function(){background.setClearColor.apply(background,arguments);};this.getClearAlpha=function(){return background.getClearAlpha();};this.setClearAlpha=function(){background.setClearAlpha.apply(background,arguments);};this.clear=function(color,depth,stencil){var bits=0;if(color===undefined||color)bits|=16384;if(depth===undefined||depth)bits|=256;if(stencil===undefined||stencil)bits|=1024;_gl.clear(bits);};this.clearColor=function(){this.clear(true,false,false);};this.clearDepth=function(){this.clear(false,true,false);};this.clearStencil=function(){this.clear(false,false,true);};//
     this.dispose=function(){_canvas.removeEventListener('webglcontextlost',onContextLost,false);_canvas.removeEventListener('webglcontextrestored',onContextRestore,false);renderLists.dispose();renderStates.dispose();properties.dispose();cubemaps.dispose();objects.dispose();bindingStates.dispose();xr.dispose();animation.stop();};// Events
     function onContextLost(event){event.preventDefault();console.log('THREE.WebGLRenderer: Context Lost.');_isContextLost=true;}function onContextRestore()/* event */{console.log('THREE.WebGLRenderer: Context Restored.');_isContextLost=false;initGLContext();}function onMaterialDispose(event){var material=event.target;material.removeEventListener('dispose',onMaterialDispose);deallocateMaterial(material);}// Buffer deallocation
     function deallocateMaterial(material){releaseMaterialProgramReference(material);properties.remove(material);}function releaseMaterialProgramReference(material){var programInfo=properties.get(material).program;if(programInfo!==undefined){programCache.releaseProgram(programInfo);}}// Buffer rendering
     function renderObjectImmediate(object,program){object.render(function(object){_this.renderBufferImmediate(object,program);});}this.renderBufferImmediate=function(object,program){bindingStates.initAttributes();var buffers=properties.get(object);if(object.hasPositions&&!buffers.position)buffers.position=_gl.createBuffer();if(object.hasNormals&&!buffers.normal)buffers.normal=_gl.createBuffer();if(object.hasUvs&&!buffers.uv)buffers.uv=_gl.createBuffer();if(object.hasColors&&!buffers.color)buffers.color=_gl.createBuffer();var programAttributes=program.getAttributes();if(object.hasPositions){_gl.bindBuffer(34962,buffers.position);_gl.bufferData(34962,object.positionArray,35048);bindingStates.enableAttribute(programAttributes.position);_gl.vertexAttribPointer(programAttributes.position,3,5126,false,0,0);}if(object.hasNormals){_gl.bindBuffer(34962,buffers.normal);_gl.bufferData(34962,object.normalArray,35048);bindingStates.enableAttribute(programAttributes.normal);_gl.vertexAttribPointer(programAttributes.normal,3,5126,false,0,0);}if(object.hasUvs){_gl.bindBuffer(34962,buffers.uv);_gl.bufferData(34962,object.uvArray,35048);bindingStates.enableAttribute(programAttributes.uv);_gl.vertexAttribPointer(programAttributes.uv,2,5126,false,0,0);}if(object.hasColors){_gl.bindBuffer(34962,buffers.color);_gl.bufferData(34962,object.colorArray,35048);bindingStates.enableAttribute(programAttributes.color);_gl.vertexAttribPointer(programAttributes.color,3,5126,false,0,0);}bindingStates.disableUnusedAttributes();_gl.drawArrays(4,0,object.count);object.count=0;};this.renderBufferDirect=function(camera,scene,geometry,material,object,group){if(scene===null)scene=_emptyScene;// renderBufferDirect second parameter used to be fog (could be null)
     var frontFaceCW=object.isMesh&&object.matrixWorld.determinant()<0;var program=setProgram(camera,scene,material,object);state.setMaterial(material,frontFaceCW);//
     var index=geometry.index;var position=geometry.attributes.position;//
     if(index===null){if(position===undefined||position.count===0)return;}else if(index.count===0){return;}//
     var rangeFactor=1;if(material.wireframe===true){index=geometries.getWireframeAttribute(geometry);rangeFactor=2;}if(material.morphTargets||material.morphNormals){morphtargets.update(object,geometry,material,program);}bindingStates.setup(object,material,program,geometry,index);var attribute;var renderer=bufferRenderer;if(index!==null){attribute=attributes.get(index);renderer=indexedBufferRenderer;renderer.setIndex(attribute);}//
     var dataCount=index!==null?index.count:position.count;var rangeStart=geometry.drawRange.start*rangeFactor;var rangeCount=geometry.drawRange.count*rangeFactor;var groupStart=group!==null?group.start*rangeFactor:0;var groupCount=group!==null?group.count*rangeFactor:Infinity;var drawStart=Math.max(rangeStart,groupStart);var drawEnd=Math.min(dataCount,rangeStart+rangeCount,groupStart+groupCount)-1;var drawCount=Math.max(0,drawEnd-drawStart+1);if(drawCount===0)return;//
     if(object.isMesh){if(material.wireframe===true){state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio());renderer.setMode(1);}else{renderer.setMode(4);}}else if(object.isLine){var lineWidth=material.linewidth;if(lineWidth===undefined)lineWidth=1;// Not using Line*Material
     state.setLineWidth(lineWidth*getTargetPixelRatio());if(object.isLineSegments){renderer.setMode(1);}else if(object.isLineLoop){renderer.setMode(2);}else{renderer.setMode(3);}}else if(object.isPoints){renderer.setMode(0);}else if(object.isSprite){renderer.setMode(4);}if(object.isInstancedMesh){renderer.renderInstances(drawStart,drawCount,object.count);}else if(geometry.isInstancedBufferGeometry){var instanceCount=Math.min(geometry.instanceCount,geometry._maxInstanceCount);renderer.renderInstances(drawStart,drawCount,instanceCount);}else{renderer.render(drawStart,drawCount);}};// Compile
     this.compile=function(scene,camera){currentRenderState=renderStates.get(scene,camera);currentRenderState.init();scene.traverse(function(object){if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}});currentRenderState.setupLights(camera);var compiled=new WeakMap();scene.traverse(function(object){var material=object.material;if(material){if(Array.isArray(material)){for(var _i122=0;_i122<material.length;_i122++){var material2=material[_i122];if(compiled.has(material2)===false){initMaterial(material2,scene,object);compiled.set(material2);}}}else if(compiled.has(material)===false){initMaterial(material,scene,object);compiled.set(material);}}});};// Animation Loop
     var onAnimationFrameCallback=null;function onAnimationFrame(time){if(xr.isPresenting)return;if(onAnimationFrameCallback)onAnimationFrameCallback(time);}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);if(typeof window!=='undefined')animation.setContext(window);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;xr.setAnimationLoop(callback);callback===null?animation.stop():animation.start();};// Rendering
     this.render=function(scene,camera){var renderTarget,forceClear;if(arguments[2]!==undefined){console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');renderTarget=arguments[2];}if(arguments[3]!==undefined){console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');forceClear=arguments[3];}if(camera!==undefined&&camera.isCamera!==true){console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');return;}if(_isContextLost===true)return;// reset caching for this frame
     bindingStates.resetDefaultState();_currentMaterialId=-1;_currentCamera=null;// update scene graph
     if(scene.autoUpdate===true)scene.updateMatrixWorld();// update camera matrices and frustum
     if(camera.parent===null)camera.updateMatrixWorld();if(xr.enabled===true&&xr.isPresenting===true){camera=xr.getCamera(camera);}//
     if(scene.isScene===true)scene.onBeforeRender(_this,scene,camera,renderTarget||_currentRenderTarget);currentRenderState=renderStates.get(scene,camera);currentRenderState.init();_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromProjectionMatrix(_projScreenMatrix);_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=clipping.init(this.clippingPlanes,_localClippingEnabled,camera);currentRenderList=renderLists.get(scene,camera);currentRenderList.init();projectObject(scene,camera,0,_this.sortObjects);currentRenderList.finish();if(_this.sortObjects===true){currentRenderList.sort(_opaqueSort,_transparentSort);}//
     if(_clippingEnabled===true)clipping.beginShadows();var shadowsArray=currentRenderState.state.shadowsArray;shadowMap.render(shadowsArray,scene,camera);currentRenderState.setupLights(camera);if(_clippingEnabled===true)clipping.endShadows();//
     if(this.info.autoReset===true)this.info.reset();if(renderTarget!==undefined){this.setRenderTarget(renderTarget);}//
     background.render(currentRenderList,scene,camera,forceClear);// render scene
     var opaqueObjects=currentRenderList.opaque;var transparentObjects=currentRenderList.transparent;if(opaqueObjects.length>0)renderObjects(opaqueObjects,scene,camera);if(transparentObjects.length>0)renderObjects(transparentObjects,scene,camera);//
     if(scene.isScene===true)scene.onAfterRender(_this,scene,camera);//
     if(_currentRenderTarget!==null){// Generate mipmap if we're using any kind of mipmap filtering
     textures.updateRenderTargetMipmap(_currentRenderTarget);// resolve multisample renderbuffers to a single-sample texture if necessary
     textures.updateMultisampleRenderTarget(_currentRenderTarget);}// Ensure depth buffer writing is enabled so it can be cleared on next render
     state.buffers.depth.setTest(true);state.buffers.depth.setMask(true);state.buffers.color.setMask(true);state.setPolygonOffset(false);// _gl.finish();
     currentRenderList=null;currentRenderState=null;};function projectObject(object,camera,groupOrder,sortObjects){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible){if(object.isGroup){groupOrder=object.renderOrder;}else if(object.isLOD){if(object.autoUpdate===true)object.update(camera);}else if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var geometry=objects.update(object);var material=object.material;if(material.visible){currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null);}}}else if(object.isImmediateRenderObject){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}currentRenderList.push(object,null,object.material,groupOrder,_vector3.z,null);}else if(object.isMesh||object.isLine||object.isPoints){if(object.isSkinnedMesh){// update skeleton only once in a frame
     if(object.skeleton.frame!==info.render.frame){object.skeleton.update();object.skeleton.frame=info.render.frame;}}if(!object.frustumCulled||_frustum.intersectsObject(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var _geometry2=objects.update(object);var _material=object.material;if(Array.isArray(_material)){var groups=_geometry2.groups;for(var _i123=0,l=groups.length;_i123<l;_i123++){var group=groups[_i123];var groupMaterial=_material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){currentRenderList.push(object,_geometry2,groupMaterial,groupOrder,_vector3.z,group);}}}else if(_material.visible){currentRenderList.push(object,_geometry2,_material,groupOrder,_vector3.z,null);}}}}var children=object.children;for(var _i124=0,_l6=children.length;_i124<_l6;_i124++){projectObject(children[_i124],camera,groupOrder,sortObjects);}}function renderObjects(renderList,scene,camera){var overrideMaterial=scene.isScene===true?scene.overrideMaterial:null;for(var _i125=0,l=renderList.length;_i125<l;_i125++){var renderItem=renderList[_i125];var object=renderItem.object;var geometry=renderItem.geometry;var material=overrideMaterial===null?renderItem.material:overrideMaterial;var group=renderItem.group;if(camera.isArrayCamera){_currentArrayCamera=camera;var cameras=camera.cameras;for(var j=0,jl=cameras.length;j<jl;j++){var camera2=cameras[j];if(object.layers.test(camera2.layers)){state.viewport(_currentViewport.copy(camera2.viewport));currentRenderState.setupLights(camera2);renderObject(object,scene,camera2,geometry,material,group);}}}else{_currentArrayCamera=null;renderObject(object,scene,camera,geometry,material,group);}}}function renderObject(object,scene,camera,geometry,material,group){object.onBeforeRender(_this,scene,camera,geometry,material,group);currentRenderState=renderStates.get(scene,_currentArrayCamera||camera);object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld);object.normalMatrix.getNormalMatrix(object.modelViewMatrix);if(object.isImmediateRenderObject){var program=setProgram(camera,scene,material,object);state.setMaterial(material);bindingStates.reset();renderObjectImmediate(object,program);}else{_this.renderBufferDirect(camera,scene,geometry,material,object,group);}object.onAfterRender(_this,scene,camera,geometry,material,group);currentRenderState=renderStates.get(scene,_currentArrayCamera||camera);}function initMaterial(material,scene,object){if(scene.isScene!==true)scene=_emptyScene;// scene could be a Mesh, Line, Points, ...
     var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;var shadowsArray=currentRenderState.state.shadowsArray;var lightsStateVersion=lights.state.version;var parameters=programCache.getParameters(material,lights.state,shadowsArray,scene,object);var programCacheKey=programCache.getProgramCacheKey(parameters);var program=materialProperties.program;var programChange=true;if(program===undefined){// new material
     material.addEventListener('dispose',onMaterialDispose);}else if(program.cacheKey!==programCacheKey){// changed glsl or parameters
     releaseMaterialProgramReference(material);}else if(materialProperties.lightsStateVersion!==lightsStateVersion){programChange=false;}else if(parameters.shaderID!==undefined){// same glsl and uniform list, envMap still needs the update here to avoid a frame-late effect
     var environment=material.isMeshStandardMaterial?scene.environment:null;materialProperties.envMap=cubemaps.get(material.envMap||environment);return;}else{// only rebuild uniform list
     programChange=false;}if(programChange){parameters.uniforms=programCache.getUniforms(material);material.onBeforeCompile(parameters,_this);program=programCache.acquireProgram(parameters,programCacheKey);materialProperties.program=program;materialProperties.uniforms=parameters.uniforms;materialProperties.outputEncoding=parameters.outputEncoding;}var uniforms=materialProperties.uniforms;if(!material.isShaderMaterial&&!material.isRawShaderMaterial||material.clipping===true){materialProperties.numClippingPlanes=clipping.numPlanes;materialProperties.numIntersection=clipping.numIntersection;uniforms.clippingPlanes=clipping.uniform;}materialProperties.environment=material.isMeshStandardMaterial?scene.environment:null;materialProperties.fog=scene.fog;materialProperties.envMap=cubemaps.get(material.envMap||materialProperties.environment);// store the light setup it was created for
     materialProperties.needsLights=materialNeedsLights(material);materialProperties.lightsStateVersion=lightsStateVersion;if(materialProperties.needsLights){// wire up the material to this renderer's lighting state
     uniforms.ambientLightColor.value=lights.state.ambient;uniforms.lightProbe.value=lights.state.probe;uniforms.directionalLights.value=lights.state.directional;uniforms.directionalLightShadows.value=lights.state.directionalShadow;uniforms.spotLights.value=lights.state.spot;uniforms.spotLightShadows.value=lights.state.spotShadow;uniforms.rectAreaLights.value=lights.state.rectArea;uniforms.ltc_1.value=lights.state.rectAreaLTC1;uniforms.ltc_2.value=lights.state.rectAreaLTC2;uniforms.pointLights.value=lights.state.point;uniforms.pointLightShadows.value=lights.state.pointShadow;uniforms.hemisphereLights.value=lights.state.hemi;uniforms.directionalShadowMap.value=lights.state.directionalShadowMap;uniforms.directionalShadowMatrix.value=lights.state.directionalShadowMatrix;uniforms.spotShadowMap.value=lights.state.spotShadowMap;uniforms.spotShadowMatrix.value=lights.state.spotShadowMatrix;uniforms.pointShadowMap.value=lights.state.pointShadowMap;uniforms.pointShadowMatrix.value=lights.state.pointShadowMatrix;// TODO (abelnation): add area lights shadow info to uniforms
     }var progUniforms=materialProperties.program.getUniforms();var uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);materialProperties.uniformsList=uniformsList;}function setProgram(camera,scene,material,object){if(scene.isScene!==true)scene=_emptyScene;// scene could be a Mesh, Line, Points, ...
     textures.resetTextureUnits();var fog=scene.fog;var environment=material.isMeshStandardMaterial?scene.environment:null;var encoding=_currentRenderTarget===null?_this.outputEncoding:_currentRenderTarget.texture.encoding;var envMap=cubemaps.get(material.envMap||environment);var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;if(_clippingEnabled===true){if(_localClippingEnabled===true||camera!==_currentCamera){var useCache=camera===_currentCamera&&material.id===_currentMaterialId;// we might want to call this function with some ClippingGroup
     // object instead of the material, once it becomes feasible
     // (#8465, #8379)
     clipping.setState(material,camera,useCache);}}if(material.version===materialProperties.__version){if(material.fog&&materialProperties.fog!==fog){initMaterial(material,scene,object);}else if(materialProperties.environment!==environment){initMaterial(material,scene,object);}else if(materialProperties.needsLights&&materialProperties.lightsStateVersion!==lights.state.version){initMaterial(material,scene,object);}else if(materialProperties.numClippingPlanes!==undefined&&(materialProperties.numClippingPlanes!==clipping.numPlanes||materialProperties.numIntersection!==clipping.numIntersection)){initMaterial(material,scene,object);}else if(materialProperties.outputEncoding!==encoding){initMaterial(material,scene,object);}else if(materialProperties.envMap!==envMap){initMaterial(material,scene,object);}}else{initMaterial(material,scene,object);materialProperties.__version=material.version;}var refreshProgram=false;var refreshMaterial=false;var refreshLights=false;var program=materialProperties.program,p_uniforms=program.getUniforms(),m_uniforms=materialProperties.uniforms;if(state.useProgram(program.program)){refreshProgram=true;refreshMaterial=true;refreshLights=true;}if(material.id!==_currentMaterialId){_currentMaterialId=material.id;refreshMaterial=true;}if(refreshProgram||_currentCamera!==camera){p_uniforms.setValue(_gl,'projectionMatrix',camera.projectionMatrix);if(capabilities.logarithmicDepthBuffer){p_uniforms.setValue(_gl,'logDepthBufFC',2.0/(Math.log(camera.far+1.0)/Math.LN2));}if(_currentCamera!==camera){_currentCamera=camera;// lighting uniforms depend on the camera so enforce an update
     // now, in case this material supports lights - or later, when
     // the next material that does gets activated:
     refreshMaterial=true;// set to true on material change
     refreshLights=true;// remains set until update done
     }// load material specific uniforms
     // (shader material also gets them for the sake of genericity)
     if(material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshStandardMaterial||material.envMap){var uCamPos=p_uniforms.map.cameraPosition;if(uCamPos!==undefined){uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));}}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial){p_uniforms.setValue(_gl,'isOrthographic',camera.isOrthographicCamera===true);}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.isShadowMaterial||material.skinning){p_uniforms.setValue(_gl,'viewMatrix',camera.matrixWorldInverse);}}// skinning uniforms must be set even if material didn't change
     // auto-setting of texture unit for bone texture must go before other textures
     // otherwise textures used for skinning can take over texture units reserved for other material textures
     if(material.skinning){p_uniforms.setOptional(_gl,object,'bindMatrix');p_uniforms.setOptional(_gl,object,'bindMatrixInverse');var skeleton=object.skeleton;if(skeleton){var bones=skeleton.bones;if(capabilities.floatVertexTextures){if(skeleton.boneTexture===undefined){// layout (1 matrix = 4 pixels)
     //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
     //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
     //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
     //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
     //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
     var size=Math.sqrt(bones.length*4);// 4 pixels needed for 1 matrix
     size=MathUtils.ceilPowerOfTwo(size);size=Math.max(size,4);var boneMatrices=new Float32Array(size*size*4);// 4 floats per RGBA pixel
     boneMatrices.set(skeleton.boneMatrices);// copy current values
     var boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);skeleton.boneMatrices=boneMatrices;skeleton.boneTexture=boneTexture;skeleton.boneTextureSize=size;}p_uniforms.setValue(_gl,'boneTexture',skeleton.boneTexture,textures);p_uniforms.setValue(_gl,'boneTextureSize',skeleton.boneTextureSize);}else{p_uniforms.setOptional(_gl,skeleton,'boneMatrices');}}}if(refreshMaterial||materialProperties.receiveShadow!==object.receiveShadow){materialProperties.receiveShadow=object.receiveShadow;p_uniforms.setValue(_gl,'receiveShadow',object.receiveShadow);}if(refreshMaterial){p_uniforms.setValue(_gl,'toneMappingExposure',_this.toneMappingExposure);if(materialProperties.needsLights){// the current material requires lighting info
     // note: all lighting uniforms are always set correctly
     // they simply reference the renderer's state for their
     // values
     //
     // use the current material's .needsUpdate flags to set
     // the GL state when required
     markUniformsLightsNeedsUpdate(m_uniforms,refreshLights);}// refresh uniforms common to several materials
     if(fog&&material.fog){materials.refreshFogUniforms(m_uniforms,fog);}materials.refreshMaterialUniforms(m_uniforms,material,_pixelRatio,_height);WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);}if(material.isShaderMaterial&&material.uniformsNeedUpdate===true){WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);material.uniformsNeedUpdate=false;}if(material.isSpriteMaterial){p_uniforms.setValue(_gl,'center',object.center);}// common matrices
     p_uniforms.setValue(_gl,'modelViewMatrix',object.modelViewMatrix);p_uniforms.setValue(_gl,'normalMatrix',object.normalMatrix);p_uniforms.setValue(_gl,'modelMatrix',object.matrixWorld);return program;}// If uniforms are marked as clean, they don't need to be loaded to the GPU.
     function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value;uniforms.lightProbe.needsUpdate=value;uniforms.directionalLights.needsUpdate=value;uniforms.directionalLightShadows.needsUpdate=value;uniforms.pointLights.needsUpdate=value;uniforms.pointLightShadows.needsUpdate=value;uniforms.spotLights.needsUpdate=value;uniforms.spotLightShadows.needsUpdate=value;uniforms.rectAreaLights.needsUpdate=value;uniforms.hemisphereLights.needsUpdate=value;}function materialNeedsLights(material){return material.isMeshLambertMaterial||material.isMeshToonMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isShadowMaterial||material.isShaderMaterial&&material.lights===true;}//
     this.setFramebuffer=function(value){if(_framebuffer!==value&&_currentRenderTarget===null)_gl.bindFramebuffer(36160,value);_framebuffer=value;};this.getActiveCubeFace=function(){return _currentActiveCubeFace;};this.getActiveMipmapLevel=function(){return _currentActiveMipmapLevel;};this.getRenderList=function(){return currentRenderList;};this.setRenderList=function(renderList){currentRenderList=renderList;};this.getRenderState=function(){return currentRenderState;};this.setRenderState=function(renderState){currentRenderState=renderState;};this.getRenderTarget=function(){return _currentRenderTarget;};this.setRenderTarget=function(renderTarget){var activeCubeFace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var activeMipmapLevel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;_currentRenderTarget=renderTarget;_currentActiveCubeFace=activeCubeFace;_currentActiveMipmapLevel=activeMipmapLevel;if(renderTarget&&properties.get(renderTarget).__webglFramebuffer===undefined){textures.setupRenderTarget(renderTarget);}var framebuffer=_framebuffer;var isCube=false;if(renderTarget){var __webglFramebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget){framebuffer=__webglFramebuffer[activeCubeFace];isCube=true;}else if(renderTarget.isWebGLMultisampleRenderTarget){framebuffer=properties.get(renderTarget).__webglMultisampledFramebuffer;}else{framebuffer=__webglFramebuffer;}_currentViewport.copy(renderTarget.viewport);_currentScissor.copy(renderTarget.scissor);_currentScissorTest=renderTarget.scissorTest;}else{_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();_currentScissorTest=_scissorTest;}if(_currentFramebuffer!==framebuffer){_gl.bindFramebuffer(36160,framebuffer);_currentFramebuffer=framebuffer;}state.viewport(_currentViewport);state.scissor(_currentScissor);state.setScissorTest(_currentScissorTest);if(isCube){var textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(36160,36064,34069+activeCubeFace,textureProperties.__webglTexture,activeMipmapLevel);}};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer,activeCubeFaceIndex){if(!(renderTarget&&renderTarget.isWebGLRenderTarget)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');return;}var framebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget&&activeCubeFaceIndex!==undefined){framebuffer=framebuffer[activeCubeFaceIndex];}if(framebuffer){var restore=false;if(framebuffer!==_currentFramebuffer){_gl.bindFramebuffer(36160,framebuffer);restore=true;}try{var texture=renderTarget.texture;var textureFormat=texture.format;var textureType=texture.type;if(textureFormat!==RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(35739)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');return;}if(textureType!==UnsignedByteType&&utils.convert(textureType)!==_gl.getParameter(35738)&&// IE11, Edge and Chrome Mac < 52 (#9513)
     !(textureType===FloatType&&(capabilities.isWebGL2||extensions.get('OES_texture_float')||extensions.get('WEBGL_color_buffer_float')))&&// Chrome Mac >= 52 and Firefox
     !(textureType===HalfFloatType&&(capabilities.isWebGL2?extensions.get('EXT_color_buffer_float'):extensions.get('EXT_color_buffer_half_float')))){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');return;}if(_gl.checkFramebufferStatus(36160)===36053){// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
     if(x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height){_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer);}}else{console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');}}finally{if(restore){_gl.bindFramebuffer(36160,_currentFramebuffer);}}}};this.copyFramebufferToTexture=function(position,texture,level){if(level===undefined)level=0;var levelScale=Math.pow(2,-level);var width=Math.floor(texture.image.width*levelScale);var height=Math.floor(texture.image.height*levelScale);var glFormat=utils.convert(texture.format);textures.setTexture2D(texture,0);_gl.copyTexImage2D(3553,level,glFormat,position.x,position.y,width,height,0);state.unbindTexture();};this.copyTextureToTexture=function(position,srcTexture,dstTexture,level){if(level===undefined)level=0;var width=srcTexture.image.width;var height=srcTexture.image.height;var glFormat=utils.convert(dstTexture.format);var glType=utils.convert(dstTexture.type);textures.setTexture2D(dstTexture,0);// As another texture upload may have changed pixelStorei
     // parameters, make sure they are correct for the dstTexture
     _gl.pixelStorei(37440,dstTexture.flipY);_gl.pixelStorei(37441,dstTexture.premultiplyAlpha);_gl.pixelStorei(3317,dstTexture.unpackAlignment);if(srcTexture.isDataTexture){_gl.texSubImage2D(3553,level,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data);}else{if(srcTexture.isCompressedTexture){_gl.compressedTexSubImage2D(3553,level,position.x,position.y,srcTexture.mipmaps[0].width,srcTexture.mipmaps[0].height,glFormat,srcTexture.mipmaps[0].data);}else{_gl.texSubImage2D(3553,level,position.x,position.y,glFormat,glType,srcTexture.image);}}// Generate mipmaps only when copying level 0
     if(level===0&&dstTexture.generateMipmaps)_gl.generateMipmap(3553);state.unbindTexture();};this.initTexture=function(texture){textures.setTexture2D(texture,0);state.unbindTexture();};if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));// eslint-disable-line no-undef
     }}function WebGL1Renderer(parameters){WebGLRenderer.call(this,parameters);}WebGL1Renderer.prototype=Object.assign(Object.create(WebGLRenderer.prototype),{constructor:WebGL1Renderer,isWebGL1Renderer:true});var Scene=/*#__PURE__*/function(_Object3D){_inherits(Scene,_Object3D);var _super4=_createSuper(Scene);function Scene(){var _this11;_classCallCheck(this,Scene);_this11=_super4.call(this);Object.defineProperty(_assertThisInitialized(_this11),'isScene',{value:true});_this11.type='Scene';_this11.background=null;_this11.environment=null;_this11.fog=null;_this11.overrideMaterial=null;_this11.autoUpdate=true;// checked by the renderer
     if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:_assertThisInitialized(_this11)}));// eslint-disable-line no-undef
     }return _this11;}_createClass(Scene,[{key:"copy",value:function copy(source,recursive){_get(_getPrototypeOf(Scene.prototype),"copy",this).call(this,source,recursive);if(source.background!==null)this.background=source.background.clone();if(source.environment!==null)this.environment=source.environment.clone();if(source.fog!==null)this.fog=source.fog.clone();if(source.overrideMaterial!==null)this.overrideMaterial=source.overrideMaterial.clone();this.autoUpdate=source.autoUpdate;this.matrixAutoUpdate=source.matrixAutoUpdate;return this;}},{key:"toJSON",value:function toJSON(meta){var data=_get(_getPrototypeOf(Scene.prototype),"toJSON",this).call(this,meta);if(this.background!==null)data.object.background=this.background.toJSON(meta);if(this.environment!==null)data.object.environment=this.environment.toJSON(meta);if(this.fog!==null)data.object.fog=this.fog.toJSON();return data;}}]);return Scene;}(Object3D);function InterleavedBuffer(array,stride){this.array=array;this.stride=stride;this.count=array!==undefined?array.length/stride:0;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;this.uuid=MathUtils.generateUUID();}Object.defineProperty(InterleavedBuffer.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(InterleavedBuffer.prototype,{isInterleavedBuffer:true,onUploadCallback:function onUploadCallback(){},setUsage:function setUsage(value){this.usage=value;return this;},copy:function copy(source){this.array=new source.array.constructor(source.array);this.count=source.count;this.stride=source.stride;this.usage=source.usage;return this;},copyAt:function copyAt(index1,attribute,index2){index1*=this.stride;index2*=attribute.stride;for(var _i126=0,l=this.stride;_i126<l;_i126++){this.array[index1+_i126]=attribute.array[index2+_i126];}return this;},set:function set(value,offset){if(offset===undefined)offset=0;this.array.set(value,offset);return this;},clone:function clone(data){if(data.arrayBuffers===undefined){data.arrayBuffers={};}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=MathUtils.generateUUID();}if(data.arrayBuffers[this.array.buffer._uuid]===undefined){data.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer;}var array=new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);var ib=new InterleavedBuffer(array,this.stride);ib.setUsage(this.usage);return ib;},onUpload:function onUpload(callback){this.onUploadCallback=callback;return this;},toJSON:function toJSON(data){if(data.arrayBuffers===undefined){data.arrayBuffers={};}// generate UUID for array buffer if necessary
     if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=MathUtils.generateUUID();}if(data.arrayBuffers[this.array.buffer._uuid]===undefined){data.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer));}//
     return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride};}});var _vector$6=new Vector3();function InterleavedBufferAttribute(interleavedBuffer,itemSize,offset,normalized){this.name='';this.data=interleavedBuffer;this.itemSize=itemSize;this.offset=offset;this.normalized=normalized===true;}Object.defineProperties(InterleavedBufferAttribute.prototype,{count:{get:function get(){return this.data.count;}},array:{get:function get(){return this.data.array;}},needsUpdate:{set:function set(value){this.data.needsUpdate=value;}}});Object.assign(InterleavedBufferAttribute.prototype,{isInterleavedBufferAttribute:true,applyMatrix4:function applyMatrix4(m){for(var _i127=0,l=this.data.count;_i127<l;_i127++){_vector$6.x=this.getX(_i127);_vector$6.y=this.getY(_i127);_vector$6.z=this.getZ(_i127);_vector$6.applyMatrix4(m);this.setXYZ(_i127,_vector$6.x,_vector$6.y,_vector$6.z);}return this;},setX:function setX(index,x){this.data.array[index*this.data.stride+this.offset]=x;return this;},setY:function setY(index,y){this.data.array[index*this.data.stride+this.offset+1]=y;return this;},setZ:function setZ(index,z){this.data.array[index*this.data.stride+this.offset+2]=z;return this;},setW:function setW(index,w){this.data.array[index*this.data.stride+this.offset+3]=w;return this;},getX:function getX(index){return this.data.array[index*this.data.stride+this.offset];},getY:function getY(index){return this.data.array[index*this.data.stride+this.offset+1];},getZ:function getZ(index){return this.data.array[index*this.data.stride+this.offset+2];},getW:function getW(index){return this.data.array[index*this.data.stride+this.offset+3];},setXY:function setXY(index,x,y){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;return this;},setXYZ:function setXYZ(index,x,y,z){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;return this;},setXYZW:function setXYZW(index,x,y,z,w){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;this.data.array[index+3]=w;return this;},clone:function clone(data){if(data===undefined){console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');var array=[];for(var _i128=0;_i128<this.count;_i128++){var index=_i128*this.data.stride+this.offset;for(var j=0;j<this.itemSize;j++){array.push(this.data.array[index+j]);}}return new BufferAttribute(new this.array.constructor(array),this.itemSize,this.normalized);}else{if(data.interleavedBuffers===undefined){data.interleavedBuffers={};}if(data.interleavedBuffers[this.data.uuid]===undefined){data.interleavedBuffers[this.data.uuid]=this.data.clone(data);}return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);}},toJSON:function toJSON(data){if(data===undefined){console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');var array=[];for(var _i129=0;_i129<this.count;_i129++){var index=_i129*this.data.stride+this.offset;for(var j=0;j<this.itemSize;j++){array.push(this.data.array[index+j]);}}// deinterleave data and save it as an ordinary buffer attribute for now
     return{itemSize:this.itemSize,type:this.array.constructor.name,array:array,normalized:this.normalized};}else{// save as true interlaved attribtue
     if(data.interleavedBuffers===undefined){data.interleavedBuffers={};}if(data.interleavedBuffers[this.data.uuid]===undefined){data.interleavedBuffers[this.data.uuid]=this.data.toJSON(data);}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized};}}});/**
          * parameters = {
          *  color: <hex>,
          *  map: new THREE.Texture( <Image> ),
          *  alphaMap: new THREE.Texture( <Image> ),
          *  rotation: <float>,
          *  sizeAttenuation: <bool>
          * }
          */function SpriteMaterial(parameters){Material.call(this);this.type='SpriteMaterial';this.color=new Color(0xffffff);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.setValues(parameters);}SpriteMaterial.prototype=Object.create(Material.prototype);SpriteMaterial.prototype.constructor=SpriteMaterial;SpriteMaterial.prototype.isSpriteMaterial=true;SpriteMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.rotation=source.rotation;this.sizeAttenuation=source.sizeAttenuation;return this;};var _geometry;var _intersectPoint=new Vector3();var _worldScale=new Vector3();var _mvPosition=new Vector3();var _alignedPosition=new Vector2();var _rotatedPosition=new Vector2();var _viewWorldMatrix=new Matrix4();var _vA$1=new Vector3();var _vB$1=new Vector3();var _vC$1=new Vector3();var _uvA$1=new Vector2();var _uvB$1=new Vector2();var _uvC$1=new Vector2();function Sprite(material){Object3D.call(this);this.type='Sprite';if(_geometry===undefined){_geometry=new BufferGeometry();var float32Array=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]);var interleavedBuffer=new InterleavedBuffer(float32Array,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute('position',new InterleavedBufferAttribute(interleavedBuffer,3,0,false));_geometry.setAttribute('uv',new InterleavedBufferAttribute(interleavedBuffer,2,3,false));}this.geometry=_geometry;this.material=material!==undefined?material:new SpriteMaterial();this.center=new Vector2(0.5,0.5);}Sprite.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Sprite,isSprite:true,raycast:function raycast(raycaster,intersects){if(raycaster.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(raycaster.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(raycaster.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z);}var rotation=this.material.rotation;var sin,cos;if(rotation!==0){cos=Math.cos(rotation);sin=Math.sin(rotation);}var center=this.center;transformVertex(_vA$1.set(-0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vB$1.set(0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vC$1.set(0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvA$1.set(0,0);_uvB$1.set(1,0);_uvC$1.set(1,1);// check first triangle
     var intersect=raycaster.ray.intersectTriangle(_vA$1,_vB$1,_vC$1,false,_intersectPoint);if(intersect===null){// check second triangle
     transformVertex(_vB$1.set(-0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvB$1.set(0,1);intersect=raycaster.ray.intersectTriangle(_vA$1,_vC$1,_vB$1,false,_intersectPoint);if(intersect===null){return;}}var distance=raycaster.ray.origin.distanceTo(_intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2()),face:null,object:this});},copy:function copy(source){Object3D.prototype.copy.call(this,source);if(source.center!==undefined)this.center.copy(source.center);this.material=source.material;return this;}});function transformVertex(vertexPosition,mvPosition,center,scale,sin,cos){// compute position in camera space
     _alignedPosition.subVectors(vertexPosition,center).addScalar(0.5).multiply(scale);// to check if rotation is not zero
     if(sin!==undefined){_rotatedPosition.x=cos*_alignedPosition.x-sin*_alignedPosition.y;_rotatedPosition.y=sin*_alignedPosition.x+cos*_alignedPosition.y;}else{_rotatedPosition.copy(_alignedPosition);}vertexPosition.copy(mvPosition);vertexPosition.x+=_rotatedPosition.x;vertexPosition.y+=_rotatedPosition.y;// transform to world space
     vertexPosition.applyMatrix4(_viewWorldMatrix);}var _v1$4=new Vector3();var _v2$2=new Vector3();function LOD(){Object3D.call(this);this._currentLevel=0;this.type='LOD';Object.defineProperties(this,{levels:{enumerable:true,value:[]}});this.autoUpdate=true;}LOD.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:LOD,isLOD:true,copy:function copy(source){Object3D.prototype.copy.call(this,source,false);var levels=source.levels;for(var _i130=0,l=levels.length;_i130<l;_i130++){var level=levels[_i130];this.addLevel(level.object.clone(),level.distance);}this.autoUpdate=source.autoUpdate;return this;},addLevel:function addLevel(object,distance){if(distance===undefined)distance=0;distance=Math.abs(distance);var levels=this.levels;var l;for(l=0;l<levels.length;l++){if(distance<levels[l].distance){break;}}levels.splice(l,0,{distance:distance,object:object});this.add(object);return this;},getCurrentLevel:function getCurrentLevel(){return this._currentLevel;},getObjectForDistance:function getObjectForDistance(distance){var levels=this.levels;if(levels.length>0){var _i131,l;for(_i131=1,l=levels.length;_i131<l;_i131++){if(distance<levels[_i131].distance){break;}}return levels[_i131-1].object;}return null;},raycast:function raycast(raycaster,intersects){var levels=this.levels;if(levels.length>0){_v1$4.setFromMatrixPosition(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(_v1$4);this.getObjectForDistance(distance).raycast(raycaster,intersects);}},update:function update(camera){var levels=this.levels;if(levels.length>1){_v1$4.setFromMatrixPosition(camera.matrixWorld);_v2$2.setFromMatrixPosition(this.matrixWorld);var distance=_v1$4.distanceTo(_v2$2)/camera.zoom;levels[0].object.visible=true;var _i132,l;for(_i132=1,l=levels.length;_i132<l;_i132++){if(distance>=levels[_i132].distance){levels[_i132-1].object.visible=false;levels[_i132].object.visible=true;}else{break;}}this._currentLevel=_i132-1;for(;_i132<l;_i132++){levels[_i132].object.visible=false;}}},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);if(this.autoUpdate===false)data.object.autoUpdate=false;data.object.levels=[];var levels=this.levels;for(var _i133=0,l=levels.length;_i133<l;_i133++){var level=levels[_i133];data.object.levels.push({object:level.object.uuid,distance:level.distance});}return data;}});function SkinnedMesh(geometry,material){if(geometry&&geometry.isGeometry){console.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}Mesh.call(this,geometry,material);this.type='SkinnedMesh';this.bindMode='attached';this.bindMatrix=new Matrix4();this.bindMatrixInverse=new Matrix4();}SkinnedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:SkinnedMesh,isSkinnedMesh:true,copy:function copy(source){Mesh.prototype.copy.call(this,source);this.bindMode=source.bindMode;this.bindMatrix.copy(source.bindMatrix);this.bindMatrixInverse.copy(source.bindMatrixInverse);this.skeleton=source.skeleton;return this;},bind:function bind(skeleton,bindMatrix){this.skeleton=skeleton;if(bindMatrix===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();bindMatrix=this.matrixWorld;}this.bindMatrix.copy(bindMatrix);this.bindMatrixInverse.getInverse(bindMatrix);},pose:function pose(){this.skeleton.pose();},normalizeSkinWeights:function normalizeSkinWeights(){var vector=new Vector4();var skinWeight=this.geometry.attributes.skinWeight;for(var _i134=0,l=skinWeight.count;_i134<l;_i134++){vector.x=skinWeight.getX(_i134);vector.y=skinWeight.getY(_i134);vector.z=skinWeight.getZ(_i134);vector.w=skinWeight.getW(_i134);var scale=1.0/vector.manhattanLength();if(scale!==Infinity){vector.multiplyScalar(scale);}else{vector.set(1,0,0,0);// do something reasonable
     }skinWeight.setXYZW(_i134,vector.x,vector.y,vector.z,vector.w);}},updateMatrixWorld:function updateMatrixWorld(force){Mesh.prototype.updateMatrixWorld.call(this,force);if(this.bindMode==='attached'){this.bindMatrixInverse.getInverse(this.matrixWorld);}else if(this.bindMode==='detached'){this.bindMatrixInverse.getInverse(this.bindMatrix);}else{console.warn('THREE.SkinnedMesh: Unrecognized bindMode: '+this.bindMode);}},boneTransform:function(){var basePosition=new Vector3();var skinIndex=new Vector4();var skinWeight=new Vector4();var vector=new Vector3();var matrix=new Matrix4();return function(index,target){var skeleton=this.skeleton;var geometry=this.geometry;skinIndex.fromBufferAttribute(geometry.attributes.skinIndex,index);skinWeight.fromBufferAttribute(geometry.attributes.skinWeight,index);basePosition.fromBufferAttribute(geometry.attributes.position,index).applyMatrix4(this.bindMatrix);target.set(0,0,0);for(var _i135=0;_i135<4;_i135++){var weight=skinWeight.getComponent(_i135);if(weight!==0){var boneIndex=skinIndex.getComponent(_i135);matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld,skeleton.boneInverses[boneIndex]);target.addScaledVector(vector.copy(basePosition).applyMatrix4(matrix),weight);}}return target.applyMatrix4(this.bindMatrixInverse);};}()});var _offsetMatrix=new Matrix4();var _identityMatrix=new Matrix4();function Skeleton(bones,boneInverses){// copy the bone array
     bones=bones||[];this.bones=bones.slice(0);this.boneMatrices=new Float32Array(this.bones.length*16);this.frame=-1;// use the supplied bone inverses or calculate the inverses
     if(boneInverses===undefined){this.calculateInverses();}else{if(this.bones.length===boneInverses.length){this.boneInverses=boneInverses.slice(0);}else{console.warn('THREE.Skeleton boneInverses is the wrong length.');this.boneInverses=[];for(var _i136=0,il=this.bones.length;_i136<il;_i136++){this.boneInverses.push(new Matrix4());}}}}Object.assign(Skeleton.prototype,{calculateInverses:function calculateInverses(){this.boneInverses=[];for(var _i137=0,il=this.bones.length;_i137<il;_i137++){var inverse=new Matrix4();if(this.bones[_i137]){inverse.getInverse(this.bones[_i137].matrixWorld);}this.boneInverses.push(inverse);}},pose:function pose(){// recover the bind-time world matrices
     for(var _i138=0,il=this.bones.length;_i138<il;_i138++){var bone=this.bones[_i138];if(bone){bone.matrixWorld.getInverse(this.boneInverses[_i138]);}}// compute the local matrices, positions, rotations and scales
     for(var _i139=0,_il11=this.bones.length;_i139<_il11;_i139++){var _bone=this.bones[_i139];if(_bone){if(_bone.parent&&_bone.parent.isBone){_bone.matrix.getInverse(_bone.parent.matrixWorld);_bone.matrix.multiply(_bone.matrixWorld);}else{_bone.matrix.copy(_bone.matrixWorld);}_bone.matrix.decompose(_bone.position,_bone.quaternion,_bone.scale);}}},update:function update(){var bones=this.bones;var boneInverses=this.boneInverses;var boneMatrices=this.boneMatrices;var boneTexture=this.boneTexture;// flatten bone matrices to array
     for(var _i140=0,il=bones.length;_i140<il;_i140++){// compute the offset between the current and the original transform
     var matrix=bones[_i140]?bones[_i140].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(matrix,boneInverses[_i140]);_offsetMatrix.toArray(boneMatrices,_i140*16);}if(boneTexture!==undefined){boneTexture.needsUpdate=true;}},clone:function clone(){return new Skeleton(this.bones,this.boneInverses);},getBoneByName:function getBoneByName(name){for(var _i141=0,il=this.bones.length;_i141<il;_i141++){var bone=this.bones[_i141];if(bone.name===name){return bone;}}return undefined;},dispose:function dispose(){if(this.boneTexture){this.boneTexture.dispose();this.boneTexture=undefined;}}});function Bone(){Object3D.call(this);this.type='Bone';}Bone.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Bone,isBone:true});var _instanceLocalMatrix=new Matrix4();var _instanceWorldMatrix=new Matrix4();var _instanceIntersects=[];var _mesh=new Mesh();function InstancedMesh(geometry,material,count){Mesh.call(this,geometry,material);this.instanceMatrix=new BufferAttribute(new Float32Array(count*16),16);this.instanceColor=null;this.count=count;this.frustumCulled=false;}InstancedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:InstancedMesh,isInstancedMesh:true,copy:function copy(source){Mesh.prototype.copy.call(this,source);this.instanceMatrix.copy(source.instanceMatrix);this.count=source.count;return this;},setColorAt:function setColorAt(index,color){if(this.instanceColor===null){this.instanceColor=new BufferAttribute(new Float32Array(this.count*3),3);}color.toArray(this.instanceColor.array,index*3);},getMatrixAt:function getMatrixAt(index,matrix){matrix.fromArray(this.instanceMatrix.array,index*16);},raycast:function raycast(raycaster,intersects){var matrixWorld=this.matrixWorld;var raycastTimes=this.count;_mesh.geometry=this.geometry;_mesh.material=this.material;if(_mesh.material===undefined)return;for(var instanceId=0;instanceId<raycastTimes;instanceId++){// calculate the world matrix for each instance
     this.getMatrixAt(instanceId,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(matrixWorld,_instanceLocalMatrix);// the mesh represents this single instance
     _mesh.matrixWorld=_instanceWorldMatrix;_mesh.raycast(raycaster,_instanceIntersects);// process the result of raycast
     for(var _i142=0,l=_instanceIntersects.length;_i142<l;_i142++){var intersect=_instanceIntersects[_i142];intersect.instanceId=instanceId;intersect.object=this;intersects.push(intersect);}_instanceIntersects.length=0;}},setMatrixAt:function setMatrixAt(index,matrix){matrix.toArray(this.instanceMatrix.array,index*16);},updateMorphTargets:function updateMorphTargets(){}});/**
          * parameters = {
          *  color: <hex>,
          *  opacity: <float>,
          *
          *  linewidth: <float>,
          *  linecap: "round",
          *  linejoin: "round"
          * }
          */function LineBasicMaterial(parameters){Material.call(this);this.type='LineBasicMaterial';this.color=new Color(0xffffff);this.linewidth=1;this.linecap='round';this.linejoin='round';this.morphTargets=false;this.setValues(parameters);}LineBasicMaterial.prototype=Object.create(Material.prototype);LineBasicMaterial.prototype.constructor=LineBasicMaterial;LineBasicMaterial.prototype.isLineBasicMaterial=true;LineBasicMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;this.morphTargets=source.morphTargets;return this;};var _start=new Vector3();var _end=new Vector3();var _inverseMatrix$1=new Matrix4();var _ray$1=new Ray();var _sphere$2=new Sphere();function Line(geometry,material,mode){if(mode===1){console.error('THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.');}Object3D.call(this);this.type='Line';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new LineBasicMaterial();this.updateMorphTargets();}Line.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Line,isLine:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);this.material=source.material;this.geometry=source.geometry;return this;},computeLineDistances:function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
     if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[0];for(var _i143=1,l=positionAttribute.count;_i143<l;_i143++){_start.fromBufferAttribute(positionAttribute,_i143-1);_end.fromBufferAttribute(positionAttribute,_i143);lineDistances[_i143]=lineDistances[_i143-1];lineDistances[_i143]+=_start.distanceTo(_end);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){var _vertices=geometry.vertices;var _lineDistances=geometry.lineDistances;_lineDistances[0]=0;for(var _i144=1,_l7=_vertices.length;_i144<_l7;_i144++){_lineDistances[_i144]=_lineDistances[_i144-1];_lineDistances[_i144]+=_vertices[_i144-1].distanceTo(_vertices[_i144]);}}return this;},raycast:function raycast(raycaster,intersects){var geometry=this.geometry;var matrixWorld=this.matrixWorld;var threshold=raycaster.params.Line.threshold;// Checking boundingSphere distance to ray
     if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$2.copy(geometry.boundingSphere);_sphere$2.applyMatrix4(matrixWorld);_sphere$2.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere$2)===false)return;//
     _inverseMatrix$1.getInverse(matrixWorld);_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);var localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);var localThresholdSq=localThreshold*localThreshold;var vStart=new Vector3();var vEnd=new Vector3();var interSegment=new Vector3();var interRay=new Vector3();var step=this.isLineSegments?2:1;if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positionAttribute=attributes.position;if(index!==null){var _indices=index.array;for(var _i145=0,l=_indices.length-1;_i145<l;_i145+=step){var a=_indices[_i145];var b=_indices[_i145+1];vStart.fromBufferAttribute(positionAttribute,a);vEnd.fromBufferAttribute(positionAttribute,b);var distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
     var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
     // point: raycaster.ray.at( distance ),
     point:interSegment.clone().applyMatrix4(this.matrixWorld),index:_i145,face:null,faceIndex:null,object:this});}}else{for(var _i146=0,_l8=positionAttribute.count-1;_i146<_l8;_i146+=step){vStart.fromBufferAttribute(positionAttribute,_i146);vEnd.fromBufferAttribute(positionAttribute,_i146+1);var _distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(_distSq>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
     var _distance=raycaster.ray.origin.distanceTo(interRay);if(_distance<raycaster.near||_distance>raycaster.far)continue;intersects.push({distance:_distance,// What do we want? intersection point on the ray or on the segment??
     // point: raycaster.ray.at( distance ),
     point:interSegment.clone().applyMatrix4(this.matrixWorld),index:_i146,face:null,faceIndex:null,object:this});}}}else if(geometry.isGeometry){var _vertices2=geometry.vertices;var nbVertices=_vertices2.length;for(var _i147=0;_i147<nbVertices-1;_i147+=step){var _distSq2=_ray$1.distanceSqToSegment(_vertices2[_i147],_vertices2[_i147+1],interRay,interSegment);if(_distSq2>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
     var _distance2=raycaster.ray.origin.distanceTo(interRay);if(_distance2<raycaster.near||_distance2>raycaster.far)continue;intersects.push({distance:_distance2,// What do we want? intersection point on the ray or on the segment??
     // point: raycaster.ray.at( distance ),
     point:interSegment.clone().applyMatrix4(this.matrixWorld),index:_i147,face:null,faceIndex:null,object:this});}}},updateMorphTargets:function updateMorphTargets(){var geometry=this.geometry;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var m=0,ml=morphAttribute.length;m<ml;m++){var name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');}}}});var _start$1=new Vector3();var _end$1=new Vector3();function LineSegments(geometry,material){Line.call(this,geometry,material);this.type='LineSegments';}LineSegments.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineSegments,isLineSegments:true,computeLineDistances:function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
     if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[];for(var _i148=0,l=positionAttribute.count;_i148<l;_i148+=2){_start$1.fromBufferAttribute(positionAttribute,_i148);_end$1.fromBufferAttribute(positionAttribute,_i148+1);lineDistances[_i148]=_i148===0?0:lineDistances[_i148-1];lineDistances[_i148+1]=lineDistances[_i148]+_start$1.distanceTo(_end$1);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){var _vertices3=geometry.vertices;var _lineDistances2=geometry.lineDistances;for(var _i149=0,_l9=_vertices3.length;_i149<_l9;_i149+=2){_start$1.copy(_vertices3[_i149]);_end$1.copy(_vertices3[_i149+1]);_lineDistances2[_i149]=_i149===0?0:_lineDistances2[_i149-1];_lineDistances2[_i149+1]=_lineDistances2[_i149]+_start$1.distanceTo(_end$1);}}return this;}});function LineLoop(geometry,material){Line.call(this,geometry,material);this.type='LineLoop';}LineLoop.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineLoop,isLineLoop:true});/**
          * parameters = {
          *  color: <hex>,
          *  opacity: <float>,
          *  map: new THREE.Texture( <Image> ),
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  size: <float>,
          *  sizeAttenuation: <bool>
          *
          *  morphTargets: <bool>
          * }
          */function PointsMaterial(parameters){Material.call(this);this.type='PointsMaterial';this.color=new Color(0xffffff);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.morphTargets=false;this.setValues(parameters);}PointsMaterial.prototype=Object.create(Material.prototype);PointsMaterial.prototype.constructor=PointsMaterial;PointsMaterial.prototype.isPointsMaterial=true;PointsMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;this.morphTargets=source.morphTargets;return this;};var _inverseMatrix$2=new Matrix4();var _ray$2=new Ray();var _sphere$3=new Sphere();var _position$1=new Vector3();function Points(geometry,material){Object3D.call(this);this.type='Points';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new PointsMaterial();this.updateMorphTargets();}Points.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Points,isPoints:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);this.material=source.material;this.geometry=source.geometry;return this;},raycast:function raycast(raycaster,intersects){var geometry=this.geometry;var matrixWorld=this.matrixWorld;var threshold=raycaster.params.Points.threshold;// Checking boundingSphere distance to ray
     if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$3.copy(geometry.boundingSphere);_sphere$3.applyMatrix4(matrixWorld);_sphere$3.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere$3)===false)return;//
     _inverseMatrix$2.getInverse(matrixWorld);_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);var localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);var localThresholdSq=localThreshold*localThreshold;if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positionAttribute=attributes.position;if(index!==null){var _indices2=index.array;for(var _i150=0,il=_indices2.length;_i150<il;_i150++){var a=_indices2[_i150];_position$1.fromBufferAttribute(positionAttribute,a);testPoint(_position$1,a,localThresholdSq,matrixWorld,raycaster,intersects,this);}}else{for(var _i151=0,l=positionAttribute.count;_i151<l;_i151++){_position$1.fromBufferAttribute(positionAttribute,_i151);testPoint(_position$1,_i151,localThresholdSq,matrixWorld,raycaster,intersects,this);}}}else{var _vertices4=geometry.vertices;for(var _i152=0,_l10=_vertices4.length;_i152<_l10;_i152++){testPoint(_vertices4[_i152],_i152,localThresholdSq,matrixWorld,raycaster,intersects,this);}}},updateMorphTargets:function updateMorphTargets(){var geometry=this.geometry;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var m=0,ml=morphAttribute.length;m<ml;m++){var name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');}}}});function testPoint(point,index,localThresholdSq,matrixWorld,raycaster,intersects,object){var rayPointDistanceSq=_ray$2.distanceSqToPoint(point);if(rayPointDistanceSq<localThresholdSq){var intersectPoint=new Vector3();_ray$2.closestPointToPoint(point,intersectPoint);intersectPoint.applyMatrix4(matrixWorld);var distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint,index:index,face:null,object:object});}}function VideoTexture(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.format=format!==undefined?format:RGBFormat;this.minFilter=minFilter!==undefined?minFilter:LinearFilter;this.magFilter=magFilter!==undefined?magFilter:LinearFilter;this.generateMipmaps=false;var scope=this;function updateVideo(){scope.needsUpdate=true;video.requestVideoFrameCallback(updateVideo);}if('requestVideoFrameCallback'in video){video.requestVideoFrameCallback(updateVideo);}}VideoTexture.prototype=Object.assign(Object.create(Texture.prototype),{constructor:VideoTexture,isVideoTexture:true,update:function update(){var video=this.image;var hasVideoFrameCallback=('requestVideoFrameCallback'in video);if(hasVideoFrameCallback===false&&video.readyState>=video.HAVE_CURRENT_DATA){this.needsUpdate=true;}}});function CompressedTexture(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={width:width,height:height};this.mipmaps=mipmaps;// no flipping for cube textures
     // (also flipping doesn't work for compressed textures )
     this.flipY=false;// can't generate mipmaps for compressed textures
     // mips must be embedded in DDS files
     this.generateMipmaps=false;}CompressedTexture.prototype=Object.create(Texture.prototype);CompressedTexture.prototype.constructor=CompressedTexture;CompressedTexture.prototype.isCompressedTexture=true;function CanvasTexture(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.needsUpdate=true;}CanvasTexture.prototype=Object.create(Texture.prototype);CanvasTexture.prototype.constructor=CanvasTexture;CanvasTexture.prototype.isCanvasTexture=true;function DepthTexture(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){format=format!==undefined?format:DepthFormat;if(format!==DepthFormat&&format!==DepthStencilFormat){throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');}if(type===undefined&&format===DepthFormat)type=UnsignedShortType;if(type===undefined&&format===DepthStencilFormat)type=UnsignedInt248Type;Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.image={width:width,height:height};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.flipY=false;this.generateMipmaps=false;}DepthTexture.prototype=Object.create(Texture.prototype);DepthTexture.prototype.constructor=DepthTexture;DepthTexture.prototype.isDepthTexture=true;var _geometryId=0;// Geometry uses even numbers as Id
     var _m1$3=new Matrix4();var _obj$1=new Object3D();var _offset$1=new Vector3();function Geometry(){Object.defineProperty(this,'id',{value:_geometryId+=2});this.uuid=MathUtils.generateUUID();this.name='';this.type='Geometry';this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;// update flags
     this.elementsNeedUpdate=false;this.verticesNeedUpdate=false;this.uvsNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.lineDistancesNeedUpdate=false;this.groupsNeedUpdate=false;}Geometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Geometry,isGeometry:true,applyMatrix4:function applyMatrix4(matrix){var normalMatrix=new Matrix3().getNormalMatrix(matrix);for(var _i153=0,il=this.vertices.length;_i153<il;_i153++){var vertex=this.vertices[_i153];vertex.applyMatrix4(matrix);}for(var _i154=0,_il12=this.faces.length;_i154<_il12;_i154++){var face=this.faces[_i154];face.normal.applyMatrix3(normalMatrix).normalize();for(var j=0,jl=face.vertexNormals.length;j<jl;j++){face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();}}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}this.verticesNeedUpdate=true;this.normalsNeedUpdate=true;return this;},rotateX:function rotateX(angle){// rotate geometry around world x-axis
     _m1$3.makeRotationX(angle);this.applyMatrix4(_m1$3);return this;},rotateY:function rotateY(angle){// rotate geometry around world y-axis
     _m1$3.makeRotationY(angle);this.applyMatrix4(_m1$3);return this;},rotateZ:function rotateZ(angle){// rotate geometry around world z-axis
     _m1$3.makeRotationZ(angle);this.applyMatrix4(_m1$3);return this;},translate:function translate(x,y,z){// translate geometry
     _m1$3.makeTranslation(x,y,z);this.applyMatrix4(_m1$3);return this;},scale:function scale(x,y,z){// scale geometry
     _m1$3.makeScale(x,y,z);this.applyMatrix4(_m1$3);return this;},lookAt:function lookAt(vector){_obj$1.lookAt(vector);_obj$1.updateMatrix();this.applyMatrix4(_obj$1.matrix);return this;},fromBufferGeometry:function fromBufferGeometry(geometry){var scope=this;var index=geometry.index!==null?geometry.index:undefined;var attributes=geometry.attributes;if(attributes.position===undefined){console.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.');return this;}var position=attributes.position;var normal=attributes.normal;var color=attributes.color;var uv=attributes.uv;var uv2=attributes.uv2;if(uv2!==undefined)this.faceVertexUvs[1]=[];for(var _i155=0;_i155<position.count;_i155++){scope.vertices.push(new Vector3().fromBufferAttribute(position,_i155));if(color!==undefined){scope.colors.push(new Color().fromBufferAttribute(color,_i155));}}function addFace(a,b,c,materialIndex){var vertexColors=color===undefined?[]:[scope.colors[a].clone(),scope.colors[b].clone(),scope.colors[c].clone()];var vertexNormals=normal===undefined?[]:[new Vector3().fromBufferAttribute(normal,a),new Vector3().fromBufferAttribute(normal,b),new Vector3().fromBufferAttribute(normal,c)];var face=new Face3(a,b,c,vertexNormals,vertexColors,materialIndex);scope.faces.push(face);if(uv!==undefined){scope.faceVertexUvs[0].push([new Vector2().fromBufferAttribute(uv,a),new Vector2().fromBufferAttribute(uv,b),new Vector2().fromBufferAttribute(uv,c)]);}if(uv2!==undefined){scope.faceVertexUvs[1].push([new Vector2().fromBufferAttribute(uv2,a),new Vector2().fromBufferAttribute(uv2,b),new Vector2().fromBufferAttribute(uv2,c)]);}}var groups=geometry.groups;if(groups.length>0){for(var _i156=0;_i156<groups.length;_i156++){var group=groups[_i156];var start=group.start;var count=group.count;for(var j=start,jl=start+count;j<jl;j+=3){if(index!==undefined){addFace(index.getX(j),index.getX(j+1),index.getX(j+2),group.materialIndex);}else{addFace(j,j+1,j+2,group.materialIndex);}}}}else{if(index!==undefined){for(var _i157=0;_i157<index.count;_i157+=3){addFace(index.getX(_i157),index.getX(_i157+1),index.getX(_i157+2));}}else{for(var _i158=0;_i158<position.count;_i158+=3){addFace(_i158,_i158+1,_i158+2);}}}this.computeFaceNormals();if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}return this;},center:function center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset$1).negate();this.translate(_offset$1.x,_offset$1.y,_offset$1.z);return this;},normalize:function normalize(){this.computeBoundingSphere();var center=this.boundingSphere.center;var radius=this.boundingSphere.radius;var s=radius===0?1:1.0/radius;var matrix=new Matrix4();matrix.set(s,0,0,-s*center.x,0,s,0,-s*center.y,0,0,s,-s*center.z,0,0,0,1);this.applyMatrix4(matrix);return this;},computeFaceNormals:function computeFaceNormals(){var cb=new Vector3(),ab=new Vector3();for(var f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f];var vA=this.vertices[face.a];var vB=this.vertices[face.b];var vC=this.vertices[face.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);cb.normalize();face.normal.copy(cb);}},computeVertexNormals:function computeVertexNormals(areaWeighted){if(areaWeighted===undefined)areaWeighted=true;var vertices=new Array(this.vertices.length);for(var v=0,vl=this.vertices.length;v<vl;v++){vertices[v]=new Vector3();}if(areaWeighted){// vertex normals weighted by triangle areas
     // http://www.iquilezles.org/www/articles/normals/normals.htm
     var cb=new Vector3(),ab=new Vector3();for(var f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f];var vA=this.vertices[face.a];var vB=this.vertices[face.b];var vC=this.vertices[face.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);vertices[face.a].add(cb);vertices[face.b].add(cb);vertices[face.c].add(cb);}}else{this.computeFaceNormals();for(var _f3=0,_fl=this.faces.length;_f3<_fl;_f3++){var _face=this.faces[_f3];vertices[_face.a].add(_face.normal);vertices[_face.b].add(_face.normal);vertices[_face.c].add(_face.normal);}}for(var _v4=0,_vl=this.vertices.length;_v4<_vl;_v4++){vertices[_v4].normalize();}for(var _f4=0,_fl2=this.faces.length;_f4<_fl2;_f4++){var _face2=this.faces[_f4];var vertexNormals=_face2.vertexNormals;if(vertexNormals.length===3){vertexNormals[0].copy(vertices[_face2.a]);vertexNormals[1].copy(vertices[_face2.b]);vertexNormals[2].copy(vertices[_face2.c]);}else{vertexNormals[0]=vertices[_face2.a].clone();vertexNormals[1]=vertices[_face2.b].clone();vertexNormals[2]=vertices[_face2.c].clone();}}if(this.faces.length>0){this.normalsNeedUpdate=true;}},computeFlatVertexNormals:function computeFlatVertexNormals(){this.computeFaceNormals();for(var f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f];var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){vertexNormals[0].copy(face.normal);vertexNormals[1].copy(face.normal);vertexNormals[2].copy(face.normal);}else{vertexNormals[0]=face.normal.clone();vertexNormals[1]=face.normal.clone();vertexNormals[2]=face.normal.clone();}}if(this.faces.length>0){this.normalsNeedUpdate=true;}},computeMorphNormals:function computeMorphNormals(){// save original normals
     // - create temp variables on first access
     //   otherwise just copy (for faster repeated calls)
     for(var f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f];if(!face.__originalFaceNormal){face.__originalFaceNormal=face.normal.clone();}else{face.__originalFaceNormal.copy(face.normal);}if(!face.__originalVertexNormals)face.__originalVertexNormals=[];for(var _i159=0,il=face.vertexNormals.length;_i159<il;_i159++){if(!face.__originalVertexNormals[_i159]){face.__originalVertexNormals[_i159]=face.vertexNormals[_i159].clone();}else{face.__originalVertexNormals[_i159].copy(face.vertexNormals[_i159]);}}}// use temp geometry to compute face and vertex normals for each morph
     var tmpGeo=new Geometry();tmpGeo.faces=this.faces;for(var _i160=0,_il13=this.morphTargets.length;_i160<_il13;_i160++){// create on first access
     if(!this.morphNormals[_i160]){this.morphNormals[_i160]={};this.morphNormals[_i160].faceNormals=[];this.morphNormals[_i160].vertexNormals=[];var dstNormalsFace=this.morphNormals[_i160].faceNormals;var dstNormalsVertex=this.morphNormals[_i160].vertexNormals;for(var _f5=0,_fl3=this.faces.length;_f5<_fl3;_f5++){var faceNormal=new Vector3();var vertexNormals={a:new Vector3(),b:new Vector3(),c:new Vector3()};dstNormalsFace.push(faceNormal);dstNormalsVertex.push(vertexNormals);}}var morphNormals=this.morphNormals[_i160];// set vertices to morph target
     tmpGeo.vertices=this.morphTargets[_i160].vertices;// compute morph normals
     tmpGeo.computeFaceNormals();tmpGeo.computeVertexNormals();// store morph normals
     for(var _f6=0,_fl4=this.faces.length;_f6<_fl4;_f6++){var _face3=this.faces[_f6];var _faceNormal=morphNormals.faceNormals[_f6];var _vertexNormals=morphNormals.vertexNormals[_f6];_faceNormal.copy(_face3.normal);_vertexNormals.a.copy(_face3.vertexNormals[0]);_vertexNormals.b.copy(_face3.vertexNormals[1]);_vertexNormals.c.copy(_face3.vertexNormals[2]);}}// restore original normals
     for(var _f7=0,_fl5=this.faces.length;_f7<_fl5;_f7++){var _face4=this.faces[_f7];_face4.normal=_face4.__originalFaceNormal;_face4.vertexNormals=_face4.__originalVertexNormals;}},computeBoundingBox:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}this.boundingBox.setFromPoints(this.vertices);},computeBoundingSphere:function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}this.boundingSphere.setFromPoints(this.vertices);},merge:function merge(geometry,matrix,materialIndexOffset){if(!(geometry&&geometry.isGeometry)){console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.',geometry);return;}var normalMatrix;var vertexOffset=this.vertices.length,vertices1=this.vertices,vertices2=geometry.vertices,faces1=this.faces,faces2=geometry.faces,colors1=this.colors,colors2=geometry.colors;if(materialIndexOffset===undefined)materialIndexOffset=0;if(matrix!==undefined){normalMatrix=new Matrix3().getNormalMatrix(matrix);}// vertices
     for(var _i161=0,il=vertices2.length;_i161<il;_i161++){var vertex=vertices2[_i161];var vertexCopy=vertex.clone();if(matrix!==undefined)vertexCopy.applyMatrix4(matrix);vertices1.push(vertexCopy);}// colors
     for(var _i162=0,_il14=colors2.length;_i162<_il14;_i162++){colors1.push(colors2[_i162].clone());}// faces
     for(var _i163=0,_il15=faces2.length;_i163<_il15;_i163++){var face=faces2[_i163];var normal=void 0,color=void 0;var faceVertexNormals=face.vertexNormals,faceVertexColors=face.vertexColors;var faceCopy=new Face3(face.a+vertexOffset,face.b+vertexOffset,face.c+vertexOffset);faceCopy.normal.copy(face.normal);if(normalMatrix!==undefined){faceCopy.normal.applyMatrix3(normalMatrix).normalize();}for(var j=0,jl=faceVertexNormals.length;j<jl;j++){normal=faceVertexNormals[j].clone();if(normalMatrix!==undefined){normal.applyMatrix3(normalMatrix).normalize();}faceCopy.vertexNormals.push(normal);}faceCopy.color.copy(face.color);for(var _j6=0,_jl2=faceVertexColors.length;_j6<_jl2;_j6++){color=faceVertexColors[_j6];faceCopy.vertexColors.push(color.clone());}faceCopy.materialIndex=face.materialIndex+materialIndexOffset;faces1.push(faceCopy);}// uvs
     for(var _i164=0,_il16=geometry.faceVertexUvs.length;_i164<_il16;_i164++){var faceVertexUvs2=geometry.faceVertexUvs[_i164];if(this.faceVertexUvs[_i164]===undefined)this.faceVertexUvs[_i164]=[];for(var _j7=0,_jl3=faceVertexUvs2.length;_j7<_jl3;_j7++){var uvs2=faceVertexUvs2[_j7],uvsCopy=[];for(var k=0,kl=uvs2.length;k<kl;k++){uvsCopy.push(uvs2[k].clone());}this.faceVertexUvs[_i164].push(uvsCopy);}}},mergeMesh:function mergeMesh(mesh){if(!(mesh&&mesh.isMesh)){console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.',mesh);return;}if(mesh.matrixAutoUpdate)mesh.updateMatrix();this.merge(mesh.geometry,mesh.matrix);},/*
               * Checks for duplicate vertices with hashmap.
               * Duplicated vertices are removed
               * and faces' vertices are updated.
               */mergeVertices:function mergeVertices(){var verticesMap={};// Hashmap for looking up vertices by position coordinates (and making sure they are unique)
     var unique=[],changes=[];var precisionPoints=4;// number of decimal points, e.g. 4 for epsilon of 0.0001
     var precision=Math.pow(10,precisionPoints);for(var _i165=0,il=this.vertices.length;_i165<il;_i165++){var v=this.vertices[_i165];var key=Math.round(v.x*precision)+'_'+Math.round(v.y*precision)+'_'+Math.round(v.z*precision);if(verticesMap[key]===undefined){verticesMap[key]=_i165;unique.push(this.vertices[_i165]);changes[_i165]=unique.length-1;}else{//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
     changes[_i165]=changes[verticesMap[key]];}}// if faces are completely degenerate after merging vertices, we
     // have to remove them from the geometry.
     var faceIndicesToRemove=[];for(var _i166=0,_il17=this.faces.length;_i166<_il17;_i166++){var face=this.faces[_i166];face.a=changes[face.a];face.b=changes[face.b];face.c=changes[face.c];var _indices3=[face.a,face.b,face.c];// if any duplicate vertices are found in a Face3
     // we have to remove the face as nothing can be saved
     for(var n=0;n<3;n++){if(_indices3[n]===_indices3[(n+1)%3]){faceIndicesToRemove.push(_i166);break;}}}for(var _i167=faceIndicesToRemove.length-1;_i167>=0;_i167--){var idx=faceIndicesToRemove[_i167];this.faces.splice(idx,1);for(var j=0,jl=this.faceVertexUvs.length;j<jl;j++){this.faceVertexUvs[j].splice(idx,1);}}// Use unique set of vertices
     var diff=this.vertices.length-unique.length;this.vertices=unique;return diff;},setFromPoints:function setFromPoints(points){this.vertices=[];for(var _i168=0,l=points.length;_i168<l;_i168++){var point=points[_i168];this.vertices.push(new Vector3(point.x,point.y,point.z||0));}return this;},sortFacesByMaterialIndex:function sortFacesByMaterialIndex(){var faces=this.faces;var length=faces.length;// tag faces
     for(var _i169=0;_i169<length;_i169++){faces[_i169]._id=_i169;}// sort faces
     function materialIndexSort(a,b){return a.materialIndex-b.materialIndex;}faces.sort(materialIndexSort);// sort uvs
     var uvs1=this.faceVertexUvs[0];var uvs2=this.faceVertexUvs[1];var newUvs1,newUvs2;if(uvs1&&uvs1.length===length)newUvs1=[];if(uvs2&&uvs2.length===length)newUvs2=[];for(var _i170=0;_i170<length;_i170++){var id=faces[_i170]._id;if(newUvs1)newUvs1.push(uvs1[id]);if(newUvs2)newUvs2.push(uvs2[id]);}if(newUvs1)this.faceVertexUvs[0]=newUvs1;if(newUvs2)this.faceVertexUvs[1]=newUvs2;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'Geometry',generator:'Geometry.toJSON'}};// standard Geometry serialization
     data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}var vertices=[];for(var _i171=0;_i171<this.vertices.length;_i171++){var vertex=this.vertices[_i171];vertices.push(vertex.x,vertex.y,vertex.z);}var faces=[];var normals=[];var normalsHash={};var colors=[];var colorsHash={};var uvs=[];var uvsHash={};for(var _i172=0;_i172<this.faces.length;_i172++){var face=this.faces[_i172];var hasMaterial=true;var hasFaceUv=false;// deprecated
     var hasFaceVertexUv=this.faceVertexUvs[0][_i172]!==undefined;var hasFaceNormal=face.normal.length()>0;var hasFaceVertexNormal=face.vertexNormals.length>0;var hasFaceColor=face.color.r!==1||face.color.g!==1||face.color.b!==1;var hasFaceVertexColor=face.vertexColors.length>0;var faceType=0;faceType=setBit(faceType,0,0);// isQuad
     faceType=setBit(faceType,1,hasMaterial);faceType=setBit(faceType,2,hasFaceUv);faceType=setBit(faceType,3,hasFaceVertexUv);faceType=setBit(faceType,4,hasFaceNormal);faceType=setBit(faceType,5,hasFaceVertexNormal);faceType=setBit(faceType,6,hasFaceColor);faceType=setBit(faceType,7,hasFaceVertexColor);faces.push(faceType);faces.push(face.a,face.b,face.c);faces.push(face.materialIndex);if(hasFaceVertexUv){var faceVertexUvs=this.faceVertexUvs[0][_i172];faces.push(getUvIndex(faceVertexUvs[0]),getUvIndex(faceVertexUvs[1]),getUvIndex(faceVertexUvs[2]));}if(hasFaceNormal){faces.push(getNormalIndex(face.normal));}if(hasFaceVertexNormal){var vertexNormals=face.vertexNormals;faces.push(getNormalIndex(vertexNormals[0]),getNormalIndex(vertexNormals[1]),getNormalIndex(vertexNormals[2]));}if(hasFaceColor){faces.push(getColorIndex(face.color));}if(hasFaceVertexColor){var vertexColors=face.vertexColors;faces.push(getColorIndex(vertexColors[0]),getColorIndex(vertexColors[1]),getColorIndex(vertexColors[2]));}}function setBit(value,position,enabled){return enabled?value|1<<position:value&~(1<<position);}function getNormalIndex(normal){var hash=normal.x.toString()+normal.y.toString()+normal.z.toString();if(normalsHash[hash]!==undefined){return normalsHash[hash];}normalsHash[hash]=normals.length/3;normals.push(normal.x,normal.y,normal.z);return normalsHash[hash];}function getColorIndex(color){var hash=color.r.toString()+color.g.toString()+color.b.toString();if(colorsHash[hash]!==undefined){return colorsHash[hash];}colorsHash[hash]=colors.length;colors.push(color.getHex());return colorsHash[hash];}function getUvIndex(uv){var hash=uv.x.toString()+uv.y.toString();if(uvsHash[hash]!==undefined){return uvsHash[hash];}uvsHash[hash]=uvs.length/2;uvs.push(uv.x,uv.y);return uvsHash[hash];}data.data={};data.data.vertices=vertices;data.data.normals=normals;if(colors.length>0)data.data.colors=colors;if(uvs.length>0)data.data.uvs=[uvs];// temporal backward compatibility
     data.data.faces=faces;return data;},clone:function clone(){/*
                    // Handle primitives
     
                    const parameters = this.parameters;
     
                    if ( parameters !== undefined ) {
     
                    const values = [];
     
                    for ( const key in parameters ) {
     
                    values.push( parameters[ key ] );
     
                    }
     
                    const geometry = Object.create( this.constructor.prototype );
                    this.constructor.apply( geometry, values );
                    return geometry;
     
                    }
     
                    return new this.constructor().copy( this );
                    */return new Geometry().copy(this);},copy:function copy(source){// reset
     this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;// name
     this.name=source.name;// vertices
     var vertices=source.vertices;for(var _i173=0,il=vertices.length;_i173<il;_i173++){this.vertices.push(vertices[_i173].clone());}// colors
     var colors=source.colors;for(var _i174=0,_il18=colors.length;_i174<_il18;_i174++){this.colors.push(colors[_i174].clone());}// faces
     var faces=source.faces;for(var _i175=0,_il19=faces.length;_i175<_il19;_i175++){this.faces.push(faces[_i175].clone());}// face vertex uvs
     for(var _i176=0,_il20=source.faceVertexUvs.length;_i176<_il20;_i176++){var faceVertexUvs=source.faceVertexUvs[_i176];if(this.faceVertexUvs[_i176]===undefined){this.faceVertexUvs[_i176]=[];}for(var j=0,jl=faceVertexUvs.length;j<jl;j++){var _uvs=faceVertexUvs[j],uvsCopy=[];for(var k=0,kl=_uvs.length;k<kl;k++){var uv=_uvs[k];uvsCopy.push(uv.clone());}this.faceVertexUvs[_i176].push(uvsCopy);}}// morph targets
     var morphTargets=source.morphTargets;for(var _i177=0,_il21=morphTargets.length;_i177<_il21;_i177++){var morphTarget={};morphTarget.name=morphTargets[_i177].name;// vertices
     if(morphTargets[_i177].vertices!==undefined){morphTarget.vertices=[];for(var _j8=0,_jl4=morphTargets[_i177].vertices.length;_j8<_jl4;_j8++){morphTarget.vertices.push(morphTargets[_i177].vertices[_j8].clone());}}// normals
     if(morphTargets[_i177].normals!==undefined){morphTarget.normals=[];for(var _j9=0,_jl5=morphTargets[_i177].normals.length;_j9<_jl5;_j9++){morphTarget.normals.push(morphTargets[_i177].normals[_j9].clone());}}this.morphTargets.push(morphTarget);}// morph normals
     var morphNormals=source.morphNormals;for(var _i178=0,_il22=morphNormals.length;_i178<_il22;_i178++){var morphNormal={};// vertex normals
     if(morphNormals[_i178].vertexNormals!==undefined){morphNormal.vertexNormals=[];for(var _j10=0,_jl6=morphNormals[_i178].vertexNormals.length;_j10<_jl6;_j10++){var srcVertexNormal=morphNormals[_i178].vertexNormals[_j10];var destVertexNormal={};destVertexNormal.a=srcVertexNormal.a.clone();destVertexNormal.b=srcVertexNormal.b.clone();destVertexNormal.c=srcVertexNormal.c.clone();morphNormal.vertexNormals.push(destVertexNormal);}}// face normals
     if(morphNormals[_i178].faceNormals!==undefined){morphNormal.faceNormals=[];for(var _j11=0,_jl7=morphNormals[_i178].faceNormals.length;_j11<_jl7;_j11++){morphNormal.faceNormals.push(morphNormals[_i178].faceNormals[_j11].clone());}}this.morphNormals.push(morphNormal);}// skin weights
     var skinWeights=source.skinWeights;for(var _i179=0,_il23=skinWeights.length;_i179<_il23;_i179++){this.skinWeights.push(skinWeights[_i179].clone());}// skin indices
     var skinIndices=source.skinIndices;for(var _i180=0,_il24=skinIndices.length;_i180<_il24;_i180++){this.skinIndices.push(skinIndices[_i180].clone());}// line distances
     var lineDistances=source.lineDistances;for(var _i181=0,_il25=lineDistances.length;_i181<_il25;_i181++){this.lineDistances.push(lineDistances[_i181]);}// bounding box
     var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
     var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// update flags
     this.elementsNeedUpdate=source.elementsNeedUpdate;this.verticesNeedUpdate=source.verticesNeedUpdate;this.uvsNeedUpdate=source.uvsNeedUpdate;this.normalsNeedUpdate=source.normalsNeedUpdate;this.colorsNeedUpdate=source.colorsNeedUpdate;this.lineDistancesNeedUpdate=source.lineDistancesNeedUpdate;this.groupsNeedUpdate=source.groupsNeedUpdate;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});var _v0$2=new Vector3();var _v1$5=new Vector3();var _normal$1=new Vector3();var _triangle=new Triangle();/**
          * Port from https://github.com/mapbox/earcut (v2.2.2)
          */var Earcut={triangulate:function triangulate(data,holeIndices,dim){dim=dim||2;var hasHoles=holeIndices&&holeIndices.length;var outerLen=hasHoles?holeIndices[0]*dim:data.length;var outerNode=linkedList(data,0,outerLen,dim,true);var triangles=[];if(!outerNode||outerNode.next===outerNode.prev)return triangles;var minX,minY,maxX,maxY,x,y,invSize;if(hasHoles)outerNode=eliminateHoles(data,holeIndices,outerNode,dim);// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
     if(data.length>80*dim){minX=maxX=data[0];minY=maxY=data[1];for(var _i182=dim;_i182<outerLen;_i182+=dim){x=data[_i182];y=data[_i182+1];if(x<minX)minX=x;if(y<minY)minY=y;if(x>maxX)maxX=x;if(y>maxY)maxY=y;}// minX, minY and invSize are later used to transform coords into integers for z-order calculation
     invSize=Math.max(maxX-minX,maxY-minY);invSize=invSize!==0?1/invSize:0;}earcutLinked(outerNode,triangles,dim,minX,minY,invSize);return triangles;}};// create a circular doubly linked list from polygon points in the specified winding order
     function linkedList(data,start,end,dim,clockwise){var i,last;if(clockwise===signedArea(data,start,end,dim)>0){for(i=start;i<end;i+=dim){last=insertNode(i,data[i],data[i+1],last);}}else{for(i=end-dim;i>=start;i-=dim){last=insertNode(i,data[i],data[i+1],last);}}if(last&&equals(last,last.next)){removeNode(last);last=last.next;}return last;}// eliminate colinear or duplicate points
     function filterPoints(start,end){if(!start)return start;if(!end)end=start;var p=start,again;do{again=false;if(!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){removeNode(p);p=end=p.prev;if(p===p.next)break;again=true;}else{p=p.next;}}while(again||p!==end);return end;}// main ear slicing loop which triangulates a polygon (given as a linked list)
     function earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;// interlink polygon nodes in z-order
     if(!pass&&invSize)indexCurve(ear,minX,minY,invSize);var stop=ear,prev,next;// iterate through ears, slicing them one by one
     while(ear.prev!==ear.next){prev=ear.prev;next=ear.next;if(invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){// cut off the triangle
     triangles.push(prev.i/dim);triangles.push(ear.i/dim);triangles.push(next.i/dim);removeNode(ear);// skipping the next vertex leads to less sliver triangles
     ear=next.next;stop=next.next;continue;}ear=next;// if we looped through the whole remaining polygon and can't find any more ears
     if(ear===stop){// try filtering points and slicing again
     if(!pass){earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);// if this didn't work, try curing all small self-intersections locally
     }else if(pass===1){ear=cureLocalIntersections(filterPoints(ear),triangles,dim);earcutLinked(ear,triangles,dim,minX,minY,invSize,2);// as a last resort, try splitting the remaining polygon into two
     }else if(pass===2){splitEarcut(ear,triangles,dim,minX,minY,invSize);}break;}}}// check whether a polygon node forms a valid ear with adjacent nodes
     function isEar(ear){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
     // now make sure we don't have other points inside the potential ear
     var p=ear.next.next;while(p!==ear.prev){if(pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.next;}return true;}function isEarHashed(ear,minX,minY,invSize){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
     // triangle bbox; min & max are calculated like this for speed
     var minTX=a.x<b.x?a.x<c.x?a.x:c.x:b.x<c.x?b.x:c.x,minTY=a.y<b.y?a.y<c.y?a.y:c.y:b.y<c.y?b.y:c.y,maxTX=a.x>b.x?a.x>c.x?a.x:c.x:b.x>c.x?b.x:c.x,maxTY=a.y>b.y?a.y>c.y?a.y:c.y:b.y>c.y?b.y:c.y;// z-order range for the current triangle bbox;
     var minZ=zOrder(minTX,minTY,minX,minY,invSize),maxZ=zOrder(maxTX,maxTY,minX,minY,invSize);var p=ear.prevZ,n=ear.nextZ;// look for points inside the triangle in both directions
     while(p&&p.z>=minZ&&n&&n.z<=maxZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}// look for remaining points in decreasing z-order
     while(p&&p.z>=minZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;}// look for remaining points in increasing z-order
     while(n&&n.z<=maxZ){if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}return true;}// go through all polygon nodes and cure small local self-intersections
     function cureLocalIntersections(start,triangles,dim){var p=start;do{var a=p.prev,b=p.next.next;if(!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)){triangles.push(a.i/dim);triangles.push(p.i/dim);triangles.push(b.i/dim);// remove two nodes involved
     removeNode(p);removeNode(p.next);p=start=b;}p=p.next;}while(p!==start);return filterPoints(p);}// try splitting polygon into two and triangulate them independently
     function splitEarcut(start,triangles,dim,minX,minY,invSize){// look for a valid diagonal that divides the polygon into two
     var a=start;do{var b=a.next.next;while(b!==a.prev){if(a.i!==b.i&&isValidDiagonal(a,b)){// split the polygon in two by the diagonal
     var c=splitPolygon(a,b);// filter colinear points around the cuts
     a=filterPoints(a,a.next);c=filterPoints(c,c.next);// run earcut on each half
     earcutLinked(a,triangles,dim,minX,minY,invSize);earcutLinked(c,triangles,dim,minX,minY,invSize);return;}b=b.next;}a=a.next;}while(a!==start);}// link every hole into the outer loop, producing a single-ring polygon without holes
     function eliminateHoles(data,holeIndices,outerNode,dim){var queue=[];var i,len,start,end,list;for(i=0,len=holeIndices.length;i<len;i++){start=holeIndices[i]*dim;end=i<len-1?holeIndices[i+1]*dim:data.length;list=linkedList(data,start,end,dim,false);if(list===list.next)list.steiner=true;queue.push(getLeftmost(list));}queue.sort(compareX);// process holes from left to right
     for(i=0;i<queue.length;i++){eliminateHole(queue[i],outerNode);outerNode=filterPoints(outerNode,outerNode.next);}return outerNode;}function compareX(a,b){return a.x-b.x;}// find a bridge between vertices that connects hole with an outer ring and and link it
     function eliminateHole(hole,outerNode){outerNode=findHoleBridge(hole,outerNode);if(outerNode){var b=splitPolygon(outerNode,hole);// filter collinear points around the cuts
     filterPoints(outerNode,outerNode.next);filterPoints(b,b.next);}}// David Eberly's algorithm for finding a bridge between hole and outer polygon
     function findHoleBridge(hole,outerNode){var p=outerNode;var hx=hole.x;var hy=hole.y;var qx=-Infinity,m;// find a segment intersected by a ray from the hole's leftmost point to the left;
     // segment's endpoint with lesser x will be potential connection point
     do{if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){var x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx){qx=x;if(x===hx){if(hy===p.y)return p;if(hy===p.next.y)return p.next;}m=p.x<p.next.x?p:p.next;}}p=p.next;}while(p!==outerNode);if(!m)return null;if(hx===qx)return m;// hole touches outer segment; pick leftmost endpoint
     // look for points inside the triangle of hole point, segment intersection and endpoint;
     // if there are no points found, we have a valid connection;
     // otherwise choose the point of the minimum angle with the ray as connection point
     var stop=m,mx=m.x,my=m.y;var tanMin=Infinity,tan;p=m;do{if(hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)){tan=Math.abs(hy-p.y)/(hx-p.x);// tangential
     if(locallyInside(p,hole)&&(tan<tanMin||tan===tanMin&&(p.x>m.x||p.x===m.x&&sectorContainsSector(m,p)))){m=p;tanMin=tan;}}p=p.next;}while(p!==stop);return m;}// whether sector in vertex m contains sector in vertex p in the same coordinates
     function sectorContainsSector(m,p){return area(m.prev,m,p.prev)<0&&area(p.next,m,m.next)<0;}// interlink polygon nodes in z-order
     function indexCurve(start,minX,minY,invSize){var p=start;do{if(p.z===null)p.z=zOrder(p.x,p.y,minX,minY,invSize);p.prevZ=p.prev;p.nextZ=p.next;p=p.next;}while(p!==start);p.prevZ.nextZ=null;p.prevZ=null;sortLinked(p);}// Simon Tatham's linked list merge sort algorithm
     // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
     function sortLinked(list){var i,p,q,e,tail,numMerges,pSize,qSize,inSize=1;do{p=list;list=null;tail=null;numMerges=0;while(p){numMerges++;q=p;pSize=0;for(i=0;i<inSize;i++){pSize++;q=q.nextZ;if(!q)break;}qSize=inSize;while(pSize>0||qSize>0&&q){if(pSize!==0&&(qSize===0||!q||p.z<=q.z)){e=p;p=p.nextZ;pSize--;}else{e=q;q=q.nextZ;qSize--;}if(tail)tail.nextZ=e;else list=e;e.prevZ=tail;tail=e;}p=q;}tail.nextZ=null;inSize*=2;}while(numMerges>1);return list;}// z-order of a point given coords and inverse of the longer side of data bbox
     function zOrder(x,y,minX,minY,invSize){// coords are transformed into non-negative 15-bit integer range
     x=32767*(x-minX)*invSize;y=32767*(y-minY)*invSize;x=(x|x<<8)&0x00FF00FF;x=(x|x<<4)&0x0F0F0F0F;x=(x|x<<2)&0x33333333;x=(x|x<<1)&0x55555555;y=(y|y<<8)&0x00FF00FF;y=(y|y<<4)&0x0F0F0F0F;y=(y|y<<2)&0x33333333;y=(y|y<<1)&0x55555555;return x|y<<1;}// find the leftmost node of a polygon ring
     function getLeftmost(start){var p=start,leftmost=start;do{if(p.x<leftmost.x||p.x===leftmost.x&&p.y<leftmost.y)leftmost=p;p=p.next;}while(p!==start);return leftmost;}// check if a point lies within a convex triangle
     function pointInTriangle(ax,ay,bx,by,cx,cy,px,py){return(cx-px)*(ay-py)-(ax-px)*(cy-py)>=0&&(ax-px)*(by-py)-(bx-px)*(ay-py)>=0&&(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;}// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
     function isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&(// dones't intersect other edges
     locallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b)&&(// locally visible
     area(a.prev,a,b.prev)||area(a,b.prev,b))||// does not create opposite-facing sectors
     equals(a,b)&&area(a.prev,a,a.next)>0&&area(b.prev,b,b.next)>0);// special zero-length case
     }// signed area of a triangle
     function area(p,q,r){return(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);}// check if two points are equal
     function equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y;}// check if two segments intersect
     function intersects(p1,q1,p2,q2){var o1=sign(area(p1,q1,p2));var o2=sign(area(p1,q1,q2));var o3=sign(area(p2,q2,p1));var o4=sign(area(p2,q2,q1));if(o1!==o2&&o3!==o4)return true;// general case
     if(o1===0&&onSegment(p1,p2,q1))return true;// p1, q1 and p2 are collinear and p2 lies on p1q1
     if(o2===0&&onSegment(p1,q2,q1))return true;// p1, q1 and q2 are collinear and q2 lies on p1q1
     if(o3===0&&onSegment(p2,p1,q2))return true;// p2, q2 and p1 are collinear and p1 lies on p2q2
     if(o4===0&&onSegment(p2,q1,q2))return true;// p2, q2 and q1 are collinear and q1 lies on p2q2
     return false;}// for collinear points p, q, r, check if point q lies on segment pr
     function onSegment(p,q,r){return q.x<=Math.max(p.x,r.x)&&q.x>=Math.min(p.x,r.x)&&q.y<=Math.max(p.y,r.y)&&q.y>=Math.min(p.y,r.y);}function sign(num){return num>0?1:num<0?-1:0;}// check if a polygon diagonal intersects any polygon segments
     function intersectsPolygon(a,b){var p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b))return true;p=p.next;}while(p!==a);return false;}// check if a polygon diagonal is locally inside the polygon
     function locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0;}// check if the middle point of a polygon diagonal is inside the polygon
     function middleInside(a,b){var p=a,inside=false;var px=(a.x+b.x)/2,py=(a.y+b.y)/2;do{if(p.y>py!==p.next.y>py&&p.next.y!==p.y&&px<(p.next.x-p.x)*(py-p.y)/(p.next.y-p.y)+p.x)inside=!inside;p=p.next;}while(p!==a);return inside;}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
     // if one belongs to the outer ring and another to a hole, it merges it into a single ring
     function splitPolygon(a,b){var a2=new Node$1(a.i,a.x,a.y),b2=new Node$1(b.i,b.x,b.y),an=a.next,bp=b.prev;a.next=b;b.prev=a;a2.next=an;an.prev=a2;b2.next=a2;a2.prev=b2;bp.next=b2;b2.prev=bp;return b2;}// create a node and optionally link it with previous one (in a circular doubly linked list)
     function insertNode(i,x,y,last){var p=new Node$1(i,x,y);if(!last){p.prev=p;p.next=p;}else{p.next=last.next;p.prev=last;last.next.prev=p;last.next=p;}return p;}function removeNode(p){p.next.prev=p.prev;p.prev.next=p.next;if(p.prevZ)p.prevZ.nextZ=p.nextZ;if(p.nextZ)p.nextZ.prevZ=p.prevZ;}function Node$1(i,x,y){// vertex index in coordinates array
     this.i=i;// vertex coordinates
     this.x=x;this.y=y;// previous and next vertex nodes in a polygon ring
     this.prev=null;this.next=null;// z-order curve value
     this.z=null;// previous and next nodes in z-order
     this.prevZ=null;this.nextZ=null;// indicates whether this is a steiner point
     this.steiner=false;}function signedArea(data,start,end,dim){var sum=0;for(var _i183=start,j=end-dim;_i183<end;_i183+=dim){sum+=(data[j]-data[_i183])*(data[_i183+1]+data[j+1]);j=_i183;}return sum;}var ShapeUtils={// calculate area of the contour polygon
     area:function area(contour){var n=contour.length;var a=0.0;for(var p=n-1,q=0;q<n;p=q++){a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;}return a*0.5;},isClockWise:function isClockWise(pts){return ShapeUtils.area(pts)<0;},triangulateShape:function triangulateShape(contour,holes){var vertices=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
     var holeIndices=[];// array of hole indices
     var faces=[];// final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
     removeDupEndPts(contour);addContour(vertices,contour);//
     var holeIndex=contour.length;holes.forEach(removeDupEndPts);for(var _i184=0;_i184<holes.length;_i184++){holeIndices.push(holeIndex);holeIndex+=holes[_i184].length;addContour(vertices,holes[_i184]);}//
     var triangles=Earcut.triangulate(vertices,holeIndices);//
     for(var _i185=0;_i185<triangles.length;_i185+=3){faces.push(triangles.slice(_i185,_i185+3));}return faces;}};function removeDupEndPts(points){var l=points.length;if(l>2&&points[l-1].equals(points[0])){points.pop();}}function addContour(vertices,contour){for(var _i186=0;_i186<contour.length;_i186++){vertices.push(contour[_i186].x);vertices.push(contour[_i186].y);}}/**
          * Creates extruded geometry from a path shape.
          *
          * parameters = {
          *
          *  curveSegments: <int>, // number of points on the curves
          *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
          *  depth: <float>, // Depth to extrude the shape
          *
          *  bevelEnabled: <bool>, // turn on bevel
          *  bevelThickness: <float>, // how deep into the original shape bevel goes
          *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
          *  bevelOffset: <float>, // how far from shape outline does bevel start
          *  bevelSegments: <int>, // number of bevel layers
          *
          *  extrudePath: <THREE.Curve> // curve to extrude shape along
          *
          *  UVGenerator: <Object> // object that provides UV generator functions
          *
          * }
          */var ExtrudeBufferGeometry=/*#__PURE__*/function(_BufferGeometry3){_inherits(ExtrudeBufferGeometry,_BufferGeometry3);var _super5=_createSuper(ExtrudeBufferGeometry);function ExtrudeBufferGeometry(shapes,options){var _this12;_classCallCheck(this,ExtrudeBufferGeometry);_this12=_super5.call(this);_this12.type='ExtrudeBufferGeometry';_this12.parameters={shapes:shapes,options:options};shapes=Array.isArray(shapes)?shapes:[shapes];var scope=_assertThisInitialized(_this12);var verticesArray=[];var uvArray=[];for(var _i187=0,l=shapes.length;_i187<l;_i187++){var shape=shapes[_i187];addShape(shape);}// build geometry
     _this12.setAttribute('position',new Float32BufferAttribute(verticesArray,3));_this12.setAttribute('uv',new Float32BufferAttribute(uvArray,2));_this12.computeVertexNormals();// functions
     function addShape(shape){var placeholder=[];// options
     var curveSegments=options.curveSegments!==undefined?options.curveSegments:12;var steps=options.steps!==undefined?options.steps:1;var depth=options.depth!==undefined?options.depth:100;var bevelEnabled=options.bevelEnabled!==undefined?options.bevelEnabled:true;var bevelThickness=options.bevelThickness!==undefined?options.bevelThickness:6;var bevelSize=options.bevelSize!==undefined?options.bevelSize:bevelThickness-2;var bevelOffset=options.bevelOffset!==undefined?options.bevelOffset:0;var bevelSegments=options.bevelSegments!==undefined?options.bevelSegments:3;var extrudePath=options.extrudePath;var uvgen=options.UVGenerator!==undefined?options.UVGenerator:WorldUVGenerator;// deprecated options
     if(options.amount!==undefined){console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');depth=options.amount;}//
     var extrudePts,extrudeByPath=false;var splineTube,binormal,normal,position2;if(extrudePath){extrudePts=extrudePath.getSpacedPoints(steps);extrudeByPath=true;bevelEnabled=false;// bevels not supported for path extrusion
     // SETUP TNB variables
     // TODO1 - have a .isClosed in spline?
     splineTube=extrudePath.computeFrenetFrames(steps,false);// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
     binormal=new Vector3();normal=new Vector3();position2=new Vector3();}// Safeguards if bevels are not enabled
     if(!bevelEnabled){bevelSegments=0;bevelThickness=0;bevelSize=0;bevelOffset=0;}// Variables initialization
     var shapePoints=shape.extractPoints(curveSegments);var vertices=shapePoints.shape;var holes=shapePoints.holes;var reverse=!ShapeUtils.isClockWise(vertices);if(reverse){vertices=vertices.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...
     for(var h=0,hl=holes.length;h<hl;h++){var ahole=holes[h];if(ShapeUtils.isClockWise(ahole)){holes[h]=ahole.reverse();}}}var faces=ShapeUtils.triangulateShape(vertices,holes);/* Vertices */var contour=vertices;// vertices has all points but contour has only points of circumference
     for(var _h2=0,_hl=holes.length;_h2<_hl;_h2++){var _ahole=holes[_h2];vertices=vertices.concat(_ahole);}function scalePt2(pt,vec,size){if(!vec)console.error("THREE.ExtrudeGeometry: vec does not exist");return vec.clone().multiplyScalar(size).add(pt);}var vlen=vertices.length,flen=faces.length;// Find directions for point movement
     function getBevelVec(inPt,inPrev,inNext){// computes for inPt the corresponding point inPt' on a new contour
     //   shifted by 1 unit (length of normalized vector) to the left
     // if we walk along contour clockwise, this new contour is outside the old one
     //
     // inPt' is the intersection of the two lines parallel to the two
     //  adjacent edges of inPt at a distance of 1 unit on the left side.
     var v_trans_x,v_trans_y,shrink_by;// resulting translation vector for inPt
     // good reading for geometry algorithms (here: line-line intersection)
     // http://geomalgorithms.com/a05-_intersect-1.html
     var v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y;var v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y;var v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y;// check for collinear edges
     var collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){// not collinear
     // length of vectors for normalizing
     var v_prev_len=Math.sqrt(v_prev_lensq);var v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y);// shift adjacent points by unit vectors to the left
     var ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len;var ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len;var ptNextShift_x=inNext.x-v_next_y/v_next_len;var ptNextShift_y=inNext.y+v_next_x/v_next_len;// scaling factor for v_prev to intersection point
     var sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);// vector from inPt to intersection point
     v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x;v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;// Don't normalize!, otherwise sharp corners become ugly
     //  but prevent crazy spikes
     var v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2){return new Vector2(v_trans_x,v_trans_y);}else{shrink_by=Math.sqrt(v_trans_lensq/2);}}else{// handle special case of collinear edges
     var direction_eq=false;// assumes: opposite
     if(v_prev_x>Number.EPSILON){if(v_next_x>Number.EPSILON){direction_eq=true;}}else{if(v_prev_x<-Number.EPSILON){if(v_next_x<-Number.EPSILON){direction_eq=true;}}else{if(Math.sign(v_prev_y)===Math.sign(v_next_y)){direction_eq=true;}}}if(direction_eq){// console.log("Warning: lines are a straight sequence");
     v_trans_x=-v_prev_y;v_trans_y=v_prev_x;shrink_by=Math.sqrt(v_prev_lensq);}else{// console.log("Warning: lines are a straight spike");
     v_trans_x=v_prev_x;v_trans_y=v_prev_y;shrink_by=Math.sqrt(v_prev_lensq/2);}}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by);}var contourMovements=[];for(var _i188=0,il=contour.length,j=il-1,k=_i188+1;_i188<il;_i188++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
     // console.log('i,j,k', i, j , k)
     contourMovements[_i188]=getBevelVec(contour[_i188],contour[j],contour[k]);}var holesMovements=[];var oneHoleMovements,verticesMovements=contourMovements.concat();for(var _h3=0,_hl2=holes.length;_h3<_hl2;_h3++){var _ahole2=holes[_h3];oneHoleMovements=[];for(var _i189=0,_il26=_ahole2.length,_j12=_il26-1,_k2=_i189+1;_i189<_il26;_i189++,_j12++,_k2++){if(_j12===_il26)_j12=0;if(_k2===_il26)_k2=0;//  (j)---(i)---(k)
     oneHoleMovements[_i189]=getBevelVec(_ahole2[_i189],_ahole2[_j12],_ahole2[_k2]);}holesMovements.push(oneHoleMovements);verticesMovements=verticesMovements.concat(oneHoleMovements);}// Loop bevelSegments, 1 for the front, 1 for the back
     for(var b=0;b<bevelSegments;b++){//for ( b = bevelSegments; b > 0; b -- ) {
     var t=b/bevelSegments;var z=bevelThickness*Math.cos(t*Math.PI/2);var _bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape
     for(var _i190=0,_il27=contour.length;_i190<_il27;_i190++){var vert=scalePt2(contour[_i190],contourMovements[_i190],_bs);v(vert.x,vert.y,-z);}// expand holes
     for(var _h4=0,_hl3=holes.length;_h4<_hl3;_h4++){var _ahole3=holes[_h4];oneHoleMovements=holesMovements[_h4];for(var _i191=0,_il28=_ahole3.length;_i191<_il28;_i191++){var _vert=scalePt2(_ahole3[_i191],oneHoleMovements[_i191],_bs);v(_vert.x,_vert.y,-z);}}}var bs=bevelSize+bevelOffset;// Back facing vertices
     for(var _i192=0;_i192<vlen;_i192++){var _vert2=bevelEnabled?scalePt2(vertices[_i192],verticesMovements[_i192],bs):vertices[_i192];if(!extrudeByPath){v(_vert2.x,_vert2.y,0);}else{// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
     normal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);binormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);position2.copy(extrudePts[0]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}// Add stepped vertices...
     // Including front facing vertices
     for(var s=1;s<=steps;s++){for(var _i193=0;_i193<vlen;_i193++){var _vert3=bevelEnabled?scalePt2(vertices[_i193],verticesMovements[_i193],bs):vertices[_i193];if(!extrudeByPath){v(_vert3.x,_vert3.y,depth/steps*s);}else{// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
     normal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);binormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);position2.copy(extrudePts[s]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}}// Add bevel segments planes
     //for ( b = 1; b <= bevelSegments; b ++ ) {
     for(var _b6=bevelSegments-1;_b6>=0;_b6--){var _t2=_b6/bevelSegments;var _z2=bevelThickness*Math.cos(_t2*Math.PI/2);var _bs2=bevelSize*Math.sin(_t2*Math.PI/2)+bevelOffset;// contract shape
     for(var _i194=0,_il29=contour.length;_i194<_il29;_i194++){var _vert4=scalePt2(contour[_i194],contourMovements[_i194],_bs2);v(_vert4.x,_vert4.y,depth+_z2);}// expand holes
     for(var _h5=0,_hl4=holes.length;_h5<_hl4;_h5++){var _ahole4=holes[_h5];oneHoleMovements=holesMovements[_h5];for(var _i195=0,_il30=_ahole4.length;_i195<_il30;_i195++){var _vert5=scalePt2(_ahole4[_i195],oneHoleMovements[_i195],_bs2);if(!extrudeByPath){v(_vert5.x,_vert5.y,depth+_z2);}else{v(_vert5.x,_vert5.y+extrudePts[steps-1].y,extrudePts[steps-1].x+_z2);}}}}/* Faces */ // Top and bottom faces
     buildLidFaces();// Sides faces
     buildSideFaces();/////  Internal functions
     function buildLidFaces(){var start=verticesArray.length/3;if(bevelEnabled){var layer=0;// steps + 1
     var offset=vlen*layer;// Bottom faces
     for(var _i196=0;_i196<flen;_i196++){var face=faces[_i196];f3(face[2]+offset,face[1]+offset,face[0]+offset);}layer=steps+bevelSegments*2;offset=vlen*layer;// Top faces
     for(var _i197=0;_i197<flen;_i197++){var _face5=faces[_i197];f3(_face5[0]+offset,_face5[1]+offset,_face5[2]+offset);}}else{// Bottom faces
     for(var _i198=0;_i198<flen;_i198++){var _face6=faces[_i198];f3(_face6[2],_face6[1],_face6[0]);}// Top faces
     for(var _i199=0;_i199<flen;_i199++){var _face7=faces[_i199];f3(_face7[0]+vlen*steps,_face7[1]+vlen*steps,_face7[2]+vlen*steps);}}scope.addGroup(start,verticesArray.length/3-start,0);}// Create faces for the z-sides of the shape
     function buildSideFaces(){var start=verticesArray.length/3;var layeroffset=0;sidewalls(contour,layeroffset);layeroffset+=contour.length;for(var _h6=0,_hl5=holes.length;_h6<_hl5;_h6++){var _ahole5=holes[_h6];sidewalls(_ahole5,layeroffset);//, true
     layeroffset+=_ahole5.length;}scope.addGroup(start,verticesArray.length/3-start,1);}function sidewalls(contour,layeroffset){var i=contour.length;while(--i>=0){var _j13=i;var _k3=i-1;if(_k3<0)_k3=contour.length-1;//console.log('b', i,j, i-1, k,vertices.length);
     for(var _s5=0,sl=steps+bevelSegments*2;_s5<sl;_s5++){var slen1=vlen*_s5;var slen2=vlen*(_s5+1);var a=layeroffset+_j13+slen1,_b7=layeroffset+_k3+slen1,c=layeroffset+_k3+slen2,d=layeroffset+_j13+slen2;f4(a,_b7,c,d);}}}function v(x,y,z){placeholder.push(x);placeholder.push(y);placeholder.push(z);}function f3(a,b,c){addVertex(a);addVertex(b);addVertex(c);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[2]);}function f4(a,b,c,d){addVertex(a);addVertex(b);addVertex(d);addVertex(b);addVertex(c);addVertex(d);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[3]);addUV(uvs[1]);addUV(uvs[2]);addUV(uvs[3]);}function addVertex(index){verticesArray.push(placeholder[index*3+0]);verticesArray.push(placeholder[index*3+1]);verticesArray.push(placeholder[index*3+2]);}function addUV(vector2){uvArray.push(vector2.x);uvArray.push(vector2.y);}}return _this12;}_createClass(ExtrudeBufferGeometry,[{key:"toJSON",value:function toJSON(){var data=BufferGeometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return _toJSON(shapes,options,data);}}]);return ExtrudeBufferGeometry;}(BufferGeometry);var WorldUVGenerator={generateTopUV:function generateTopUV(geometry,vertices,indexA,indexB,indexC){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];return[new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)];},generateSideWallUV:function generateSideWallUV(geometry,vertices,indexA,indexB,indexC,indexD){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var a_z=vertices[indexA*3+2];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var b_z=vertices[indexB*3+2];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];var c_z=vertices[indexC*3+2];var d_x=vertices[indexD*3];var d_y=vertices[indexD*3+1];var d_z=vertices[indexD*3+2];if(Math.abs(a_y-b_y)<0.01){return[new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)];}else{return[new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)];}}};function _toJSON(shapes,options,data){data.shapes=[];if(Array.isArray(shapes)){for(var _i200=0,l=shapes.length;_i200<l;_i200++){var shape=shapes[_i200];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}/**
          * Creates extruded geometry from a path shape.
          *
          * parameters = {
          *
          *  curveSegments: <int>, // number of points on the curves
          *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
          *  depth: <float>, // Depth to extrude the shape
          *
          *  bevelEnabled: <bool>, // turn on bevel
          *  bevelThickness: <float>, // how deep into the original shape bevel goes
          *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
          *  bevelOffset: <float>, // how far from shape outline does bevel start
          *  bevelSegments: <int>, // number of bevel layers
          *
          *  extrudePath: <THREE.Curve> // curve to extrude shape along
          *
          *  UVGenerator: <Object> // object that provides UV generator functions
          *
          * }
          */var ExtrudeGeometry=/*#__PURE__*/function(_Geometry){_inherits(ExtrudeGeometry,_Geometry);var _super6=_createSuper(ExtrudeGeometry);function ExtrudeGeometry(shapes,options){var _this13;_classCallCheck(this,ExtrudeGeometry);_this13=_super6.call(this);_this13.type='ExtrudeGeometry';_this13.parameters={shapes:shapes,options:options};_this13.fromBufferGeometry(new ExtrudeBufferGeometry(shapes,options));_this13.mergeVertices();return _this13;}_createClass(ExtrudeGeometry,[{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(ExtrudeGeometry.prototype),"toJSON",this).call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return toJSON$1(shapes,options,data);}}]);return ExtrudeGeometry;}(Geometry);function toJSON$1(shapes,options,data){data.shapes=[];if(Array.isArray(shapes)){for(var _i201=0,l=shapes.length;_i201<l;_i201++){var shape=shapes[_i201];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}/**
          * Parametric Surfaces Geometry
          * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
          */function ParametricBufferGeometry(func,slices,stacks){BufferGeometry.call(this);this.type='ParametricBufferGeometry';this.parameters={func:func,slices:slices,stacks:stacks};// buffers
     var indices=[];var vertices=[];var normals=[];var uvs=[];var EPS=0.00001;var normal=new Vector3();var p0=new Vector3(),p1=new Vector3();var pu=new Vector3(),pv=new Vector3();if(func.length<3){console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');}// generate vertices, normals and uvs
     var sliceCount=slices+1;for(var _i202=0;_i202<=stacks;_i202++){var v=_i202/stacks;for(var j=0;j<=slices;j++){var u=j/slices;// vertex
     func(u,v,p0);vertices.push(p0.x,p0.y,p0.z);// normal
     // approximate tangent vectors via finite differences
     if(u-EPS>=0){func(u-EPS,v,p1);pu.subVectors(p0,p1);}else{func(u+EPS,v,p1);pu.subVectors(p1,p0);}if(v-EPS>=0){func(u,v-EPS,p1);pv.subVectors(p0,p1);}else{func(u,v+EPS,p1);pv.subVectors(p1,p0);}// cross product of tangent vectors returns surface normal
     normal.crossVectors(pu,pv).normalize();normals.push(normal.x,normal.y,normal.z);// uv
     uvs.push(u,v);}}// generate indices
     for(var _i203=0;_i203<stacks;_i203++){for(var _j14=0;_j14<slices;_j14++){var a=_i203*sliceCount+_j14;var b=_i203*sliceCount+_j14+1;var c=(_i203+1)*sliceCount+_j14+1;var d=(_i203+1)*sliceCount+_j14;// faces one and two
     indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
     this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}ParametricBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ParametricBufferGeometry.prototype.constructor=ParametricBufferGeometry;/**
          * Parametric Surfaces Geometry
          * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
          */function ParametricGeometry(func,slices,stacks){Geometry.call(this);this.type='ParametricGeometry';this.parameters={func:func,slices:slices,stacks:stacks};this.fromBufferGeometry(new ParametricBufferGeometry(func,slices,stacks));this.mergeVertices();}ParametricGeometry.prototype=Object.create(Geometry.prototype);ParametricGeometry.prototype.constructor=ParametricGeometry;var ShapeBufferGeometry=/*#__PURE__*/function(_BufferGeometry4){_inherits(ShapeBufferGeometry,_BufferGeometry4);var _super7=_createSuper(ShapeBufferGeometry);function ShapeBufferGeometry(shapes,curveSegments){var _this14;_classCallCheck(this,ShapeBufferGeometry);_this14=_super7.call(this);_this14.type='ShapeBufferGeometry';_this14.parameters={shapes:shapes,curveSegments:curveSegments};curveSegments=curveSegments||12;// buffers
     var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
     var groupStart=0;var groupCount=0;// allow single and array values for "shapes" parameter
     if(Array.isArray(shapes)===false){addShape(shapes);}else{for(var _i204=0;_i204<shapes.length;_i204++){addShape(shapes[_i204]);_this14.addGroup(groupStart,groupCount,_i204);// enables MultiMaterial support
     groupStart+=groupCount;groupCount=0;}}// build geometry
     _this14.setIndex(indices);_this14.setAttribute('position',new Float32BufferAttribute(vertices,3));_this14.setAttribute('normal',new Float32BufferAttribute(normals,3));_this14.setAttribute('uv',new Float32BufferAttribute(uvs,2));// helper functions
     function addShape(shape){var indexOffset=vertices.length/3;var points=shape.extractPoints(curveSegments);var shapeVertices=points.shape;var shapeHoles=points.holes;// check direction of vertices
     if(ShapeUtils.isClockWise(shapeVertices)===false){shapeVertices=shapeVertices.reverse();}for(var _i205=0,l=shapeHoles.length;_i205<l;_i205++){var shapeHole=shapeHoles[_i205];if(ShapeUtils.isClockWise(shapeHole)===true){shapeHoles[_i205]=shapeHole.reverse();}}var faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);// join vertices of inner and outer paths to a single array
     for(var _i206=0,_l11=shapeHoles.length;_i206<_l11;_i206++){var _shapeHole=shapeHoles[_i206];shapeVertices=shapeVertices.concat(_shapeHole);}// vertices, normals, uvs
     for(var _i207=0,_l12=shapeVertices.length;_i207<_l12;_i207++){var vertex=shapeVertices[_i207];vertices.push(vertex.x,vertex.y,0);normals.push(0,0,1);uvs.push(vertex.x,vertex.y);// world uvs
     }// incides
     for(var _i208=0,_l13=faces.length;_i208<_l13;_i208++){var face=faces[_i208];var a=face[0]+indexOffset;var b=face[1]+indexOffset;var c=face[2]+indexOffset;indices.push(a,b,c);groupCount+=3;}}return _this14;}_createClass(ShapeBufferGeometry,[{key:"toJSON",value:function toJSON(){var data=BufferGeometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;return toJSON$2(shapes,data);}}]);return ShapeBufferGeometry;}(BufferGeometry);function toJSON$2(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(var _i209=0,l=shapes.length;_i209<l;_i209++){var shape=shapes[_i209];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}return data;}var ShapeGeometry=/*#__PURE__*/function(_Geometry2){_inherits(ShapeGeometry,_Geometry2);var _super8=_createSuper(ShapeGeometry);function ShapeGeometry(shapes,curveSegments){var _this15;_classCallCheck(this,ShapeGeometry);_this15=_super8.call(this);_this15.type='ShapeGeometry';if(_typeof(curveSegments)==='object'){console.warn('THREE.ShapeGeometry: Options parameter has been removed.');curveSegments=curveSegments.curveSegments;}_this15.parameters={shapes:shapes,curveSegments:curveSegments};_this15.fromBufferGeometry(new ShapeBufferGeometry(shapes,curveSegments));_this15.mergeVertices();return _this15;}_createClass(ShapeGeometry,[{key:"toJSON",value:function toJSON(){var data=Geometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;return toJSON$3(shapes,data);}}]);return ShapeGeometry;}(Geometry);function toJSON$3(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(var _i210=0,l=shapes.length;_i210<l;_i210++){var shape=shapes[_i210];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}return data;}/**
          * parameters = {
          *  color: <THREE.Color>
          * }
          */function ShadowMaterial(parameters){Material.call(this);this.type='ShadowMaterial';this.color=new Color(0x000000);this.transparent=true;this.setValues(parameters);}ShadowMaterial.prototype=Object.create(Material.prototype);ShadowMaterial.prototype.constructor=ShadowMaterial;ShadowMaterial.prototype.isShadowMaterial=true;ShadowMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);return this;};function RawShaderMaterial(parameters){ShaderMaterial.call(this,parameters);this.type='RawShaderMaterial';}RawShaderMaterial.prototype=Object.create(ShaderMaterial.prototype);RawShaderMaterial.prototype.constructor=RawShaderMaterial;RawShaderMaterial.prototype.isRawShaderMaterial=true;/**
          * parameters = {
          *  color: <hex>,
          *  roughness: <float>,
          *  metalness: <float>,
          *  opacity: <float>,
          *
          *  map: new THREE.Texture( <Image> ),
          *
          *  lightMap: new THREE.Texture( <Image> ),
          *  lightMapIntensity: <float>
          *
          *  aoMap: new THREE.Texture( <Image> ),
          *  aoMapIntensity: <float>
          *
          *  emissive: <hex>,
          *  emissiveIntensity: <float>
          *  emissiveMap: new THREE.Texture( <Image> ),
          *
          *  bumpMap: new THREE.Texture( <Image> ),
          *  bumpScale: <float>,
          *
          *  normalMap: new THREE.Texture( <Image> ),
          *  normalMapType: THREE.TangentSpaceNormalMap,
          *  normalScale: <Vector2>,
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>,
          *
          *  roughnessMap: new THREE.Texture( <Image> ),
          *
          *  metalnessMap: new THREE.Texture( <Image> ),
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
          *  envMapIntensity: <float>
          *
          *  refractionRatio: <float>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function MeshStandardMaterial(parameters){Material.call(this);this.defines={'STANDARD':''};this.type='MeshStandardMaterial';this.color=new Color(0xffffff);// diffuse
     this.roughness=1.0;this.metalness=0.0;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1.0;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.vertexTangents=false;this.setValues(parameters);}MeshStandardMaterial.prototype=Object.create(Material.prototype);MeshStandardMaterial.prototype.constructor=MeshStandardMaterial;MeshStandardMaterial.prototype.isMeshStandardMaterial=true;MeshStandardMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.defines={'STANDARD':''};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapIntensity=source.envMapIntensity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;this.vertexTangents=source.vertexTangents;return this;};/**
          * parameters = {
          *  clearcoat: <float>,
          *  clearcoatMap: new THREE.Texture( <Image> ),
          *  clearcoatRoughness: <float>,
          *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
          *  clearcoatNormalScale: <Vector2>,
          *  clearcoatNormalMap: new THREE.Texture( <Image> ),
          *
          *  reflectivity: <float>,
          *  ior: <float>,
          *
          *  sheen: <Color>,
          *
          *  transmission: <float>,
          *  transmissionMap: new THREE.Texture( <Image> )
          * }
          */function MeshPhysicalMaterial(parameters){MeshStandardMaterial.call(this);this.defines={'STANDARD':'','PHYSICAL':''};this.type='MeshPhysicalMaterial';this.clearcoat=0.0;this.clearcoatMap=null;this.clearcoatRoughness=0.0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.reflectivity=0.5;// maps to F0 = 0.04
     Object.defineProperty(this,'ior',{get:function get(){return(1+0.4*this.reflectivity)/(1-0.4*this.reflectivity);},set:function set(ior){this.reflectivity=MathUtils.clamp(2.5*(ior-1)/(ior+1),0,1);}});this.sheen=null;// null will disable sheen bsdf
     this.transmission=0.0;this.transmissionMap=null;this.setValues(parameters);}MeshPhysicalMaterial.prototype=Object.create(MeshStandardMaterial.prototype);MeshPhysicalMaterial.prototype.constructor=MeshPhysicalMaterial;MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;MeshPhysicalMaterial.prototype.copy=function(source){MeshStandardMaterial.prototype.copy.call(this,source);this.defines={'STANDARD':'','PHYSICAL':''};this.clearcoat=source.clearcoat;this.clearcoatMap=source.clearcoatMap;this.clearcoatRoughness=source.clearcoatRoughness;this.clearcoatRoughnessMap=source.clearcoatRoughnessMap;this.clearcoatNormalMap=source.clearcoatNormalMap;this.clearcoatNormalScale.copy(source.clearcoatNormalScale);this.reflectivity=source.reflectivity;if(source.sheen){this.sheen=(this.sheen||new Color()).copy(source.sheen);}else{this.sheen=null;}this.transmission=source.transmission;this.transmissionMap=source.transmissionMap;return this;};/**
          * parameters = {
          *  color: <hex>,
          *  specular: <hex>,
          *  shininess: <float>,
          *  opacity: <float>,
          *
          *  map: new THREE.Texture( <Image> ),
          *
          *  lightMap: new THREE.Texture( <Image> ),
          *  lightMapIntensity: <float>
          *
          *  aoMap: new THREE.Texture( <Image> ),
          *  aoMapIntensity: <float>
          *
          *  emissive: <hex>,
          *  emissiveIntensity: <float>
          *  emissiveMap: new THREE.Texture( <Image> ),
          *
          *  bumpMap: new THREE.Texture( <Image> ),
          *  bumpScale: <float>,
          *
          *  normalMap: new THREE.Texture( <Image> ),
          *  normalMapType: THREE.TangentSpaceNormalMap,
          *  normalScale: <Vector2>,
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>,
          *
          *  specularMap: new THREE.Texture( <Image> ),
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
          *  combine: THREE.MultiplyOperation,
          *  reflectivity: <float>,
          *  refractionRatio: <float>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function MeshPhongMaterial(parameters){Material.call(this);this.type='MeshPhongMaterial';this.color=new Color(0xffffff);// diffuse
     this.specular=new Color(0x111111);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshPhongMaterial.prototype=Object.create(Material.prototype);MeshPhongMaterial.prototype.constructor=MeshPhongMaterial;MeshPhongMaterial.prototype.isMeshPhongMaterial=true;MeshPhongMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
          * parameters = {
          *  color: <hex>,
          *
          *  map: new THREE.Texture( <Image> ),
          *  gradientMap: new THREE.Texture( <Image> ),
          *
          *  lightMap: new THREE.Texture( <Image> ),
          *  lightMapIntensity: <float>
          *
          *  aoMap: new THREE.Texture( <Image> ),
          *  aoMapIntensity: <float>
          *
          *  emissive: <hex>,
          *  emissiveIntensity: <float>
          *  emissiveMap: new THREE.Texture( <Image> ),
          *
          *  bumpMap: new THREE.Texture( <Image> ),
          *  bumpScale: <float>,
          *
          *  normalMap: new THREE.Texture( <Image> ),
          *  normalMapType: THREE.TangentSpaceNormalMap,
          *  normalScale: <Vector2>,
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>,
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function MeshToonMaterial(parameters){Material.call(this);this.defines={'TOON':''};this.type='MeshToonMaterial';this.color=new Color(0xffffff);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshToonMaterial.prototype=Object.create(Material.prototype);MeshToonMaterial.prototype.constructor=MeshToonMaterial;MeshToonMaterial.prototype.isMeshToonMaterial=true;MeshToonMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.gradientMap=source.gradientMap;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
          * parameters = {
          *  opacity: <float>,
          *
          *  bumpMap: new THREE.Texture( <Image> ),
          *  bumpScale: <float>,
          *
          *  normalMap: new THREE.Texture( <Image> ),
          *  normalMapType: THREE.TangentSpaceNormalMap,
          *  normalScale: <Vector2>,
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function MeshNormalMaterial(parameters){Material.call(this);this.type='MeshNormalMaterial';this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshNormalMaterial.prototype=Object.create(Material.prototype);MeshNormalMaterial.prototype.constructor=MeshNormalMaterial;MeshNormalMaterial.prototype.isMeshNormalMaterial=true;MeshNormalMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
          * parameters = {
          *  color: <hex>,
          *  opacity: <float>,
          *
          *  map: new THREE.Texture( <Image> ),
          *
          *  lightMap: new THREE.Texture( <Image> ),
          *  lightMapIntensity: <float>
          *
          *  aoMap: new THREE.Texture( <Image> ),
          *  aoMapIntensity: <float>
          *
          *  emissive: <hex>,
          *  emissiveIntensity: <float>
          *  emissiveMap: new THREE.Texture( <Image> ),
          *
          *  specularMap: new THREE.Texture( <Image> ),
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
          *  combine: THREE.Multiply,
          *  reflectivity: <float>,
          *  refractionRatio: <float>,
          *
          *  wireframe: <boolean>,
          *  wireframeLinewidth: <float>,
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function MeshLambertMaterial(parameters){Material.call(this);this.type='MeshLambertMaterial';this.color=new Color(0xffffff);// diffuse
     this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshLambertMaterial.prototype=Object.create(Material.prototype);MeshLambertMaterial.prototype.constructor=MeshLambertMaterial;MeshLambertMaterial.prototype.isMeshLambertMaterial=true;MeshLambertMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
          * parameters = {
          *  color: <hex>,
          *  opacity: <float>,
          *
          *  matcap: new THREE.Texture( <Image> ),
          *
          *  map: new THREE.Texture( <Image> ),
          *
          *  bumpMap: new THREE.Texture( <Image> ),
          *  bumpScale: <float>,
          *
          *  normalMap: new THREE.Texture( <Image> ),
          *  normalMapType: THREE.TangentSpaceNormalMap,
          *  normalScale: <Vector2>,
          *
          *  displacementMap: new THREE.Texture( <Image> ),
          *  displacementScale: <float>,
          *  displacementBias: <float>,
          *
          *  alphaMap: new THREE.Texture( <Image> ),
          *
          *  skinning: <bool>,
          *  morphTargets: <bool>,
          *  morphNormals: <bool>
          * }
          */function MeshMatcapMaterial(parameters){Material.call(this);this.defines={'MATCAP':''};this.type='MeshMatcapMaterial';this.color=new Color(0xffffff);// diffuse
     this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshMatcapMaterial.prototype=Object.create(Material.prototype);MeshMatcapMaterial.prototype.constructor=MeshMatcapMaterial;MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;MeshMatcapMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.defines={'MATCAP':''};this.color.copy(source.color);this.matcap=source.matcap;this.map=source.map;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
          * parameters = {
          *  color: <hex>,
          *  opacity: <float>,
          *
          *  linewidth: <float>,
          *
          *  scale: <float>,
          *  dashSize: <float>,
          *  gapSize: <float>
          * }
          */function LineDashedMaterial(parameters){LineBasicMaterial.call(this);this.type='LineDashedMaterial';this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(parameters);}LineDashedMaterial.prototype=Object.create(LineBasicMaterial.prototype);LineDashedMaterial.prototype.constructor=LineDashedMaterial;LineDashedMaterial.prototype.isLineDashedMaterial=true;LineDashedMaterial.prototype.copy=function(source){LineBasicMaterial.prototype.copy.call(this,source);this.scale=source.scale;this.dashSize=source.dashSize;this.gapSize=source.gapSize;return this;};var Materials=/*#__PURE__*/Object.freeze({__proto__:null,ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material});var AnimationUtils={// same as Array.prototype.slice, but also works on typed arrays
     arraySlice:function arraySlice(array,from,to){if(AnimationUtils.isTypedArray(array)){// in ios9 array.subarray(from, undefined) will return empty array
     // but array.subarray(from) or array.subarray(from, len) is correct
     return new array.constructor(array.subarray(from,to!==undefined?to:array.length));}return array.slice(from,to);},// converts an array to a specific type
     convertArray:function convertArray(array,type,forceClone){if(!array||// let 'undefined' and 'null' pass
     !forceClone&&array.constructor===type)return array;if(typeof type.BYTES_PER_ELEMENT==='number'){return new type(array);// create typed array
     }return Array.prototype.slice.call(array);// create Array
     },isTypedArray:function isTypedArray(object){return ArrayBuffer.isView(object)&&!_instanceof(object,DataView);},// returns an array by which times and values can be sorted
     getKeyframeOrder:function getKeyframeOrder(times){function compareTime(i,j){return times[i]-times[j];}var n=times.length;var result=new Array(n);for(var _i211=0;_i211!==n;++_i211){result[_i211]=_i211;}result.sort(compareTime);return result;},// uses the array previously returned by 'getKeyframeOrder' to sort data
     sortedArray:function sortedArray(values,stride,order){var nValues=values.length;var result=new values.constructor(nValues);for(var _i212=0,dstOffset=0;dstOffset!==nValues;++_i212){var srcOffset=order[_i212]*stride;for(var j=0;j!==stride;++j){result[dstOffset++]=values[srcOffset+j];}}return result;},// function for parsing AOS keyframe formats
     flattenJSON:function flattenJSON(jsonKeys,times,values,valuePropertyName){var i=1,key=jsonKeys[0];while(key!==undefined&&key[valuePropertyName]===undefined){key=jsonKeys[i++];}if(key===undefined)return;// no data
     var value=key[valuePropertyName];if(value===undefined)return;// no data
     if(Array.isArray(value)){do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push.apply(values,value);// push all elements
     }key=jsonKeys[i++];}while(key!==undefined);}else if(value.toArray!==undefined){// ...assume THREE.Math-ish
     do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);value.toArray(values,values.length);}key=jsonKeys[i++];}while(key!==undefined);}else{// otherwise push as-is
     do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(value);}key=jsonKeys[i++];}while(key!==undefined);}},subclip:function subclip(sourceClip,name,startFrame,endFrame,fps){fps=fps||30;var clip=sourceClip.clone();clip.name=name;var tracks=[];for(var _i213=0;_i213<clip.tracks.length;++_i213){var track=clip.tracks[_i213];var valueSize=track.getValueSize();var times=[];var values=[];for(var j=0;j<track.times.length;++j){var frame=track.times[j]*fps;if(frame<startFrame||frame>=endFrame)continue;times.push(track.times[j]);for(var k=0;k<valueSize;++k){values.push(track.values[j*valueSize+k]);}}if(times.length===0)continue;track.times=AnimationUtils.convertArray(times,track.times.constructor);track.values=AnimationUtils.convertArray(values,track.values.constructor);tracks.push(track);}clip.tracks=tracks;// find minimum .times value across all tracks in the trimmed clip
     var minStartTime=Infinity;for(var _i214=0;_i214<clip.tracks.length;++_i214){if(minStartTime>clip.tracks[_i214].times[0]){minStartTime=clip.tracks[_i214].times[0];}}// shift all tracks such that clip begins at t=0
     for(var _i215=0;_i215<clip.tracks.length;++_i215){clip.tracks[_i215].shift(-1*minStartTime);}clip.resetDuration();return clip;},makeClipAdditive:function makeClipAdditive(targetClip,referenceFrame,referenceClip,fps){if(referenceFrame===undefined)referenceFrame=0;if(referenceClip===undefined)referenceClip=targetClip;if(fps===undefined||fps<=0)fps=30;var numTracks=referenceClip.tracks.length;var referenceTime=referenceFrame/fps;// Make each track's values relative to the values at the reference frame
     var _loop=function _loop(_i216){var referenceTrack=referenceClip.tracks[_i216];var referenceTrackType=referenceTrack.ValueTypeName;// Skip this track if it's non-numeric
     if(referenceTrackType==='bool'||referenceTrackType==='string')return"continue";// Find the track in the target clip whose name and type matches the reference track
     var targetTrack=targetClip.tracks.find(function(track){return track.name===referenceTrack.name&&track.ValueTypeName===referenceTrackType;});if(targetTrack===undefined)return"continue";var referenceOffset=0;var referenceValueSize=referenceTrack.getValueSize();if(referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){referenceOffset=referenceValueSize/3;}var targetOffset=0;var targetValueSize=targetTrack.getValueSize();if(targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){targetOffset=targetValueSize/3;}var lastIndex=referenceTrack.times.length-1;var referenceValue=void 0;// Find the value to subtract out of the track
     if(referenceTime<=referenceTrack.times[0]){// Reference frame is earlier than the first keyframe, so just use the first keyframe
     var startIndex=referenceOffset;var endIndex=referenceValueSize-referenceOffset;referenceValue=AnimationUtils.arraySlice(referenceTrack.values,startIndex,endIndex);}else if(referenceTime>=referenceTrack.times[lastIndex]){// Reference frame is after the last keyframe, so just use the last keyframe
     var _startIndex=lastIndex*referenceValueSize+referenceOffset;var _endIndex=_startIndex+referenceValueSize-referenceOffset;referenceValue=AnimationUtils.arraySlice(referenceTrack.values,_startIndex,_endIndex);}else{// Interpolate to the reference value
     var interpolant=referenceTrack.createInterpolant();var _startIndex2=referenceOffset;var _endIndex2=referenceValueSize-referenceOffset;interpolant.evaluate(referenceTime);referenceValue=AnimationUtils.arraySlice(interpolant.resultBuffer,_startIndex2,_endIndex2);}// Conjugate the quaternion
     if(referenceTrackType==='quaternion'){var referenceQuat=new Quaternion().fromArray(referenceValue).normalize().conjugate();referenceQuat.toArray(referenceValue);}// Subtract the reference value from all of the track values
     var numTimes=targetTrack.times.length;for(var j=0;j<numTimes;++j){var valueStart=j*targetValueSize+targetOffset;if(referenceTrackType==='quaternion'){// Multiply the conjugate for quaternion track types
     Quaternion.multiplyQuaternionsFlat(targetTrack.values,valueStart,referenceValue,0,targetTrack.values,valueStart);}else{var valueEnd=targetValueSize-targetOffset*2;// Subtract each value for all other numeric track types
     for(var k=0;k<valueEnd;++k){targetTrack.values[valueStart+k]-=referenceValue[k];}}}};for(var _i216=0;_i216<numTracks;++_i216){var _ret=_loop(_i216);if(_ret==="continue")continue;}targetClip.blendMode=AdditiveAnimationBlendMode;return targetClip;}};/**
          * Abstract base class of interpolants over parametric samples.
          *
          * The parameter domain is one dimensional, typically the time or a path
          * along a curve defined by the data.
          *
          * The sample values can have any dimensionality and derived classes may
          * apply special interpretations to the data.
          *
          * This class provides the interval seek in a Template Method, deferring
          * the actual interpolation to derived classes.
          *
          * Time complexity is O(1) for linear access crossing at most two points
          * and O(log N) for random access, where N is the number of positions.
          *
          * References:
          *
          * 		http://www.oodesign.com/template-method-pattern.html
          *
          */function Interpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions;this._cachedIndex=0;this.resultBuffer=resultBuffer!==undefined?resultBuffer:new sampleValues.constructor(sampleSize);this.sampleValues=sampleValues;this.valueSize=sampleSize;}Object.assign(Interpolant.prototype,{evaluate:function evaluate(t){var pp=this.parameterPositions;var i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{var right;linear_scan:{//- See http://jsperf.com/comparison-to-undefined/3
     //- slower code:
     //-
     //- 				if ( t >= t1 || t1 === undefined ) {
     forward_scan:if(!(t<t1)){for(var giveUpAt=i1+2;;){if(t1===undefined){if(t<t0)break forward_scan;// after end
     i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t,t0);}if(i1===giveUpAt)break;// this loop
     t0=t1;t1=pp[++i1];if(t<t1){// we have arrived at the sought interval
     break seek;}}// prepare binary search on the right side of the index
     right=pp.length;break linear_scan;}//- slower code:
     //-					if ( t < t0 || t0 === undefined ) {
     if(!(t>=t0)){// looping?
     var t1global=pp[1];if(t<t1global){i1=2;// + 1, using the scan for the details
     t0=t1global;}// linear reverse scan
     for(var _giveUpAt=i1-2;;){if(t0===undefined){// before start
     this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(i1===_giveUpAt)break;// this loop
     t1=t0;t0=pp[--i1-1];if(t>=t0){// we have arrived at the sought interval
     break seek;}}// prepare binary search on the left side of the index
     right=i1;i1=0;break linear_scan;}// the interval is valid
     break validate_interval;}// linear scan
     // binary search
     while(i1<right){var mid=i1+right>>>1;if(t<pp[mid]){right=mid;}else{i1=mid+1;}}t1=pp[i1];t0=pp[i1-1];// check boundary cases, again
     if(t0===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(t1===undefined){i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t0,t);}}// seek
     this._cachedIndex=i1;this.intervalChanged_(i1,t0,t1);}// validate_interval
     return this.interpolate_(i1,t0,t,t1);},settings:null,// optional, subclass-specific settings structure
     // Note: The indirection allows central control of many interpolants.
     // --- Protected interface
     DefaultSettings_:{},getSettings_:function getSettings_(){return this.settings||this.DefaultSettings_;},copySampleValue_:function copySampleValue_(index){// copies a sample value to the result buffer
     var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(var _i217=0;_i217!==stride;++_i217){result[_i217]=values[offset+_i217];}return result;},// Template methods for derived classes:
     interpolate_:function interpolate_()/* i1, t0, t, t1 */{throw new Error('call to abstract method');// implementations shall return this.resultBuffer
     },intervalChanged_:function intervalChanged_()/* i1, t0, t1 */{// empty
     }});// DECLARE ALIAS AFTER assign prototype
     Object.assign(Interpolant.prototype,{//( 0, t, t0 ), returns this.resultBuffer
     beforeStart_:Interpolant.prototype.copySampleValue_,//( N-1, tN-1, t ), returns this.resultBuffer
     afterEnd_:Interpolant.prototype.copySampleValue_});/**
          * Fast and simple cubic spline interpolant.
          *
          * It was derived from a Hermitian construction setting the first derivative
          * at each sample position to the linear slope between neighboring positions
          * over their parameter interval.
          */function CubicInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;}CubicInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:CubicInterpolant,DefaultSettings_:{endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},intervalChanged_:function intervalChanged_(i1,t0,t1){var pp=this.parameterPositions;var iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:// f'(t0) = 0
     iPrev=i1;tPrev=2*t0-t1;break;case WrapAroundEnding:// use the other end of the curve
     iPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:// ZeroCurvatureEnding
     // f''(t0) = 0 a.k.a. Natural Spline
     iPrev=i1;tPrev=t1;}}if(tNext===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:// f'(tN) = 0
     iNext=i1;tNext=2*t1-t0;break;case WrapAroundEnding:// use the other end of the curve
     iNext=1;tNext=t1+pp[1]-pp[0];break;default:// ZeroCurvatureEnding
     // f''(tN) = 0, a.k.a. Natural Spline
     iNext=i1-1;tNext=t0;}}var halfDt=(t1-t0)*0.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev);this._weightNext=halfDt/(tNext-t1);this._offsetPrev=iPrev*stride;this._offsetNext=iNext*stride;},interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p;// evaluate polynomials
     var sP=-wP*ppp+2*wP*pp-wP*p;var s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-0.5+wP)*p+1;var s1=(-1-wN)*ppp+(1.5+wN)*pp+0.5*p;var sN=wN*ppp-wN*pp;// combine data linearly
     for(var _i218=0;_i218!==stride;++_i218){result[_i218]=sP*values[oP+_i218]+s0*values[o0+_i218]+s1*values[o1+_i218]+sN*values[oN+_i218];}return result;}});function LinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}LinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:LinearInterpolant,interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(var _i219=0;_i219!==stride;++_i219){result[_i219]=values[offset0+_i219]*weight0+values[offset1+_i219]*weight1;}return result;}});/**
          *
          * Interpolant that evaluates to the sample value at the position preceeding
          * the parameter.
          */function DiscreteInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}DiscreteInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:DiscreteInterpolant,interpolate_:function interpolate_(i1/*, t0, t, t1 */){return this.copySampleValue_(i1-1);}});function KeyframeTrack(name,times,values,interpolation){if(name===undefined)throw new Error('THREE.KeyframeTrack: track name is undefined');if(times===undefined||times.length===0)throw new Error('THREE.KeyframeTrack: no keyframes in track named '+name);this.name=name;this.times=AnimationUtils.convertArray(times,this.TimeBufferType);this.values=AnimationUtils.convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);}// Static methods
     Object.assign(KeyframeTrack,{// Serialization (in static context, because of constructor invocation
     // and automatic invocation of .toJSON):
     toJSON:function toJSON(track){var trackType=track.constructor;var json;// derived classes can define a static toJSON method
     if(trackType.toJSON!==undefined){json=trackType.toJSON(track);}else{// by default, we assume the data can be serialized as-is
     json={'name':track.name,'times':AnimationUtils.convertArray(track.times,Array),'values':AnimationUtils.convertArray(track.values,Array)};var interpolation=track.getInterpolation();if(interpolation!==track.DefaultInterpolation){json.interpolation=interpolation;}}json.type=track.ValueTypeName;// mandatory
     return json;}});Object.assign(KeyframeTrack.prototype,{constructor:KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodDiscrete:function InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodLinear:function InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodSmooth:function InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result);},setInterpolation:function setInterpolation(interpolation){var factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break;}if(factoryMethod===undefined){var message="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){// fall back to default, unless the default itself is messed up
     if(interpolation!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation);}else{throw new Error(message);// fatal, in this case
     }}console.warn('THREE.KeyframeTrack:',message);return this;}this.createInterpolant=factoryMethod;return this;},getInterpolation:function getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth;}},getValueSize:function getValueSize(){return this.values.length/this.times.length;},// move all keyframes either forwards or backwards in time
     shift:function shift(timeOffset){if(timeOffset!==0.0){var times=this.times;for(var _i220=0,n=times.length;_i220!==n;++_i220){times[_i220]+=timeOffset;}}return this;},// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
     scale:function scale(timeScale){if(timeScale!==1.0){var times=this.times;for(var _i221=0,n=times.length;_i221!==n;++_i221){times[_i221]*=timeScale;}}return this;},// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
     // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
     trim:function trim(startTime,endTime){var times=this.times,nKeys=times.length;var from=0,to=nKeys-1;while(from!==nKeys&&times[from]<startTime){++from;}while(to!==-1&&times[to]>endTime){--to;}++to;// inclusive -> exclusive bound
     if(from!==0||to!==nKeys){// empty tracks are forbidden, so keep at least one keyframe
     if(from>=to){to=Math.max(to,1);from=to-1;}var stride=this.getValueSize();this.times=AnimationUtils.arraySlice(times,from,to);this.values=AnimationUtils.arraySlice(this.values,from*stride,to*stride);}return this;},// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
     validate:function validate(){var valid=true;var valueSize=this.getValueSize();if(valueSize-Math.floor(valueSize)!==0){console.error('THREE.KeyframeTrack: Invalid value size in track.',this);valid=false;}var times=this.times,values=this.values,nKeys=times.length;if(nKeys===0){console.error('THREE.KeyframeTrack: Track is empty.',this);valid=false;}var prevTime=null;for(var _i222=0;_i222!==nKeys;_i222++){var currTime=times[_i222];if(typeof currTime==='number'&&isNaN(currTime)){console.error('THREE.KeyframeTrack: Time is not a valid number.',this,_i222,currTime);valid=false;break;}if(prevTime!==null&&prevTime>currTime){console.error('THREE.KeyframeTrack: Out of order keys.',this,_i222,currTime,prevTime);valid=false;break;}prevTime=currTime;}if(values!==undefined){if(AnimationUtils.isTypedArray(values)){for(var _i223=0,n=values.length;_i223!==n;++_i223){var value=values[_i223];if(isNaN(value)){console.error('THREE.KeyframeTrack: Value is not a valid number.',this,_i223,value);valid=false;break;}}}}return valid;},// removes equivalent sequential keys as common in morph target sequences
     // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
     optimize:function optimize(){// times or values may be shared with other tracks, so overwriting is unsafe
     var times=AnimationUtils.arraySlice(this.times),values=AnimationUtils.arraySlice(this.values),stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,lastIndex=times.length-1;var writeIndex=1;for(var _i224=1;_i224<lastIndex;++_i224){var keep=false;var time=times[_i224];var timeNext=times[_i224+1];// remove adjacent keyframes scheduled at the same time
     if(time!==timeNext&&(_i224!==1||time!==time[0])){if(!smoothInterpolation){// remove unnecessary keyframes same as their neighbors
     var offset=_i224*stride,offsetP=offset-stride,offsetN=offset+stride;for(var j=0;j!==stride;++j){var value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=true;break;}}}else{keep=true;}}// in-place compaction
     if(keep){if(_i224!==writeIndex){times[writeIndex]=times[_i224];var readOffset=_i224*stride,writeOffset=writeIndex*stride;for(var _j15=0;_j15!==stride;++_j15){values[writeOffset+_j15]=values[readOffset+_j15];}}++writeIndex;}}// flush last keyframe (compaction looks ahead)
     if(lastIndex>0){times[writeIndex]=times[lastIndex];for(var _readOffset=lastIndex*stride,_writeOffset=writeIndex*stride,_j16=0;_j16!==stride;++_j16){values[_writeOffset+_j16]=values[_readOffset+_j16];}++writeIndex;}if(writeIndex!==times.length){this.times=AnimationUtils.arraySlice(times,0,writeIndex);this.values=AnimationUtils.arraySlice(values,0,writeIndex*stride);}else{this.times=times;this.values=values;}return this;},clone:function clone(){var times=AnimationUtils.arraySlice(this.times,0);var values=AnimationUtils.arraySlice(this.values,0);var TypedKeyframeTrack=this.constructor;var track=new TypedKeyframeTrack(this.name,times,values);// Interpolant argument to constructor is not saved, so copy the factory method directly.
     track.createInterpolant=this.createInterpolant;return track;}});/**
          * A Track of Boolean keyframe values.
          */function BooleanKeyframeTrack(name,times,values){KeyframeTrack.call(this,name,times,values);}BooleanKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:BooleanKeyframeTrack,ValueTypeName:'bool',ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined// Note: Actually this track could have a optimized / compressed
     // representation of a single value and a custom interpolant that
     // computes "firstValue ^ isOdd( index )".
     });/**
          * A Track of keyframe values that represent color.
          */function ColorKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}ColorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:ColorKeyframeTrack,ValueTypeName:'color'// ValueBufferType is inherited
     // DefaultInterpolation is inherited
     // Note: Very basic implementation and nothing special yet.
     // However, this is the place for color space parameterization.
     });/**
          * A Track of numeric keyframe values.
          */function NumberKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}NumberKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:NumberKeyframeTrack,ValueTypeName:'number'// ValueBufferType is inherited
     // DefaultInterpolation is inherited
     });/**
          * Spherical linear unit quaternion interpolant.
          */function QuaternionLinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}QuaternionLinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:QuaternionLinearInterpolant,interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,alpha=(t-t0)/(t1-t0);var offset=i1*stride;for(var end=offset+stride;offset!==end;offset+=4){Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);}return result;}});/**
          * A Track of quaternion keyframe values.
          */function QuaternionKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}QuaternionKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:QuaternionKeyframeTrack,ValueTypeName:'quaternion',// ValueBufferType is inherited
     DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodLinear:function InterpolantFactoryMethodLinear(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodSmooth:undefined// not yet implemented
     });/**
          * A Track that interpolates Strings
          */function StringKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}StringKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:StringKeyframeTrack,ValueTypeName:'string',ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined});/**
          * A Track of vectored keyframe values.
          */function VectorKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}VectorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:VectorKeyframeTrack,ValueTypeName:'vector'// ValueBufferType is inherited
     // DefaultInterpolation is inherited
     });function AnimationClip(name,duration,tracks,blendMode){this.name=name;this.tracks=tracks;this.duration=duration!==undefined?duration:-1;this.blendMode=blendMode!==undefined?blendMode:NormalAnimationBlendMode;this.uuid=MathUtils.generateUUID();// this means it should figure out its duration by scanning the tracks
     if(this.duration<0){this.resetDuration();}}function getTrackTypeForValueTypeName(typeName){switch(typeName.toLowerCase()){case'scalar':case'double':case'float':case'number':case'integer':return NumberKeyframeTrack;case'vector':case'vector2':case'vector3':case'vector4':return VectorKeyframeTrack;case'color':return ColorKeyframeTrack;case'quaternion':return QuaternionKeyframeTrack;case'bool':case'boolean':return BooleanKeyframeTrack;case'string':return StringKeyframeTrack;}throw new Error('THREE.KeyframeTrack: Unsupported typeName: '+typeName);}function parseKeyframeTrack(json){if(json.type===undefined){throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');}var trackType=getTrackTypeForValueTypeName(json.type);if(json.times===undefined){var times=[],values=[];AnimationUtils.flattenJSON(json.keys,times,values,'value');json.times=times;json.values=values;}// derived classes can define a static parse method
     if(trackType.parse!==undefined){return trackType.parse(json);}else{// by default, we assume a constructor compatible with the base
     return new trackType(json.name,json.times,json.values,json.interpolation);}}Object.assign(AnimationClip,{parse:function parse(json){var tracks=[],jsonTracks=json.tracks,frameTime=1.0/(json.fps||1.0);for(var _i225=0,n=jsonTracks.length;_i225!==n;++_i225){tracks.push(parseKeyframeTrack(jsonTracks[_i225]).scale(frameTime));}return new AnimationClip(json.name,json.duration,tracks,json.blendMode);},toJSON:function toJSON(clip){var tracks=[],clipTracks=clip.tracks;var json={'name':clip.name,'duration':clip.duration,'tracks':tracks,'uuid':clip.uuid,'blendMode':clip.blendMode};for(var _i226=0,n=clipTracks.length;_i226!==n;++_i226){tracks.push(KeyframeTrack.toJSON(clipTracks[_i226]));}return json;},CreateFromMorphTargetSequence:function CreateFromMorphTargetSequence(name,morphTargetSequence,fps,noLoop){var numMorphTargets=morphTargetSequence.length;var tracks=[];for(var _i227=0;_i227<numMorphTargets;_i227++){var times=[];var values=[];times.push((_i227+numMorphTargets-1)%numMorphTargets,_i227,(_i227+1)%numMorphTargets);values.push(0,1,0);var order=AnimationUtils.getKeyframeOrder(times);times=AnimationUtils.sortedArray(times,1,order);values=AnimationUtils.sortedArray(values,1,order);// if there is a key at the first frame, duplicate it as the
     // last frame as well for perfect loop.
     if(!noLoop&&times[0]===0){times.push(numMorphTargets);values.push(values[0]);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluences['+morphTargetSequence[_i227].name+']',times,values).scale(1.0/fps));}return new AnimationClip(name,-1,tracks);},findByName:function findByName(objectOrClipArray,name){var clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){var o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations;}for(var _i228=0;_i228<clipArray.length;_i228++){if(clipArray[_i228].name===name){return clipArray[_i228];}}return null;},CreateClipsFromMorphTargetSequences:function CreateClipsFromMorphTargetSequences(morphTargets,fps,noLoop){var animationToMorphTargets={};// tested with https://regex101.com/ on trick sequences
     // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
     var pattern=/^([\w-]*?)([\d]+)$/;// sort morph target names into animation groups based
     // patterns like Walk_001, Walk_002, Run_001, Run_002
     for(var _i229=0,il=morphTargets.length;_i229<il;_i229++){var morphTarget=morphTargets[_i229];var parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){var name=parts[1];var animationMorphTargets=animationToMorphTargets[name];if(!animationMorphTargets){animationToMorphTargets[name]=animationMorphTargets=[];}animationMorphTargets.push(morphTarget);}}var clips=[];for(var _name4 in animationToMorphTargets){clips.push(AnimationClip.CreateFromMorphTargetSequence(_name4,animationToMorphTargets[_name4],fps,noLoop));}return clips;},// parse the animation.hierarchy format
     parseAnimation:function parseAnimation(animation,bones){if(!animation){console.error('THREE.AnimationClip: No animation in JSONLoader data.');return null;}var addNonemptyTrack=function addNonemptyTrack(trackType,trackName,animationKeys,propertyName,destTracks){// only return track if there are actually keys.
     if(animationKeys.length!==0){var times=[];var values=[];AnimationUtils.flattenJSON(animationKeys,times,values,propertyName);// empty keys are filtered out, so check again
     if(times.length!==0){destTracks.push(new trackType(trackName,times,values));}}};var tracks=[];var clipName=animation.name||'default';var fps=animation.fps||30;var blendMode=animation.blendMode;// automatic length determination in AnimationClip.
     var duration=animation.length||-1;var hierarchyTracks=animation.hierarchy||[];for(var h=0;h<hierarchyTracks.length;h++){var animationKeys=hierarchyTracks[h].keys;// skip empty tracks
     if(!animationKeys||animationKeys.length===0)continue;// process morph targets
     if(animationKeys[0].morphTargets){// figure out all morph targets used in this track
     var morphTargetNames={};var k=void 0;for(k=0;k<animationKeys.length;k++){if(animationKeys[k].morphTargets){for(var m=0;m<animationKeys[k].morphTargets.length;m++){morphTargetNames[animationKeys[k].morphTargets[m]]=-1;}}}// create a track for each morph target with all zero
     // morphTargetInfluences except for the keys in which
     // the morphTarget is named.
     for(var morphTargetName in morphTargetNames){var times=[];var values=[];for(var _m2=0;_m2!==animationKeys[k].morphTargets.length;++_m2){var animationKey=animationKeys[k];times.push(animationKey.time);values.push(animationKey.morphTarget===morphTargetName?1:0);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluence['+morphTargetName+']',times,values));}duration=morphTargetNames.length*(fps||1.0);}else{// ...assume skeletal animation
     var boneName='.bones['+bones[h].name+']';addNonemptyTrack(VectorKeyframeTrack,boneName+'.position',animationKeys,'pos',tracks);addNonemptyTrack(QuaternionKeyframeTrack,boneName+'.quaternion',animationKeys,'rot',tracks);addNonemptyTrack(VectorKeyframeTrack,boneName+'.scale',animationKeys,'scl',tracks);}}if(tracks.length===0){return null;}var clip=new AnimationClip(clipName,duration,tracks,blendMode);return clip;}});Object.assign(AnimationClip.prototype,{resetDuration:function resetDuration(){var tracks=this.tracks;var duration=0;for(var _i230=0,n=tracks.length;_i230!==n;++_i230){var track=this.tracks[_i230];duration=Math.max(duration,track.times[track.times.length-1]);}this.duration=duration;return this;},trim:function trim(){for(var _i231=0;_i231<this.tracks.length;_i231++){this.tracks[_i231].trim(0,this.duration);}return this;},validate:function validate(){var valid=true;for(var _i232=0;_i232<this.tracks.length;_i232++){valid=valid&&this.tracks[_i232].validate();}return valid;},optimize:function optimize(){for(var _i233=0;_i233<this.tracks.length;_i233++){this.tracks[_i233].optimize();}return this;},clone:function clone(){var tracks=[];for(var _i234=0;_i234<this.tracks.length;_i234++){tracks.push(this.tracks[_i234].clone());}return new AnimationClip(this.name,this.duration,tracks,this.blendMode);}});var Cache={enabled:false,files:{},add:function add(key,file){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Adding key:', key );
     this.files[key]=file;},get:function get(key){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Checking key:', key );
     return this.files[key];},remove:function remove(key){delete this.files[key];},clear:function clear(){this.files={};}};function LoadingManager(onLoad,onProgress,onError){var scope=this;var isLoading=false;var itemsLoaded=0;var itemsTotal=0;var urlModifier=undefined;var handlers=[];// Refer to #5689 for the reason why we don't set .onStart
     // in the constructor
     this.onStart=undefined;this.onLoad=onLoad;this.onProgress=onProgress;this.onError=onError;this.itemStart=function(url){itemsTotal++;if(isLoading===false){if(scope.onStart!==undefined){scope.onStart(url,itemsLoaded,itemsTotal);}}isLoading=true;};this.itemEnd=function(url){itemsLoaded++;if(scope.onProgress!==undefined){scope.onProgress(url,itemsLoaded,itemsTotal);}if(itemsLoaded===itemsTotal){isLoading=false;if(scope.onLoad!==undefined){scope.onLoad();}}};this.itemError=function(url){if(scope.onError!==undefined){scope.onError(url);}};this.resolveURL=function(url){if(urlModifier){return urlModifier(url);}return url;};this.setURLModifier=function(transform){urlModifier=transform;return this;};this.addHandler=function(regex,loader){handlers.push(regex,loader);return this;};this.removeHandler=function(regex){var index=handlers.indexOf(regex);if(index!==-1){handlers.splice(index,2);}return this;};this.getHandler=function(file){for(var _i235=0,l=handlers.length;_i235<l;_i235+=2){var regex=handlers[_i235];var _loader=handlers[_i235+1];if(regex.global)regex.lastIndex=0;// see #17920
     if(regex.test(file)){return _loader;}}return null;};}var DefaultLoadingManager=new LoadingManager();function Loader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;this.crossOrigin='anonymous';this.withCredentials=false;this.path='';this.resourcePath='';this.requestHeader={};}Object.assign(Loader.prototype,{load:function load()/* url, onLoad, onProgress, onError */{},loadAsync:function loadAsync(url,onProgress){var scope=this;return new Promise(function(resolve,reject){scope.load(url,resolve,onProgress,reject);});},parse:function parse()/* data */{},setCrossOrigin:function setCrossOrigin(crossOrigin){this.crossOrigin=crossOrigin;return this;},setWithCredentials:function setWithCredentials(value){this.withCredentials=value;return this;},setPath:function setPath(path){this.path=path;return this;},setResourcePath:function setResourcePath(resourcePath){this.resourcePath=resourcePath;return this;},setRequestHeader:function setRequestHeader(requestHeader){this.requestHeader=requestHeader;return this;}});var loading={};function FileLoader(manager){Loader.call(this,manager);}FileLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FileLoader,load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}// Check if request is duplicate
     if(loading[url]!==undefined){loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});return;}// Check for data: URI
     var dataUriRegex=/^data:(.*?)(;base64)?,(.*)$/;var dataUriRegexResult=url.match(dataUriRegex);var request;// Safari can not handle Data URIs through XMLHttpRequest so process manually
     if(dataUriRegexResult){var mimeType=dataUriRegexResult[1];var isBase64=!!dataUriRegexResult[2];var data=dataUriRegexResult[3];data=decodeURIComponent(data);if(isBase64)data=atob(data);try{var response;var responseType=(this.responseType||'').toLowerCase();switch(responseType){case'arraybuffer':case'blob':var _view2=new Uint8Array(data.length);for(var _i236=0;_i236<data.length;_i236++){_view2[_i236]=data.charCodeAt(_i236);}if(responseType==='blob'){response=new Blob([_view2.buffer],{type:mimeType});}else{response=_view2.buffer;}break;case'document':var parser=new DOMParser();response=parser.parseFromString(data,mimeType);break;case'json':response=JSON.parse(data);break;default:// 'text' or other
     response=data;break;}// Wait for next browser tick like standard XMLHttpRequest event dispatching does
     setTimeout(function(){if(onLoad)onLoad(response);scope.manager.itemEnd(url);},0);}catch(error){// Wait for next browser tick like standard XMLHttpRequest event dispatching does
     setTimeout(function(){if(onError)onError(error);scope.manager.itemError(url);scope.manager.itemEnd(url);},0);}}else{// Initialise array for duplicate requests
     loading[url]=[];loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});request=new XMLHttpRequest();request.open('GET',url,true);request.addEventListener('load',function(event){var response=this.response;var callbacks=loading[url];delete loading[url];if(this.status===200||this.status===0){// Some browsers return HTTP Status 0 when using non-http protocol
     // e.g. 'file://' or 'data://'. Handle as success.
     if(this.status===0)console.warn('THREE.FileLoader: HTTP Status 0 received.');// Add to cache only on HTTP success, so that we do not cache
     // error response bodies as proper responses to requests.
     Cache.add(url,response);for(var _i237=0,il=callbacks.length;_i237<il;_i237++){var callback=callbacks[_i237];if(callback.onLoad)callback.onLoad(response);}scope.manager.itemEnd(url);}else{for(var _i238=0,_il31=callbacks.length;_i238<_il31;_i238++){var _callback=callbacks[_i238];if(_callback.onError)_callback.onError(event);}scope.manager.itemError(url);scope.manager.itemEnd(url);}},false);request.addEventListener('progress',function(event){var callbacks=loading[url];for(var _i239=0,il=callbacks.length;_i239<il;_i239++){var callback=callbacks[_i239];if(callback.onProgress)callback.onProgress(event);}},false);request.addEventListener('error',function(event){var callbacks=loading[url];delete loading[url];for(var _i240=0,il=callbacks.length;_i240<il;_i240++){var callback=callbacks[_i240];if(callback.onError)callback.onError(event);}scope.manager.itemError(url);scope.manager.itemEnd(url);},false);request.addEventListener('abort',function(event){var callbacks=loading[url];delete loading[url];for(var _i241=0,il=callbacks.length;_i241<il;_i241++){var callback=callbacks[_i241];if(callback.onError)callback.onError(event);}scope.manager.itemError(url);scope.manager.itemEnd(url);},false);if(this.responseType!==undefined)request.responseType=this.responseType;if(this.withCredentials!==undefined)request.withCredentials=this.withCredentials;if(request.overrideMimeType)request.overrideMimeType(this.mimeType!==undefined?this.mimeType:'text/plain');for(var header in this.requestHeader){request.setRequestHeader(header,this.requestHeader[header]);}request.send(null);}scope.manager.itemStart(url);return request;},setResponseType:function setResponseType(value){this.responseType=value;return this;},setMimeType:function setMimeType(value){this.mimeType=value;return this;}});function AnimationLoader(manager){Loader.call(this,manager);}AnimationLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:AnimationLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);},parse:function parse(json){var animations=[];for(var _i242=0;_i242<json.length;_i242++){var clip=AnimationClip.parse(json[_i242]);animations.push(clip);}return animations;}});/**
          * Abstract Base class to block based textures loader (dds, pvr, ...)
          *
          * Sub classes have to implement the parse() method which will be used in load().
          */function CompressedTextureLoader(manager){Loader.call(this,manager);}CompressedTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CompressedTextureLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var images=[];var texture=new CompressedTexture();texture.image=images;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(scope.withCredentials);var loaded=0;function loadTexture(i){loader.load(url[i],function(buffer){var texDatas=scope.parse(buffer,true);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps};loaded+=1;if(loaded===6){if(texDatas.mipmapCount===1)texture.minFilter=LinearFilter;texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);}},onProgress,onError);}if(Array.isArray(url)){for(var _i243=0,il=url.length;_i243<il;++_i243){loadTexture(_i243);}}else{// compressed cubemap texture stored in a single DDS file
     loader.load(url,function(buffer){var texDatas=scope.parse(buffer,true);if(texDatas.isCubemap){var faces=texDatas.mipmaps.length/texDatas.mipmapCount;for(var f=0;f<faces;f++){images[f]={mipmaps:[]};for(var _i244=0;_i244<texDatas.mipmapCount;_i244++){images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+_i244]);images[f].format=texDatas.format;images[f].width=texDatas.width;images[f].height=texDatas.height;}}}else{texture.image.width=texDatas.width;texture.image.height=texDatas.height;texture.mipmaps=texDatas.mipmaps;}if(texDatas.mipmapCount===1){texture.minFilter=LinearFilter;}texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);},onProgress,onError);}return texture;}});function ImageLoader(manager){Loader.call(this,manager);}ImageLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageLoader,load:function load(url,onLoad,onProgress,onError){if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}var image=document.createElementNS('http://www.w3.org/1999/xhtml','img');function onImageLoad(){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);Cache.add(url,this);if(onLoad)onLoad(this);scope.manager.itemEnd(url);}function onImageError(event){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);if(onError)onError(event);scope.manager.itemError(url);scope.manager.itemEnd(url);}image.addEventListener('load',onImageLoad,false);image.addEventListener('error',onImageError,false);if(url.substr(0,5)!=='data:'){if(this.crossOrigin!==undefined)image.crossOrigin=this.crossOrigin;}scope.manager.itemStart(url);image.src=url;return image;}});function CubeTextureLoader(manager){Loader.call(this,manager);}CubeTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CubeTextureLoader,load:function load(urls,onLoad,onProgress,onError){var texture=new CubeTexture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);var loaded=0;function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;if(loaded===6){texture.needsUpdate=true;if(onLoad)onLoad(texture);}},undefined,onError);}for(var _i245=0;_i245<urls.length;++_i245){loadTexture(_i245);}return texture;}});/**
          * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
          *
          * Sub classes have to implement the parse() method which will be used in load().
          */function DataTextureLoader(manager){Loader.call(this,manager);}DataTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:DataTextureLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var texture=new DataTexture();var loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setPath(this.path);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(buffer){var texData=scope.parse(buffer);if(!texData)return;if(texData.image!==undefined){texture.image=texData.image;}else if(texData.data!==undefined){texture.image.width=texData.width;texture.image.height=texData.height;texture.image.data=texData.data;}texture.wrapS=texData.wrapS!==undefined?texData.wrapS:ClampToEdgeWrapping;texture.wrapT=texData.wrapT!==undefined?texData.wrapT:ClampToEdgeWrapping;texture.magFilter=texData.magFilter!==undefined?texData.magFilter:LinearFilter;texture.minFilter=texData.minFilter!==undefined?texData.minFilter:LinearFilter;texture.anisotropy=texData.anisotropy!==undefined?texData.anisotropy:1;if(texData.format!==undefined){texture.format=texData.format;}if(texData.type!==undefined){texture.type=texData.type;}if(texData.mipmaps!==undefined){texture.mipmaps=texData.mipmaps;texture.minFilter=LinearMipmapLinearFilter;// presumably...
     }if(texData.mipmapCount===1){texture.minFilter=LinearFilter;}texture.needsUpdate=true;if(onLoad)onLoad(texture,texData);},onProgress,onError);return texture;}});function TextureLoader(manager){Loader.call(this,manager);}TextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:TextureLoader,load:function load(url,onLoad,onProgress,onError){var texture=new Texture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
     var isJPEG=url.search(/\.jpe?g($|\?)/i)>0||url.search(/^data\:image\/jpeg/)===0;texture.format=isJPEG?RGBFormat:RGBAFormat;texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;}});/**
          * Extensible curve object.
          *
          * Some common of curve methods:
          * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
          * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
          * .getPoints(), .getSpacedPoints()
          * .getLength()
          * .updateArcLengths()
          *
          * This following curves inherit from THREE.Curve:
          *
          * -- 2D curves --
          * THREE.ArcCurve
          * THREE.CubicBezierCurve
          * THREE.EllipseCurve
          * THREE.LineCurve
          * THREE.QuadraticBezierCurve
          * THREE.SplineCurve
          *
          * -- 3D curves --
          * THREE.CatmullRomCurve3
          * THREE.CubicBezierCurve3
          * THREE.LineCurve3
          * THREE.QuadraticBezierCurve3
          *
          * A series of curves can be represented as a THREE.CurvePath.
          *
          **/function Curve(){this.type='Curve';this.arcLengthDivisions=200;}Object.assign(Curve.prototype,{// Virtual base class method to overwrite and implement in subclasses
     //	- t [0 .. 1]
     getPoint:function getPoint()/* t, optionalTarget */{console.warn('THREE.Curve: .getPoint() not implemented.');return null;},// Get point at relative position in curve according to arc length
     // - u [0 .. 1]
     getPointAt:function getPointAt(u,optionalTarget){var t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget);},// Get sequence of points using getPoint( t )
     getPoints:function getPoints(divisions){if(divisions===undefined)divisions=5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPoint(d/divisions));}return points;},// Get sequence of points using getPointAt( u )
     getSpacedPoints:function getSpacedPoints(divisions){if(divisions===undefined)divisions=5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPointAt(d/divisions));}return points;},// Get total curve arc length
     getLength:function getLength(){var lengths=this.getLengths();return lengths[lengths.length-1];},// Get list of cumulative segment lengths
     getLengths:function getLengths(divisions){if(divisions===undefined)divisions=this.arcLengthDivisions;if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate){return this.cacheArcLengths;}this.needsUpdate=false;var cache=[];var current,last=this.getPoint(0);var sum=0;cache.push(0);for(var p=1;p<=divisions;p++){current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current;}this.cacheArcLengths=cache;return cache;// { sums: cache, sum: sum }; Sum is in the last element.
     },updateArcLengths:function updateArcLengths(){this.needsUpdate=true;this.getLengths();},// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
     getUtoTmapping:function getUtoTmapping(u,distance){var arcLengths=this.getLengths();var i=0;var il=arcLengths.length;var targetArcLength;// The targeted u distance value to get
     if(distance){targetArcLength=distance;}else{targetArcLength=u*arcLengths[il-1];}// binary search for the index with largest value smaller than target u distance
     var low=0,high=il-1,comparison;while(low<=high){i=Math.floor(low+(high-low)/2);// less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
     comparison=arcLengths[i]-targetArcLength;if(comparison<0){low=i+1;}else if(comparison>0){high=i-1;}else{high=i;break;// DONE
     }}i=high;if(arcLengths[i]===targetArcLength){return i/(il-1);}// we could get finer grain at lengths, or use simple interpolation between two points
     var lengthBefore=arcLengths[i];var lengthAfter=arcLengths[i+1];var segmentLength=lengthAfter-lengthBefore;// determine where we are between the 'before' and 'after' points
     var segmentFraction=(targetArcLength-lengthBefore)/segmentLength;// add that fractional amount to t
     var t=(i+segmentFraction)/(il-1);return t;},// Returns a unit vector tangent at t
     // In case any sub curve does not implement its tangent derivation,
     // 2 points a small delta apart will be used to find its gradient
     // which seems to give a reasonable approximation
     getTangent:function getTangent(t,optionalTarget){var delta=0.0001;var t1=t-delta;var t2=t+delta;// Capping in case of danger
     if(t1<0)t1=0;if(t2>1)t2=1;var pt1=this.getPoint(t1);var pt2=this.getPoint(t2);var tangent=optionalTarget||(pt1.isVector2?new Vector2():new Vector3());tangent.copy(pt2).sub(pt1).normalize();return tangent;},getTangentAt:function getTangentAt(u,optionalTarget){var t=this.getUtoTmapping(u);return this.getTangent(t,optionalTarget);},computeFrenetFrames:function computeFrenetFrames(segments,closed){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
     var normal=new Vector3();var tangents=[];var normals=[];var binormals=[];var vec=new Vector3();var mat=new Matrix4();// compute the tangent vectors for each segment on the curve
     for(var _i246=0;_i246<=segments;_i246++){var u=_i246/segments;tangents[_i246]=this.getTangentAt(u,new Vector3());tangents[_i246].normalize();}// select an initial normal vector perpendicular to the first tangent vector,
     // and in the direction of the minimum tangent xyz component
     normals[0]=new Vector3();binormals[0]=new Vector3();var min=Number.MAX_VALUE;var tx=Math.abs(tangents[0].x);var ty=Math.abs(tangents[0].y);var tz=Math.abs(tangents[0].z);if(tx<=min){min=tx;normal.set(1,0,0);}if(ty<=min){min=ty;normal.set(0,1,0);}if(tz<=min){normal.set(0,0,1);}vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve
     for(var _i247=1;_i247<=segments;_i247++){normals[_i247]=normals[_i247-1].clone();binormals[_i247]=binormals[_i247-1].clone();vec.crossVectors(tangents[_i247-1],tangents[_i247]);if(vec.length()>Number.EPSILON){vec.normalize();var theta=Math.acos(MathUtils.clamp(tangents[_i247-1].dot(tangents[_i247]),-1,1));// clamp for floating pt errors
     normals[_i247].applyMatrix4(mat.makeRotationAxis(vec,theta));}binormals[_i247].crossVectors(tangents[_i247],normals[_i247]);}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
     if(closed===true){var _theta=Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]),-1,1));_theta/=segments;if(tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0){_theta=-_theta;}for(var _i248=1;_i248<=segments;_i248++){// twist a little...
     normals[_i248].applyMatrix4(mat.makeRotationAxis(tangents[_i248],_theta*_i248));binormals[_i248].crossVectors(tangents[_i248],normals[_i248]);}}return{tangents:tangents,normals:normals,binormals:binormals};},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.arcLengthDivisions=source.arcLengthDivisions;return this;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'Curve',generator:'Curve.toJSON'}};data.arcLengthDivisions=this.arcLengthDivisions;data.type=this.type;return data;},fromJSON:function fromJSON(json){this.arcLengthDivisions=json.arcLengthDivisions;return this;}});function EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){Curve.call(this);this.type='EllipseCurve';this.aX=aX||0;this.aY=aY||0;this.xRadius=xRadius||1;this.yRadius=yRadius||1;this.aStartAngle=aStartAngle||0;this.aEndAngle=aEndAngle||2*Math.PI;this.aClockwise=aClockwise||false;this.aRotation=aRotation||0;}EllipseCurve.prototype=Object.create(Curve.prototype);EllipseCurve.prototype.constructor=EllipseCurve;EllipseCurve.prototype.isEllipseCurve=true;EllipseCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var twoPi=Math.PI*2;var deltaAngle=this.aEndAngle-this.aStartAngle;var samePoints=Math.abs(deltaAngle)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI
     while(deltaAngle<0){deltaAngle+=twoPi;}while(deltaAngle>twoPi){deltaAngle-=twoPi;}if(deltaAngle<Number.EPSILON){if(samePoints){deltaAngle=0;}else{deltaAngle=twoPi;}}if(this.aClockwise===true&&!samePoints){if(deltaAngle===twoPi){deltaAngle=-twoPi;}else{deltaAngle=deltaAngle-twoPi;}}var angle=this.aStartAngle+t*deltaAngle;var x=this.aX+this.xRadius*Math.cos(angle);var y=this.aY+this.yRadius*Math.sin(angle);if(this.aRotation!==0){var cos=Math.cos(this.aRotation);var sin=Math.sin(this.aRotation);var tx=x-this.aX;var ty=y-this.aY;// Rotate the point about the center of the ellipse.
     x=tx*cos-ty*sin+this.aX;y=tx*sin+ty*cos+this.aY;}return point.set(x,y);};EllipseCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.aX=source.aX;this.aY=source.aY;this.xRadius=source.xRadius;this.yRadius=source.yRadius;this.aStartAngle=source.aStartAngle;this.aEndAngle=source.aEndAngle;this.aClockwise=source.aClockwise;this.aRotation=source.aRotation;return this;};EllipseCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.aX=this.aX;data.aY=this.aY;data.xRadius=this.xRadius;data.yRadius=this.yRadius;data.aStartAngle=this.aStartAngle;data.aEndAngle=this.aEndAngle;data.aClockwise=this.aClockwise;data.aRotation=this.aRotation;return data;};EllipseCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.aX=json.aX;this.aY=json.aY;this.xRadius=json.xRadius;this.yRadius=json.yRadius;this.aStartAngle=json.aStartAngle;this.aEndAngle=json.aEndAngle;this.aClockwise=json.aClockwise;this.aRotation=json.aRotation;return this;};function ArcCurve(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){EllipseCurve.call(this,aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);this.type='ArcCurve';}ArcCurve.prototype=Object.create(EllipseCurve.prototype);ArcCurve.prototype.constructor=ArcCurve;ArcCurve.prototype.isArcCurve=true;/**
          * Centripetal CatmullRom Curve - which is useful for avoiding
          * cusps and self-intersections in non-uniform catmull rom curves.
          * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
          *
          * curve.type accepts centripetal(default), chordal and catmullrom
          * curve.tension is used for catmullrom which defaults to 0.5
          */ /*
         Based on an optimized c++ solution in
          - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
          - http://ideone.com/NoEbVM
     
         This CubicPoly class could be used for reusing some variables and calculations,
         but for three.js curve use, it could be possible inlined and flatten into a single function call
         which can be placed in CurveUtils.
         */function CubicPoly(){var c0=0,c1=0,c2=0,c3=0;/*
               * Compute coefficients for a cubic polynomial
               *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
               * such that
               *   p(0) = x0, p(1) = x1
               *  and
               *   p'(0) = t0, p'(1) = t1.
               */function init(x0,x1,t0,t1){c0=x0;c1=t0;c2=-3*x0+3*x1-2*t0-t1;c3=2*x0-2*x1+t0+t1;}return{initCatmullRom:function initCatmullRom(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1));},initNonuniformCatmullRom:function initNonuniformCatmullRom(x0,x1,x2,x3,dt0,dt1,dt2){// compute tangents when parameterized in [t1,t2]
     var t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1;var t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;// rescale tangents for parametrization in [0,1]
     t1*=dt1;t2*=dt1;init(x1,x2,t1,t2);},calc:function calc(t){var t2=t*t;var t3=t2*t;return c0+c1*t+c2*t2+c3*t3;}};}//
     var tmp=new Vector3();var px=new CubicPoly(),py=new CubicPoly(),pz=new CubicPoly();function CatmullRomCurve3(points,closed,curveType,tension){Curve.call(this);this.type='CatmullRomCurve3';this.points=points||[];this.closed=closed||false;this.curveType=curveType||'centripetal';this.tension=tension!==undefined?tension:0.5;}CatmullRomCurve3.prototype=Object.create(Curve.prototype);CatmullRomCurve3.prototype.constructor=CatmullRomCurve3;CatmullRomCurve3.prototype.isCatmullRomCurve3=true;CatmullRomCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var points=this.points;var l=points.length;var p=(l-(this.closed?0:1))*t;var intPoint=Math.floor(p);var weight=p-intPoint;if(this.closed){intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l;}else if(weight===0&&intPoint===l-1){intPoint=l-2;weight=1;}var p0,p3;// 4 points (p1 & p2 defined below)
     if(this.closed||intPoint>0){p0=points[(intPoint-1)%l];}else{// extrapolate first point
     tmp.subVectors(points[0],points[1]).add(points[0]);p0=tmp;}var p1=points[intPoint%l];var p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l){p3=points[(intPoint+2)%l];}else{// extrapolate last point
     tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]);p3=tmp;}if(this.curveType==='centripetal'||this.curveType==='chordal'){// init Centripetal / Chordal Catmull-Rom
     var pow=this.curveType==='chordal'?0.5:0.25;var dt0=Math.pow(p0.distanceToSquared(p1),pow);var dt1=Math.pow(p1.distanceToSquared(p2),pow);var dt2=Math.pow(p2.distanceToSquared(p3),pow);// safety check for repeated points
     if(dt1<1e-4)dt1=1.0;if(dt0<1e-4)dt0=dt1;if(dt2<1e-4)dt2=dt1;px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2);}else if(this.curveType==='catmullrom'){px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension);py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension);pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension);}point.set(px.calc(weight),py.calc(weight),pz.calc(weight));return point;};CatmullRomCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.points=[];for(var _i249=0,l=source.points.length;_i249<l;_i249++){var point=source.points[_i249];this.points.push(point.clone());}this.closed=source.closed;this.curveType=source.curveType;this.tension=source.tension;return this;};CatmullRomCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.points=[];for(var _i250=0,l=this.points.length;_i250<l;_i250++){var point=this.points[_i250];data.points.push(point.toArray());}data.closed=this.closed;data.curveType=this.curveType;data.tension=this.tension;return data;};CatmullRomCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.points=[];for(var _i251=0,l=json.points.length;_i251<l;_i251++){var point=json.points[_i251];this.points.push(new Vector3().fromArray(point));}this.closed=json.closed;this.curveType=json.curveType;this.tension=json.tension;return this;};/**
          * Bezier Curves formulas obtained from
          * http://en.wikipedia.org/wiki/Bézier_curve
          */function CatmullRom(t,p0,p1,p2,p3){var v0=(p2-p0)*0.5;var v1=(p3-p1)*0.5;var t2=t*t;var t3=t*t2;return(2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1;}//
     function QuadraticBezierP0(t,p){var k=1-t;return k*k*p;}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p;}function QuadraticBezierP2(t,p){return t*t*p;}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2);}//
     function CubicBezierP0(t,p){var k=1-t;return k*k*k*p;}function CubicBezierP1(t,p){var k=1-t;return 3*k*k*t*p;}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p;}function CubicBezierP3(t,p){return t*t*t*p;}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3);}function CubicBezierCurve(v0,v1,v2,v3){Curve.call(this);this.type='CubicBezierCurve';this.v0=v0||new Vector2();this.v1=v1||new Vector2();this.v2=v2||new Vector2();this.v3=v3||new Vector2();}CubicBezierCurve.prototype=Object.create(Curve.prototype);CubicBezierCurve.prototype.constructor=CubicBezierCurve;CubicBezierCurve.prototype.isCubicBezierCurve=true;CubicBezierCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y));return point;};CubicBezierCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;};CubicBezierCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;};CubicBezierCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;};function CubicBezierCurve3(v0,v1,v2,v3){Curve.call(this);this.type='CubicBezierCurve3';this.v0=v0||new Vector3();this.v1=v1||new Vector3();this.v2=v2||new Vector3();this.v3=v3||new Vector3();}CubicBezierCurve3.prototype=Object.create(Curve.prototype);CubicBezierCurve3.prototype.constructor=CubicBezierCurve3;CubicBezierCurve3.prototype.isCubicBezierCurve3=true;CubicBezierCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z));return point;};CubicBezierCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;};CubicBezierCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;};CubicBezierCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;};function LineCurve(v1,v2){Curve.call(this);this.type='LineCurve';this.v1=v1||new Vector2();this.v2=v2||new Vector2();}LineCurve.prototype=Object.create(Curve.prototype);LineCurve.prototype.constructor=LineCurve;LineCurve.prototype.isLineCurve=true;LineCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;};// Line curve is linear, so we can overwrite default getPointAt
     LineCurve.prototype.getPointAt=function(u,optionalTarget){return this.getPoint(u,optionalTarget);};LineCurve.prototype.getTangent=function(t,optionalTarget){var tangent=optionalTarget||new Vector2();tangent.copy(this.v2).sub(this.v1).normalize();return tangent;};LineCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};LineCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};LineCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function LineCurve3(v1,v2){Curve.call(this);this.type='LineCurve3';this.v1=v1||new Vector3();this.v2=v2||new Vector3();}LineCurve3.prototype=Object.create(Curve.prototype);LineCurve3.prototype.constructor=LineCurve3;LineCurve3.prototype.isLineCurve3=true;LineCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;};// Line curve is linear, so we can overwrite default getPointAt
     LineCurve3.prototype.getPointAt=function(u,optionalTarget){return this.getPoint(u,optionalTarget);};LineCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};LineCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};LineCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function QuadraticBezierCurve(v0,v1,v2){Curve.call(this);this.type='QuadraticBezierCurve';this.v0=v0||new Vector2();this.v1=v1||new Vector2();this.v2=v2||new Vector2();}QuadraticBezierCurve.prototype=Object.create(Curve.prototype);QuadraticBezierCurve.prototype.constructor=QuadraticBezierCurve;QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;QuadraticBezierCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y));return point;};QuadraticBezierCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};QuadraticBezierCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};QuadraticBezierCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function QuadraticBezierCurve3(v0,v1,v2){Curve.call(this);this.type='QuadraticBezierCurve3';this.v0=v0||new Vector3();this.v1=v1||new Vector3();this.v2=v2||new Vector3();}QuadraticBezierCurve3.prototype=Object.create(Curve.prototype);QuadraticBezierCurve3.prototype.constructor=QuadraticBezierCurve3;QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;QuadraticBezierCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z));return point;};QuadraticBezierCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};QuadraticBezierCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};QuadraticBezierCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function SplineCurve(points){Curve.call(this);this.type='SplineCurve';this.points=points||[];}SplineCurve.prototype=Object.create(Curve.prototype);SplineCurve.prototype.constructor=SplineCurve;SplineCurve.prototype.isSplineCurve=true;SplineCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var points=this.points;var p=(points.length-1)*t;var intPoint=Math.floor(p);var weight=p-intPoint;var p0=points[intPoint===0?intPoint:intPoint-1];var p1=points[intPoint];var p2=points[intPoint>points.length-2?points.length-1:intPoint+1];var p3=points[intPoint>points.length-3?points.length-1:intPoint+2];point.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y));return point;};SplineCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.points=[];for(var _i252=0,l=source.points.length;_i252<l;_i252++){var point=source.points[_i252];this.points.push(point.clone());}return this;};SplineCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.points=[];for(var _i253=0,l=this.points.length;_i253<l;_i253++){var point=this.points[_i253];data.points.push(point.toArray());}return data;};SplineCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.points=[];for(var _i254=0,l=json.points.length;_i254<l;_i254++){var point=json.points[_i254];this.points.push(new Vector2().fromArray(point));}return this;};var Curves=/*#__PURE__*/Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});/**************************************************************
          *	Curved Path - a curve path is simply a array of connected
          *  curves, but retains the api of a curve
          **************************************************************/function CurvePath(){Curve.call(this);this.type='CurvePath';this.curves=[];this.autoClose=false;// Automatically closes the path
     }CurvePath.prototype=Object.assign(Object.create(Curve.prototype),{constructor:CurvePath,add:function add(curve){this.curves.push(curve);},closePath:function closePath(){// Add a line curve if start and end of lines are not connected
     var startPoint=this.curves[0].getPoint(0);var endPoint=this.curves[this.curves.length-1].getPoint(1);if(!startPoint.equals(endPoint)){this.curves.push(new LineCurve(endPoint,startPoint));}},// To get accurate point with reference to
     // entire path distance at time t,
     // following has to be done:
     // 1. Length of each sub path have to be known
     // 2. Locate and identify type of curve
     // 3. Get t for the curve
     // 4. Return curve.getPointAt(t')
     getPoint:function getPoint(t){var d=t*this.getLength();var curveLengths=this.getCurveLengths();var i=0;// To think about boundaries points.
     while(i<curveLengths.length){if(curveLengths[i]>=d){var diff=curveLengths[i]-d;var curve=this.curves[i];var segmentLength=curve.getLength();var u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u);}i++;}return null;// loop where sum != 0, sum > d , sum+1 <d
     },// We cannot use the default THREE.Curve getPoint() with getLength() because in
     // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
     // getPoint() depends on getLength
     getLength:function getLength(){var lens=this.getCurveLengths();return lens[lens.length-1];},// cacheLengths must be recalculated.
     updateArcLengths:function updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths();},// Compute lengths and cache them
     // We cannot overwrite getLengths() because UtoT mapping uses it.
     getCurveLengths:function getCurveLengths(){// We use cache values if curves and cache array are same length
     if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths;}// Get length of sub-curve
     // Push sums into cached array
     var lengths=[];var sums=0;for(var _i255=0,l=this.curves.length;_i255<l;_i255++){sums+=this.curves[_i255].getLength();lengths.push(sums);}this.cacheLengths=lengths;return lengths;},getSpacedPoints:function getSpacedPoints(divisions){if(divisions===undefined)divisions=40;var points=[];for(var _i256=0;_i256<=divisions;_i256++){points.push(this.getPoint(_i256/divisions));}if(this.autoClose){points.push(points[0]);}return points;},getPoints:function getPoints(divisions){divisions=divisions||12;var points=[];var last;for(var _i257=0,curves=this.curves;_i257<curves.length;_i257++){var curve=curves[_i257];var resolution=curve&&curve.isEllipseCurve?divisions*2:curve&&(curve.isLineCurve||curve.isLineCurve3)?1:curve&&curve.isSplineCurve?divisions*curve.points.length:divisions;var pts=curve.getPoints(resolution);for(var j=0;j<pts.length;j++){var point=pts[j];if(last&&last.equals(point))continue;// ensures no consecutive points are duplicates
     points.push(point);last=point;}}if(this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])){points.push(points[0]);}return points;},copy:function copy(source){Curve.prototype.copy.call(this,source);this.curves=[];for(var _i258=0,l=source.curves.length;_i258<l;_i258++){var curve=source.curves[_i258];this.curves.push(curve.clone());}this.autoClose=source.autoClose;return this;},toJSON:function toJSON(){var data=Curve.prototype.toJSON.call(this);data.autoClose=this.autoClose;data.curves=[];for(var _i259=0,l=this.curves.length;_i259<l;_i259++){var curve=this.curves[_i259];data.curves.push(curve.toJSON());}return data;},fromJSON:function fromJSON(json){Curve.prototype.fromJSON.call(this,json);this.autoClose=json.autoClose;this.curves=[];for(var _i260=0,l=json.curves.length;_i260<l;_i260++){var curve=json.curves[_i260];this.curves.push(new Curves[curve.type]().fromJSON(curve));}return this;}});function Path(points){CurvePath.call(this);this.type='Path';this.currentPoint=new Vector2();if(points){this.setFromPoints(points);}}Path.prototype=Object.assign(Object.create(CurvePath.prototype),{constructor:Path,setFromPoints:function setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(var _i261=1,l=points.length;_i261<l;_i261++){this.lineTo(points[_i261].x,points[_i261].y);}return this;},moveTo:function moveTo(x,y){this.currentPoint.set(x,y);// TODO consider referencing vectors instead of copying?
     return this;},lineTo:function lineTo(x,y){var curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve);this.currentPoint.set(x,y);return this;},quadraticCurveTo:function quadraticCurveTo(aCPx,aCPy,aX,aY){var curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;},bezierCurveTo:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){var curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;},splineThru:function splineThru(pts/*Array of Vector*/){var npts=[this.currentPoint.clone()].concat(pts);var curve=new SplineCurve(npts);this.curves.push(curve);this.currentPoint.copy(pts[pts.length-1]);return this;},arc:function arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise);return this;},absarc:function absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);return this;},ellipse:function ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);return this;},absellipse:function absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){// if a previous curve is present, attempt to join
     var firstPoint=curve.getPoint(0);if(!firstPoint.equals(this.currentPoint)){this.lineTo(firstPoint.x,firstPoint.y);}}this.curves.push(curve);var lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint);return this;},copy:function copy(source){CurvePath.prototype.copy.call(this,source);this.currentPoint.copy(source.currentPoint);return this;},toJSON:function toJSON(){var data=CurvePath.prototype.toJSON.call(this);data.currentPoint=this.currentPoint.toArray();return data;},fromJSON:function fromJSON(json){CurvePath.prototype.fromJSON.call(this,json);this.currentPoint.fromArray(json.currentPoint);return this;}});function Shape(points){Path.call(this,points);this.uuid=MathUtils.generateUUID();this.type='Shape';this.holes=[];}Shape.prototype=Object.assign(Object.create(Path.prototype),{constructor:Shape,getPointsHoles:function getPointsHoles(divisions){var holesPts=[];for(var _i262=0,l=this.holes.length;_i262<l;_i262++){holesPts[_i262]=this.holes[_i262].getPoints(divisions);}return holesPts;},// get points of shape and holes (keypoints based on segments parameter)
     extractPoints:function extractPoints(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)};},copy:function copy(source){Path.prototype.copy.call(this,source);this.holes=[];for(var _i263=0,l=source.holes.length;_i263<l;_i263++){var hole=source.holes[_i263];this.holes.push(hole.clone());}return this;},toJSON:function toJSON(){var data=Path.prototype.toJSON.call(this);data.uuid=this.uuid;data.holes=[];for(var _i264=0,l=this.holes.length;_i264<l;_i264++){var hole=this.holes[_i264];data.holes.push(hole.toJSON());}return data;},fromJSON:function fromJSON(json){Path.prototype.fromJSON.call(this,json);this.uuid=json.uuid;this.holes=[];for(var _i265=0,l=json.holes.length;_i265<l;_i265++){var hole=json.holes[_i265];this.holes.push(new Path().fromJSON(hole));}return this;}});function Light(color,intensity){Object3D.call(this);this.type='Light';this.color=new Color(color);this.intensity=intensity!==undefined?intensity:1;}Light.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Light,isLight:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);this.color.copy(source.color);this.intensity=source.intensity;return this;},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.color=this.color.getHex();data.object.intensity=this.intensity;if(this.groundColor!==undefined)data.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)data.object.distance=this.distance;if(this.angle!==undefined)data.object.angle=this.angle;if(this.decay!==undefined)data.object.decay=this.decay;if(this.penumbra!==undefined)data.object.penumbra=this.penumbra;if(this.shadow!==undefined)data.object.shadow=this.shadow.toJSON();return data;}});function HemisphereLight(skyColor,groundColor,intensity){Light.call(this,skyColor,intensity);this.type='HemisphereLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.groundColor=new Color(groundColor);}HemisphereLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:HemisphereLight,isHemisphereLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.groundColor.copy(source.groundColor);return this;}});function LightShadow(camera){this.camera=camera;this.bias=0;this.normalBias=0;this.radius=1;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4();this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum();this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)];}Object.assign(LightShadow.prototype,{_projScreenMatrix:new Matrix4(),_lightPositionWorld:new Vector3(),_lookTarget:new Vector3(),getViewportCount:function getViewportCount(){return this._viewportCount;},getFrustum:function getFrustum(){return this._frustum;},updateMatrices:function updateMatrices(light){var shadowCamera=this.camera,shadowMatrix=this.matrix,projScreenMatrix=this._projScreenMatrix,lookTarget=this._lookTarget,lightPositionWorld=this._lightPositionWorld;lightPositionWorld.setFromMatrixPosition(light.matrixWorld);shadowCamera.position.copy(lightPositionWorld);lookTarget.setFromMatrixPosition(light.target.matrixWorld);shadowCamera.lookAt(lookTarget);shadowCamera.updateMatrixWorld();projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(projScreenMatrix);shadowMatrix.set(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);shadowMatrix.multiply(shadowCamera.projectionMatrix);shadowMatrix.multiply(shadowCamera.matrixWorldInverse);},getViewport:function getViewport(viewportIndex){return this._viewports[viewportIndex];},getFrameExtents:function getFrameExtents(){return this._frameExtents;},copy:function copy(source){this.camera=source.camera.clone();this.bias=source.bias;this.radius=source.radius;this.mapSize.copy(source.mapSize);return this;},clone:function clone(){return new this.constructor().copy(this);},toJSON:function toJSON(){var object={};if(this.bias!==0)object.bias=this.bias;if(this.normalBias!==0)object.normalBias=this.normalBias;if(this.radius!==1)object.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)object.mapSize=this.mapSize.toArray();object.camera=this.camera.toJSON(false).object;delete object.camera.matrix;return object;}});function SpotLightShadow(){LightShadow.call(this,new PerspectiveCamera(50,1,0.5,500));this.focus=1;}SpotLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:SpotLightShadow,isSpotLightShadow:true,updateMatrices:function updateMatrices(light){var camera=this.camera;var fov=MathUtils.RAD2DEG*2*light.angle*this.focus;var aspect=this.mapSize.width/this.mapSize.height;var far=light.distance||camera.far;if(fov!==camera.fov||aspect!==camera.aspect||far!==camera.far){camera.fov=fov;camera.aspect=aspect;camera.far=far;camera.updateProjectionMatrix();}LightShadow.prototype.updateMatrices.call(this,light);}});function SpotLight(color,intensity,distance,angle,penumbra,decay){Light.call(this,color,intensity);this.type='SpotLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();Object.defineProperty(this,'power',{get:function get(){// intensity = power per solid angle.
     // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
     return this.intensity*Math.PI;},set:function set(power){// intensity = power per solid angle.
     // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
     this.intensity=power/Math.PI;}});this.distance=distance!==undefined?distance:0;this.angle=angle!==undefined?angle:Math.PI/3;this.penumbra=penumbra!==undefined?penumbra:0;this.decay=decay!==undefined?decay:1;// for physically correct lights, should be 2.
     this.shadow=new SpotLightShadow();}SpotLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:SpotLight,isSpotLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.distance=source.distance;this.angle=source.angle;this.penumbra=source.penumbra;this.decay=source.decay;this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}});function PointLightShadow(){LightShadow.call(this,new PerspectiveCamera(90,1,0.5,500));this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[// These viewports map a cube-map onto a 2D texture with the
     // following orientation:
     //
     //  xzXZ
     //   y Y
     //
     // X - Positive x direction
     // x - Negative x direction
     // Y - Positive y direction
     // y - Negative y direction
     // Z - Positive z direction
     // z - Negative z direction
     // positive X
     new Vector4(2,1,1,1),// negative X
     new Vector4(0,1,1,1),// positive Z
     new Vector4(3,1,1,1),// negative Z
     new Vector4(1,1,1,1),// positive Y
     new Vector4(3,0,1,1),// negative Y
     new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)];}PointLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:PointLightShadow,isPointLightShadow:true,updateMatrices:function updateMatrices(light,viewportIndex){if(viewportIndex===undefined)viewportIndex=0;var camera=this.camera,shadowMatrix=this.matrix,lightPositionWorld=this._lightPositionWorld,lookTarget=this._lookTarget,projScreenMatrix=this._projScreenMatrix;lightPositionWorld.setFromMatrixPosition(light.matrixWorld);camera.position.copy(lightPositionWorld);lookTarget.copy(camera.position);lookTarget.add(this._cubeDirections[viewportIndex]);camera.up.copy(this._cubeUps[viewportIndex]);camera.lookAt(lookTarget);camera.updateMatrixWorld();shadowMatrix.makeTranslation(-lightPositionWorld.x,-lightPositionWorld.y,-lightPositionWorld.z);projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(projScreenMatrix);}});function PointLight(color,intensity,distance,decay){Light.call(this,color,intensity);this.type='PointLight';Object.defineProperty(this,'power',{get:function get(){// intensity = power per solid angle.
     // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
     return this.intensity*4*Math.PI;},set:function set(power){// intensity = power per solid angle.
     // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
     this.intensity=power/(4*Math.PI);}});this.distance=distance!==undefined?distance:0;this.decay=decay!==undefined?decay:1;// for physically correct lights, should be 2.
     this.shadow=new PointLightShadow();}PointLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:PointLight,isPointLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.distance=source.distance;this.decay=source.decay;this.shadow=source.shadow.clone();return this;}});function OrthographicCamera(left,right,top,bottom,near,far){Camera.call(this);this.type='OrthographicCamera';this.zoom=1;this.view=null;this.left=left!==undefined?left:-1;this.right=right!==undefined?right:1;this.top=top!==undefined?top:1;this.bottom=bottom!==undefined?bottom:-1;this.near=near!==undefined?near:0.1;this.far=far!==undefined?far:2000;this.updateProjectionMatrix();}OrthographicCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:OrthographicCamera,isOrthographicCamera:true,copy:function copy(source,recursive){Camera.prototype.copy.call(this,source,recursive);this.left=source.left;this.right=source.right;this.top=source.top;this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;this.view=source.view===null?null:Object.assign({},source.view);return this;},setViewOffset:function setViewOffset(fullWidth,fullHeight,x,y,width,height){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();},clearViewOffset:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();},updateProjectionMatrix:function updateProjectionMatrix(){var dx=(this.right-this.left)/(2*this.zoom);var dy=(this.top-this.bottom)/(2*this.zoom);var cx=(this.right+this.left)/2;var cy=(this.top+this.bottom)/2;var left=cx-dx;var right=cx+dx;var top=cy+dy;var bottom=cy-dy;if(this.view!==null&&this.view.enabled){var scaleW=(this.right-this.left)/this.view.fullWidth/this.zoom;var scaleH=(this.top-this.bottom)/this.view.fullHeight/this.zoom;left+=scaleW*this.view.offsetX;right=left+scaleW*this.view.width;top-=scaleH*this.view.offsetY;bottom=top-scaleH*this.view.height;}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.zoom=this.zoom;data.object.left=this.left;data.object.right=this.right;data.object.top=this.top;data.object.bottom=this.bottom;data.object.near=this.near;data.object.far=this.far;if(this.view!==null)data.object.view=Object.assign({},this.view);return data;}});function DirectionalLightShadow(){LightShadow.call(this,new OrthographicCamera(-5,5,5,-5,0.5,500));}DirectionalLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:DirectionalLightShadow,isDirectionalLightShadow:true,updateMatrices:function updateMatrices(light){LightShadow.prototype.updateMatrices.call(this,light);}});function DirectionalLight(color,intensity){Light.call(this,color,intensity);this.type='DirectionalLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();this.shadow=new DirectionalLightShadow();}DirectionalLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:DirectionalLight,isDirectionalLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}});function AmbientLight(color,intensity){Light.call(this,color,intensity);this.type='AmbientLight';}AmbientLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:AmbientLight,isAmbientLight:true});function RectAreaLight(color,intensity,width,height){Light.call(this,color,intensity);this.type='RectAreaLight';this.width=width!==undefined?width:10;this.height=height!==undefined?height:10;}RectAreaLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:RectAreaLight,isRectAreaLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.width=source.width;this.height=source.height;return this;},toJSON:function toJSON(meta){var data=Light.prototype.toJSON.call(this,meta);data.object.width=this.width;data.object.height=this.height;return data;}});/**
          * Primary reference:
          *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
          *
          * Secondary reference:
          *   https://www.ppsloan.org/publications/StupidSH36.pdf
          */ // 3-band SH defined by 9 coefficients
     var SphericalHarmonics3=/*#__PURE__*/function(){function SphericalHarmonics3(){_classCallCheck(this,SphericalHarmonics3);Object.defineProperty(this,'isSphericalHarmonics3',{value:true});this.coefficients=[];for(var _i266=0;_i266<9;_i266++){this.coefficients.push(new Vector3());}}_createClass(SphericalHarmonics3,[{key:"set",value:function set(coefficients){for(var _i267=0;_i267<9;_i267++){this.coefficients[_i267].copy(coefficients[_i267]);}return this;}},{key:"zero",value:function zero(){for(var _i268=0;_i268<9;_i268++){this.coefficients[_i268].set(0,0,0);}return this;}// get the radiance in the direction of the normal
     // target is a Vector3
     },{key:"getAt",value:function getAt(normal,target){// normal is assumed to be unit length
     var x=normal.x,y=normal.y,z=normal.z;var coeff=this.coefficients;// band 0
     target.copy(coeff[0]).multiplyScalar(0.282095);// band 1
     target.addScaledVector(coeff[1],0.488603*y);target.addScaledVector(coeff[2],0.488603*z);target.addScaledVector(coeff[3],0.488603*x);// band 2
     target.addScaledVector(coeff[4],1.092548*(x*y));target.addScaledVector(coeff[5],1.092548*(y*z));target.addScaledVector(coeff[6],0.315392*(3.0*z*z-1.0));target.addScaledVector(coeff[7],1.092548*(x*z));target.addScaledVector(coeff[8],0.546274*(x*x-y*y));return target;}// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
     // target is a Vector3
     // https://graphics.stanford.edu/papers/envmap/envmap.pdf
     },{key:"getIrradianceAt",value:function getIrradianceAt(normal,target){// normal is assumed to be unit length
     var x=normal.x,y=normal.y,z=normal.z;var coeff=this.coefficients;// band 0
     target.copy(coeff[0]).multiplyScalar(0.886227);// π * 0.282095
     // band 1
     target.addScaledVector(coeff[1],2.0*0.511664*y);// ( 2 * π / 3 ) * 0.488603
     target.addScaledVector(coeff[2],2.0*0.511664*z);target.addScaledVector(coeff[3],2.0*0.511664*x);// band 2
     target.addScaledVector(coeff[4],2.0*0.429043*x*y);// ( π / 4 ) * 1.092548
     target.addScaledVector(coeff[5],2.0*0.429043*y*z);target.addScaledVector(coeff[6],0.743125*z*z-0.247708);// ( π / 4 ) * 0.315392 * 3
     target.addScaledVector(coeff[7],2.0*0.429043*x*z);target.addScaledVector(coeff[8],0.429043*(x*x-y*y));// ( π / 4 ) * 0.546274
     return target;}},{key:"add",value:function add(sh){for(var _i269=0;_i269<9;_i269++){this.coefficients[_i269].add(sh.coefficients[_i269]);}return this;}},{key:"addScaledSH",value:function addScaledSH(sh,s){for(var _i270=0;_i270<9;_i270++){this.coefficients[_i270].addScaledVector(sh.coefficients[_i270],s);}return this;}},{key:"scale",value:function scale(s){for(var _i271=0;_i271<9;_i271++){this.coefficients[_i271].multiplyScalar(s);}return this;}},{key:"lerp",value:function lerp(sh,alpha){for(var _i272=0;_i272<9;_i272++){this.coefficients[_i272].lerp(sh.coefficients[_i272],alpha);}return this;}},{key:"equals",value:function equals(sh){for(var _i273=0;_i273<9;_i273++){if(!this.coefficients[_i273].equals(sh.coefficients[_i273])){return false;}}return true;}},{key:"copy",value:function copy(sh){return this.set(sh.coefficients);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"fromArray",value:function fromArray(array,offset){if(offset===undefined)offset=0;var coefficients=this.coefficients;for(var _i274=0;_i274<9;_i274++){coefficients[_i274].fromArray(array,offset+_i274*3);}return this;}},{key:"toArray",value:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var coefficients=this.coefficients;for(var _i275=0;_i275<9;_i275++){coefficients[_i275].toArray(array,offset+_i275*3);}return array;}// evaluate the basis functions
     // shBasis is an Array[ 9 ]
     }],[{key:"getBasisAt",value:function getBasisAt(normal,shBasis){// normal is assumed to be unit length
     var x=normal.x,y=normal.y,z=normal.z;// band 0
     shBasis[0]=0.282095;// band 1
     shBasis[1]=0.488603*y;shBasis[2]=0.488603*z;shBasis[3]=0.488603*x;// band 2
     shBasis[4]=1.092548*x*y;shBasis[5]=1.092548*y*z;shBasis[6]=0.315392*(3*z*z-1);shBasis[7]=1.092548*x*z;shBasis[8]=0.546274*(x*x-y*y);}}]);return SphericalHarmonics3;}();function LightProbe(sh,intensity){Light.call(this,undefined,intensity);this.type='LightProbe';this.sh=sh!==undefined?sh:new SphericalHarmonics3();}LightProbe.prototype=Object.assign(Object.create(Light.prototype),{constructor:LightProbe,isLightProbe:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.sh.copy(source.sh);return this;},fromJSON:function fromJSON(json){this.intensity=json.intensity;// TODO: Move this bit to Light.fromJSON();
     this.sh.fromArray(json.sh);return this;},toJSON:function toJSON(meta){var data=Light.prototype.toJSON.call(this,meta);data.object.sh=this.sh.toArray();return data;}});function MaterialLoader(manager){Loader.call(this,manager);this.textures={};}MaterialLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:MaterialLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);},parse:function parse(json){var textures=this.textures;function getTexture(name){if(textures[name]===undefined){console.warn('THREE.MaterialLoader: Undefined texture',name);}return textures[name];}var material=new Materials[json.type]();if(json.uuid!==undefined)material.uuid=json.uuid;if(json.name!==undefined)material.name=json.name;if(json.color!==undefined)material.color.setHex(json.color);if(json.roughness!==undefined)material.roughness=json.roughness;if(json.metalness!==undefined)material.metalness=json.metalness;if(json.sheen!==undefined)material.sheen=new Color().setHex(json.sheen);if(json.emissive!==undefined)material.emissive.setHex(json.emissive);if(json.specular!==undefined)material.specular.setHex(json.specular);if(json.shininess!==undefined)material.shininess=json.shininess;if(json.clearcoat!==undefined)material.clearcoat=json.clearcoat;if(json.clearcoatRoughness!==undefined)material.clearcoatRoughness=json.clearcoatRoughness;if(json.fog!==undefined)material.fog=json.fog;if(json.flatShading!==undefined)material.flatShading=json.flatShading;if(json.blending!==undefined)material.blending=json.blending;if(json.combine!==undefined)material.combine=json.combine;if(json.side!==undefined)material.side=json.side;if(json.opacity!==undefined)material.opacity=json.opacity;if(json.transparent!==undefined)material.transparent=json.transparent;if(json.alphaTest!==undefined)material.alphaTest=json.alphaTest;if(json.depthTest!==undefined)material.depthTest=json.depthTest;if(json.depthWrite!==undefined)material.depthWrite=json.depthWrite;if(json.colorWrite!==undefined)material.colorWrite=json.colorWrite;if(json.stencilWrite!==undefined)material.stencilWrite=json.stencilWrite;if(json.stencilWriteMask!==undefined)material.stencilWriteMask=json.stencilWriteMask;if(json.stencilFunc!==undefined)material.stencilFunc=json.stencilFunc;if(json.stencilRef!==undefined)material.stencilRef=json.stencilRef;if(json.stencilFuncMask!==undefined)material.stencilFuncMask=json.stencilFuncMask;if(json.stencilFail!==undefined)material.stencilFail=json.stencilFail;if(json.stencilZFail!==undefined)material.stencilZFail=json.stencilZFail;if(json.stencilZPass!==undefined)material.stencilZPass=json.stencilZPass;if(json.wireframe!==undefined)material.wireframe=json.wireframe;if(json.wireframeLinewidth!==undefined)material.wireframeLinewidth=json.wireframeLinewidth;if(json.wireframeLinecap!==undefined)material.wireframeLinecap=json.wireframeLinecap;if(json.wireframeLinejoin!==undefined)material.wireframeLinejoin=json.wireframeLinejoin;if(json.rotation!==undefined)material.rotation=json.rotation;if(json.linewidth!==1)material.linewidth=json.linewidth;if(json.dashSize!==undefined)material.dashSize=json.dashSize;if(json.gapSize!==undefined)material.gapSize=json.gapSize;if(json.scale!==undefined)material.scale=json.scale;if(json.polygonOffset!==undefined)material.polygonOffset=json.polygonOffset;if(json.polygonOffsetFactor!==undefined)material.polygonOffsetFactor=json.polygonOffsetFactor;if(json.polygonOffsetUnits!==undefined)material.polygonOffsetUnits=json.polygonOffsetUnits;if(json.skinning!==undefined)material.skinning=json.skinning;if(json.morphTargets!==undefined)material.morphTargets=json.morphTargets;if(json.morphNormals!==undefined)material.morphNormals=json.morphNormals;if(json.dithering!==undefined)material.dithering=json.dithering;if(json.vertexTangents!==undefined)material.vertexTangents=json.vertexTangents;if(json.visible!==undefined)material.visible=json.visible;if(json.toneMapped!==undefined)material.toneMapped=json.toneMapped;if(json.userData!==undefined)material.userData=json.userData;if(json.vertexColors!==undefined){if(typeof json.vertexColors==='number'){material.vertexColors=json.vertexColors>0?true:false;}else{material.vertexColors=json.vertexColors;}}// Shader Material
     if(json.uniforms!==undefined){for(var name in json.uniforms){var uniform=json.uniforms[name];material.uniforms[name]={};switch(uniform.type){case't':material.uniforms[name].value=getTexture(uniform.value);break;case'c':material.uniforms[name].value=new Color().setHex(uniform.value);break;case'v2':material.uniforms[name].value=new Vector2().fromArray(uniform.value);break;case'v3':material.uniforms[name].value=new Vector3().fromArray(uniform.value);break;case'v4':material.uniforms[name].value=new Vector4().fromArray(uniform.value);break;case'm3':material.uniforms[name].value=new Matrix3().fromArray(uniform.value);break;case'm4':material.uniforms[name].value=new Matrix4().fromArray(uniform.value);break;default:material.uniforms[name].value=uniform.value;}}}if(json.defines!==undefined)material.defines=json.defines;if(json.vertexShader!==undefined)material.vertexShader=json.vertexShader;if(json.fragmentShader!==undefined)material.fragmentShader=json.fragmentShader;if(json.extensions!==undefined){for(var key in json.extensions){material.extensions[key]=json.extensions[key];}}// Deprecated
     if(json.shading!==undefined)material.flatShading=json.shading===1;// THREE.FlatShading
     // for PointsMaterial
     if(json.size!==undefined)material.size=json.size;if(json.sizeAttenuation!==undefined)material.sizeAttenuation=json.sizeAttenuation;// maps
     if(json.map!==undefined)material.map=getTexture(json.map);if(json.matcap!==undefined)material.matcap=getTexture(json.matcap);if(json.alphaMap!==undefined)material.alphaMap=getTexture(json.alphaMap);if(json.bumpMap!==undefined)material.bumpMap=getTexture(json.bumpMap);if(json.bumpScale!==undefined)material.bumpScale=json.bumpScale;if(json.normalMap!==undefined)material.normalMap=getTexture(json.normalMap);if(json.normalMapType!==undefined)material.normalMapType=json.normalMapType;if(json.normalScale!==undefined){var normalScale=json.normalScale;if(Array.isArray(normalScale)===false){// Blender exporter used to export a scalar. See #7459
     normalScale=[normalScale,normalScale];}material.normalScale=new Vector2().fromArray(normalScale);}if(json.displacementMap!==undefined)material.displacementMap=getTexture(json.displacementMap);if(json.displacementScale!==undefined)material.displacementScale=json.displacementScale;if(json.displacementBias!==undefined)material.displacementBias=json.displacementBias;if(json.roughnessMap!==undefined)material.roughnessMap=getTexture(json.roughnessMap);if(json.metalnessMap!==undefined)material.metalnessMap=getTexture(json.metalnessMap);if(json.emissiveMap!==undefined)material.emissiveMap=getTexture(json.emissiveMap);if(json.emissiveIntensity!==undefined)material.emissiveIntensity=json.emissiveIntensity;if(json.specularMap!==undefined)material.specularMap=getTexture(json.specularMap);if(json.envMap!==undefined)material.envMap=getTexture(json.envMap);if(json.envMapIntensity!==undefined)material.envMapIntensity=json.envMapIntensity;if(json.reflectivity!==undefined)material.reflectivity=json.reflectivity;if(json.refractionRatio!==undefined)material.refractionRatio=json.refractionRatio;if(json.lightMap!==undefined)material.lightMap=getTexture(json.lightMap);if(json.lightMapIntensity!==undefined)material.lightMapIntensity=json.lightMapIntensity;if(json.aoMap!==undefined)material.aoMap=getTexture(json.aoMap);if(json.aoMapIntensity!==undefined)material.aoMapIntensity=json.aoMapIntensity;if(json.gradientMap!==undefined)material.gradientMap=getTexture(json.gradientMap);if(json.clearcoatMap!==undefined)material.clearcoatMap=getTexture(json.clearcoatMap);if(json.clearcoatRoughnessMap!==undefined)material.clearcoatRoughnessMap=getTexture(json.clearcoatRoughnessMap);if(json.clearcoatNormalMap!==undefined)material.clearcoatNormalMap=getTexture(json.clearcoatNormalMap);if(json.clearcoatNormalScale!==undefined)material.clearcoatNormalScale=new Vector2().fromArray(json.clearcoatNormalScale);if(json.transmission!==undefined)material.transmission=json.transmission;if(json.transmissionMap!==undefined)material.transmissionMap=getTexture(json.transmissionMap);return material;},setTextures:function setTextures(value){this.textures=value;return this;}});var LoaderUtils={decodeText:function decodeText(array){if(typeof TextDecoder!=='undefined'){return new TextDecoder().decode(array);}// Avoid the String.fromCharCode.apply(null, array) shortcut, which
     // throws a "maximum call stack size exceeded" error for large arrays.
     var s='';for(var _i276=0,il=array.length;_i276<il;_i276++){// Implicitly assumes little-endian.
     s+=String.fromCharCode(array[_i276]);}try{// merges multi-byte utf-8 characters.
     return decodeURIComponent(escape(s));}catch(e){// see #16358
     return s;}},extractUrlBase:function extractUrlBase(url){var index=url.lastIndexOf('/');if(index===-1)return'./';return url.substr(0,index+1);}};function InstancedBufferGeometry(){BufferGeometry.call(this);this.type='InstancedBufferGeometry';this.instanceCount=Infinity;}InstancedBufferGeometry.prototype=Object.assign(Object.create(BufferGeometry.prototype),{constructor:InstancedBufferGeometry,isInstancedBufferGeometry:true,copy:function copy(source){BufferGeometry.prototype.copy.call(this,source);this.instanceCount=source.instanceCount;return this;},clone:function clone(){return new this.constructor().copy(this);},toJSON:function toJSON(){var data=BufferGeometry.prototype.toJSON.call(this);data.instanceCount=this.instanceCount;data.isInstancedBufferGeometry=true;return data;}});function InstancedBufferAttribute(array,itemSize,normalized,meshPerAttribute){if(typeof normalized==='number'){meshPerAttribute=normalized;normalized=false;console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');}BufferAttribute.call(this,array,itemSize,normalized);this.meshPerAttribute=meshPerAttribute||1;}InstancedBufferAttribute.prototype=Object.assign(Object.create(BufferAttribute.prototype),{constructor:InstancedBufferAttribute,isInstancedBufferAttribute:true,copy:function copy(source){BufferAttribute.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this;},toJSON:function toJSON(){var data=BufferAttribute.prototype.toJSON.call(this);data.meshPerAttribute=this.meshPerAttribute;data.isInstancedBufferAttribute=true;return data;}});function BufferGeometryLoader(manager){Loader.call(this,manager);}BufferGeometryLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:BufferGeometryLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);},parse:function parse(json){var interleavedBufferMap={};var arrayBufferMap={};function getInterleavedBuffer(json,uuid){if(interleavedBufferMap[uuid]!==undefined)return interleavedBufferMap[uuid];var interleavedBuffers=json.interleavedBuffers;var interleavedBuffer=interleavedBuffers[uuid];var buffer=getArrayBuffer(json,interleavedBuffer.buffer);var array=new TYPED_ARRAYS[interleavedBuffer.type](buffer);var ib=new InterleavedBuffer(array,interleavedBuffer.stride);ib.uuid=interleavedBuffer.uuid;interleavedBufferMap[uuid]=ib;return ib;}function getArrayBuffer(json,uuid){if(arrayBufferMap[uuid]!==undefined)return arrayBufferMap[uuid];var arrayBuffers=json.arrayBuffers;var arrayBuffer=arrayBuffers[uuid];var ab=new Uint32Array(arrayBuffer).buffer;arrayBufferMap[uuid]=ab;return ab;}var geometry=json.isInstancedBufferGeometry?new InstancedBufferGeometry():new BufferGeometry();var index=json.data.index;if(index!==undefined){var typedArray=new TYPED_ARRAYS[index.type](index.array);geometry.setIndex(new BufferAttribute(typedArray,1));}var attributes=json.data.attributes;for(var key in attributes){var attribute=attributes[key];var bufferAttribute=void 0;if(attribute.isInterleavedBufferAttribute){var interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized);}else{var _typedArray=new TYPED_ARRAYS[attribute.type](attribute.array);var bufferAttributeConstr=attribute.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;bufferAttribute=new bufferAttributeConstr(_typedArray,attribute.itemSize,attribute.normalized);}if(attribute.name!==undefined)bufferAttribute.name=attribute.name;geometry.setAttribute(key,bufferAttribute);}var morphAttributes=json.data.morphAttributes;if(morphAttributes){for(var _key3 in morphAttributes){var attributeArray=morphAttributes[_key3];var array=[];for(var _i277=0,il=attributeArray.length;_i277<il;_i277++){var _attribute9=attributeArray[_i277];var _bufferAttribute=void 0;if(_attribute9.isInterleavedBufferAttribute){var _interleavedBuffer=getInterleavedBuffer(json.data,_attribute9.data);_bufferAttribute=new InterleavedBufferAttribute(_interleavedBuffer,_attribute9.itemSize,_attribute9.offset,_attribute9.normalized);}else{var _typedArray2=new TYPED_ARRAYS[_attribute9.type](_attribute9.array);_bufferAttribute=new BufferAttribute(_typedArray2,_attribute9.itemSize,_attribute9.normalized);}if(_attribute9.name!==undefined)_bufferAttribute.name=_attribute9.name;array.push(_bufferAttribute);}geometry.morphAttributes[_key3]=array;}}var morphTargetsRelative=json.data.morphTargetsRelative;if(morphTargetsRelative){geometry.morphTargetsRelative=true;}var groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(groups!==undefined){for(var _i278=0,n=groups.length;_i278!==n;++_i278){var group=groups[_i278];geometry.addGroup(group.start,group.count,group.materialIndex);}}var boundingSphere=json.data.boundingSphere;if(boundingSphere!==undefined){var center=new Vector3();if(boundingSphere.center!==undefined){center.fromArray(boundingSphere.center);}geometry.boundingSphere=new Sphere(center,boundingSphere.radius);}if(json.name)geometry.name=json.name;if(json.userData)geometry.userData=json.userData;return geometry;}});var TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,// Workaround for IE11 pre KB2929437. See #11440
     Uint8ClampedArray:typeof Uint8ClampedArray!=='undefined'?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function ImageBitmapLoader(manager){if(typeof createImageBitmap==='undefined'){console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');}if(typeof fetch==='undefined'){console.warn('THREE.ImageBitmapLoader: fetch() not supported.');}Loader.call(this,manager);this.options={premultiplyAlpha:'none'};}ImageBitmapLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageBitmapLoader,isImageBitmapLoader:true,setOptions:function setOptions(options){this.options=options;return this;},load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}var fetchOptions={};fetchOptions.credentials=this.crossOrigin==='anonymous'?'same-origin':'include';fetch(url,fetchOptions).then(function(res){return res.blob();}).then(function(blob){return createImageBitmap(blob,scope.options);}).then(function(imageBitmap){Cache.add(url,imageBitmap);if(onLoad)onLoad(imageBitmap);scope.manager.itemEnd(url);}).catch(function(e){if(onError)onError(e);scope.manager.itemError(url);scope.manager.itemEnd(url);});scope.manager.itemStart(url);}});function ShapePath(){this.type='ShapePath';this.color=new Color();this.subPaths=[];this.currentPath=null;}Object.assign(ShapePath.prototype,{moveTo:function moveTo(x,y){this.currentPath=new Path();this.subPaths.push(this.currentPath);this.currentPath.moveTo(x,y);return this;},lineTo:function lineTo(x,y){this.currentPath.lineTo(x,y);return this;},quadraticCurveTo:function quadraticCurveTo(aCPx,aCPy,aX,aY){this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY);return this;},bezierCurveTo:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY);return this;},splineThru:function splineThru(pts){this.currentPath.splineThru(pts);return this;},toShapes:function toShapes(isCCW,noHoles){function toShapesNoHoles(inSubpaths){var shapes=[];for(var _i279=0,l=inSubpaths.length;_i279<l;_i279++){var _tmpPath=inSubpaths[_i279];var _tmpShape=new Shape();_tmpShape.curves=_tmpPath.curves;shapes.push(_tmpShape);}return shapes;}function isPointInsidePolygon(inPt,inPolygon){var polyLen=inPolygon.length;// inPt on polygon contour => immediate success    or
     // toggling of inside/outside at every single! intersection point of an edge
     //  with the horizontal line through inPt, left of inPt
     //  not counting lowerY endpoints of edges and whole edges on that line
     var inside=false;for(var p=polyLen-1,q=0;q<polyLen;p=q++){var edgeLowPt=inPolygon[p];var edgeHighPt=inPolygon[q];var edgeDx=edgeHighPt.x-edgeLowPt.x;var edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){// not parallel
     if(edgeDy<0){edgeLowPt=inPolygon[q];edgeDx=-edgeDx;edgeHighPt=inPolygon[p];edgeDy=-edgeDy;}if(inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return true;// inPt is on contour ?
     // continue;				// no intersection or edgeLowPt => doesn't count !!!
     }else{var perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(perpEdge===0)return true;// inPt is on contour ?
     if(perpEdge<0)continue;inside=!inside;// true intersection left of inPt
     }}else{// parallel or collinear
     if(inPt.y!==edgeLowPt.y)continue;// parallel
     // edge lies on the same horizontal line as inPt
     if(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return true;// inPt: Point on contour !
     // continue;
     }}return inside;}var isClockWise=ShapeUtils.isClockWise;var subPaths=this.subPaths;if(subPaths.length===0)return[];if(noHoles===true)return toShapesNoHoles(subPaths);var solid,tmpPath,tmpShape;var shapes=[];if(subPaths.length===1){tmpPath=subPaths[0];tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);return shapes;}var holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;// console.log("Holes first", holesFirst);
     var betterShapeHoles=[];var newShapes=[];var newShapeHoles=[];var mainIdx=0;var tmpPoints;newShapes[mainIdx]=undefined;newShapeHoles[mainIdx]=[];for(var _i280=0,l=subPaths.length;_i280<l;_i280++){tmpPath=subPaths[_i280];tmpPoints=tmpPath.getPoints();solid=isClockWise(tmpPoints);solid=isCCW?!solid:solid;if(solid){if(!holesFirst&&newShapes[mainIdx])mainIdx++;newShapes[mainIdx]={s:new Shape(),p:tmpPoints};newShapes[mainIdx].s.curves=tmpPath.curves;if(holesFirst)mainIdx++;newShapeHoles[mainIdx]=[];//console.log('cw', i);
     }else{newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});//console.log('ccw', i);
     }}// only Holes? -> probably all Shapes with wrong orientation
     if(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){var ambiguous=false;var toChange=[];for(var sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){betterShapeHoles[sIdx]=[];}for(var _sIdx=0,_sLen=newShapes.length;_sIdx<_sLen;_sIdx++){var sho=newShapeHoles[_sIdx];for(var hIdx=0;hIdx<sho.length;hIdx++){var ho=sho[hIdx];var hole_unassigned=true;for(var s2Idx=0;s2Idx<newShapes.length;s2Idx++){if(isPointInsidePolygon(ho.p,newShapes[s2Idx].p)){if(_sIdx!==s2Idx)toChange.push({froms:_sIdx,tos:s2Idx,hole:hIdx});if(hole_unassigned){hole_unassigned=false;betterShapeHoles[s2Idx].push(ho);}else{ambiguous=true;}}}if(hole_unassigned){betterShapeHoles[_sIdx].push(ho);}}}// console.log("ambiguous: ", ambiguous);
     if(toChange.length>0){// console.log("to change: ", toChange);
     if(!ambiguous)newShapeHoles=betterShapeHoles;}}var tmpHoles;for(var _i281=0,il=newShapes.length;_i281<il;_i281++){tmpShape=newShapes[_i281].s;shapes.push(tmpShape);tmpHoles=newShapeHoles[_i281];for(var j=0,jl=tmpHoles.length;j<jl;j++){tmpShape.holes.push(tmpHoles[j].h);}}//console.log("shape", shapes);
     return shapes;}});function Font(data){this.type='Font';this.data=data;}Object.assign(Font.prototype,{isFont:true,generateShapes:function generateShapes(text,size){if(size===undefined)size=100;var shapes=[];var paths=createPaths(text,size,this.data);for(var p=0,pl=paths.length;p<pl;p++){Array.prototype.push.apply(shapes,paths[p].toShapes());}return shapes;}});function createPaths(text,size,data){var chars=Array.from?Array.from(text):String(text).split('');// workaround for IE11, see #13988
     var scale=size/data.resolution;var line_height=(data.boundingBox.yMax-data.boundingBox.yMin+data.underlineThickness)*scale;var paths=[];var offsetX=0,offsetY=0;for(var _i282=0;_i282<chars.length;_i282++){var char=chars[_i282];if(char==='\n'){offsetX=0;offsetY-=line_height;}else{var ret=createPath(char,scale,offsetX,offsetY,data);offsetX+=ret.offsetX;paths.push(ret.path);}}return paths;}function createPath(char,scale,offsetX,offsetY,data){var glyph=data.glyphs[char]||data.glyphs['?'];if(!glyph){console.error('THREE.Font: character "'+char+'" does not exists in font family '+data.familyName+'.');return;}var path=new ShapePath();var x,y,cpx,cpy,cpx1,cpy1,cpx2,cpy2;if(glyph.o){var outline=glyph._cachedOutline||(glyph._cachedOutline=glyph.o.split(' '));for(var _i283=0,l=outline.length;_i283<l;){var action=outline[_i283++];switch(action){case'm':// moveTo
     x=outline[_i283++]*scale+offsetX;y=outline[_i283++]*scale+offsetY;path.moveTo(x,y);break;case'l':// lineTo
     x=outline[_i283++]*scale+offsetX;y=outline[_i283++]*scale+offsetY;path.lineTo(x,y);break;case'q':// quadraticCurveTo
     cpx=outline[_i283++]*scale+offsetX;cpy=outline[_i283++]*scale+offsetY;cpx1=outline[_i283++]*scale+offsetX;cpy1=outline[_i283++]*scale+offsetY;path.quadraticCurveTo(cpx1,cpy1,cpx,cpy);break;case'b':// bezierCurveTo
     cpx=outline[_i283++]*scale+offsetX;cpy=outline[_i283++]*scale+offsetY;cpx1=outline[_i283++]*scale+offsetX;cpy1=outline[_i283++]*scale+offsetY;cpx2=outline[_i283++]*scale+offsetX;cpy2=outline[_i283++]*scale+offsetY;path.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,cpx,cpy);break;}}}return{offsetX:glyph.ha*scale,path:path};}function FontLoader(manager){Loader.call(this,manager);}FontLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FontLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){var json;try{json=JSON.parse(text);}catch(e){console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');json=JSON.parse(text.substring(65,text.length-2));}var font=scope.parse(json);if(onLoad)onLoad(font);},onProgress,onError);},parse:function parse(json){return new Font(json);}});var _context;var AudioContext={getContext:function getContext(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)();}return _context;},setContext:function setContext(value){_context=value;}};function AudioLoader(manager){Loader.call(this,manager);}AudioLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:AudioLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(buffer){try{// Create a copy of the buffer. The `decodeAudioData` method
     // detaches the buffer when complete, preventing reuse.
     var bufferCopy=buffer.slice(0);var context=AudioContext.getContext();context.decodeAudioData(bufferCopy,function(audioBuffer){onLoad(audioBuffer);});}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}});function HemisphereLightProbe(skyColor,groundColor,intensity){LightProbe.call(this,undefined,intensity);var color1=new Color().set(skyColor);var color2=new Color().set(groundColor);var sky=new Vector3(color1.r,color1.g,color1.b);var ground=new Vector3(color2.r,color2.g,color2.b);// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
     var c0=Math.sqrt(Math.PI);var c1=c0*Math.sqrt(0.75);this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);}HemisphereLightProbe.prototype=Object.assign(Object.create(LightProbe.prototype),{constructor:HemisphereLightProbe,isHemisphereLightProbe:true,copy:function copy(source){// modifying colors not currently supported
     LightProbe.prototype.copy.call(this,source);return this;},toJSON:function toJSON(meta){var data=LightProbe.prototype.toJSON.call(this,meta);// data.sh = this.sh.toArray(); // todo
     return data;}});function AmbientLightProbe(color,intensity){LightProbe.call(this,undefined,intensity);var color1=new Color().set(color);// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
     this.sh.coefficients[0].set(color1.r,color1.g,color1.b).multiplyScalar(2*Math.sqrt(Math.PI));}AmbientLightProbe.prototype=Object.assign(Object.create(LightProbe.prototype),{constructor:AmbientLightProbe,isAmbientLightProbe:true,copy:function copy(source){// modifying color not currently supported
     LightProbe.prototype.copy.call(this,source);return this;},toJSON:function toJSON(meta){var data=LightProbe.prototype.toJSON.call(this,meta);// data.sh = this.sh.toArray(); // todo
     return data;}});var _eyeRight=new Matrix4();var _eyeLeft=new Matrix4();function StereoCamera(){this.type='StereoCamera';this.aspect=1;this.eyeSep=0.064;this.cameraL=new PerspectiveCamera();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null};}Object.assign(StereoCamera.prototype,{update:function update(camera){var cache=this._cache;var needsUpdate=cache.focus!==camera.focus||cache.fov!==camera.fov||cache.aspect!==camera.aspect*this.aspect||cache.near!==camera.near||cache.far!==camera.far||cache.zoom!==camera.zoom||cache.eyeSep!==this.eyeSep;if(needsUpdate){cache.focus=camera.focus;cache.fov=camera.fov;cache.aspect=camera.aspect*this.aspect;cache.near=camera.near;cache.far=camera.far;cache.zoom=camera.zoom;cache.eyeSep=this.eyeSep;// Off-axis stereoscopic effect based on
     // http://paulbourke.net/stereographics/stereorender/
     var projectionMatrix=camera.projectionMatrix.clone();var eyeSepHalf=cache.eyeSep/2;var eyeSepOnProjection=eyeSepHalf*cache.near/cache.focus;var ymax=cache.near*Math.tan(MathUtils.DEG2RAD*cache.fov*0.5)/cache.zoom;var xmin,xmax;// translate xOffset
     _eyeLeft.elements[12]=-eyeSepHalf;_eyeRight.elements[12]=eyeSepHalf;// for left eye
     xmin=-ymax*cache.aspect+eyeSepOnProjection;xmax=ymax*cache.aspect+eyeSepOnProjection;projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraL.projectionMatrix.copy(projectionMatrix);// for right eye
     xmin=-ymax*cache.aspect-eyeSepOnProjection;xmax=ymax*cache.aspect-eyeSepOnProjection;projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraR.projectionMatrix.copy(projectionMatrix);}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);}});var Audio=/*#__PURE__*/function(_Object3D2){_inherits(Audio,_Object3D2);var _super9=_createSuper(Audio);function Audio(listener){var _this16;_classCallCheck(this,Audio);_this16=_super9.call(this);_this16.type='Audio';_this16.listener=listener;_this16.context=listener.context;_this16.gain=_this16.context.createGain();_this16.gain.connect(listener.getInput());_this16.autoplay=false;_this16.buffer=null;_this16.detune=0;_this16.loop=false;_this16.loopStart=0;_this16.loopEnd=0;_this16.offset=0;_this16.duration=undefined;_this16.playbackRate=1;_this16.isPlaying=false;_this16.hasPlaybackControl=true;_this16.source=null;_this16.sourceType='empty';_this16._startedAt=0;_this16._progress=0;_this16._connected=false;_this16.filters=[];return _this16;}_createClass(Audio,[{key:"getOutput",value:function getOutput(){return this.gain;}},{key:"setNodeSource",value:function setNodeSource(audioNode){this.hasPlaybackControl=false;this.sourceType='audioNode';this.source=audioNode;this.connect();return this;}},{key:"setMediaElementSource",value:function setMediaElementSource(mediaElement){this.hasPlaybackControl=false;this.sourceType='mediaNode';this.source=this.context.createMediaElementSource(mediaElement);this.connect();return this;}},{key:"setMediaStreamSource",value:function setMediaStreamSource(mediaStream){this.hasPlaybackControl=false;this.sourceType='mediaStreamNode';this.source=this.context.createMediaStreamSource(mediaStream);this.connect();return this;}},{key:"setBuffer",value:function setBuffer(audioBuffer){this.buffer=audioBuffer;this.sourceType='buffer';if(this.autoplay)this.play();return this;}},{key:"play",value:function play(delay){if(delay===undefined)delay=0;if(this.isPlaying===true){console.warn('THREE.Audio: Audio is already playing.');return;}if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._startedAt=this.context.currentTime+delay;var source=this.context.createBufferSource();source.buffer=this.buffer;source.loop=this.loop;source.loopStart=this.loopStart;source.loopEnd=this.loopEnd;source.onended=this.onEnded.bind(this);source.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=source;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect();}},{key:"pause",value:function pause(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}if(this.isPlaying===true){// update current progress
     this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){// ensure _progress does not exceed duration with looped audios
     this._progress=this._progress%(this.duration||this.buffer.duration);}this.source.stop();this.source.onended=null;this.isPlaying=false;}return this;}},{key:"stop",value:function stop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._progress=0;this.source.stop();this.source.onended=null;this.isPlaying=false;return this;}},{key:"connect",value:function connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var _i284=1,l=this.filters.length;_i284<l;_i284++){this.filters[_i284-1].connect(this.filters[_i284]);}this.filters[this.filters.length-1].connect(this.getOutput());}else{this.source.connect(this.getOutput());}this._connected=true;return this;}},{key:"disconnect",value:function disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var _i285=1,l=this.filters.length;_i285<l;_i285++){this.filters[_i285-1].disconnect(this.filters[_i285]);}this.filters[this.filters.length-1].disconnect(this.getOutput());}else{this.source.disconnect(this.getOutput());}this._connected=false;return this;}},{key:"getFilters",value:function getFilters(){return this.filters;}},{key:"setFilters",value:function setFilters(value){if(!value)value=[];if(this._connected===true){this.disconnect();this.filters=value;this.connect();}else{this.filters=value;}return this;}},{key:"setDetune",value:function setDetune(value){this.detune=value;if(this.source.detune===undefined)return;// only set detune when available
     if(this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01);}return this;}},{key:"getDetune",value:function getDetune(){return this.detune;}},{key:"getFilter",value:function getFilter(){return this.getFilters()[0];}},{key:"setFilter",value:function setFilter(filter){return this.setFilters(filter?[filter]:[]);}},{key:"setPlaybackRate",value:function setPlaybackRate(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.playbackRate=value;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,0.01);}return this;}},{key:"getPlaybackRate",value:function getPlaybackRate(){return this.playbackRate;}},{key:"onEnded",value:function onEnded(){this.isPlaying=false;}},{key:"getLoop",value:function getLoop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return false;}return this.loop;}},{key:"setLoop",value:function setLoop(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.loop=value;if(this.isPlaying===true){this.source.loop=this.loop;}return this;}},{key:"setLoopStart",value:function setLoopStart(value){this.loopStart=value;return this;}},{key:"setLoopEnd",value:function setLoopEnd(value){this.loopEnd=value;return this;}},{key:"getVolume",value:function getVolume(){return this.gain.gain.value;}},{key:"setVolume",value:function setVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}}]);return Audio;}(Object3D);function PropertyMixer(binding,typeName,valueSize){this.binding=binding;this.valueSize=valueSize;var mixFunction,mixFunctionAdditive,setIdentity;// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
     //
     // interpolators can use .buffer as their .result
     // the data then goes to 'incoming'
     //
     // 'accu0' and 'accu1' are used frame-interleaved for
     // the cumulative result and are compared to detect
     // changes
     //
     // 'orig' stores the original state of the property
     //
     // 'add' is used for additive cumulative results
     //
     // 'work' is optional and is only present for quaternion types. It is used
     // to store intermediate quaternion multiplication results
     switch(typeName){case'quaternion':mixFunction=this._slerp;mixFunctionAdditive=this._slerpAdditive;setIdentity=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(valueSize*6);this._workIndex=5;break;case'string':case'bool':mixFunction=this._select;// Use the regular mix function and for additive on these types,
     // additive is not relevant for non-numeric types
     mixFunctionAdditive=this._select;setIdentity=this._setAdditiveIdentityOther;this.buffer=new Array(valueSize*5);break;default:mixFunction=this._lerp;mixFunctionAdditive=this._lerpAdditive;setIdentity=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(valueSize*5);}this._mixBufferRegion=mixFunction;this._mixBufferRegionAdditive=mixFunctionAdditive;this._setIdentity=setIdentity;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0;}Object.assign(PropertyMixer.prototype,{// accumulate data in the 'incoming' region into 'accu<i>'
     accumulate:function accumulate(accuIndex,weight){// note: happily accumulating nothing when weight = 0, the caller knows
     // the weight and shouldn't have made the call in the first place
     var buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride;var currentWeight=this.cumulativeWeight;if(currentWeight===0){// accuN := incoming * weight
     for(var _i286=0;_i286!==stride;++_i286){buffer[offset+_i286]=buffer[_i286];}currentWeight=weight;}else{// accuN := accuN + incoming * weight
     currentWeight+=weight;var mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride);}this.cumulativeWeight=currentWeight;},// accumulate data in the 'incoming' region into 'add'
     accumulateAdditive:function accumulateAdditive(weight){var buffer=this.buffer,stride=this.valueSize,offset=stride*this._addIndex;if(this.cumulativeWeightAdditive===0){// add = identity
     this._setIdentity();}// add := add + incoming * weight
     this._mixBufferRegionAdditive(buffer,offset,0,weight,stride);this.cumulativeWeightAdditive+=weight;},// apply the state of 'accu<i>' to the binding when accus differ
     apply:function apply(accuIndex){var stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,weightAdditive=this.cumulativeWeightAdditive,binding=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(weight<1){// accuN := accuN + original * ( 1 - cumulativeWeight )
     var originalValueOffset=stride*this._origIndex;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride);}if(weightAdditive>0){// accuN := accuN + additive accuN
     this._mixBufferRegionAdditive(buffer,offset,this._addIndex*stride,1,stride);}for(var _i287=stride,e=stride+stride;_i287!==e;++_i287){if(buffer[_i287]!==buffer[_i287+stride]){// value has changed -> update scene graph
     binding.setValue(buffer,offset);break;}}},// remember the state of the bound property and copy it to both accus
     saveOriginalState:function saveOriginalState(){var binding=this.binding;var buffer=this.buffer,stride=this.valueSize,originalValueOffset=stride*this._origIndex;binding.getValue(buffer,originalValueOffset);// accu[0..1] := orig -- initially detect changes against the original
     for(var _i288=stride,e=originalValueOffset;_i288!==e;++_i288){buffer[_i288]=buffer[originalValueOffset+_i288%stride];}// Add to identity for additive
     this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;},// apply the state previously taken via 'saveOriginalState' to the binding
     restoreOriginalState:function restoreOriginalState(){var originalValueOffset=this.valueSize*3;this.binding.setValue(this.buffer,originalValueOffset);},_setAdditiveIdentityNumeric:function _setAdditiveIdentityNumeric(){var startIndex=this._addIndex*this.valueSize;var endIndex=startIndex+this.valueSize;for(var _i289=startIndex;_i289<endIndex;_i289++){this.buffer[_i289]=0;}},_setAdditiveIdentityQuaternion:function _setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1;},_setAdditiveIdentityOther:function _setAdditiveIdentityOther(){var startIndex=this._origIndex*this.valueSize;var targetIndex=this._addIndex*this.valueSize;for(var _i290=0;_i290<this.valueSize;_i290++){this.buffer[targetIndex+_i290]=this.buffer[startIndex+_i290];}},// mix functions
     _select:function _select(buffer,dstOffset,srcOffset,t,stride){if(t>=0.5){for(var _i291=0;_i291!==stride;++_i291){buffer[dstOffset+_i291]=buffer[srcOffset+_i291];}}},_slerp:function _slerp(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t);},_slerpAdditive:function _slerpAdditive(buffer,dstOffset,srcOffset,t,stride){var workOffset=this._workIndex*stride;// Store result in intermediate buffer offset
     Quaternion.multiplyQuaternionsFlat(buffer,workOffset,buffer,dstOffset,buffer,srcOffset);// Slerp to the intermediate result
     Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,workOffset,t);},_lerp:function _lerp(buffer,dstOffset,srcOffset,t,stride){var s=1-t;for(var _i292=0;_i292!==stride;++_i292){var j=dstOffset+_i292;buffer[j]=buffer[j]*s+buffer[srcOffset+_i292]*t;}},_lerpAdditive:function _lerpAdditive(buffer,dstOffset,srcOffset,t,stride){for(var _i293=0;_i293!==stride;++_i293){var j=dstOffset+_i293;buffer[j]=buffer[j]+buffer[srcOffset+_i293]*t;}}});// Characters [].:/ are reserved for track binding syntax.
     var _RESERVED_CHARS_RE='\\[\\]\\.:\\/';var _reservedRe=new RegExp('['+_RESERVED_CHARS_RE+']','g');// Attempts to allow node names from any language. ES5's `\w` regexp matches
     // only latin characters, and the unicode \p{L} is not yet supported. So
     // instead, we exclude reserved characters and match everything else.
     var _wordChar='[^'+_RESERVED_CHARS_RE+']';var _wordCharOrDot='[^'+_RESERVED_CHARS_RE.replace('\\.','')+']';// Parent directories, delimited by '/' or ':'. Currently unused, but must
     // be matched to parse the rest of the track name.
     var _directoryRe=/((?:WC+[\/:])*)/.source.replace('WC',_wordChar);// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
     var _nodeRe=/(WCOD+)?/.source.replace('WCOD',_wordCharOrDot);// Object on target node, and accessor. May not contain reserved
     // characters. Accessor may contain any character except closing bracket.
     var _objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC',_wordChar);// Property and accessor. May not contain reserved characters. Accessor may
     // contain any non-bracket characters.
     var _propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace('WC',_wordChar);var _trackRe=new RegExp(''+'^'+_directoryRe+_nodeRe+_objectRe+_propertyRe+'$');var _supportedObjectNames=['material','materials','bones'];function Composite(targetGroup,path,optionalParsedPath){var parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup;this._bindings=targetGroup.subscribe_(path,parsedPath);}Object.assign(Composite.prototype,{getValue:function getValue(array,offset){this.bind();// bind all binding
     var firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];// and only call .getValue on the first
     if(binding!==undefined)binding.getValue(array,offset);},setValue:function setValue(array,offset){var bindings=this._bindings;for(var _i294=this._targetGroup.nCachedObjects_,n=bindings.length;_i294!==n;++_i294){bindings[_i294].setValue(array,offset);}},bind:function bind(){var bindings=this._bindings;for(var _i295=this._targetGroup.nCachedObjects_,n=bindings.length;_i295!==n;++_i295){bindings[_i295].bind();}},unbind:function unbind(){var bindings=this._bindings;for(var _i296=this._targetGroup.nCachedObjects_,n=bindings.length;_i296!==n;++_i296){bindings[_i296].unbind();}}});function PropertyBinding(rootNode,path,parsedPath){this.path=path;this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path);this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode;this.rootNode=rootNode;}Object.assign(PropertyBinding,{Composite:Composite,create:function create(root,path,parsedPath){if(!(root&&root.isAnimationObjectGroup)){return new PropertyBinding(root,path,parsedPath);}else{return new PropertyBinding.Composite(root,path,parsedPath);}},/**
               * Replaces spaces with underscores and removes unsupported characters from
               * node names, to ensure compatibility with parseTrackName().
               *
               * @param {string} name Node name to be sanitized.
               * @return {string}
               */sanitizeNodeName:function sanitizeNodeName(name){return name.replace(/\s/g,'_').replace(_reservedRe,'');},parseTrackName:function parseTrackName(trackName){var matches=_trackRe.exec(trackName);if(!matches){throw new Error('PropertyBinding: Cannot parse trackName: '+trackName);}var results={// directoryName: matches[ 1 ], // (tschw) currently unused
     nodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],// required
     propertyIndex:matches[6]};var lastDot=results.nodeName&&results.nodeName.lastIndexOf('.');if(lastDot!==undefined&&lastDot!==-1){var objectName=results.nodeName.substring(lastDot+1);// Object names must be checked against an allowlist. Otherwise, there
     // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
     // 'bar' could be the objectName, or part of a nodeName (which can
     // include '.' characters).
     if(_supportedObjectNames.indexOf(objectName)!==-1){results.nodeName=results.nodeName.substring(0,lastDot);results.objectName=objectName;}}if(results.propertyName===null||results.propertyName.length===0){throw new Error('PropertyBinding: can not parse propertyName from trackName: '+trackName);}return results;},findNode:function findNode(root,nodeName){if(!nodeName||nodeName===""||nodeName==="."||nodeName===-1||nodeName===root.name||nodeName===root.uuid){return root;}// search into skeleton bones.
     if(root.skeleton){var bone=root.skeleton.getBoneByName(nodeName);if(bone!==undefined){return bone;}}// search into node subtree.
     if(root.children){var searchNodeSubtree=function searchNodeSubtree(children){for(var _i297=0;_i297<children.length;_i297++){var childNode=children[_i297];if(childNode.name===nodeName||childNode.uuid===nodeName){return childNode;}var result=searchNodeSubtree(childNode.children);if(result)return result;}return null;};var subTreeNode=searchNodeSubtree(root.children);if(subTreeNode){return subTreeNode;}}return null;}});Object.assign(PropertyBinding.prototype,{// prototype, continued
     // these are used to "bind" a nonexistent property
     _getValue_unavailable:function _getValue_unavailable(){},_setValue_unavailable:function _setValue_unavailable(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function getValue_direct(buffer,offset){buffer[offset]=this.node[this.propertyName];},function getValue_array(buffer,offset){var source=this.resolvedProperty;for(var _i298=0,n=source.length;_i298!==n;++_i298){buffer[offset++]=source[_i298];}},function getValue_arrayElement(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex];},function getValue_toArray(buffer,offset){this.resolvedProperty.toArray(buffer,offset);}],SetterByBindingTypeAndVersioning:[[// Direct
     function setValue_direct(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];},function setValue_direct_setNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.needsUpdate=true;},function setValue_direct_setMatrixWorldNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}],[// EntireArray
     function setValue_array(buffer,offset){var dest=this.resolvedProperty;for(var _i299=0,n=dest.length;_i299!==n;++_i299){dest[_i299]=buffer[offset++];}},function setValue_array_setNeedsUpdate(buffer,offset){var dest=this.resolvedProperty;for(var _i300=0,n=dest.length;_i300!==n;++_i300){dest[_i300]=buffer[offset++];}this.targetObject.needsUpdate=true;},function setValue_array_setMatrixWorldNeedsUpdate(buffer,offset){var dest=this.resolvedProperty;for(var _i301=0,n=dest.length;_i301!==n;++_i301){dest[_i301]=buffer[offset++];}this.targetObject.matrixWorldNeedsUpdate=true;}],[// ArrayElement
     function setValue_arrayElement(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];},function setValue_arrayElement_setNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.needsUpdate=true;},function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}],[// HasToFromArray
     function setValue_fromArray(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);},function setValue_fromArray_setNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.needsUpdate=true;},function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.matrixWorldNeedsUpdate=true;}]],getValue:function getValue_unbound(targetArray,offset){this.bind();this.getValue(targetArray,offset);// Note: This class uses a State pattern on a per-method basis:
     // 'bind' sets 'this.getValue' / 'setValue' and shadows the
     // prototype version of these methods with one that represents
     // the bound state. When the property is not found, the methods
     // become no-ops.
     },setValue:function getValue_unbound(sourceArray,offset){this.bind();this.setValue(sourceArray,offset);},// create getter / setter pair for a property in the scene graph
     bind:function bind(){var targetObject=this.node;var parsedPath=this.parsedPath;var objectName=parsedPath.objectName;var propertyName=parsedPath.propertyName;var propertyIndex=parsedPath.propertyIndex;if(!targetObject){targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode;this.node=targetObject;}// set fail state so we can just 'return' on error
     this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;// ensure there is a value node
     if(!targetObject){console.error('THREE.PropertyBinding: Trying to update node for track: '+this.path+' but it wasn\'t found.');return;}if(objectName){var objectIndex=parsedPath.objectIndex;// special cases were we need to reach deeper into the hierarchy to get the face materials....
     switch(objectName){case'materials':if(!targetObject.material){console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.',this);return;}if(!targetObject.material.materials){console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',this);return;}targetObject=targetObject.material.materials;break;case'bones':if(!targetObject.skeleton){console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',this);return;}// potential future optimization: skip this if propertyIndex is already an integer
     // and convert the integer string to a true integer.
     targetObject=targetObject.skeleton.bones;// support resolving morphTarget names into indices.
     for(var _i302=0;_i302<targetObject.length;_i302++){if(targetObject[_i302].name===objectIndex){objectIndex=_i302;break;}}break;default:if(targetObject[objectName]===undefined){console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.',this);return;}targetObject=targetObject[objectName];}if(objectIndex!==undefined){if(targetObject[objectIndex]===undefined){console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',this,targetObject);return;}targetObject=targetObject[objectIndex];}}// resolve property
     var nodeProperty=targetObject[propertyName];if(nodeProperty===undefined){var nodeName=parsedPath.nodeName;console.error('THREE.PropertyBinding: Trying to update property for track: '+nodeName+'.'+propertyName+' but it wasn\'t found.',targetObject);return;}// determine versioning scheme
     var versioning=this.Versioning.None;this.targetObject=targetObject;if(targetObject.needsUpdate!==undefined){// material
     versioning=this.Versioning.NeedsUpdate;}else if(targetObject.matrixWorldNeedsUpdate!==undefined){// node transform
     versioning=this.Versioning.MatrixWorldNeedsUpdate;}// determine how the property gets bound
     var bindingType=this.BindingType.Direct;if(propertyIndex!==undefined){// access a sub element of the property array (only primitives are supported right now)
     if(propertyName==="morphTargetInfluences"){// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
     // support resolving morphTarget names into indices.
     if(!targetObject.geometry){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',this);return;}if(targetObject.geometry.isBufferGeometry){if(!targetObject.geometry.morphAttributes){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',this);return;}if(targetObject.morphTargetDictionary[propertyIndex]!==undefined){propertyIndex=targetObject.morphTargetDictionary[propertyIndex];}}else{console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.',this);return;}}bindingType=this.BindingType.ArrayElement;this.resolvedProperty=nodeProperty;this.propertyIndex=propertyIndex;}else if(nodeProperty.fromArray!==undefined&&nodeProperty.toArray!==undefined){// must use copy for Object3D.Euler/Quaternion
     bindingType=this.BindingType.HasFromToArray;this.resolvedProperty=nodeProperty;}else if(Array.isArray(nodeProperty)){bindingType=this.BindingType.EntireArray;this.resolvedProperty=nodeProperty;}else{this.propertyName=propertyName;}// select getter / setter
     this.getValue=this.GetterByBindingType[bindingType];this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning];},unbind:function unbind(){this.node=null;// back to the prototype version of getValue / setValue
     // note: avoiding to mutate the shape of 'this' via 'delete'
     this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}});// DECLARE ALIAS AFTER assign prototype
     Object.assign(PropertyBinding.prototype,{// initial state of these methods that calls 'bind'
     _getValue_unbound:PropertyBinding.prototype.getValue,_setValue_unbound:PropertyBinding.prototype.setValue});/**
          *
          * A group of objects that receives a shared animation state.
          *
          * Usage:
          *
          *  - Add objects you would otherwise pass as 'root' to the
          *    constructor or the .clipAction method of AnimationMixer.
          *
          *  - Instead pass this object as 'root'.
          *
          *  - You can also add and remove objects later when the mixer
          *    is running.
          *
          * Note:
          *
          *    Objects of this class appear as one object to the mixer,
          *    so cache control of the individual objects must be done
          *    on the group.
          *
          * Limitation:
          *
          *  - The animated properties must be compatible among the
          *    all objects in the group.
          *
          *  - A single property can either be controlled through a
          *    target group or directly, but not both.
          */function AnimationObjectGroup(){this.uuid=MathUtils.generateUUID();// cached objects followed by the active ones
     this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;// threshold
     // note: read by PropertyBinding.Composite
     var indices={};this._indicesByUUID=indices;// for bookkeeping
     for(var _i303=0,n=arguments.length;_i303!==n;++_i303){indices[arguments[_i303].uuid]=_i303;}this._paths=[];// inside: string
     this._parsedPaths=[];// inside: { we don't care, here }
     this._bindings=[];// inside: Array< PropertyBinding >
     this._bindingsIndicesByPath={};// inside: indices in these arrays
     var scope=this;this.stats={objects:{get total(){return scope._objects.length;},get inUse(){return this.total-scope.nCachedObjects_;}},get bindingsPerObject(){return scope._bindings.length;}};}Object.assign(AnimationObjectGroup.prototype,{isAnimationObjectGroup:true,add:function add(){var objects=this._objects,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length;var knownObject=undefined,nObjects=objects.length,nCachedObjects=this.nCachedObjects_;for(var _i304=0,n=arguments.length;_i304!==n;++_i304){var object=arguments[_i304],uuid=object.uuid;var index=indicesByUUID[uuid];if(index===undefined){// unknown object -> add it to the ACTIVE region
     index=nObjects++;indicesByUUID[uuid]=index;objects.push(object);// accounting is done, now do the same for all bindings
     for(var j=0,m=nBindings;j!==m;++j){bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]));}}else if(index<nCachedObjects){knownObject=objects[index];// move existing object to the ACTIVE region
     var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;indicesByUUID[uuid]=firstActiveIndex;objects[firstActiveIndex]=object;// accounting is done, now do the same for all bindings
     for(var _j17=0,_m3=nBindings;_j17!==_m3;++_j17){var bindingsForPath=bindings[_j17],lastCached=bindingsForPath[firstActiveIndex];var binding=bindingsForPath[index];bindingsForPath[index]=lastCached;if(binding===undefined){// since we do not bother to create new bindings
     // for objects that are cached, the binding may
     // or may not exist
     binding=new PropertyBinding(object,paths[_j17],parsedPaths[_j17]);}bindingsForPath[firstActiveIndex]=binding;}}else if(objects[index]!==knownObject){console.error('THREE.AnimationObjectGroup: Different objects with the same UUID '+'detected. Clean the caches or recreate your infrastructure when reloading scenes.');}// else the object is already where we want it to be
     }// for arguments
     this.nCachedObjects_=nCachedObjects;},remove:function remove(){var objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;var nCachedObjects=this.nCachedObjects_;for(var _i305=0,n=arguments.length;_i305!==n;++_i305){var object=arguments[_i305],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined&&index>=nCachedObjects){// move existing object into the CACHED region
     var lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index;objects[index]=firstActiveObject;indicesByUUID[uuid]=lastCachedIndex;objects[lastCachedIndex]=object;// accounting is done, now do the same for all bindings
     for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive;bindingsForPath[lastCachedIndex]=binding;}}}// for arguments
     this.nCachedObjects_=nCachedObjects;},// remove & forget
     uncache:function uncache(){var objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;var nCachedObjects=this.nCachedObjects_,nObjects=objects.length;for(var _i306=0,n=arguments.length;_i306!==n;++_i306){var object=arguments[_i306],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined){delete indicesByUUID[uuid];if(index<nCachedObjects){// object is cached, shrink the CACHED region
     var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];// last cached object takes this object's place
     indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;// last object goes to the activated slot and pop
     indicesByUUID[lastObject.uuid]=firstActiveIndex;objects[firstActiveIndex]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
     for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached;bindingsForPath[firstActiveIndex]=last;bindingsForPath.pop();}}else{// object is active, just swap with the last and pop
     var _lastIndex=--nObjects,_lastObject=objects[_lastIndex];indicesByUUID[_lastObject.uuid]=index;objects[index]=_lastObject;objects.pop();// accounting is done, now do the same for all bindings
     for(var _j18=0,_m4=nBindings;_j18!==_m4;++_j18){var _bindingsForPath=bindings[_j18];_bindingsForPath[index]=_bindingsForPath[_lastIndex];_bindingsForPath.pop();}}// cached or active
     }// if object is known
     }// for arguments
     this.nCachedObjects_=nCachedObjects;},// Internal interface used by befriended PropertyBinding.Composite:
     subscribe_:function subscribe_(path,parsedPath){// returns an array of bindings for the given path that is changed
     // according to the contained objects in the group
     var indicesByPath=this._bindingsIndicesByPath;var index=indicesByPath[path];var bindings=this._bindings;if(index!==undefined)return bindings[index];var paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length;indicesByPath[path]=index;paths.push(path);parsedPaths.push(parsedPath);bindings.push(bindingsForPath);for(var _i307=nCachedObjects,n=objects.length;_i307!==n;++_i307){var object=objects[_i307];bindingsForPath[_i307]=new PropertyBinding(object,path,parsedPath);}return bindingsForPath;},unsubscribe_:function unsubscribe_(path){// tells the group to forget about a property path and no longer
     // update the array previously obtained with 'subscribe_'
     var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(index!==undefined){var paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index;bindings[index]=lastBindings;bindings.pop();parsedPaths[index]=parsedPaths[lastBindingsIndex];parsedPaths.pop();paths[index]=paths[lastBindingsIndex];paths.pop();}}});var AnimationAction=/*#__PURE__*/function(){function AnimationAction(mixer,clip,localRoot,blendMode){_classCallCheck(this,AnimationAction);this._mixer=mixer;this._clip=clip;this._localRoot=localRoot||null;this.blendMode=blendMode||clip.blendMode;var tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks);var interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(var _i308=0;_i308!==nTracks;++_i308){var interpolant=tracks[_i308].createInterpolant(null);interpolants[_i308]=interpolant;interpolant.settings=interpolantSettings;}this._interpolantSettings=interpolantSettings;this._interpolants=interpolants;// bound by the mixer
     // inside: PropertyMixer (managed by the mixer)
     this._propertyBindings=new Array(nTracks);this._cacheIndex=null;// for the memory manager
     this._byClipCacheIndex=null;// for the memory manager
     this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;// global mixer time when the action is to be started
     // it's set back to 'null' upon start of the action
     this._startTime=null;// scaled local time of the action
     // gets clamped or wrapped to 0..clip.duration according to loop
     this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;// no. of repetitions when looping
     this.paused=false;// true -> zero effective time scale
     this.enabled=true;// false -> zero effective weight
     this.clampWhenFinished=false;// keep feeding the last frame?
     this.zeroSlopeAtStart=true;// for smooth interpolation w/o separate
     this.zeroSlopeAtEnd=true;// clips for start, loop and end
     }// State & Scheduling
     _createClass(AnimationAction,[{key:"play",value:function play(){this._mixer._activateAction(this);return this;}},{key:"stop",value:function stop(){this._mixer._deactivateAction(this);return this.reset();}},{key:"reset",value:function reset(){this.paused=false;this.enabled=true;this.time=0;// restart clip
     this._loopCount=-1;// forget previous loops
     this._startTime=null;// forget scheduling
     return this.stopFading().stopWarping();}},{key:"isRunning",value:function isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this);}// return true when play has been called
     },{key:"isScheduled",value:function isScheduled(){return this._mixer._isActiveAction(this);}},{key:"startAt",value:function startAt(time){this._startTime=time;return this;}},{key:"setLoop",value:function setLoop(mode,repetitions){this.loop=mode;this.repetitions=repetitions;return this;}// Weight
     // set the weight stopping any scheduled fading
     // although .enabled = false yields an effective weight of zero, this
     // method does *not* change .enabled, because it would be confusing
     },{key:"setEffectiveWeight",value:function setEffectiveWeight(weight){this.weight=weight;// note: same logic as when updated at runtime
     this._effectiveWeight=this.enabled?weight:0;return this.stopFading();}// return the weight considering fading and .enabled
     },{key:"getEffectiveWeight",value:function getEffectiveWeight(){return this._effectiveWeight;}},{key:"fadeIn",value:function fadeIn(duration){return this._scheduleFading(duration,0,1);}},{key:"fadeOut",value:function fadeOut(duration){return this._scheduleFading(duration,1,0);}},{key:"crossFadeFrom",value:function crossFadeFrom(fadeOutAction,duration,warp){fadeOutAction.fadeOut(duration);this.fadeIn(duration);if(warp){var fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1.0,startEndRatio,duration);this.warp(endStartRatio,1.0,duration);}return this;}},{key:"crossFadeTo",value:function crossFadeTo(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp);}},{key:"stopFading",value:function stopFading(){var weightInterpolant=this._weightInterpolant;if(weightInterpolant!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(weightInterpolant);}return this;}// Time Scale Control
     // set the time scale stopping any scheduled warping
     // although .paused = true yields an effective time scale of zero, this
     // method does *not* change .paused, because it would be confusing
     },{key:"setEffectiveTimeScale",value:function setEffectiveTimeScale(timeScale){this.timeScale=timeScale;this._effectiveTimeScale=this.paused?0:timeScale;return this.stopWarping();}// return the time scale considering warping and .paused
     },{key:"getEffectiveTimeScale",value:function getEffectiveTimeScale(){return this._effectiveTimeScale;}},{key:"setDuration",value:function setDuration(duration){this.timeScale=this._clip.duration/duration;return this.stopWarping();}},{key:"syncWith",value:function syncWith(action){this.time=action.time;this.timeScale=action.timeScale;return this.stopWarping();}},{key:"halt",value:function halt(duration){return this.warp(this._effectiveTimeScale,0,duration);}},{key:"warp",value:function warp(startTimeScale,endTimeScale,duration){var mixer=this._mixer,now=mixer.time,timeScale=this.timeScale;var interpolant=this._timeScaleInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._timeScaleInterpolant=interpolant;}var times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;times[1]=now+duration;values[0]=startTimeScale/timeScale;values[1]=endTimeScale/timeScale;return this;}},{key:"stopWarping",value:function stopWarping(){var timeScaleInterpolant=this._timeScaleInterpolant;if(timeScaleInterpolant!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(timeScaleInterpolant);}return this;}// Object Accessors
     },{key:"getMixer",value:function getMixer(){return this._mixer;}},{key:"getClip",value:function getClip(){return this._clip;}},{key:"getRoot",value:function getRoot(){return this._localRoot||this._mixer._root;}// Interna
     },{key:"_update",value:function _update(time,deltaTime,timeDirection,accuIndex){// called by the mixer
     if(!this.enabled){// call ._updateWeight() to update ._effectiveWeight
     this._updateWeight(time);return;}var startTime=this._startTime;if(startTime!==null){// check for scheduled start of action
     var timeRunning=(time-startTime)*timeDirection;if(timeRunning<0||timeDirection===0){return;// yet to come / don't decide when delta = 0
     }// start
     this._startTime=null;// unschedule
     deltaTime=timeDirection*timeRunning;}// apply time scale and advance time
     deltaTime*=this._updateTimeScale(time);var clipTime=this._updateTime(deltaTime);// note: _updateTime may disable the action resulting in
     // an effective weight of 0
     var weight=this._updateWeight(time);if(weight>0){var _interpolants=this._interpolants;var propertyMixers=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(var j=0,m=_interpolants.length;j!==m;++j){_interpolants[j].evaluate(clipTime);propertyMixers[j].accumulateAdditive(weight);}break;case NormalAnimationBlendMode:default:for(var _j19=0,_m5=_interpolants.length;_j19!==_m5;++_j19){_interpolants[_j19].evaluate(clipTime);propertyMixers[_j19].accumulate(accuIndex,weight);}}}}},{key:"_updateWeight",value:function _updateWeight(time){var weight=0;if(this.enabled){weight=this.weight;var interpolant=this._weightInterpolant;if(interpolant!==null){var interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopFading();if(interpolantValue===0){// faded out, disable
     this.enabled=false;}}}}this._effectiveWeight=weight;return weight;}},{key:"_updateTimeScale",value:function _updateTimeScale(time){var timeScale=0;if(!this.paused){timeScale=this.timeScale;var interpolant=this._timeScaleInterpolant;if(interpolant!==null){var interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopWarping();if(timeScale===0){// motion has halted, pause
     this.paused=true;}else{// warp done - apply final time scale
     this.timeScale=timeScale;}}}}this._effectiveTimeScale=timeScale;return timeScale;}},{key:"_updateTime",value:function _updateTime(deltaTime){var duration=this._clip.duration;var loop=this.loop;var time=this.time+deltaTime;var loopCount=this._loopCount;var pingPong=loop===LoopPingPong;if(deltaTime===0){if(loopCount===-1)return time;return pingPong&&(loopCount&1)===1?duration-time:time;}if(loop===LoopOnce){if(loopCount===-1){// just started
     this._loopCount=0;this._setEndings(true,true,false);}handle_stop:{if(time>=duration){time=duration;}else if(time<0){time=0;}else{this.time=time;break handle_stop;}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime<0?-1:1});}}else{// repetitive Repeat or PingPong
     if(loopCount===-1){// just started
     if(deltaTime>=0){loopCount=0;this._setEndings(true,this.repetitions===0,pingPong);}else{// when looping in reverse direction, the initial
     // transition through zero counts as a repetition,
     // so leave loopCount at -1
     this._setEndings(this.repetitions===0,true,pingPong);}}if(time>=duration||time<0){// wrap around
     var loopDelta=Math.floor(time/duration);// signed
     time-=duration*loopDelta;loopCount+=Math.abs(loopDelta);var pending=this.repetitions-loopCount;if(pending<=0){// have to stop (switch state, clamp time, fire event)
     if(this.clampWhenFinished)this.paused=true;else this.enabled=false;time=deltaTime>0?duration:0;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime>0?1:-1});}else{// keep running
     if(pending===1){// entering the last round
     var atStart=deltaTime<0;this._setEndings(atStart,!atStart,pingPong);}else{this._setEndings(false,false,pingPong);}this._loopCount=loopCount;this.time=time;this._mixer.dispatchEvent({type:'loop',action:this,loopDelta:loopDelta});}}else{this.time=time;}if(pingPong&&(loopCount&1)===1){// invert time for the "pong round"
     return duration-time;}}return time;}},{key:"_setEndings",value:function _setEndings(atStart,atEnd,pingPong){var settings=this._interpolantSettings;if(pingPong){settings.endingStart=ZeroSlopeEnding;settings.endingEnd=ZeroSlopeEnding;}else{// assuming for LoopOnce atStart == atEnd == true
     if(atStart){settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingStart=WrapAroundEnding;}if(atEnd){settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingEnd=WrapAroundEnding;}}}},{key:"_scheduleFading",value:function _scheduleFading(duration,weightNow,weightThen){var mixer=this._mixer,now=mixer.time;var interpolant=this._weightInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._weightInterpolant=interpolant;}var times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;values[0]=weightNow;times[1]=now+duration;values[1]=weightThen;return this;}}]);return AnimationAction;}();function AnimationMixer(root){this._root=root;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1.0;}AnimationMixer.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:AnimationMixer,_bindAction:function _bindAction(action,prototypeAction){var root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName;var bindingsByName=bindingsByRoot[rootUuid];if(bindingsByName===undefined){bindingsByName={};bindingsByRoot[rootUuid]=bindingsByName;}for(var _i309=0;_i309!==nTracks;++_i309){var track=tracks[_i309],trackName=track.name;var binding=bindingsByName[trackName];if(binding!==undefined){bindings[_i309]=binding;}else{binding=bindings[_i309];if(binding!==undefined){// existing binding, make sure the cache knows
     if(binding._cacheIndex===null){++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);}continue;}var path=prototypeAction&&prototypeAction._propertyBindings[_i309].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize());++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);bindings[_i309]=binding;}interpolants[_i309].resultBuffer=binding.buffer;}},_activateAction:function _activateAction(action){if(!this._isActiveAction(action)){if(action._cacheIndex===null){// this action has been forgotten by the cache, but the user
     // appears to be still using it -> rebind
     var rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]);this._addInactiveAction(action,clipUuid,rootUuid);}var bindings=action._propertyBindings;// increment reference counts / sort out state
     for(var _i310=0,n=bindings.length;_i310!==n;++_i310){var binding=bindings[_i310];if(binding.useCount++===0){this._lendBinding(binding);binding.saveOriginalState();}}this._lendAction(action);}},_deactivateAction:function _deactivateAction(action){if(this._isActiveAction(action)){var bindings=action._propertyBindings;// decrement reference counts / sort out state
     for(var _i311=0,n=bindings.length;_i311!==n;++_i311){var binding=bindings[_i311];if(--binding.useCount===0){binding.restoreOriginalState();this._takeBackBinding(binding);}}this._takeBackAction(action);}},// Memory manager
     _initMemoryManager:function _initMemoryManager(){this._actions=[];// 'nActiveActions' followed by inactive ones
     this._nActiveActions=0;this._actionsByClip={};// inside:
     // {
     // 	knownActions: Array< AnimationAction > - used as prototypes
     // 	actionByRoot: AnimationAction - lookup
     // }
     this._bindings=[];// 'nActiveBindings' followed by inactive ones
     this._nActiveBindings=0;this._bindingsByRootAndName={};// inside: Map< name, PropertyMixer >
     this._controlInterpolants=[];// same game as above
     this._nActiveControlInterpolants=0;var scope=this;this.stats={actions:{get total(){return scope._actions.length;},get inUse(){return scope._nActiveActions;}},bindings:{get total(){return scope._bindings.length;},get inUse(){return scope._nActiveBindings;}},controlInterpolants:{get total(){return scope._controlInterpolants.length;},get inUse(){return scope._nActiveControlInterpolants;}}};},// Memory management for AnimationAction objects
     _isActiveAction:function _isActiveAction(action){var index=action._cacheIndex;return index!==null&&index<this._nActiveActions;},_addInactiveAction:function _addInactiveAction(action,clipUuid,rootUuid){var actions=this._actions,actionsByClip=this._actionsByClip;var actionsForClip=actionsByClip[clipUuid];if(actionsForClip===undefined){actionsForClip={knownActions:[action],actionByRoot:{}};action._byClipCacheIndex=0;actionsByClip[clipUuid]=actionsForClip;}else{var knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length;knownActions.push(action);}action._cacheIndex=actions.length;actions.push(action);actionsForClip.actionByRoot[rootUuid]=action;},_removeInactiveAction:function _removeInactiveAction(action){var actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();action._cacheIndex=null;var clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex;knownActionsForClip[byClipCacheIndex]=lastKnownAction;knownActionsForClip.pop();action._byClipCacheIndex=null;var actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid];if(knownActionsForClip.length===0){delete actionsByClip[clipUuid];}this._removeInactiveBindingsForAction(action);},_removeInactiveBindingsForAction:function _removeInactiveBindingsForAction(action){var bindings=action._propertyBindings;for(var _i312=0,n=bindings.length;_i312!==n;++_i312){var binding=bindings[_i312];if(--binding.referenceCount===0){this._removeInactiveBinding(binding);}}},_lendAction:function _lendAction(action){// [ active actions |  inactive actions  ]
     // [  active actions >| inactive actions ]
     //                 s        a
     //                  <-swap->
     //                 a        s
     var actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex;actions[lastActiveIndex]=action;firstInactiveAction._cacheIndex=prevIndex;actions[prevIndex]=firstInactiveAction;},_takeBackAction:function _takeBackAction(action){// [  active actions  | inactive actions ]
     // [ active actions |< inactive actions  ]
     //        a        s
     //         <-swap->
     //        s        a
     var actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex;actions[firstInactiveIndex]=action;lastActiveAction._cacheIndex=prevIndex;actions[prevIndex]=lastActiveAction;},// Memory management for PropertyMixer objects
     _addInactiveBinding:function _addInactiveBinding(binding,rootUuid,trackName){var bindingsByRoot=this._bindingsByRootAndName,bindings=this._bindings;var bindingByName=bindingsByRoot[rootUuid];if(bindingByName===undefined){bindingByName={};bindingsByRoot[rootUuid]=bindingByName;}bindingByName[trackName]=binding;binding._cacheIndex=bindings.length;bindings.push(binding);},_removeInactiveBinding:function _removeInactiveBinding(binding){var bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex;bindings[cacheIndex]=lastInactiveBinding;bindings.pop();delete bindingByName[trackName];if(Object.keys(bindingByName).length===0){delete bindingsByRoot[rootUuid];}},_lendBinding:function _lendBinding(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex;bindings[lastActiveIndex]=binding;firstInactiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=firstInactiveBinding;},_takeBackBinding:function _takeBackBinding(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex;bindings[firstInactiveIndex]=binding;lastActiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=lastActiveBinding;},// Memory management of Interpolants for weight and time scale
     _lendControlInterpolant:function _lendControlInterpolant(){var interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++;var interpolant=interpolants[lastActiveIndex];if(interpolant===undefined){interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);interpolant.__cacheIndex=lastActiveIndex;interpolants[lastActiveIndex]=interpolant;}return interpolant;},_takeBackControlInterpolant:function _takeBackControlInterpolant(interpolant){var interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex;interpolants[firstInactiveIndex]=interpolant;lastActiveInterpolant.__cacheIndex=prevIndex;interpolants[prevIndex]=lastActiveInterpolant;},_controlInterpolantsResultBuffer:new Float32Array(1),// return an action for a clip optionally using a custom root target
     // object (this method allocates a lot of dynamic memory in case a
     // previously unknown clip/root combination is specified)
     clipAction:function clipAction(clip,optionalRoot,blendMode){var root=optionalRoot||this._root,rootUuid=root.uuid;var clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip;var clipUuid=clipObject!==null?clipObject.uuid:clip;var actionsForClip=this._actionsByClip[clipUuid];var prototypeAction=null;if(blendMode===undefined){if(clipObject!==null){blendMode=clipObject.blendMode;}else{blendMode=NormalAnimationBlendMode;}}if(actionsForClip!==undefined){var existingAction=actionsForClip.actionByRoot[rootUuid];if(existingAction!==undefined&&existingAction.blendMode===blendMode){return existingAction;}// we know the clip, so we don't have to parse all
     // the bindings again but can just copy
     prototypeAction=actionsForClip.knownActions[0];// also, take the clip from the prototype action
     if(clipObject===null)clipObject=prototypeAction._clip;}// clip must be known when specified via string
     if(clipObject===null)return null;// allocate all resources required to run it
     var newAction=new AnimationAction(this,clipObject,optionalRoot,blendMode);this._bindAction(newAction,prototypeAction);// and make the action known to the memory manager
     this._addInactiveAction(newAction,clipUuid,rootUuid);return newAction;},// get an existing action
     existingAction:function existingAction(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];if(actionsForClip!==undefined){return actionsForClip.actionByRoot[rootUuid]||null;}return null;},// deactivates all previously scheduled actions
     stopAllAction:function stopAllAction(){var actions=this._actions,nActions=this._nActiveActions;for(var _i313=nActions-1;_i313>=0;--_i313){actions[_i313].stop();}return this;},// advance the time and update apply the animation
     update:function update(deltaTime){deltaTime*=this.timeScale;var actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1;// run active actions
     for(var _i314=0;_i314!==nActions;++_i314){var action=actions[_i314];action._update(time,deltaTime,timeDirection,accuIndex);}// update scene graph
     var bindings=this._bindings,nBindings=this._nActiveBindings;for(var _i315=0;_i315!==nBindings;++_i315){bindings[_i315].apply(accuIndex);}return this;},// Allows you to seek to a specific time in an animation.
     setTime:function setTime(timeInSeconds){this.time=0;// Zero out time attribute for AnimationMixer object;
     for(var _i316=0;_i316<this._actions.length;_i316++){this._actions[_i316].time=0;// Zero out time attribute for all associated AnimationAction objects.
     }return this.update(timeInSeconds);// Update used to set exact time. Returns "this" AnimationMixer object.
     },// return this mixer's root target object
     getRoot:function getRoot(){return this._root;},// free all resources specific to a particular clip
     uncacheClip:function uncacheClip(clip){var actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip!==undefined){// note: just calling _removeInactiveAction would mess up the
     // iteration state and also require updating the state we can
     // just throw away
     var actionsToRemove=actionsForClip.knownActions;for(var _i317=0,n=actionsToRemove.length;_i317!==n;++_i317){var action=actionsToRemove[_i317];this._deactivateAction(action);var cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null;action._byClipCacheIndex=null;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();this._removeInactiveBindingsForAction(action);}delete actionsByClip[clipUuid];}},// free all resources specific to a particular root target object
     uncacheRoot:function uncacheRoot(root){var rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(var clipUuid in actionsByClip){var actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];if(action!==undefined){this._deactivateAction(action);this._removeInactiveAction(action);}}var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(bindingByName!==undefined){for(var trackName in bindingByName){var binding=bindingByName[trackName];binding.restoreOriginalState();this._removeInactiveBinding(binding);}}},// remove a targeted clip from the cache
     uncacheAction:function uncacheAction(clip,optionalRoot){var action=this.existingAction(clip,optionalRoot);if(action!==null){this._deactivateAction(action);this._removeInactiveAction(action);}}});var Uniform=/*#__PURE__*/function(){function Uniform(value){_classCallCheck(this,Uniform);if(typeof value==='string'){console.warn('THREE.Uniform: Type parameter is no longer needed.');value=arguments[1];}this.value=value;}_createClass(Uniform,[{key:"clone",value:function clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone());}}]);return Uniform;}();function InstancedInterleavedBuffer(array,stride,meshPerAttribute){InterleavedBuffer.call(this,array,stride);this.meshPerAttribute=meshPerAttribute||1;}InstancedInterleavedBuffer.prototype=Object.assign(Object.create(InterleavedBuffer.prototype),{constructor:InstancedInterleavedBuffer,isInstancedInterleavedBuffer:true,copy:function copy(source){InterleavedBuffer.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this;},clone:function clone(data){var ib=InterleavedBuffer.prototype.clone.call(this,data);ib.meshPerAttribute=this.meshPerAttribute;return ib;},toJSON:function toJSON(data){var json=InterleavedBuffer.prototype.toJSON.call(this,data);json.isInstancedInterleavedBuffer=true;json.meshPerAttribute=this.meshPerAttribute;return json;}});function GLBufferAttribute(buffer,type,itemSize,elementSize,count){this.buffer=buffer;this.type=type;this.itemSize=itemSize;this.elementSize=elementSize;this.count=count;this.version=0;}Object.defineProperty(GLBufferAttribute.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(GLBufferAttribute.prototype,{isGLBufferAttribute:true,setBuffer:function setBuffer(buffer){this.buffer=buffer;return this;},setType:function setType(type,elementSize){this.type=type;this.elementSize=elementSize;return this;},setItemSize:function setItemSize(itemSize){this.itemSize=itemSize;return this;},setCount:function setCount(count){this.count=count;return this;}});function Raycaster(origin,direction,near,far){this.ray=new Ray(origin,direction);// direction is assumed to be normalized (for accurate distance calculations)
     this.near=near||0;this.far=far||Infinity;this.camera=null;this.layers=new Layers();this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function get(){console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');return this.Points;}}});}function ascSort(a,b){return a.distance-b.distance;}function _intersectObject(object,raycaster,intersects,recursive){if(object.layers.test(raycaster.layers)){object.raycast(raycaster,intersects);}if(recursive===true){var children=object.children;for(var _i318=0,l=children.length;_i318<l;_i318++){_intersectObject(children[_i318],raycaster,intersects,true);}}}Object.assign(Raycaster.prototype,{set:function set(origin,direction){// direction is assumed to be normalized (for accurate distance calculations)
     this.ray.set(origin,direction);},setFromCamera:function setFromCamera(coords,camera){if(camera&&camera.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(camera.matrixWorld);this.ray.direction.set(coords.x,coords.y,0.5).unproject(camera).sub(this.ray.origin).normalize();this.camera=camera;}else if(camera&&camera.isOrthographicCamera){this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera);// set origin in plane of camera
     this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld);this.camera=camera;}else{console.error('THREE.Raycaster: Unsupported camera type.');}},intersectObject:function intersectObject(object,recursive,optionalTarget){var intersects=optionalTarget||[];_intersectObject(object,this,intersects,recursive);intersects.sort(ascSort);return intersects;},intersectObjects:function intersectObjects(objects,recursive,optionalTarget){var intersects=optionalTarget||[];if(Array.isArray(objects)===false){console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');return intersects;}for(var _i319=0,l=objects.length;_i319<l;_i319++){_intersectObject(objects[_i319],this,intersects,recursive);}intersects.sort(ascSort);return intersects;}});/**
          * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
          *
          * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
          * The azimuthal angle (theta) is measured from the positive z-axis.
          */var Spherical=/*#__PURE__*/function(){function Spherical(){var radius=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var phi=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var theta=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;_classCallCheck(this,Spherical);this.radius=radius;this.phi=phi;// polar angle
     this.theta=theta;// azimuthal angle
     return this;}_createClass(Spherical,[{key:"set",value:function set(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(other){this.radius=other.radius;this.phi=other.phi;this.theta=other.theta;return this;}// restrict phi to be betwee EPS and PI-EPS
     },{key:"makeSafe",value:function makeSafe(){var EPS=0.000001;this.phi=Math.max(EPS,Math.min(Math.PI-EPS,this.phi));return this;}},{key:"setFromVector3",value:function setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);}},{key:"setFromCartesianCoords",value:function setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+y*y+z*z);if(this.radius===0){this.theta=0;this.phi=0;}else{this.theta=Math.atan2(x,z);this.phi=Math.acos(MathUtils.clamp(y/this.radius,-1,1));}return this;}}]);return Spherical;}();var _vector$7=/*@__PURE__*/new Vector2();var Box2=/*#__PURE__*/function(){function Box2(min,max){_classCallCheck(this,Box2);Object.defineProperty(this,'isBox2',{value:true});this.min=min!==undefined?min:new Vector2(+Infinity,+Infinity);this.max=max!==undefined?max:new Vector2(-Infinity,-Infinity);}_createClass(Box2,[{key:"set",value:function set(min,max){this.min.copy(min);this.max.copy(max);return this;}},{key:"setFromPoints",value:function setFromPoints(points){this.makeEmpty();for(var _i320=0,il=points.length;_i320<il;_i320++){this.expandByPoint(points[_i320]);}return this;}},{key:"setFromCenterAndSize",value:function setFromCenterAndSize(center,size){var halfSize=_vector$7.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}},{key:"makeEmpty",value:function makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this;}},{key:"isEmpty",value:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
     return this.max.x<this.min.x||this.max.y<this.min.y;}},{key:"getCenter",value:function getCenter(target){if(target===undefined){console.warn('THREE.Box2: .getCenter() target is now required');target=new Vector2();}return this.isEmpty()?target.set(0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}},{key:"getSize",value:function getSize(target){if(target===undefined){console.warn('THREE.Box2: .getSize() target is now required');target=new Vector2();}return this.isEmpty()?target.set(0,0):target.subVectors(this.max,this.min);}},{key:"expandByPoint",value:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;}},{key:"expandByVector",value:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}},{key:"expandByScalar",value:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}},{key:"containsPoint",value:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y?false:true;}},{key:"containsBox",value:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y;}},{key:"getParameter",value:function getParameter(point,target){// This can potentially have a divide by zero if the box
     // has a size dimension of 0.
     if(target===undefined){console.warn('THREE.Box2: .getParameter() target is now required');target=new Vector2();}return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y));}},{key:"intersectsBox",value:function intersectsBox(box){// using 4 splitting planes to rule out intersections
     return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y?false:true;}},{key:"clampPoint",value:function clampPoint(point,target){if(target===undefined){console.warn('THREE.Box2: .clampPoint() target is now required');target=new Vector2();}return target.copy(point).clamp(this.min,this.max);}},{key:"distanceToPoint",value:function distanceToPoint(point){var clampedPoint=_vector$7.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();}},{key:"intersect",value:function intersect(box){this.min.max(box.min);this.max.min(box.max);return this;}},{key:"union",value:function union(box){this.min.min(box.min);this.max.max(box.max);return this;}},{key:"translate",value:function translate(offset){this.min.add(offset);this.max.add(offset);return this;}},{key:"equals",value:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}]);return Box2;}();function ImmediateRenderObject(material){Object3D.call(this);this.material=material;this.render=function()/* renderCallback */{};this.hasPositions=false;this.hasNormals=false;this.hasColors=false;this.hasUvs=false;this.positionArray=null;this.normalArray=null;this.colorArray=null;this.uvArray=null;this.count=0;}ImmediateRenderObject.prototype=Object.create(Object3D.prototype);ImmediateRenderObject.prototype.constructor=ImmediateRenderObject;ImmediateRenderObject.prototype.isImmediateRenderObject=true;var _vector$9=/*@__PURE__*/new Vector3();var _boneMatrix=/*@__PURE__*/new Matrix4();var _matrixWorldInv=/*@__PURE__*/new Matrix4();var SkeletonHelper=/*#__PURE__*/function(_LineSegments){_inherits(SkeletonHelper,_LineSegments);var _super10=_createSuper(SkeletonHelper);function SkeletonHelper(object){var _this17;_classCallCheck(this,SkeletonHelper);var bones=getBoneList(object);var geometry=new BufferGeometry();var vertices=[];var colors=[];var color1=new Color(0,0,1);var color2=new Color(0,1,0);for(var _i321=0;_i321<bones.length;_i321++){var bone=bones[_i321];if(bone.parent&&bone.parent.isBone){vertices.push(0,0,0);vertices.push(0,0,0);colors.push(color1.r,color1.g,color1.b);colors.push(color2.r,color2.g,color2.b);}}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});_this17=_super10.call(this,geometry,material);_this17.type='SkeletonHelper';_this17.isSkeletonHelper=true;_this17.root=object;_this17.bones=bones;_this17.matrix=object.matrixWorld;_this17.matrixAutoUpdate=false;return _this17;}_createClass(SkeletonHelper,[{key:"updateMatrixWorld",value:function updateMatrixWorld(force){var bones=this.bones;var geometry=this.geometry;var position=geometry.getAttribute('position');_matrixWorldInv.getInverse(this.root.matrixWorld);for(var _i322=0,j=0;_i322<bones.length;_i322++){var bone=bones[_i322];if(bone.parent&&bone.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.matrixWorld);_vector$9.setFromMatrixPosition(_boneMatrix);position.setXYZ(j,_vector$9.x,_vector$9.y,_vector$9.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.parent.matrixWorld);_vector$9.setFromMatrixPosition(_boneMatrix);position.setXYZ(j+1,_vector$9.x,_vector$9.y,_vector$9.z);j+=2;}}geometry.getAttribute('position').needsUpdate=true;_get(_getPrototypeOf(SkeletonHelper.prototype),"updateMatrixWorld",this).call(this,force);}}]);return SkeletonHelper;}(LineSegments);function getBoneList(object){var boneList=[];if(object&&object.isBone){boneList.push(object);}for(var _i323=0;_i323<object.children.length;_i323++){boneList.push.apply(boneList,getBoneList(object.children[_i323]));}return boneList;}var LOD_MIN=4;var LOD_MAX=8;var SIZE_MAX=Math.pow(2,LOD_MAX);// The standard deviations (radians) associated with the extra mips. These are
     // chosen to approximate a Trowbridge-Reitz distribution function times the
     // geometric shadowing function. These sigma values squared must match the
     // variance #defines in cube_uv_reflection_fragment.glsl.js.
     var EXTRA_LOD_SIGMA=[0.125,0.215,0.35,0.446,0.526,0.582];var TOTAL_LODS=LOD_MAX-LOD_MIN+1+EXTRA_LOD_SIGMA.length;// The maximum length of the blur for loop. Smaller sigmas will use fewer
     // samples and exit early, but not recompile the shader.
     var MAX_SAMPLES=20;var ENCODINGS=(_ENCODINGS={},_defineProperty(_ENCODINGS,LinearEncoding,0),_defineProperty(_ENCODINGS,sRGBEncoding,1),_defineProperty(_ENCODINGS,RGBEEncoding,2),_defineProperty(_ENCODINGS,RGBM7Encoding,3),_defineProperty(_ENCODINGS,RGBM16Encoding,4),_defineProperty(_ENCODINGS,RGBDEncoding,5),_defineProperty(_ENCODINGS,GammaEncoding,6),_ENCODINGS);var _flatCamera=/*@__PURE__*/new OrthographicCamera();var _createPlanes2=/*@__PURE__*/_createPlanes(),_lodPlanes=_createPlanes2._lodPlanes,_sizeLods=_createPlanes2._sizeLods,_sigmas=_createPlanes2._sigmas;var _oldTarget=null;// Golden Ratio
     var PHI=(1+Math.sqrt(5))/2;var INV_PHI=1/PHI;// Vertices of a dodecahedron (except the opposites, which represent the
     // same axis), used as axis directions evenly spread on a sphere.
     var _axisDirections=[/*@__PURE__*/new Vector3(1,1,1),/*@__PURE__*/new Vector3(-1,1,1),/*@__PURE__*/new Vector3(1,1,-1),/*@__PURE__*/new Vector3(-1,1,-1),/*@__PURE__*/new Vector3(0,PHI,INV_PHI),/*@__PURE__*/new Vector3(0,PHI,-INV_PHI),/*@__PURE__*/new Vector3(INV_PHI,0,PHI),/*@__PURE__*/new Vector3(-INV_PHI,0,PHI),/*@__PURE__*/new Vector3(PHI,INV_PHI,0),/*@__PURE__*/new Vector3(-PHI,INV_PHI,0)];/**
          * This class generates a Prefiltered, Mipmapped Radiance Environment Map
          * (PMREM) from a cubeMap environment texture. This allows different levels of
          * blur to be quickly accessed based on material roughness. It is packed into a
          * special CubeUV format that allows us to perform custom interpolation so that
          * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
          * chain, it only goes down to the LOD_MIN level (above), and then creates extra
          * even more filtered 'mips' at the same LOD_MIN resolution, associated with
          * higher roughness levels. In this way we maintain resolution to smoothly
          * interpolate diffuse lighting while limiting sampling computation.
          */var PMREMGenerator=/*#__PURE__*/function(){function PMREMGenerator(renderer){_classCallCheck(this,PMREMGenerator);this._renderer=renderer;this._pingPongRenderTarget=null;this._blurMaterial=_getBlurShader(MAX_SAMPLES);this._equirectShader=null;this._cubemapShader=null;this._compileMaterial(this._blurMaterial);}/**
               * Generates a PMREM from a supplied Scene, which can be faster than using an
               * image if networking bandwidth is low. Optional sigma specifies a blur radius
               * in radians to be applied to the scene before PMREM generation. Optional near
               * and far planes ensure the scene is rendered in its entirety (the cubeCamera
               * is placed at the origin).
               */_createClass(PMREMGenerator,[{key:"fromScene",value:function fromScene(scene){var sigma=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var near=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.1;var far=arguments.length>3&&arguments[3]!==undefined?arguments[3]:100;_oldTarget=this._renderer.getRenderTarget();var cubeUVRenderTarget=this._allocateTargets();this._sceneToCubeUV(scene,near,far,cubeUVRenderTarget);if(sigma>0){this._blur(cubeUVRenderTarget,0,0,sigma);}this._applyPMREM(cubeUVRenderTarget);this._cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;}/**
               * Generates a PMREM from an equirectangular texture, which can be either LDR
               * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
               * as this matches best with the 256 x 256 cubemap output.
               */},{key:"fromEquirectangular",value:function fromEquirectangular(equirectangular){return this._fromTexture(equirectangular);}/**
               * Generates a PMREM from an cubemap texture, which can be either LDR
               * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
               * as this matches best with the 256 x 256 cubemap output.
               */},{key:"fromCubemap",value:function fromCubemap(cubemap){return this._fromTexture(cubemap);}/**
               * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
               * your texture's network fetch for increased concurrency.
               */},{key:"compileCubemapShader",value:function compileCubemapShader(){if(this._cubemapShader===null){this._cubemapShader=_getCubemapShader();this._compileMaterial(this._cubemapShader);}}/**
               * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
               * your texture's network fetch for increased concurrency.
               */},{key:"compileEquirectangularShader",value:function compileEquirectangularShader(){if(this._equirectShader===null){this._equirectShader=_getEquirectShader();this._compileMaterial(this._equirectShader);}}/**
               * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
               * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
               * one of them will cause any others to also become unusable.
               */},{key:"dispose",value:function dispose(){this._blurMaterial.dispose();if(this._cubemapShader!==null)this._cubemapShader.dispose();if(this._equirectShader!==null)this._equirectShader.dispose();for(var _i324=0;_i324<_lodPlanes.length;_i324++){_lodPlanes[_i324].dispose();}}// private interface
     },{key:"_cleanup",value:function _cleanup(outputTarget){this._pingPongRenderTarget.dispose();this._renderer.setRenderTarget(_oldTarget);outputTarget.scissorTest=false;_setViewport(outputTarget,0,0,outputTarget.width,outputTarget.height);}},{key:"_fromTexture",value:function _fromTexture(texture){_oldTarget=this._renderer.getRenderTarget();var cubeUVRenderTarget=this._allocateTargets(texture);this._textureToCubeUV(texture,cubeUVRenderTarget);this._applyPMREM(cubeUVRenderTarget);this._cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;}},{key:"_allocateTargets",value:function _allocateTargets(texture){// warning: null texture is valid
     var params={magFilter:NearestFilter,minFilter:NearestFilter,generateMipmaps:false,type:UnsignedByteType,format:RGBEFormat,encoding:_isLDR(texture)?texture.encoding:RGBEEncoding,depthBuffer:false};var cubeUVRenderTarget=_createRenderTarget(params);cubeUVRenderTarget.depthBuffer=texture?false:true;this._pingPongRenderTarget=_createRenderTarget(params);return cubeUVRenderTarget;}},{key:"_compileMaterial",value:function _compileMaterial(material){var tmpMesh=new Mesh(_lodPlanes[0],material);this._renderer.compile(tmpMesh,_flatCamera);}},{key:"_sceneToCubeUV",value:function _sceneToCubeUV(scene,near,far,cubeUVRenderTarget){var fov=90;var aspect=1;var cubeCamera=new PerspectiveCamera(fov,aspect,near,far);var upSign=[1,-1,1,1,1,1];var forwardSign=[1,1,1,-1,-1,-1];var renderer=this._renderer;var outputEncoding=renderer.outputEncoding;var toneMapping=renderer.toneMapping;var clearColor=renderer.getClearColor();var clearAlpha=renderer.getClearAlpha();renderer.toneMapping=NoToneMapping;renderer.outputEncoding=LinearEncoding;var background=scene.background;if(background&&background.isColor){background.convertSRGBToLinear();// Convert linear to RGBE
     var maxComponent=Math.max(background.r,background.g,background.b);var fExp=Math.min(Math.max(Math.ceil(Math.log2(maxComponent)),-128.0),127.0);background=background.multiplyScalar(Math.pow(2.0,-fExp));var alpha=(fExp+128.0)/255.0;renderer.setClearColor(background,alpha);scene.background=null;}for(var _i325=0;_i325<6;_i325++){var col=_i325%3;if(col==0){cubeCamera.up.set(0,upSign[_i325],0);cubeCamera.lookAt(forwardSign[_i325],0,0);}else if(col==1){cubeCamera.up.set(0,0,upSign[_i325]);cubeCamera.lookAt(0,forwardSign[_i325],0);}else{cubeCamera.up.set(0,upSign[_i325],0);cubeCamera.lookAt(0,0,forwardSign[_i325]);}_setViewport(cubeUVRenderTarget,col*SIZE_MAX,_i325>2?SIZE_MAX:0,SIZE_MAX,SIZE_MAX);renderer.setRenderTarget(cubeUVRenderTarget);renderer.render(scene,cubeCamera);}renderer.toneMapping=toneMapping;renderer.outputEncoding=outputEncoding;renderer.setClearColor(clearColor,clearAlpha);}},{key:"_textureToCubeUV",value:function _textureToCubeUV(texture,cubeUVRenderTarget){var renderer=this._renderer;if(texture.isCubeTexture){if(this._cubemapShader==null){this._cubemapShader=_getCubemapShader();}}else{if(this._equirectShader==null){this._equirectShader=_getEquirectShader();}}var material=texture.isCubeTexture?this._cubemapShader:this._equirectShader;var mesh=new Mesh(_lodPlanes[0],material);var uniforms=material.uniforms;uniforms['envMap'].value=texture;if(!texture.isCubeTexture){uniforms['texelSize'].value.set(1.0/texture.image.width,1.0/texture.image.height);}uniforms['inputEncoding'].value=ENCODINGS[texture.encoding];uniforms['outputEncoding'].value=ENCODINGS[cubeUVRenderTarget.texture.encoding];_setViewport(cubeUVRenderTarget,0,0,3*SIZE_MAX,2*SIZE_MAX);renderer.setRenderTarget(cubeUVRenderTarget);renderer.render(mesh,_flatCamera);}},{key:"_applyPMREM",value:function _applyPMREM(cubeUVRenderTarget){var renderer=this._renderer;var autoClear=renderer.autoClear;renderer.autoClear=false;for(var _i326=1;_i326<TOTAL_LODS;_i326++){var sigma=Math.sqrt(_sigmas[_i326]*_sigmas[_i326]-_sigmas[_i326-1]*_sigmas[_i326-1]);var poleAxis=_axisDirections[(_i326-1)%_axisDirections.length];this._blur(cubeUVRenderTarget,_i326-1,_i326,sigma,poleAxis);}renderer.autoClear=autoClear;}/**
               * This is a two-pass Gaussian blur for a cubemap. Normally this is done
               * vertically and horizontally, but this breaks down on a cube. Here we apply
               * the blur latitudinally (around the poles), and then longitudinally (towards
               * the poles) to approximate the orthogonally-separable blur. It is least
               * accurate at the poles, but still does a decent job.
               */},{key:"_blur",value:function _blur(cubeUVRenderTarget,lodIn,lodOut,sigma,poleAxis){var pingPongRenderTarget=this._pingPongRenderTarget;this._halfBlur(cubeUVRenderTarget,pingPongRenderTarget,lodIn,lodOut,sigma,'latitudinal',poleAxis);this._halfBlur(pingPongRenderTarget,cubeUVRenderTarget,lodOut,lodOut,sigma,'longitudinal',poleAxis);}},{key:"_halfBlur",value:function _halfBlur(targetIn,targetOut,lodIn,lodOut,sigmaRadians,direction,poleAxis){var renderer=this._renderer;var blurMaterial=this._blurMaterial;if(direction!=='latitudinal'&&direction!=='longitudinal'){console.error('blur direction must be either latitudinal or longitudinal!');}// Number of standard deviations at which to cut off the discrete approximation.
     var STANDARD_DEVIATIONS=3;var blurMesh=new Mesh(_lodPlanes[lodOut],blurMaterial);var blurUniforms=blurMaterial.uniforms;var pixels=_sizeLods[lodIn]-1;var radiansPerPixel=isFinite(sigmaRadians)?Math.PI/(2*pixels):2*Math.PI/(2*MAX_SAMPLES-1);var sigmaPixels=sigmaRadians/radiansPerPixel;var samples=isFinite(sigmaRadians)?1+Math.floor(STANDARD_DEVIATIONS*sigmaPixels):MAX_SAMPLES;if(samples>MAX_SAMPLES){console.warn("sigmaRadians, ".concat(sigmaRadians,", is too large and will clip, as it requested ").concat(samples," samples when the maximum is set to ").concat(MAX_SAMPLES));}var weights=[];var sum=0;for(var _i327=0;_i327<MAX_SAMPLES;++_i327){var _x2=_i327/sigmaPixels;var weight=Math.exp(-_x2*_x2/2);weights.push(weight);if(_i327==0){sum+=weight;}else if(_i327<samples){sum+=2*weight;}}for(var _i328=0;_i328<weights.length;_i328++){weights[_i328]=weights[_i328]/sum;}blurUniforms['envMap'].value=targetIn.texture;blurUniforms['samples'].value=samples;blurUniforms['weights'].value=weights;blurUniforms['latitudinal'].value=direction==='latitudinal';if(poleAxis){blurUniforms['poleAxis'].value=poleAxis;}blurUniforms['dTheta'].value=radiansPerPixel;blurUniforms['mipInt'].value=LOD_MAX-lodIn;blurUniforms['inputEncoding'].value=ENCODINGS[targetIn.texture.encoding];blurUniforms['outputEncoding'].value=ENCODINGS[targetIn.texture.encoding];var outputSize=_sizeLods[lodOut];var x=3*Math.max(0,SIZE_MAX-2*outputSize);var y=(lodOut===0?0:2*SIZE_MAX)+2*outputSize*(lodOut>LOD_MAX-LOD_MIN?lodOut-LOD_MAX+LOD_MIN:0);_setViewport(targetOut,x,y,3*outputSize,2*outputSize);renderer.setRenderTarget(targetOut);renderer.render(blurMesh,_flatCamera);}}]);return PMREMGenerator;}();function _isLDR(texture){if(texture===undefined||texture.type!==UnsignedByteType)return false;return texture.encoding===LinearEncoding||texture.encoding===sRGBEncoding||texture.encoding===GammaEncoding;}function _createPlanes(){var _lodPlanes=[];var _sizeLods=[];var _sigmas=[];var lod=LOD_MAX;for(var _i329=0;_i329<TOTAL_LODS;_i329++){var sizeLod=Math.pow(2,lod);_sizeLods.push(sizeLod);var sigma=1.0/sizeLod;if(_i329>LOD_MAX-LOD_MIN){sigma=EXTRA_LOD_SIGMA[_i329-LOD_MAX+LOD_MIN-1];}else if(_i329==0){sigma=0;}_sigmas.push(sigma);var texelSize=1.0/(sizeLod-1);var min=-texelSize/2;var max=1+texelSize/2;var uv1=[min,min,max,min,max,max,min,min,max,max,min,max];var cubeFaces=6;var _vertices5=6;var positionSize=3;var uvSize=2;var faceIndexSize=1;var position=new Float32Array(positionSize*_vertices5*cubeFaces);var uv=new Float32Array(uvSize*_vertices5*cubeFaces);var faceIndex=new Float32Array(faceIndexSize*_vertices5*cubeFaces);for(var face=0;face<cubeFaces;face++){var x=face%3*2/3-1;var y=face>2?0:-1;var coordinates=[x,y,0,x+2/3,y,0,x+2/3,y+1,0,x,y,0,x+2/3,y+1,0,x,y+1,0];position.set(coordinates,positionSize*_vertices5*face);uv.set(uv1,uvSize*_vertices5*face);var fill=[face,face,face,face,face,face];faceIndex.set(fill,faceIndexSize*_vertices5*face);}var planes=new BufferGeometry();planes.setAttribute('position',new BufferAttribute(position,positionSize));planes.setAttribute('uv',new BufferAttribute(uv,uvSize));planes.setAttribute('faceIndex',new BufferAttribute(faceIndex,faceIndexSize));_lodPlanes.push(planes);if(lod>LOD_MIN){lod--;}}return{_lodPlanes:_lodPlanes,_sizeLods:_sizeLods,_sigmas:_sigmas};}function _createRenderTarget(params){var cubeUVRenderTarget=new WebGLRenderTarget(3*SIZE_MAX,3*SIZE_MAX,params);cubeUVRenderTarget.texture.mapping=CubeUVReflectionMapping;cubeUVRenderTarget.texture.name='PMREM.cubeUv';cubeUVRenderTarget.scissorTest=true;return cubeUVRenderTarget;}function _setViewport(target,x,y,width,height){target.viewport.set(x,y,width,height);target.scissor.set(x,y,width,height);}function _getBlurShader(maxSamples){var weights=new Float32Array(maxSamples);var poleAxis=new Vector3(0,1,0);var shaderMaterial=new RawShaderMaterial({name:'SphericalGaussianBlur',defines:{'n':maxSamples},uniforms:{'envMap':{value:null},'samples':{value:1},'weights':{value:weights},'latitudinal':{value:false},'dTheta':{value:0},'mipInt':{value:0},'poleAxis':{value:poleAxis},'inputEncoding':{value:ENCODINGS[LinearEncoding]},'outputEncoding':{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t".concat(_getEncodings(),"\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t"),blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getEquirectShader(){var texelSize=new Vector2(1,1);var shaderMaterial=new RawShaderMaterial({name:'EquirectangularToCubeUV',uniforms:{'envMap':{value:null},'texelSize':{value:texelSize},'inputEncoding':{value:ENCODINGS[LinearEncoding]},'outputEncoding':{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t".concat(_getEncodings(),"\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t"),blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getCubemapShader(){var shaderMaterial=new RawShaderMaterial({name:'CubemapToCubeUV',uniforms:{'envMap':{value:null},'inputEncoding':{value:ENCODINGS[LinearEncoding]},'outputEncoding':{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t".concat(_getEncodings(),"\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t"),blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getCommonVertexShader(){return(/* glsl */"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t");}function _getEncodings(){return(/* glsl */"\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t");}//
     Curve.create=function(construct,getPoint){console.log('THREE.Curve.create() has been deprecated');construct.prototype=Object.create(Curve.prototype);construct.prototype.constructor=construct;construct.prototype.getPoint=getPoint;return construct;};//
     Object.assign(CurvePath.prototype,{createPointsGeometry:function createPointsGeometry(divisions){console.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');// generate geometry from path points (for Line or Points objects)
     var pts=this.getPoints(divisions);return this.createGeometry(pts);},createSpacedPointsGeometry:function createSpacedPointsGeometry(divisions){console.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');// generate geometry from equidistant sampling along the path
     var pts=this.getSpacedPoints(divisions);return this.createGeometry(pts);},createGeometry:function createGeometry(points){console.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');var geometry=new Geometry();for(var _i330=0,l=points.length;_i330<l;_i330++){var point=points[_i330];geometry.vertices.push(new Vector3(point.x,point.y,point.z||0));}return geometry;}});//
     Object.assign(Path.prototype,{fromPoints:function fromPoints(points){console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');return this.setFromPoints(points);}});//
     function Spline(points){console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');CatmullRomCurve3.call(this,points);this.type='catmullrom';}Spline.prototype=Object.create(CatmullRomCurve3.prototype);Object.assign(Spline.prototype,{initFromArray:function initFromArray()/* a */{console.error('THREE.Spline: .initFromArray() has been removed.');},getControlPointsArray:function getControlPointsArray()/* optionalTarget */{console.error('THREE.Spline: .getControlPointsArray() has been removed.');},reparametrizeByArcLength:function reparametrizeByArcLength()/* samplingCoef */{console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');}});SkeletonHelper.prototype.update=function(){console.error('THREE.SkeletonHelper: update() no longer needs to be called.');};//
     Object.assign(Loader.prototype,{extractUrlBase:function extractUrlBase(url){console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');return LoaderUtils.extractUrlBase(url);}});Loader.Handlers={add:function add()/* regex, loader */{console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');},get:function get()/* file */{console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');}};//
     Object.assign(Box2.prototype,{center:function center(optionalTarget){console.warn('THREE.Box2: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);},empty:function empty(){console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');return this.isEmpty();},isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},size:function size(optionalTarget){console.warn('THREE.Box2: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);}});Object.assign(Box3.prototype,{center:function center(optionalTarget){console.warn('THREE.Box3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);},empty:function empty(){console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');return this.isEmpty();},isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},isIntersectionSphere:function isIntersectionSphere(sphere){console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);},size:function size(optionalTarget){console.warn('THREE.Box3: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);}});Object.assign(Sphere.prototype,{empty:function empty(){console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');return this.isEmpty();}});Frustum.prototype.setFromMatrix=function(m){console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');return this.setFromProjectionMatrix(m);};Object.assign(MathUtils,{random16:function random16(){console.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');return Math.random();},nearestPowerOfTwo:function nearestPowerOfTwo(value){console.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');return MathUtils.floorPowerOfTwo(value);},nextPowerOfTwo:function nextPowerOfTwo(value){console.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');return MathUtils.ceilPowerOfTwo(value);}});Object.assign(Matrix3.prototype,{flattenToArrayOffset:function flattenToArrayOffset(array,offset){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(array,offset);},multiplyVector3:function multiplyVector3(vector){console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');return vector.applyMatrix3(this);},multiplyVector3Array:function multiplyVector3Array()/* a */{console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');},applyToBufferAttribute:function applyToBufferAttribute(attribute){console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');return attribute.applyMatrix3(this);},applyToVector3Array:function applyToVector3Array()/* array, offset, length */{console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');}});Object.assign(Matrix4.prototype,{extractPosition:function extractPosition(m){console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');return this.copyPosition(m);},flattenToArrayOffset:function flattenToArrayOffset(array,offset){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(array,offset);},getPosition:function getPosition(){console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');return new Vector3().setFromMatrixColumn(this,3);},setRotationFromQuaternion:function setRotationFromQuaternion(q){console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');return this.makeRotationFromQuaternion(q);},multiplyToArray:function multiplyToArray(){console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');},multiplyVector3:function multiplyVector3(vector){console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},multiplyVector4:function multiplyVector4(vector){console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},multiplyVector3Array:function multiplyVector3Array()/* a */{console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');},rotateAxis:function rotateAxis(v){console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');v.transformDirection(this);},crossVector:function crossVector(vector){console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},translate:function translate(){console.error('THREE.Matrix4: .translate() has been removed.');},rotateX:function rotateX(){console.error('THREE.Matrix4: .rotateX() has been removed.');},rotateY:function rotateY(){console.error('THREE.Matrix4: .rotateY() has been removed.');},rotateZ:function rotateZ(){console.error('THREE.Matrix4: .rotateZ() has been removed.');},rotateByAxis:function rotateByAxis(){console.error('THREE.Matrix4: .rotateByAxis() has been removed.');},applyToBufferAttribute:function applyToBufferAttribute(attribute){console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');return attribute.applyMatrix4(this);},applyToVector3Array:function applyToVector3Array()/* array, offset, length */{console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');},makeFrustum:function makeFrustum(left,right,bottom,top,near,far){console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');return this.makePerspective(left,right,top,bottom,near,far);}});Plane.prototype.isIntersectionLine=function(line){console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');return this.intersectsLine(line);};Quaternion.prototype.multiplyVector3=function(vector){console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');return vector.applyQuaternion(this);};Object.assign(Ray.prototype,{isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},isIntersectionPlane:function isIntersectionPlane(plane){console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');return this.intersectsPlane(plane);},isIntersectionSphere:function isIntersectionSphere(sphere){console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);}});Object.assign(Triangle.prototype,{area:function area(){console.warn('THREE.Triangle: .area() has been renamed to .getArea().');return this.getArea();},barycoordFromPoint:function barycoordFromPoint(point,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return this.getBarycoord(point,target);},midpoint:function midpoint(target){console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');return this.getMidpoint(target);},normal:function normal(target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return this.getNormal(target);},plane:function plane(target){console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');return this.getPlane(target);}});Object.assign(Triangle,{barycoordFromPoint:function barycoordFromPoint(point,a,b,c,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return Triangle.getBarycoord(point,a,b,c,target);},normal:function normal(a,b,c,target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return Triangle.getNormal(a,b,c,target);}});Object.assign(Shape.prototype,{extractAllPoints:function extractAllPoints(divisions){console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');return this.extractPoints(divisions);},extrude:function extrude(options){console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');return new ExtrudeGeometry(this,options);},makeGeometry:function makeGeometry(options){console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');return new ShapeGeometry(this,options);}});Object.assign(Vector2.prototype,{fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},distanceToManhattan:function distanceToManhattan(v){console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});Object.assign(Vector3.prototype,{setEulerFromRotationMatrix:function setEulerFromRotationMatrix(){console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');},setEulerFromQuaternion:function setEulerFromQuaternion(){console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');},getPositionFromMatrix:function getPositionFromMatrix(m){console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');return this.setFromMatrixPosition(m);},getScaleFromMatrix:function getScaleFromMatrix(m){console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');return this.setFromMatrixScale(m);},getColumnFromMatrix:function getColumnFromMatrix(index,matrix){console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');return this.setFromMatrixColumn(matrix,index);},applyProjection:function applyProjection(m){console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');return this.applyMatrix4(m);},fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},distanceToManhattan:function distanceToManhattan(v){console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});Object.assign(Vector4.prototype,{fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});//
     Object.assign(Geometry.prototype,{computeTangents:function computeTangents(){console.error('THREE.Geometry: .computeTangents() has been removed.');},computeLineDistances:function computeLineDistances(){console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');},applyMatrix:function applyMatrix(matrix){console.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);}});Object.assign(Object3D.prototype,{getChildByName:function getChildByName(name){console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');return this.getObjectByName(name);},renderDepth:function renderDepth(){console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');},translate:function translate(distance,axis){console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');return this.translateOnAxis(axis,distance);},getWorldRotation:function getWorldRotation(){console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');},applyMatrix:function applyMatrix(matrix){console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);}});Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function get(){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');return this.rotation.order;},set:function set(value){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');this.rotation.order=value;}},useQuaternion:{get:function get(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');},set:function set(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');}}});Object.assign(Mesh.prototype,{setDrawMode:function setDrawMode(){console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');}});Object.defineProperties(Mesh.prototype,{drawMode:{get:function get(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');return TrianglesDrawMode;},set:function set(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');}}});Object.defineProperties(LOD.prototype,{objects:{get:function get(){console.warn('THREE.LOD: .objects has been renamed to .levels.');return this.levels;}}});Object.defineProperty(Skeleton.prototype,'useVertexTexture',{get:function get(){console.warn('THREE.Skeleton: useVertexTexture has been removed.');},set:function set(){console.warn('THREE.Skeleton: useVertexTexture has been removed.');}});SkinnedMesh.prototype.initBones=function(){console.error('THREE.SkinnedMesh: initBones() has been removed.');};Object.defineProperty(Curve.prototype,'__arcLengthDivisions',{get:function get(){console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');return this.arcLengthDivisions;},set:function set(value){console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');this.arcLengthDivisions=value;}});//
     PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn("THREE.PerspectiveCamera.setLens is deprecated. "+"Use .setFocalLength and .filmGauge for a photographic setup.");if(filmGauge!==undefined)this.filmGauge=filmGauge;this.setFocalLength(focalLength);};//
     Object.defineProperties(Light.prototype,{onlyShadow:{set:function set(){console.warn('THREE.Light: .onlyShadow has been removed.');}},shadowCameraFov:{set:function set(value){console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');this.shadow.camera.fov=value;}},shadowCameraLeft:{set:function set(value){console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');this.shadow.camera.left=value;}},shadowCameraRight:{set:function set(value){console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');this.shadow.camera.right=value;}},shadowCameraTop:{set:function set(value){console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');this.shadow.camera.top=value;}},shadowCameraBottom:{set:function set(value){console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');this.shadow.camera.bottom=value;}},shadowCameraNear:{set:function set(value){console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');this.shadow.camera.near=value;}},shadowCameraFar:{set:function set(value){console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');this.shadow.camera.far=value;}},shadowCameraVisible:{set:function set(){console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');}},shadowBias:{set:function set(value){console.warn('THREE.Light: .shadowBias is now .shadow.bias.');this.shadow.bias=value;}},shadowDarkness:{set:function set(){console.warn('THREE.Light: .shadowDarkness has been removed.');}},shadowMapWidth:{set:function set(value){console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');this.shadow.mapSize.width=value;}},shadowMapHeight:{set:function set(value){console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');this.shadow.mapSize.height=value;}}});//
     Object.defineProperties(BufferAttribute.prototype,{length:{get:function get(){console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');return this.array.length;}},dynamic:{get:function get(){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');return this.usage===DynamicDrawUsage;},set:function set()/* value */{console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');this.setUsage(DynamicDrawUsage);}}});Object.assign(BufferAttribute.prototype,{setDynamic:function setDynamic(value){console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;},copyIndicesArray:function copyIndicesArray()/* indices */{console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');},setArray:function setArray()/* array */{console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');}});Object.assign(BufferGeometry.prototype,{addIndex:function addIndex(index){console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');this.setIndex(index);},addAttribute:function addAttribute(name,attribute){console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');if(!(attribute&&attribute.isBufferAttribute)&&!(attribute&&attribute.isInterleavedBufferAttribute)){console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');return this.setAttribute(name,new BufferAttribute(arguments[1],arguments[2]));}if(name==='index'){console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');this.setIndex(attribute);return this;}return this.setAttribute(name,attribute);},addDrawCall:function addDrawCall(start,count,indexOffset){if(indexOffset!==undefined){console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');}console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');this.addGroup(start,count);},clearDrawCalls:function clearDrawCalls(){console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');this.clearGroups();},computeTangents:function computeTangents(){console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');},computeOffsets:function computeOffsets(){console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');},removeAttribute:function removeAttribute(name){console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');return this.deleteAttribute(name);},applyMatrix:function applyMatrix(matrix){console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);}});Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function get(){console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');return this.groups;}},offsets:{get:function get(){console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');return this.groups;}}});Object.defineProperties(InstancedBufferGeometry.prototype,{maxInstancedCount:{get:function get(){console.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');return this.instanceCount;},set:function set(value){console.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');this.instanceCount=value;}}});Object.defineProperties(Raycaster.prototype,{linePrecision:{get:function get(){console.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');return this.params.Line.threshold;},set:function set(value){console.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');this.params.Line.threshold=value;}}});Object.defineProperties(InterleavedBuffer.prototype,{dynamic:{get:function get(){console.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');return this.usage===DynamicDrawUsage;},set:function set(value){console.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');this.setUsage(value);}}});Object.assign(InterleavedBuffer.prototype,{setDynamic:function setDynamic(value){console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;},setArray:function setArray()/* array */{console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');}});//
     Object.assign(ExtrudeBufferGeometry.prototype,{getArrays:function getArrays(){console.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');},addShapeList:function addShapeList(){console.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');},addShape:function addShape(){console.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');}});//
     Object.assign(Scene.prototype,{dispose:function dispose(){console.error('THREE.Scene: .dispose() has been removed.');}});//
     Object.defineProperties(Uniform.prototype,{dynamic:{set:function set(){console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');}},onUpdate:{value:function value(){console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');return this;}}});//
     Object.defineProperties(Material.prototype,{wrapAround:{get:function get(){console.warn('THREE.Material: .wrapAround has been removed.');},set:function set(){console.warn('THREE.Material: .wrapAround has been removed.');}},overdraw:{get:function get(){console.warn('THREE.Material: .overdraw has been removed.');},set:function set(){console.warn('THREE.Material: .overdraw has been removed.');}},wrapRGB:{get:function get(){console.warn('THREE.Material: .wrapRGB has been removed.');return new Color();}},shading:{get:function get(){console.error('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');},set:function set(value){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=value===FlatShading;}},stencilMask:{get:function get(){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');return this.stencilFuncMask;},set:function set(value){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');this.stencilFuncMask=value;}}});Object.defineProperties(MeshPhongMaterial.prototype,{metal:{get:function get(){console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');return false;},set:function set(){console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');}}});Object.defineProperties(MeshPhysicalMaterial.prototype,{transparency:{get:function get(){console.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');return this.transmission;},set:function set(value){console.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');this.transmission=value;}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function get(){console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');return this.extensions.derivatives;},set:function set(value){console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');this.extensions.derivatives=value;}}});//
     Object.assign(WebGLRenderer.prototype,{clearTarget:function clearTarget(renderTarget,color,depth,stencil){console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');this.setRenderTarget(renderTarget);this.clear(color,depth,stencil);},animate:function animate(callback){console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');this.setAnimationLoop(callback);},getCurrentRenderTarget:function getCurrentRenderTarget(){console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');return this.getRenderTarget();},getMaxAnisotropy:function getMaxAnisotropy(){console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');return this.capabilities.getMaxAnisotropy();},getPrecision:function getPrecision(){console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');return this.capabilities.precision;},resetGLState:function resetGLState(){console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');return this.state.reset();},supportsFloatTextures:function supportsFloatTextures(){console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');return this.extensions.get('OES_texture_float');},supportsHalfFloatTextures:function supportsHalfFloatTextures(){console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');return this.extensions.get('OES_texture_half_float');},supportsStandardDerivatives:function supportsStandardDerivatives(){console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');return this.extensions.get('OES_standard_derivatives');},supportsCompressedTextureS3TC:function supportsCompressedTextureS3TC(){console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');return this.extensions.get('WEBGL_compressed_texture_s3tc');},supportsCompressedTexturePVRTC:function supportsCompressedTexturePVRTC(){console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');return this.extensions.get('WEBGL_compressed_texture_pvrtc');},supportsBlendMinMax:function supportsBlendMinMax(){console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');return this.extensions.get('EXT_blend_minmax');},supportsVertexTextures:function supportsVertexTextures(){console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');return this.capabilities.vertexTextures;},supportsInstancedArrays:function supportsInstancedArrays(){console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');return this.extensions.get('ANGLE_instanced_arrays');},enableScissorTest:function enableScissorTest(boolean){console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');this.setScissorTest(boolean);},initMaterial:function initMaterial(){console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');},addPrePlugin:function addPrePlugin(){console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');},addPostPlugin:function addPostPlugin(){console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');},updateShadowMap:function updateShadowMap(){console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');},setFaceCulling:function setFaceCulling(){console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');},allocTextureUnit:function allocTextureUnit(){console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');},setTexture:function setTexture(){console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');},setTexture2D:function setTexture2D(){console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');},setTextureCube:function setTextureCube(){console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');},getActiveMipMapLevel:function getActiveMipMapLevel(){console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');return this.getActiveMipmapLevel();}});Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function get(){return this.shadowMap.enabled;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');this.shadowMap.enabled=value;}},shadowMapType:{get:function get(){return this.shadowMap.type;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');this.shadowMap.type=value;}},shadowMapCullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set()/* value */{console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');}},context:{get:function get(){console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');return this.getContext();}},vr:{get:function get(){console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');return this.xr;}},gammaInput:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');return false;},set:function set(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');}},gammaOutput:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');return false;},set:function set(value){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');this.outputEncoding=value===true?sRGBEncoding:LinearEncoding;}},toneMappingWhitePoint:{get:function get(){console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');return 1.0;},set:function set(){console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set()/* cullFace */{console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');}},renderReverseSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');}},renderSingleSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');}}});//
     Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');return this.texture.wrapS;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');this.texture.wrapS=value;}},wrapT:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');return this.texture.wrapT;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');this.texture.wrapT=value;}},magFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');return this.texture.magFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');this.texture.magFilter=value;}},minFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');return this.texture.minFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');this.texture.minFilter=value;}},anisotropy:{get:function get(){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');return this.texture.anisotropy;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');this.texture.anisotropy=value;}},offset:{get:function get(){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');return this.texture.offset;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');this.texture.offset=value;}},repeat:{get:function get(){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');return this.texture.repeat;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');this.texture.repeat=value;}},format:{get:function get(){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');return this.texture.format;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');this.texture.format=value;}},type:{get:function get(){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');return this.texture.type;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');this.texture.type=value;}},generateMipmaps:{get:function get(){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');return this.texture.generateMipmaps;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');this.texture.generateMipmaps=value;}}});//
     Object.defineProperties(Audio.prototype,{load:{value:function value(file){console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');var scope=this;var audioLoader=new AudioLoader();audioLoader.load(file,function(buffer){scope.setBuffer(buffer);});return this;}},startTime:{set:function set(){console.warn('THREE.Audio: .startTime is now .play( delay ).');}}});//
     CubeCamera.prototype.updateCubeMap=function(renderer,scene){console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');return this.update(renderer,scene);};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(url,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');var loader=new TextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(url,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadTextureCube=function(urls,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');var loader=new CubeTextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(urls,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadCompressedTexture=function(){console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');};ImageUtils.loadCompressedTextureCube=function(){console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');};if(typeof __THREE_DEVTOOLS__!=='undefined'){/* eslint-disable no-undef */__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register',{detail:{revision:REVISION}}));/* eslint-enable no-undef */}var DRACOLoader=function DRACOLoader(manager){Loader.call(this,manager);this.decoderPath='';this.decoderConfig={};this.decoderBinary=null;this.decoderPending=null;this.workerLimit=4;this.workerPool=[];this.workerNextTaskID=1;this.workerSourceURL='';this.defaultAttributeIDs={position:'POSITION',normal:'NORMAL',color:'COLOR',uv:'TEX_COORD'};this.defaultAttributeTypes={position:'Float32Array',normal:'Float32Array',color:'Float32Array',uv:'Float32Array'};};DRACOLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:DRACOLoader,setDecoderPath:function setDecoderPath(path){this.decoderPath=path;return this;},setDecoderConfig:function setDecoderConfig(config){this.decoderConfig=config;return this;},setWorkerLimit:function setWorkerLimit(workerLimit){this.workerLimit=workerLimit;return this;},/** @deprecated */setVerbosity:function setVerbosity(){console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');},/** @deprecated */setDrawMode:function setDrawMode(){console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');},/** @deprecated */setSkipDequantization:function setSkipDequantization(){console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');},load:function load(url,onLoad,onProgress,onError){var _this18=this;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(buffer){var taskConfig={attributeIDs:_this18.defaultAttributeIDs,attributeTypes:_this18.defaultAttributeTypes,useUniqueIDs:false};_this18.decodeGeometry(buffer,taskConfig).then(onLoad).catch(onError);},onProgress,onError);},/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */decodeDracoFile:function decodeDracoFile(buffer,callback,attributeIDs,attributeTypes){var taskConfig={attributeIDs:attributeIDs||this.defaultAttributeIDs,attributeTypes:attributeTypes||this.defaultAttributeTypes,useUniqueIDs:!!attributeIDs};this.decodeGeometry(buffer,taskConfig).then(callback);},decodeGeometry:function decodeGeometry(buffer,taskConfig){var _this19=this;// TODO: For backward-compatibility, support 'attributeTypes' objects containing
     // references (rather than names) to typed array constructors. These must be
     // serialized before sending them to the worker.
     for(var attribute in taskConfig.attributeTypes){var type=taskConfig.attributeTypes[attribute];if(type.BYTES_PER_ELEMENT!==undefined){taskConfig.attributeTypes[attribute]=type.name;}}//
     var taskKey=JSON.stringify(taskConfig);// Check for an existing task using this buffer. A transferred buffer cannot be transferred
     // again from this thread.
     if(DRACOLoader.taskCache.has(buffer)){var cachedTask=DRACOLoader.taskCache.get(buffer);if(cachedTask.key===taskKey){return cachedTask.promise;}else if(buffer.byteLength===0){// Technically, it would be possible to wait for the previous task to complete,
     // transfer the buffer back, and decode again with the second configuration. That
     // is complex, and I don't know of any reason to decode a Draco buffer twice in
     // different ways, so this is left unimplemented.
     throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different '+'settings. Buffer has already been transferred.');}}//
     var worker;var taskID=this.workerNextTaskID++;var taskCost=buffer.byteLength;// Obtain a worker and assign a task, and construct a geometry instance
     // when the task completes.
     var geometryPending=this._getWorker(taskID,taskCost).then(function(_worker){worker=_worker;return new Promise(function(resolve,reject){worker._callbacks[taskID]={resolve:resolve,reject:reject};worker.postMessage({type:'decode',id:taskID,taskConfig:taskConfig,buffer:buffer},[buffer]);// this.debug();
     });}).then(function(message){return _this19._createGeometry(message.geometry);});// Remove task from the task list.
     // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)
     geometryPending.catch(function(){return true;}).then(function(){if(worker&&taskID){_this19._releaseTask(worker,taskID);// this.debug();
     }});// Cache the task result.
     DRACOLoader.taskCache.set(buffer,{key:taskKey,promise:geometryPending});return geometryPending;},_createGeometry:function _createGeometry(geometryData){var geometry=new BufferGeometry();if(geometryData.index){geometry.setIndex(new BufferAttribute(geometryData.index.array,1));}for(var i=0;i<geometryData.attributes.length;i++){var attribute=geometryData.attributes[i];var name=attribute.name;var array=attribute.array;var itemSize=attribute.itemSize;geometry.setAttribute(name,new BufferAttribute(array,itemSize));}return geometry;},_loadLibrary:function _loadLibrary(url,responseType){var loader=new FileLoader(this.manager);loader.setPath(this.decoderPath);loader.setResponseType(responseType);loader.setWithCredentials(this.withCredentials);return new Promise(function(resolve,reject){loader.load(url,resolve,undefined,reject);});},preload:function preload(){this._initDecoder();return this;},_initDecoder:function _initDecoder(){var _this20=this;if(this.decoderPending)return this.decoderPending;var useJS=(typeof WebAssembly==="undefined"?"undefined":_typeof(WebAssembly))!=='object'||this.decoderConfig.type==='js';var librariesPending=[];if(useJS){librariesPending.push(this._loadLibrary('draco_decoder.js','text'));}else{librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js','text'));librariesPending.push(this._loadLibrary('draco_decoder.wasm','arraybuffer'));}this.decoderPending=Promise.all(librariesPending).then(function(libraries){var jsContent=libraries[0];if(!useJS){_this20.decoderConfig.wasmBinary=libraries[1];}var fn=DRACOLoader.DRACOWorker.toString();var body=['/* draco decoder */',jsContent,'','/* worker */',fn.substring(fn.indexOf('{')+1,fn.lastIndexOf('}'))].join('\n');_this20.workerSourceURL=URL.createObjectURL(new Blob([body]));});return this.decoderPending;},_getWorker:function _getWorker(taskID,taskCost){var _this21=this;return this._initDecoder().then(function(){if(_this21.workerPool.length<_this21.workerLimit){var worker=new Worker(_this21.workerSourceURL);worker._callbacks={};worker._taskCosts={};worker._taskLoad=0;worker.postMessage({type:'init',decoderConfig:_this21.decoderConfig});worker.onmessage=function(e){var message=e.data;switch(message.type){case'decode':worker._callbacks[message.id].resolve(message);break;case'error':worker._callbacks[message.id].reject(message);break;default:console.error('THREE.DRACOLoader: Unexpected message, "'+message.type+'"');}};_this21.workerPool.push(worker);}else{_this21.workerPool.sort(function(a,b){return a._taskLoad>b._taskLoad?-1:1;});}var worker=_this21.workerPool[_this21.workerPool.length-1];worker._taskCosts[taskID]=taskCost;worker._taskLoad+=taskCost;return worker;});},_releaseTask:function _releaseTask(worker,taskID){worker._taskLoad-=worker._taskCosts[taskID];delete worker._callbacks[taskID];delete worker._taskCosts[taskID];},debug:function debug(){console.log('Task load: ',this.workerPool.map(function(worker){return worker._taskLoad;}));},dispose:function dispose(){for(var i=0;i<this.workerPool.length;++i){this.workerPool[i].terminate();}this.workerPool.length=0;return this;}});/* WEB WORKER */DRACOLoader.DRACOWorker=function(){var decoderConfig;var decoderPending;onmessage=function onmessage(e){var message=e.data;switch(message.type){case'init':decoderConfig=message.decoderConfig;decoderPending=new Promise(function(resolve/*, reject*/){decoderConfig.onModuleLoaded=function(draco){// Module is Promise-like. Wrap before resolving to avoid loop.
     resolve({draco:draco});};DracoDecoderModule(decoderConfig);// eslint-disable-line no-undef
     });break;case'decode':var buffer=message.buffer;var taskConfig=message.taskConfig;decoderPending.then(function(module){var draco=module.draco;var decoder=new draco.Decoder();var decoderBuffer=new draco.DecoderBuffer();decoderBuffer.Init(new Int8Array(buffer),buffer.byteLength);try{var geometry=decodeGeometry(draco,decoder,decoderBuffer,taskConfig);var buffers=geometry.attributes.map(function(attr){return attr.array.buffer;});if(geometry.index)buffers.push(geometry.index.array.buffer);self.postMessage({type:'decode',id:message.id,geometry:geometry},buffers);}catch(error){console.error(error);self.postMessage({type:'error',id:message.id,error:error.message});}finally{draco.destroy(decoderBuffer);draco.destroy(decoder);}});break;}};function decodeGeometry(draco,decoder,decoderBuffer,taskConfig){var attributeIDs=taskConfig.attributeIDs;var attributeTypes=taskConfig.attributeTypes;var dracoGeometry;var decodingStatus;var geometryType=decoder.GetEncodedGeometryType(decoderBuffer);if(geometryType===draco.TRIANGULAR_MESH){dracoGeometry=new draco.Mesh();decodingStatus=decoder.DecodeBufferToMesh(decoderBuffer,dracoGeometry);}else if(geometryType===draco.POINT_CLOUD){dracoGeometry=new draco.PointCloud();decodingStatus=decoder.DecodeBufferToPointCloud(decoderBuffer,dracoGeometry);}else{throw new Error('THREE.DRACOLoader: Unexpected geometry type.');}if(!decodingStatus.ok()||dracoGeometry.ptr===0){throw new Error('THREE.DRACOLoader: Decoding failed: '+decodingStatus.error_msg());}var geometry={index:null,attributes:[]};// Gather all vertex attributes.
     for(var attributeName in attributeIDs){var attributeType=self[attributeTypes[attributeName]];var attribute;var attributeID;// A Draco file may be created with default vertex attributes, whose attribute IDs
     // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,
     // a Draco file may contain a custom set of attributes, identified by known unique
     // IDs. glTF files always do the latter, and `.drc` files typically do the former.
     if(taskConfig.useUniqueIDs){attributeID=attributeIDs[attributeName];attribute=decoder.GetAttributeByUniqueId(dracoGeometry,attributeID);}else{attributeID=decoder.GetAttributeId(dracoGeometry,draco[attributeIDs[attributeName]]);if(attributeID===-1)continue;attribute=decoder.GetAttribute(dracoGeometry,attributeID);}geometry.attributes.push(decodeAttribute(draco,decoder,dracoGeometry,attributeName,attributeType,attribute));}// Add index.
     if(geometryType===draco.TRIANGULAR_MESH){geometry.index=decodeIndex(draco,decoder,dracoGeometry);}draco.destroy(dracoGeometry);return geometry;}function decodeIndex(draco,decoder,dracoGeometry){var numFaces=dracoGeometry.num_faces();var numIndices=numFaces*3;var byteLength=numIndices*4;var ptr=draco._malloc(byteLength);decoder.GetTrianglesUInt32Array(dracoGeometry,byteLength,ptr);var index=new Uint32Array(draco.HEAPF32.buffer,ptr,numIndices).slice();draco._free(ptr);return{array:index,itemSize:1};}function decodeAttribute(draco,decoder,dracoGeometry,attributeName,attributeType,attribute){var numComponents=attribute.num_components();var numPoints=dracoGeometry.num_points();var numValues=numPoints*numComponents;var byteLength=numValues*attributeType.BYTES_PER_ELEMENT;var dataType=getDracoDataType(draco,attributeType);var ptr=draco._malloc(byteLength);decoder.GetAttributeDataArrayForAllPoints(dracoGeometry,attribute,dataType,byteLength,ptr);var array=new attributeType(draco.HEAPF32.buffer,ptr,numValues).slice();draco._free(ptr);return{name:attributeName,array:array,itemSize:numComponents};}function getDracoDataType(draco,attributeType){switch(attributeType){case Float32Array:return draco.DT_FLOAT32;case Int8Array:return draco.DT_INT8;case Int16Array:return draco.DT_INT16;case Int32Array:return draco.DT_INT32;case Uint8Array:return draco.DT_UINT8;case Uint16Array:return draco.DT_UINT16;case Uint32Array:return draco.DT_UINT32;}}};DRACOLoader.taskCache=new WeakMap();/** Deprecated static methods */ /** @deprecated */DRACOLoader.setDecoderPath=function(){console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');};/** @deprecated */DRACOLoader.setDecoderConfig=function(){console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');};/** @deprecated */DRACOLoader.releaseDecoderModule=function(){console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');};/** @deprecated */DRACOLoader.getDecoderModule=function(){console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');};var GLTFLoader=function(){function GLTFLoader(manager){Loader.call(this,manager);this.dracoLoader=null;this.ddsLoader=null;this.ktx2Loader=null;this.pluginCallbacks=[];this.register(function(parser){return new GLTFMaterialsClearcoatExtension(parser);});this.register(function(parser){return new GLTFTextureBasisUExtension(parser);});this.register(function(parser){return new GLTFMaterialsTransmissionExtension(parser);});this.register(function(parser){return new GLTFLightsExtension(parser);});}GLTFLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:GLTFLoader,load:function load(url,onLoad,onProgress,onError){var scope=this;var resourcePath;if(this.resourcePath!==''){resourcePath=this.resourcePath;}else if(this.path!==''){resourcePath=this.path;}else{resourcePath=LoaderUtils.extractUrlBase(url);}// Tells the LoadingManager to track an extra item, which resolves after
     // the model is fully loaded. This means the count of items loaded will
     // be incorrect, but ensures manager.onLoad() does not fire early.
     this.manager.itemStart(url);var _onError=function _onError(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);scope.manager.itemEnd(url);};var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(data){try{scope.parse(data,resourcePath,function(gltf){onLoad(gltf);scope.manager.itemEnd(url);},_onError);}catch(e){_onError(e);}},onProgress,_onError);},setDRACOLoader:function setDRACOLoader(dracoLoader){this.dracoLoader=dracoLoader;return this;},setDDSLoader:function setDDSLoader(ddsLoader){this.ddsLoader=ddsLoader;return this;},setKTX2Loader:function setKTX2Loader(ktx2Loader){this.ktx2Loader=ktx2Loader;return this;},register:function register(callback){if(this.pluginCallbacks.indexOf(callback)===-1){this.pluginCallbacks.push(callback);}return this;},unregister:function unregister(callback){if(this.pluginCallbacks.indexOf(callback)!==-1){this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback),1);}return this;},parse:function parse(data,path,onLoad,onError){var content;var extensions={};var plugins={};if(typeof data==='string'){content=data;}else{var magic=LoaderUtils.decodeText(new Uint8Array(data,0,4));if(magic===BINARY_EXTENSION_HEADER_MAGIC){try{extensions[EXTENSIONS.KHR_BINARY_GLTF]=new GLTFBinaryExtension(data);}catch(error){if(onError)onError(error);return;}content=extensions[EXTENSIONS.KHR_BINARY_GLTF].content;}else{content=LoaderUtils.decodeText(new Uint8Array(data));}}var json=JSON.parse(content);if(json.asset===undefined||json.asset.version[0]<2){if(onError)onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));return;}var parser=new GLTFParser(json,{path:path||this.resourcePath||'',crossOrigin:this.crossOrigin,manager:this.manager,ktx2Loader:this.ktx2Loader});parser.fileLoader.setRequestHeader(this.requestHeader);for(var i=0;i<this.pluginCallbacks.length;i++){var plugin=this.pluginCallbacks[i](parser);plugins[plugin.name]=plugin;// Workaround to avoid determining as unknown extension
     // in addUnknownExtensionsToUserData().
     // Remove this workaround if we move all the existing
     // extension handlers to plugin system
     extensions[plugin.name]=true;}if(json.extensionsUsed){for(var i=0;i<json.extensionsUsed.length;++i){var extensionName=json.extensionsUsed[i];var extensionsRequired=json.extensionsRequired||[];switch(extensionName){case EXTENSIONS.KHR_MATERIALS_UNLIT:extensions[extensionName]=new GLTFMaterialsUnlitExtension();break;case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:extensions[extensionName]=new GLTFMaterialsPbrSpecularGlossinessExtension();break;case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:extensions[extensionName]=new GLTFDracoMeshCompressionExtension(json,this.dracoLoader);break;case EXTENSIONS.MSFT_TEXTURE_DDS:extensions[extensionName]=new GLTFTextureDDSExtension(this.ddsLoader);break;case EXTENSIONS.KHR_TEXTURE_TRANSFORM:extensions[extensionName]=new GLTFTextureTransformExtension();break;case EXTENSIONS.KHR_MESH_QUANTIZATION:extensions[extensionName]=new GLTFMeshQuantizationExtension();break;default:if(extensionsRequired.indexOf(extensionName)>=0&&plugins[extensionName]===undefined){console.warn('THREE.GLTFLoader: Unknown extension "'+extensionName+'".');}}}}parser.setExtensions(extensions);parser.setPlugins(plugins);parser.parse(onLoad,onError);}});/* GLTFREGISTRY */function GLTFRegistry(){var objects={};return{get:function get(key){return objects[key];},add:function add(key,object){objects[key]=object;},remove:function remove(key){delete objects[key];},removeAll:function removeAll(){objects={};}};}/*********************************/ /********** EXTENSIONS ***********/ /*********************************/var EXTENSIONS={KHR_BINARY_GLTF:'KHR_binary_glTF',KHR_DRACO_MESH_COMPRESSION:'KHR_draco_mesh_compression',KHR_LIGHTS_PUNCTUAL:'KHR_lights_punctual',KHR_MATERIALS_CLEARCOAT:'KHR_materials_clearcoat',KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:'KHR_materials_pbrSpecularGlossiness',KHR_MATERIALS_TRANSMISSION:'KHR_materials_transmission',KHR_MATERIALS_UNLIT:'KHR_materials_unlit',KHR_TEXTURE_BASISU:'KHR_texture_basisu',KHR_TEXTURE_TRANSFORM:'KHR_texture_transform',KHR_MESH_QUANTIZATION:'KHR_mesh_quantization',MSFT_TEXTURE_DDS:'MSFT_texture_dds'};/**
               * DDS Texture Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds
               *
               */function GLTFTextureDDSExtension(ddsLoader){if(!ddsLoader){throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader');}this.name=EXTENSIONS.MSFT_TEXTURE_DDS;this.ddsLoader=ddsLoader;}/**
               * Punctual Lights Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual
               */function GLTFLightsExtension(parser){this.parser=parser;this.name=EXTENSIONS.KHR_LIGHTS_PUNCTUAL;// Object3D instance caches
     this.cache={refs:{},uses:{}};}GLTFLightsExtension.prototype._markDefs=function(){var parser=this.parser;var nodeDefs=this.parser.json.nodes||[];for(var nodeIndex=0,nodeLength=nodeDefs.length;nodeIndex<nodeLength;nodeIndex++){var nodeDef=nodeDefs[nodeIndex];if(nodeDef.extensions&&nodeDef.extensions[this.name]&&nodeDef.extensions[this.name].light!==undefined){parser._addNodeRef(this.cache,nodeDef.extensions[this.name].light);}}};GLTFLightsExtension.prototype._loadLight=function(lightIndex){var parser=this.parser;var cacheKey='light:'+lightIndex;var dependency=parser.cache.get(cacheKey);if(dependency)return dependency;var json=parser.json;var extensions=json.extensions&&json.extensions[this.name]||{};var lightDefs=extensions.lights||[];var lightDef=lightDefs[lightIndex];var lightNode;var color=new Color(0xffffff);if(lightDef.color!==undefined)color.fromArray(lightDef.color);var range=lightDef.range!==undefined?lightDef.range:0;switch(lightDef.type){case'directional':lightNode=new DirectionalLight(color);lightNode.target.position.set(0,0,-1);lightNode.add(lightNode.target);break;case'point':lightNode=new PointLight(color);lightNode.distance=range;break;case'spot':lightNode=new SpotLight(color);lightNode.distance=range;// Handle spotlight properties.
     lightDef.spot=lightDef.spot||{};lightDef.spot.innerConeAngle=lightDef.spot.innerConeAngle!==undefined?lightDef.spot.innerConeAngle:0;lightDef.spot.outerConeAngle=lightDef.spot.outerConeAngle!==undefined?lightDef.spot.outerConeAngle:Math.PI/4.0;lightNode.angle=lightDef.spot.outerConeAngle;lightNode.penumbra=1.0-lightDef.spot.innerConeAngle/lightDef.spot.outerConeAngle;lightNode.target.position.set(0,0,-1);lightNode.add(lightNode.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+lightDef.type+'".');}// Some lights (e.g. spot) default to a position other than the origin. Reset the position
     // here, because node-level parsing will only override position if explicitly specified.
     lightNode.position.set(0,0,0);lightNode.decay=2;if(lightDef.intensity!==undefined)lightNode.intensity=lightDef.intensity;lightNode.name=parser.createUniqueName(lightDef.name||'light_'+lightIndex);dependency=Promise.resolve(lightNode);parser.cache.add(cacheKey,dependency);return dependency;};GLTFLightsExtension.prototype.createNodeAttachment=function(nodeIndex){var self=this;var parser=this.parser;var json=parser.json;var nodeDef=json.nodes[nodeIndex];var lightDef=nodeDef.extensions&&nodeDef.extensions[this.name]||{};var lightIndex=lightDef.light;if(lightIndex===undefined)return null;return this._loadLight(lightIndex).then(function(light){return parser._getNodeRef(self.cache,lightIndex,light);});};/**
               * Unlit Materials Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit
               */function GLTFMaterialsUnlitExtension(){this.name=EXTENSIONS.KHR_MATERIALS_UNLIT;}GLTFMaterialsUnlitExtension.prototype.getMaterialType=function(){return MeshBasicMaterial;};GLTFMaterialsUnlitExtension.prototype.extendParams=function(materialParams,materialDef,parser){var pending=[];materialParams.color=new Color(1.0,1.0,1.0);materialParams.opacity=1.0;var metallicRoughness=materialDef.pbrMetallicRoughness;if(metallicRoughness){if(Array.isArray(metallicRoughness.baseColorFactor)){var array=metallicRoughness.baseColorFactor;materialParams.color.fromArray(array);materialParams.opacity=array[3];}if(metallicRoughness.baseColorTexture!==undefined){pending.push(parser.assignTexture(materialParams,'map',metallicRoughness.baseColorTexture));}}return Promise.all(pending);};/**
               * Clearcoat Materials Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat
               */function GLTFMaterialsClearcoatExtension(parser){this.parser=parser;this.name=EXTENSIONS.KHR_MATERIALS_CLEARCOAT;}GLTFMaterialsClearcoatExtension.prototype.getMaterialType=function(materialIndex){var parser=this.parser;var materialDef=parser.json.materials[materialIndex];if(!materialDef.extensions||!materialDef.extensions[this.name])return null;return MeshPhysicalMaterial;};GLTFMaterialsClearcoatExtension.prototype.extendMaterialParams=function(materialIndex,materialParams){var parser=this.parser;var materialDef=parser.json.materials[materialIndex];if(!materialDef.extensions||!materialDef.extensions[this.name]){return Promise.resolve();}var pending=[];var extension=materialDef.extensions[this.name];if(extension.clearcoatFactor!==undefined){materialParams.clearcoat=extension.clearcoatFactor;}if(extension.clearcoatTexture!==undefined){pending.push(parser.assignTexture(materialParams,'clearcoatMap',extension.clearcoatTexture));}if(extension.clearcoatRoughnessFactor!==undefined){materialParams.clearcoatRoughness=extension.clearcoatRoughnessFactor;}if(extension.clearcoatRoughnessTexture!==undefined){pending.push(parser.assignTexture(materialParams,'clearcoatRoughnessMap',extension.clearcoatRoughnessTexture));}if(extension.clearcoatNormalTexture!==undefined){pending.push(parser.assignTexture(materialParams,'clearcoatNormalMap',extension.clearcoatNormalTexture));if(extension.clearcoatNormalTexture.scale!==undefined){var scale=extension.clearcoatNormalTexture.scale;materialParams.clearcoatNormalScale=new Vector2(scale,scale);}}return Promise.all(pending);};/**
               * Transmission Materials Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission
               * Draft: https://github.com/KhronosGroup/glTF/pull/1698
               */function GLTFMaterialsTransmissionExtension(parser){this.parser=parser;this.name=EXTENSIONS.KHR_MATERIALS_TRANSMISSION;}GLTFMaterialsTransmissionExtension.prototype.getMaterialType=function(materialIndex){var parser=this.parser;var materialDef=parser.json.materials[materialIndex];if(!materialDef.extensions||!materialDef.extensions[this.name])return null;return MeshPhysicalMaterial;};GLTFMaterialsTransmissionExtension.prototype.extendMaterialParams=function(materialIndex,materialParams){var parser=this.parser;var materialDef=parser.json.materials[materialIndex];if(!materialDef.extensions||!materialDef.extensions[this.name]){return Promise.resolve();}var pending=[];var extension=materialDef.extensions[this.name];if(extension.transmissionFactor!==undefined){materialParams.transmission=extension.transmissionFactor;}if(extension.transmissionTexture!==undefined){pending.push(parser.assignTexture(materialParams,'transmissionMap',extension.transmissionTexture));}return Promise.all(pending);};/**
               * BasisU Texture Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu
               * (draft PR https://github.com/KhronosGroup/glTF/pull/1751)
               */function GLTFTextureBasisUExtension(parser){this.parser=parser;this.name=EXTENSIONS.KHR_TEXTURE_BASISU;}GLTFTextureBasisUExtension.prototype.loadTexture=function(textureIndex){var parser=this.parser;var json=parser.json;var textureDef=json.textures[textureIndex];if(!textureDef.extensions||!textureDef.extensions[this.name]){return null;}var extension=textureDef.extensions[this.name];var source=json.images[extension.source];var loader=parser.options.ktx2Loader;if(!loader){throw new Error('THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures');}return parser.loadTextureImage(textureIndex,source,loader);};/* BINARY EXTENSION */var BINARY_EXTENSION_HEADER_MAGIC='glTF';var BINARY_EXTENSION_HEADER_LENGTH=12;var BINARY_EXTENSION_CHUNK_TYPES={JSON:0x4E4F534A,BIN:0x004E4942};function GLTFBinaryExtension(data){this.name=EXTENSIONS.KHR_BINARY_GLTF;this.content=null;this.body=null;var headerView=new DataView(data,0,BINARY_EXTENSION_HEADER_LENGTH);this.header={magic:LoaderUtils.decodeText(new Uint8Array(data.slice(0,4))),version:headerView.getUint32(4,true),length:headerView.getUint32(8,true)};if(this.header.magic!==BINARY_EXTENSION_HEADER_MAGIC){throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');}else if(this.header.version<2.0){throw new Error('THREE.GLTFLoader: Legacy binary file detected.');}var chunkView=new DataView(data,BINARY_EXTENSION_HEADER_LENGTH);var chunkIndex=0;while(chunkIndex<chunkView.byteLength){var chunkLength=chunkView.getUint32(chunkIndex,true);chunkIndex+=4;var chunkType=chunkView.getUint32(chunkIndex,true);chunkIndex+=4;if(chunkType===BINARY_EXTENSION_CHUNK_TYPES.JSON){var contentArray=new Uint8Array(data,BINARY_EXTENSION_HEADER_LENGTH+chunkIndex,chunkLength);this.content=LoaderUtils.decodeText(contentArray);}else if(chunkType===BINARY_EXTENSION_CHUNK_TYPES.BIN){var byteOffset=BINARY_EXTENSION_HEADER_LENGTH+chunkIndex;this.body=data.slice(byteOffset,byteOffset+chunkLength);}// Clients must ignore chunks with unknown types.
     chunkIndex+=chunkLength;}if(this.content===null){throw new Error('THREE.GLTFLoader: JSON content not found.');}}/**
               * DRACO Mesh Compression Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression
               */function GLTFDracoMeshCompressionExtension(json,dracoLoader){if(!dracoLoader){throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');}this.name=EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;this.json=json;this.dracoLoader=dracoLoader;this.dracoLoader.preload();}GLTFDracoMeshCompressionExtension.prototype.decodePrimitive=function(primitive,parser){var json=this.json;var dracoLoader=this.dracoLoader;var bufferViewIndex=primitive.extensions[this.name].bufferView;var gltfAttributeMap=primitive.extensions[this.name].attributes;var threeAttributeMap={};var attributeNormalizedMap={};var attributeTypeMap={};for(var attributeName in gltfAttributeMap){var threeAttributeName=ATTRIBUTES[attributeName]||attributeName.toLowerCase();threeAttributeMap[threeAttributeName]=gltfAttributeMap[attributeName];}for(attributeName in primitive.attributes){var threeAttributeName=ATTRIBUTES[attributeName]||attributeName.toLowerCase();if(gltfAttributeMap[attributeName]!==undefined){var accessorDef=json.accessors[primitive.attributes[attributeName]];var componentType=WEBGL_COMPONENT_TYPES[accessorDef.componentType];attributeTypeMap[threeAttributeName]=componentType;attributeNormalizedMap[threeAttributeName]=accessorDef.normalized===true;}}return parser.getDependency('bufferView',bufferViewIndex).then(function(bufferView){return new Promise(function(resolve){dracoLoader.decodeDracoFile(bufferView,function(geometry){for(var attributeName in geometry.attributes){var attribute=geometry.attributes[attributeName];var normalized=attributeNormalizedMap[attributeName];if(normalized!==undefined)attribute.normalized=normalized;}resolve(geometry);},threeAttributeMap,attributeTypeMap);});});};/**
               * Texture Transform Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform
               */function GLTFTextureTransformExtension(){this.name=EXTENSIONS.KHR_TEXTURE_TRANSFORM;}GLTFTextureTransformExtension.prototype.extendTexture=function(texture,transform){texture=texture.clone();if(transform.offset!==undefined){texture.offset.fromArray(transform.offset);}if(transform.rotation!==undefined){texture.rotation=transform.rotation;}if(transform.scale!==undefined){texture.repeat.fromArray(transform.scale);}if(transform.texCoord!==undefined){console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.');}texture.needsUpdate=true;return texture;};/**
               * Specular-Glossiness Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness
               */ /**
               * A sub class of StandardMaterial with some of the functionality
               * changed via the `onBeforeCompile` callback
               * @pailhead
               */function GLTFMeshStandardSGMaterial(params){MeshStandardMaterial.call(this);this.isGLTFSpecularGlossinessMaterial=true;//various chunks that need replacing
     var specularMapParsFragmentChunk=['#ifdef USE_SPECULARMAP','	uniform sampler2D specularMap;','#endif'].join('\n');var glossinessMapParsFragmentChunk=['#ifdef USE_GLOSSINESSMAP','	uniform sampler2D glossinessMap;','#endif'].join('\n');var specularMapFragmentChunk=['vec3 specularFactor = specular;','#ifdef USE_SPECULARMAP','	vec4 texelSpecular = texture2D( specularMap, vUv );','	texelSpecular = sRGBToLinear( texelSpecular );','	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture','	specularFactor *= texelSpecular.rgb;','#endif'].join('\n');var glossinessMapFragmentChunk=['float glossinessFactor = glossiness;','#ifdef USE_GLOSSINESSMAP','	vec4 texelGlossiness = texture2D( glossinessMap, vUv );','	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture','	glossinessFactor *= texelGlossiness.a;','#endif'].join('\n');var lightPhysicalFragmentChunk=['PhysicalMaterial material;','material.diffuseColor = diffuseColor.rgb * ( 1. - max( specularFactor.r, max( specularFactor.g, specularFactor.b ) ) );','vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );','float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );','material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.','material.specularRoughness += geometryRoughness;','material.specularRoughness = min( material.specularRoughness, 1.0 );','material.specularColor = specularFactor;'].join('\n');var uniforms={specular:{value:new Color().setHex(0xffffff)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=uniforms;this.onBeforeCompile=function(shader){for(var uniformName in uniforms){shader.uniforms[uniformName]=uniforms[uniformName];}shader.fragmentShader=shader.fragmentShader.replace('uniform float roughness;','uniform vec3 specular;').replace('uniform float metalness;','uniform float glossiness;').replace('#include <roughnessmap_pars_fragment>',specularMapParsFragmentChunk).replace('#include <metalnessmap_pars_fragment>',glossinessMapParsFragmentChunk).replace('#include <roughnessmap_fragment>',specularMapFragmentChunk).replace('#include <metalnessmap_fragment>',glossinessMapFragmentChunk).replace('#include <lights_physical_fragment>',lightPhysicalFragmentChunk);};Object.defineProperties(this,{specular:{get:function get(){return uniforms.specular.value;},set:function set(v){uniforms.specular.value=v;}},specularMap:{get:function get(){return uniforms.specularMap.value;},set:function set(v){uniforms.specularMap.value=v;if(v){this.defines.USE_SPECULARMAP='';// USE_UV is set by the renderer for specular maps
     }else{delete this.defines.USE_SPECULARMAP;}}},glossiness:{get:function get(){return uniforms.glossiness.value;},set:function set(v){uniforms.glossiness.value=v;}},glossinessMap:{get:function get(){return uniforms.glossinessMap.value;},set:function set(v){uniforms.glossinessMap.value=v;if(v){this.defines.USE_GLOSSINESSMAP='';this.defines.USE_UV='';}else{delete this.defines.USE_GLOSSINESSMAP;delete this.defines.USE_UV;}}}});delete this.metalness;delete this.roughness;delete this.metalnessMap;delete this.roughnessMap;this.setValues(params);}GLTFMeshStandardSGMaterial.prototype=Object.create(MeshStandardMaterial.prototype);GLTFMeshStandardSGMaterial.prototype.constructor=GLTFMeshStandardSGMaterial;GLTFMeshStandardSGMaterial.prototype.copy=function(source){MeshStandardMaterial.prototype.copy.call(this,source);this.specularMap=source.specularMap;this.specular.copy(source.specular);this.glossinessMap=source.glossinessMap;this.glossiness=source.glossiness;delete this.metalness;delete this.roughness;delete this.metalnessMap;delete this.roughnessMap;return this;};function GLTFMaterialsPbrSpecularGlossinessExtension(){return{name:EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:['color','map','lightMap','lightMapIntensity','aoMap','aoMapIntensity','emissive','emissiveIntensity','emissiveMap','bumpMap','bumpScale','normalMap','normalMapType','displacementMap','displacementScale','displacementBias','specularMap','specular','glossinessMap','glossiness','alphaMap','envMap','envMapIntensity','refractionRatio'],getMaterialType:function getMaterialType(){return GLTFMeshStandardSGMaterial;},extendParams:function extendParams(materialParams,materialDef,parser){var pbrSpecularGlossiness=materialDef.extensions[this.name];materialParams.color=new Color(1.0,1.0,1.0);materialParams.opacity=1.0;var pending=[];if(Array.isArray(pbrSpecularGlossiness.diffuseFactor)){var array=pbrSpecularGlossiness.diffuseFactor;materialParams.color.fromArray(array);materialParams.opacity=array[3];}if(pbrSpecularGlossiness.diffuseTexture!==undefined){pending.push(parser.assignTexture(materialParams,'map',pbrSpecularGlossiness.diffuseTexture));}materialParams.emissive=new Color(0.0,0.0,0.0);materialParams.glossiness=pbrSpecularGlossiness.glossinessFactor!==undefined?pbrSpecularGlossiness.glossinessFactor:1.0;materialParams.specular=new Color(1.0,1.0,1.0);if(Array.isArray(pbrSpecularGlossiness.specularFactor)){materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);}if(pbrSpecularGlossiness.specularGlossinessTexture!==undefined){var specGlossMapDef=pbrSpecularGlossiness.specularGlossinessTexture;pending.push(parser.assignTexture(materialParams,'glossinessMap',specGlossMapDef));pending.push(parser.assignTexture(materialParams,'specularMap',specGlossMapDef));}return Promise.all(pending);},createMaterial:function createMaterial(materialParams){var material=new GLTFMeshStandardSGMaterial(materialParams);material.fog=true;material.color=materialParams.color;material.map=materialParams.map===undefined?null:materialParams.map;material.lightMap=null;material.lightMapIntensity=1.0;material.aoMap=materialParams.aoMap===undefined?null:materialParams.aoMap;material.aoMapIntensity=1.0;material.emissive=materialParams.emissive;material.emissiveIntensity=1.0;material.emissiveMap=materialParams.emissiveMap===undefined?null:materialParams.emissiveMap;material.bumpMap=materialParams.bumpMap===undefined?null:materialParams.bumpMap;material.bumpScale=1;material.normalMap=materialParams.normalMap===undefined?null:materialParams.normalMap;material.normalMapType=TangentSpaceNormalMap;if(materialParams.normalScale)material.normalScale=materialParams.normalScale;material.displacementMap=null;material.displacementScale=1;material.displacementBias=0;material.specularMap=materialParams.specularMap===undefined?null:materialParams.specularMap;material.specular=materialParams.specular;material.glossinessMap=materialParams.glossinessMap===undefined?null:materialParams.glossinessMap;material.glossiness=materialParams.glossiness;material.alphaMap=null;material.envMap=materialParams.envMap===undefined?null:materialParams.envMap;material.envMapIntensity=1.0;material.refractionRatio=0.98;return material;}};}/**
               * Mesh Quantization Extension
               *
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization
               */function GLTFMeshQuantizationExtension(){this.name=EXTENSIONS.KHR_MESH_QUANTIZATION;}/*********************************/ /********** INTERPOLATION ********/ /*********************************/ // Spline Interpolation
     // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation
     function GLTFCubicSplineInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}GLTFCubicSplineInterpolant.prototype=Object.create(Interpolant.prototype);GLTFCubicSplineInterpolant.prototype.constructor=GLTFCubicSplineInterpolant;GLTFCubicSplineInterpolant.prototype.copySampleValue_=function(index){// Copies a sample value to the result buffer. See description of glTF
     // CUBICSPLINE values layout in interpolate_() function below.
     var result=this.resultBuffer,values=this.sampleValues,valueSize=this.valueSize,offset=index*valueSize*3+valueSize;for(var i=0;i!==valueSize;i++){result[i]=values[offset+i];}return result;};GLTFCubicSplineInterpolant.prototype.beforeStart_=GLTFCubicSplineInterpolant.prototype.copySampleValue_;GLTFCubicSplineInterpolant.prototype.afterEnd_=GLTFCubicSplineInterpolant.prototype.copySampleValue_;GLTFCubicSplineInterpolant.prototype.interpolate_=function(i1,t0,t,t1){var result=this.resultBuffer;var values=this.sampleValues;var stride=this.valueSize;var stride2=stride*2;var stride3=stride*3;var td=t1-t0;var p=(t-t0)/td;var pp=p*p;var ppp=pp*p;var offset1=i1*stride3;var offset0=offset1-stride3;var s2=-2*ppp+3*pp;var s3=ppp-pp;var s0=1-s2;var s1=s3-pp+p;// Layout of keyframe output values for CUBICSPLINE animations:
     //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]
     for(var i=0;i!==stride;i++){var p0=values[offset0+i+stride];// splineVertex_k
     var m0=values[offset0+i+stride2]*td;// outTangent_k * (t_k+1 - t_k)
     var p1=values[offset1+i+stride];// splineVertex_k+1
     var m1=values[offset1+i]*td;// inTangent_k+1 * (t_k+1 - t_k)
     result[i]=s0*p0+s1*m0+s2*p1+s3*m1;}return result;};/*********************************/ /********** INTERNALS ************/ /*********************************/ /* CONSTANTS */var WEBGL_CONSTANTS={FLOAT:5126,//FLOAT_MAT2: 35674,
     FLOAT_MAT3:35675,FLOAT_MAT4:35676,FLOAT_VEC2:35664,FLOAT_VEC3:35665,FLOAT_VEC4:35666,LINEAR:9729,REPEAT:10497,SAMPLER_2D:35678,POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,UNSIGNED_BYTE:5121,UNSIGNED_SHORT:5123};var WEBGL_COMPONENT_TYPES={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};var WEBGL_FILTERS={9728:NearestFilter,9729:LinearFilter,9984:NearestMipmapNearestFilter,9985:LinearMipmapNearestFilter,9986:NearestMipmapLinearFilter,9987:LinearMipmapLinearFilter};var WEBGL_WRAPPINGS={33071:ClampToEdgeWrapping,33648:MirroredRepeatWrapping,10497:RepeatWrapping};var WEBGL_TYPE_SIZES={'SCALAR':1,'VEC2':2,'VEC3':3,'VEC4':4,'MAT2':4,'MAT3':9,'MAT4':16};var ATTRIBUTES={POSITION:'position',NORMAL:'normal',TANGENT:'tangent',TEXCOORD_0:'uv',TEXCOORD_1:'uv2',COLOR_0:'color',WEIGHTS_0:'skinWeight',JOINTS_0:'skinIndex'};var PATH_PROPERTIES={scale:'scale',translation:'position',rotation:'quaternion',weights:'morphTargetInfluences'};var INTERPOLATION={CUBICSPLINE:undefined,// We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each
     // keyframe track will be initialized with a default interpolation type, then modified.
     LINEAR:InterpolateLinear,STEP:InterpolateDiscrete};var ALPHA_MODES={OPAQUE:'OPAQUE',MASK:'MASK',BLEND:'BLEND'};/* UTILITY FUNCTIONS */function resolveURL(url,path){// Invalid URL
     if(typeof url!=='string'||url==='')return'';// Host Relative URL
     if(/^https?:\/\//i.test(path)&&/^\//.test(url)){path=path.replace(/(^https?:\/\/[^\/]+).*/i,'$1');}// Absolute URL http://,https://,//
     if(/^(https?:)?\/\//i.test(url))return url;// Data URI
     if(/^data:.*,.*$/i.test(url))return url;// Blob URL
     if(/^blob:.*$/i.test(url))return url;// Relative URL
     return path+url;}/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material
               */function createDefaultMaterial(cache){if(cache['DefaultMaterial']===undefined){cache['DefaultMaterial']=new MeshStandardMaterial({color:0xFFFFFF,emissive:0x000000,metalness:1,roughness:1,transparent:false,depthTest:true,side:FrontSide});}return cache['DefaultMaterial'];}function addUnknownExtensionsToUserData(knownExtensions,object,objectDef){// Add unknown glTF extensions to an object's userData.
     for(var name in objectDef.extensions){if(knownExtensions[name]===undefined){object.userData.gltfExtensions=object.userData.gltfExtensions||{};object.userData.gltfExtensions[name]=objectDef.extensions[name];}}}/**
               * @param {Object3D|Material|BufferGeometry} object
               * @param {GLTF.definition} gltfDef
               */function assignExtrasToUserData(object,gltfDef){if(gltfDef.extras!==undefined){if(_typeof(gltfDef.extras)==='object'){Object.assign(object.userData,gltfDef.extras);}else{console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, '+gltfDef.extras);}}}/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets
               *
               * @param {BufferGeometry} geometry
               * @param {Array<GLTF.Target>} targets
               * @param {GLTFParser} parser
               * @return {Promise<BufferGeometry>}
               */function addMorphTargets(geometry,targets,parser){var hasMorphPosition=false;var hasMorphNormal=false;for(var i=0,il=targets.length;i<il;i++){var target=targets[i];if(target.POSITION!==undefined)hasMorphPosition=true;if(target.NORMAL!==undefined)hasMorphNormal=true;if(hasMorphPosition&&hasMorphNormal)break;}if(!hasMorphPosition&&!hasMorphNormal)return Promise.resolve(geometry);var pendingPositionAccessors=[];var pendingNormalAccessors=[];for(var i=0,il=targets.length;i<il;i++){var target=targets[i];if(hasMorphPosition){var pendingAccessor=target.POSITION!==undefined?parser.getDependency('accessor',target.POSITION):geometry.attributes.position;pendingPositionAccessors.push(pendingAccessor);}if(hasMorphNormal){var pendingAccessor=target.NORMAL!==undefined?parser.getDependency('accessor',target.NORMAL):geometry.attributes.normal;pendingNormalAccessors.push(pendingAccessor);}}return Promise.all([Promise.all(pendingPositionAccessors),Promise.all(pendingNormalAccessors)]).then(function(accessors){var morphPositions=accessors[0];var morphNormals=accessors[1];if(hasMorphPosition)geometry.morphAttributes.position=morphPositions;if(hasMorphNormal)geometry.morphAttributes.normal=morphNormals;geometry.morphTargetsRelative=true;return geometry;});}/**
               * @param {Mesh} mesh
               * @param {GLTF.Mesh} meshDef
               */function updateMorphTargets(mesh,meshDef){mesh.updateMorphTargets();if(meshDef.weights!==undefined){for(var i=0,il=meshDef.weights.length;i<il;i++){mesh.morphTargetInfluences[i]=meshDef.weights[i];}}// .extras has user-defined data, so check that .extras.targetNames is an array.
     if(meshDef.extras&&Array.isArray(meshDef.extras.targetNames)){var targetNames=meshDef.extras.targetNames;if(mesh.morphTargetInfluences.length===targetNames.length){mesh.morphTargetDictionary={};for(var i=0,il=targetNames.length;i<il;i++){mesh.morphTargetDictionary[targetNames[i]]=i;}}else{console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');}}}function createPrimitiveKey(primitiveDef){var dracoExtension=primitiveDef.extensions&&primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];var geometryKey;if(dracoExtension){geometryKey='draco:'+dracoExtension.bufferView+':'+dracoExtension.indices+':'+createAttributesKey(dracoExtension.attributes);}else{geometryKey=primitiveDef.indices+':'+createAttributesKey(primitiveDef.attributes)+':'+primitiveDef.mode;}return geometryKey;}function createAttributesKey(attributes){var attributesKey='';var keys=Object.keys(attributes).sort();for(var i=0,il=keys.length;i<il;i++){attributesKey+=keys[i]+':'+attributes[keys[i]]+';';}return attributesKey;}/* GLTF PARSER */function GLTFParser(json,options){this.json=json||{};this.extensions={};this.plugins={};this.options=options||{};// loader object cache
     this.cache=new GLTFRegistry();// associations between Three.js objects and glTF elements
     this.associations=new Map();// BufferGeometry caching
     this.primitiveCache={};// Object3D instance caches
     this.meshCache={refs:{},uses:{}};this.cameraCache={refs:{},uses:{}};this.lightCache={refs:{},uses:{}};// Track node names, to ensure no duplicates
     this.nodeNamesUsed={};// Use an ImageBitmapLoader if imageBitmaps are supported. Moves much of the
     // expensive work of uploading a texture to the GPU off the main thread.
     if(typeof createImageBitmap!=='undefined'&&/Firefox/.test(navigator.userAgent)===false){this.textureLoader=new ImageBitmapLoader(this.options.manager);}else{this.textureLoader=new TextureLoader(this.options.manager);}this.textureLoader.setCrossOrigin(this.options.crossOrigin);this.fileLoader=new FileLoader(this.options.manager);this.fileLoader.setResponseType('arraybuffer');if(this.options.crossOrigin==='use-credentials'){this.fileLoader.setWithCredentials(true);}}GLTFParser.prototype.setExtensions=function(extensions){this.extensions=extensions;};GLTFParser.prototype.setPlugins=function(plugins){this.plugins=plugins;};GLTFParser.prototype.parse=function(onLoad,onError){var parser=this;var json=this.json;var extensions=this.extensions;// Clear the loader cache
     this.cache.removeAll();// Mark the special nodes/meshes in json for efficient parse
     this._invokeAll(function(ext){return ext._markDefs&&ext._markDefs();});Promise.all([this.getDependencies('scene'),this.getDependencies('animation'),this.getDependencies('camera')]).then(function(dependencies){var result={scene:dependencies[0][json.scene||0],scenes:dependencies[0],animations:dependencies[1],cameras:dependencies[2],asset:json.asset,parser:parser,userData:{}};addUnknownExtensionsToUserData(extensions,result,json);assignExtrasToUserData(result,json);onLoad(result);}).catch(onError);};/**
               * Marks the special nodes/meshes in json for efficient parse.
               */GLTFParser.prototype._markDefs=function(){var nodeDefs=this.json.nodes||[];var skinDefs=this.json.skins||[];var meshDefs=this.json.meshes||[];// Nothing in the node definition indicates whether it is a Bone or an
     // Object3D. Use the skins' joint references to mark bones.
     for(var skinIndex=0,skinLength=skinDefs.length;skinIndex<skinLength;skinIndex++){var joints=skinDefs[skinIndex].joints;for(var i=0,il=joints.length;i<il;i++){nodeDefs[joints[i]].isBone=true;}}// Iterate over all nodes, marking references to shared resources,
     // as well as skeleton joints.
     for(var nodeIndex=0,nodeLength=nodeDefs.length;nodeIndex<nodeLength;nodeIndex++){var nodeDef=nodeDefs[nodeIndex];if(nodeDef.mesh!==undefined){this._addNodeRef(this.meshCache,nodeDef.mesh);// Nothing in the mesh definition indicates whether it is
     // a SkinnedMesh or Mesh. Use the node's mesh reference
     // to mark SkinnedMesh if node has skin.
     if(nodeDef.skin!==undefined){meshDefs[nodeDef.mesh].isSkinnedMesh=true;}}if(nodeDef.camera!==undefined){this._addNodeRef(this.cameraCache,nodeDef.camera);}}};/**
               * Counts references to shared node / Object3D resources. These resources
               * can be reused, or "instantiated", at multiple nodes in the scene
               * hierarchy. Mesh, Camera, and Light instances are instantiated and must
               * be marked. Non-scenegraph resources (like Materials, Geometries, and
               * Textures) can be reused directly and are not marked here.
               *
               * Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
               */GLTFParser.prototype._addNodeRef=function(cache,index){if(index===undefined)return;if(cache.refs[index]===undefined){cache.refs[index]=cache.uses[index]=0;}cache.refs[index]++;};/** Returns a reference to a shared resource, cloning it if necessary. */GLTFParser.prototype._getNodeRef=function(cache,index,object){if(cache.refs[index]<=1)return object;var ref=object.clone();ref.name+='_instance_'+cache.uses[index]++;return ref;};GLTFParser.prototype._invokeOne=function(func){var extensions=Object.values(this.plugins);extensions.push(this);for(var i=0;i<extensions.length;i++){var result=func(extensions[i]);if(result)return result;}};GLTFParser.prototype._invokeAll=function(func){var extensions=Object.values(this.plugins);extensions.unshift(this);var pending=[];for(var i=0;i<extensions.length;i++){var result=func(extensions[i]);if(result)pending.push(result);}return pending;};/**
               * Requests the specified dependency asynchronously, with caching.
               * @param {string} type
               * @param {number} index
               * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}
               */GLTFParser.prototype.getDependency=function(type,index){var cacheKey=type+':'+index;var dependency=this.cache.get(cacheKey);if(!dependency){switch(type){case'scene':dependency=this.loadScene(index);break;case'node':dependency=this.loadNode(index);break;case'mesh':dependency=this._invokeOne(function(ext){return ext.loadMesh&&ext.loadMesh(index);});break;case'accessor':dependency=this.loadAccessor(index);break;case'bufferView':dependency=this._invokeOne(function(ext){return ext.loadBufferView&&ext.loadBufferView(index);});break;case'buffer':dependency=this.loadBuffer(index);break;case'material':dependency=this._invokeOne(function(ext){return ext.loadMaterial&&ext.loadMaterial(index);});break;case'texture':dependency=this._invokeOne(function(ext){return ext.loadTexture&&ext.loadTexture(index);});break;case'skin':dependency=this.loadSkin(index);break;case'animation':dependency=this.loadAnimation(index);break;case'camera':dependency=this.loadCamera(index);break;default:throw new Error('Unknown type: '+type);}this.cache.add(cacheKey,dependency);}return dependency;};/**
               * Requests all dependencies of the specified type asynchronously, with caching.
               * @param {string} type
               * @return {Promise<Array<Object>>}
               */GLTFParser.prototype.getDependencies=function(type){var dependencies=this.cache.get(type);if(!dependencies){var parser=this;var defs=this.json[type+(type==='mesh'?'es':'s')]||[];dependencies=Promise.all(defs.map(function(def,index){return parser.getDependency(type,index);}));this.cache.add(type,dependencies);}return dependencies;};/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
               * @param {number} bufferIndex
               * @return {Promise<ArrayBuffer>}
               */GLTFParser.prototype.loadBuffer=function(bufferIndex){var bufferDef=this.json.buffers[bufferIndex];var loader=this.fileLoader;if(bufferDef.type&&bufferDef.type!=='arraybuffer'){throw new Error('THREE.GLTFLoader: '+bufferDef.type+' buffer type is not supported.');}// If present, GLB container is required to be the first buffer.
     if(bufferDef.uri===undefined&&bufferIndex===0){return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);}var options=this.options;return new Promise(function(resolve,reject){loader.load(resolveURL(bufferDef.uri,options.path),resolve,undefined,function(){reject(new Error('THREE.GLTFLoader: Failed to load buffer "'+bufferDef.uri+'".'));});});};/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
               * @param {number} bufferViewIndex
               * @return {Promise<ArrayBuffer>}
               */GLTFParser.prototype.loadBufferView=function(bufferViewIndex){var bufferViewDef=this.json.bufferViews[bufferViewIndex];return this.getDependency('buffer',bufferViewDef.buffer).then(function(buffer){var byteLength=bufferViewDef.byteLength||0;var byteOffset=bufferViewDef.byteOffset||0;return buffer.slice(byteOffset,byteOffset+byteLength);});};/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
               * @param {number} accessorIndex
               * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}
               */GLTFParser.prototype.loadAccessor=function(accessorIndex){var parser=this;var json=this.json;var accessorDef=this.json.accessors[accessorIndex];if(accessorDef.bufferView===undefined&&accessorDef.sparse===undefined){// Ignore empty accessors, which may be used to declare runtime
     // information about attributes coming from another source (e.g. Draco
     // compression extension).
     return Promise.resolve(null);}var pendingBufferViews=[];if(accessorDef.bufferView!==undefined){pendingBufferViews.push(this.getDependency('bufferView',accessorDef.bufferView));}else{pendingBufferViews.push(null);}if(accessorDef.sparse!==undefined){pendingBufferViews.push(this.getDependency('bufferView',accessorDef.sparse.indices.bufferView));pendingBufferViews.push(this.getDependency('bufferView',accessorDef.sparse.values.bufferView));}return Promise.all(pendingBufferViews).then(function(bufferViews){var bufferView=bufferViews[0];var itemSize=WEBGL_TYPE_SIZES[accessorDef.type];var TypedArray=WEBGL_COMPONENT_TYPES[accessorDef.componentType];// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.
     var elementBytes=TypedArray.BYTES_PER_ELEMENT;var itemBytes=elementBytes*itemSize;var byteOffset=accessorDef.byteOffset||0;var byteStride=accessorDef.bufferView!==undefined?json.bufferViews[accessorDef.bufferView].byteStride:undefined;var normalized=accessorDef.normalized===true;var array,bufferAttribute;// The buffer is not interleaved if the stride is the item size in bytes.
     if(byteStride&&byteStride!==itemBytes){// Each "slice" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer
     // This makes sure that IBA.count reflects accessor.count properly
     var ibSlice=Math.floor(byteOffset/byteStride);var ibCacheKey='InterleavedBuffer:'+accessorDef.bufferView+':'+accessorDef.componentType+':'+ibSlice+':'+accessorDef.count;var ib=parser.cache.get(ibCacheKey);if(!ib){array=new TypedArray(bufferView,ibSlice*byteStride,accessorDef.count*byteStride/elementBytes);// Integer parameters to IB/IBA are in array elements, not bytes.
     ib=new InterleavedBuffer(array,byteStride/elementBytes);parser.cache.add(ibCacheKey,ib);}bufferAttribute=new InterleavedBufferAttribute(ib,itemSize,byteOffset%byteStride/elementBytes,normalized);}else{if(bufferView===null){array=new TypedArray(accessorDef.count*itemSize);}else{array=new TypedArray(bufferView,byteOffset,accessorDef.count*itemSize);}bufferAttribute=new BufferAttribute(array,itemSize,normalized);}// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors
     if(accessorDef.sparse!==undefined){var itemSizeIndices=WEBGL_TYPE_SIZES.SCALAR;var TypedArrayIndices=WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];var byteOffsetIndices=accessorDef.sparse.indices.byteOffset||0;var byteOffsetValues=accessorDef.sparse.values.byteOffset||0;var sparseIndices=new TypedArrayIndices(bufferViews[1],byteOffsetIndices,accessorDef.sparse.count*itemSizeIndices);var sparseValues=new TypedArray(bufferViews[2],byteOffsetValues,accessorDef.sparse.count*itemSize);if(bufferView!==null){// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.
     bufferAttribute=new BufferAttribute(bufferAttribute.array.slice(),bufferAttribute.itemSize,bufferAttribute.normalized);}for(var i=0,il=sparseIndices.length;i<il;i++){var index=sparseIndices[i];bufferAttribute.setX(index,sparseValues[i*itemSize]);if(itemSize>=2)bufferAttribute.setY(index,sparseValues[i*itemSize+1]);if(itemSize>=3)bufferAttribute.setZ(index,sparseValues[i*itemSize+2]);if(itemSize>=4)bufferAttribute.setW(index,sparseValues[i*itemSize+3]);if(itemSize>=5)throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');}}return bufferAttribute;});};/**
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
               * @param {number} textureIndex
               * @return {Promise<THREE.Texture>}
               */GLTFParser.prototype.loadTexture=function(textureIndex){var parser=this;var json=this.json;var options=this.options;var textureDef=json.textures[textureIndex];var textureExtensions=textureDef.extensions||{};var source;if(textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]){source=json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];}else{source=json.images[textureDef.source];}var loader;if(source.uri){loader=options.manager.getHandler(source.uri);}if(!loader){loader=textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]?parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader:this.textureLoader;}return this.loadTextureImage(textureIndex,source,loader);};GLTFParser.prototype.loadTextureImage=function(textureIndex,source,loader){var parser=this;var json=this.json;var options=this.options;var textureDef=json.textures[textureIndex];var URL=self.URL||self.webkitURL;var sourceURI=source.uri;var isObjectURL=false;var hasAlpha=true;if(source.mimeType==='image/jpeg')hasAlpha=false;if(source.bufferView!==undefined){// Load binary image data from bufferView, if provided.
     sourceURI=parser.getDependency('bufferView',source.bufferView).then(function(bufferView){if(source.mimeType==='image/png'){// Inspect the PNG 'IHDR' chunk to determine whether the image could have an
     // alpha channel. This check is conservative — the image could have an alpha
     // channel with all values == 1, and the indexed type (colorType == 3) only
     // sometimes contains alpha.
     //
     // https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_header
     var colorType=new DataView(bufferView,25,1).getUint8(0,false);hasAlpha=colorType===6||colorType===4||colorType===3;}isObjectURL=true;var blob=new Blob([bufferView],{type:source.mimeType});sourceURI=URL.createObjectURL(blob);return sourceURI;});}return Promise.resolve(sourceURI).then(function(sourceURI){return new Promise(function(resolve,reject){var onLoad=resolve;if(loader.isImageBitmapLoader===true){onLoad=function onLoad(imageBitmap){resolve(new CanvasTexture(imageBitmap));};}loader.load(resolveURL(sourceURI,options.path),onLoad,undefined,reject);});}).then(function(texture){// Clean up resources and configure Texture.
     if(isObjectURL===true){URL.revokeObjectURL(sourceURI);}texture.flipY=false;if(textureDef.name)texture.name=textureDef.name;// When there is definitely no alpha channel in the texture, set RGBFormat to save space.
     if(!hasAlpha)texture.format=RGBFormat;var samplers=json.samplers||{};var sampler=samplers[textureDef.sampler]||{};texture.magFilter=WEBGL_FILTERS[sampler.magFilter]||LinearFilter;texture.minFilter=WEBGL_FILTERS[sampler.minFilter]||LinearMipmapLinearFilter;texture.wrapS=WEBGL_WRAPPINGS[sampler.wrapS]||RepeatWrapping;texture.wrapT=WEBGL_WRAPPINGS[sampler.wrapT]||RepeatWrapping;parser.associations.set(texture,{type:'textures',index:textureIndex});return texture;});};/**
               * Asynchronously assigns a texture to the given material parameters.
               * @param {Object} materialParams
               * @param {string} mapName
               * @param {Object} mapDef
               * @return {Promise}
               */GLTFParser.prototype.assignTexture=function(materialParams,mapName,mapDef){var parser=this;return this.getDependency('texture',mapDef.index).then(function(texture){// Materials sample aoMap from UV set 1 and other maps from UV set 0 - this can't be configured
     // However, we will copy UV set 0 to UV set 1 on demand for aoMap
     if(mapDef.texCoord!==undefined&&mapDef.texCoord!=0&&!(mapName==='aoMap'&&mapDef.texCoord==1)){console.warn('THREE.GLTFLoader: Custom UV set '+mapDef.texCoord+' for texture '+mapName+' not yet supported.');}if(parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]){var transform=mapDef.extensions!==undefined?mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]:undefined;if(transform){var gltfReference=parser.associations.get(texture);texture=parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture,transform);parser.associations.set(texture,gltfReference);}}materialParams[mapName]=texture;});};/**
               * Assigns final material to a Mesh, Line, or Points instance. The instance
               * already has a material (generated from the glTF material options alone)
               * but reuse of the same glTF material may require multiple threejs materials
               * to accomodate different primitive types, defines, etc. New materials will
               * be created if necessary, and reused from a cache.
               * @param  {Object3D} mesh Mesh, Line, or Points instance.
               */GLTFParser.prototype.assignFinalMaterial=function(mesh){var geometry=mesh.geometry;var material=mesh.material;var useVertexTangents=geometry.attributes.tangent!==undefined;var useVertexColors=geometry.attributes.color!==undefined;var useFlatShading=geometry.attributes.normal===undefined;var useSkinning=mesh.isSkinnedMesh===true;var useMorphTargets=Object.keys(geometry.morphAttributes).length>0;var useMorphNormals=useMorphTargets&&geometry.morphAttributes.normal!==undefined;if(mesh.isPoints){var cacheKey='PointsMaterial:'+material.uuid;var pointsMaterial=this.cache.get(cacheKey);if(!pointsMaterial){pointsMaterial=new PointsMaterial();Material.prototype.copy.call(pointsMaterial,material);pointsMaterial.color.copy(material.color);pointsMaterial.map=material.map;pointsMaterial.sizeAttenuation=false;// glTF spec says points should be 1px
     this.cache.add(cacheKey,pointsMaterial);}material=pointsMaterial;}else if(mesh.isLine){var cacheKey='LineBasicMaterial:'+material.uuid;var lineMaterial=this.cache.get(cacheKey);if(!lineMaterial){lineMaterial=new LineBasicMaterial();Material.prototype.copy.call(lineMaterial,material);lineMaterial.color.copy(material.color);this.cache.add(cacheKey,lineMaterial);}material=lineMaterial;}// Clone the material if it will be modified
     if(useVertexTangents||useVertexColors||useFlatShading||useSkinning||useMorphTargets){var cacheKey='ClonedMaterial:'+material.uuid+':';if(material.isGLTFSpecularGlossinessMaterial)cacheKey+='specular-glossiness:';if(useSkinning)cacheKey+='skinning:';if(useVertexTangents)cacheKey+='vertex-tangents:';if(useVertexColors)cacheKey+='vertex-colors:';if(useFlatShading)cacheKey+='flat-shading:';if(useMorphTargets)cacheKey+='morph-targets:';if(useMorphNormals)cacheKey+='morph-normals:';var cachedMaterial=this.cache.get(cacheKey);if(!cachedMaterial){cachedMaterial=material.clone();if(useSkinning)cachedMaterial.skinning=true;if(useVertexTangents)cachedMaterial.vertexTangents=true;if(useVertexColors)cachedMaterial.vertexColors=true;if(useFlatShading)cachedMaterial.flatShading=true;if(useMorphTargets)cachedMaterial.morphTargets=true;if(useMorphNormals)cachedMaterial.morphNormals=true;this.cache.add(cacheKey,cachedMaterial);this.associations.set(cachedMaterial,this.associations.get(material));}material=cachedMaterial;}// workarounds for mesh and geometry
     if(material.aoMap&&geometry.attributes.uv2===undefined&&geometry.attributes.uv!==undefined){geometry.setAttribute('uv2',geometry.attributes.uv);}// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995
     if(material.normalScale&&!useVertexTangents){material.normalScale.y=-material.normalScale.y;}if(material.clearcoatNormalScale&&!useVertexTangents){material.clearcoatNormalScale.y=-material.clearcoatNormalScale.y;}mesh.material=material;};GLTFParser.prototype.getMaterialType=function()/* materialIndex */{return MeshStandardMaterial;};/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
               * @param {number} materialIndex
               * @return {Promise<Material>}
               */GLTFParser.prototype.loadMaterial=function(materialIndex){var parser=this;var json=this.json;var extensions=this.extensions;var materialDef=json.materials[materialIndex];var materialType;var materialParams={};var materialExtensions=materialDef.extensions||{};var pending=[];if(materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var sgExtension=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];materialType=sgExtension.getMaterialType();pending.push(sgExtension.extendParams(materialParams,materialDef,parser));}else if(materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]){var kmuExtension=extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];materialType=kmuExtension.getMaterialType();pending.push(kmuExtension.extendParams(materialParams,materialDef,parser));}else{// Specification:
     // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material
     var metallicRoughness=materialDef.pbrMetallicRoughness||{};materialParams.color=new Color(1.0,1.0,1.0);materialParams.opacity=1.0;if(Array.isArray(metallicRoughness.baseColorFactor)){var array=metallicRoughness.baseColorFactor;materialParams.color.fromArray(array);materialParams.opacity=array[3];}if(metallicRoughness.baseColorTexture!==undefined){pending.push(parser.assignTexture(materialParams,'map',metallicRoughness.baseColorTexture));}materialParams.metalness=metallicRoughness.metallicFactor!==undefined?metallicRoughness.metallicFactor:1.0;materialParams.roughness=metallicRoughness.roughnessFactor!==undefined?metallicRoughness.roughnessFactor:1.0;if(metallicRoughness.metallicRoughnessTexture!==undefined){pending.push(parser.assignTexture(materialParams,'metalnessMap',metallicRoughness.metallicRoughnessTexture));pending.push(parser.assignTexture(materialParams,'roughnessMap',metallicRoughness.metallicRoughnessTexture));}materialType=this._invokeOne(function(ext){return ext.getMaterialType&&ext.getMaterialType(materialIndex);});pending.push(Promise.all(this._invokeAll(function(ext){return ext.extendMaterialParams&&ext.extendMaterialParams(materialIndex,materialParams);})));}if(materialDef.doubleSided===true){materialParams.side=DoubleSide;}var alphaMode=materialDef.alphaMode||ALPHA_MODES.OPAQUE;if(alphaMode===ALPHA_MODES.BLEND){materialParams.transparent=true;// See: https://github.com/mrdoob/three.js/issues/17706
     materialParams.depthWrite=false;}else{materialParams.transparent=false;if(alphaMode===ALPHA_MODES.MASK){materialParams.alphaTest=materialDef.alphaCutoff!==undefined?materialDef.alphaCutoff:0.5;}}if(materialDef.normalTexture!==undefined&&materialType!==MeshBasicMaterial){pending.push(parser.assignTexture(materialParams,'normalMap',materialDef.normalTexture));materialParams.normalScale=new Vector2(1,1);if(materialDef.normalTexture.scale!==undefined){materialParams.normalScale.set(materialDef.normalTexture.scale,materialDef.normalTexture.scale);}}if(materialDef.occlusionTexture!==undefined&&materialType!==MeshBasicMaterial){pending.push(parser.assignTexture(materialParams,'aoMap',materialDef.occlusionTexture));if(materialDef.occlusionTexture.strength!==undefined){materialParams.aoMapIntensity=materialDef.occlusionTexture.strength;}}if(materialDef.emissiveFactor!==undefined&&materialType!==MeshBasicMaterial){materialParams.emissive=new Color().fromArray(materialDef.emissiveFactor);}if(materialDef.emissiveTexture!==undefined&&materialType!==MeshBasicMaterial){pending.push(parser.assignTexture(materialParams,'emissiveMap',materialDef.emissiveTexture));}return Promise.all(pending).then(function(){var material;if(materialType===GLTFMeshStandardSGMaterial){material=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);}else{material=new materialType(materialParams);}if(materialDef.name)material.name=materialDef.name;// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.
     if(material.map)material.map.encoding=sRGBEncoding;if(material.emissiveMap)material.emissiveMap.encoding=sRGBEncoding;assignExtrasToUserData(material,materialDef);parser.associations.set(material,{type:'materials',index:materialIndex});if(materialDef.extensions)addUnknownExtensionsToUserData(extensions,material,materialDef);return material;});};/** When Object3D instances are targeted by animation, they need unique names. */GLTFParser.prototype.createUniqueName=function(originalName){var name=PropertyBinding.sanitizeNodeName(originalName||'');for(var i=1;this.nodeNamesUsed[name];++i){name=originalName+'_'+i;}this.nodeNamesUsed[name]=true;return name;};/**
               * @param {BufferGeometry} geometry
               * @param {GLTF.Primitive} primitiveDef
               * @param {GLTFParser} parser
               */function computeBounds(geometry,primitiveDef,parser){var attributes=primitiveDef.attributes;var box=new Box3();if(attributes.POSITION!==undefined){var accessor=parser.json.accessors[attributes.POSITION];var min=accessor.min;var max=accessor.max;// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.
     if(min!==undefined&&max!==undefined){box.set(new Vector3(min[0],min[1],min[2]),new Vector3(max[0],max[1],max[2]));}else{console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');return;}}else{return;}var targets=primitiveDef.targets;if(targets!==undefined){var maxDisplacement=new Vector3();var vector=new Vector3();for(var i=0,il=targets.length;i<il;i++){var target=targets[i];if(target.POSITION!==undefined){var accessor=parser.json.accessors[target.POSITION];var min=accessor.min;var max=accessor.max;// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.
     if(min!==undefined&&max!==undefined){// we need to get max of absolute components because target weight is [-1,1]
     vector.setX(Math.max(Math.abs(min[0]),Math.abs(max[0])));vector.setY(Math.max(Math.abs(min[1]),Math.abs(max[1])));vector.setZ(Math.max(Math.abs(min[2]),Math.abs(max[2])));// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative
     // to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets
     // are used to implement key-frame animations and as such only two are active at a time - this results in very large
     // boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.
     maxDisplacement.max(vector);}else{console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');}}}// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.
     box.expandByVector(maxDisplacement);}geometry.boundingBox=box;var sphere=new Sphere();box.getCenter(sphere.center);sphere.radius=box.min.distanceTo(box.max)/2;geometry.boundingSphere=sphere;}/**
               * @param {BufferGeometry} geometry
               * @param {GLTF.Primitive} primitiveDef
               * @param {GLTFParser} parser
               * @return {Promise<BufferGeometry>}
               */function addPrimitiveAttributes(geometry,primitiveDef,parser){var attributes=primitiveDef.attributes;var pending=[];function assignAttributeAccessor(accessorIndex,attributeName){return parser.getDependency('accessor',accessorIndex).then(function(accessor){geometry.setAttribute(attributeName,accessor);});}for(var gltfAttributeName in attributes){var threeAttributeName=ATTRIBUTES[gltfAttributeName]||gltfAttributeName.toLowerCase();// Skip attributes already provided by e.g. Draco extension.
     if(threeAttributeName in geometry.attributes)continue;pending.push(assignAttributeAccessor(attributes[gltfAttributeName],threeAttributeName));}if(primitiveDef.indices!==undefined&&!geometry.index){var accessor=parser.getDependency('accessor',primitiveDef.indices).then(function(accessor){geometry.setIndex(accessor);});pending.push(accessor);}assignExtrasToUserData(geometry,primitiveDef);computeBounds(geometry,primitiveDef,parser);return Promise.all(pending).then(function(){return primitiveDef.targets!==undefined?addMorphTargets(geometry,primitiveDef.targets,parser):geometry;});}/**
               * @param {BufferGeometry} geometry
               * @param {Number} drawMode
               * @return {BufferGeometry}
               */function toTrianglesDrawMode(geometry,drawMode){var index=geometry.getIndex();// generate index if not present
     if(index===null){var indices=[];var position=geometry.getAttribute('position');if(position!==undefined){for(var i=0;i<position.count;i++){indices.push(i);}geometry.setIndex(indices);index=geometry.getIndex();}else{console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');return geometry;}}//
     var numberOfTriangles=index.count-2;var newIndices=[];if(drawMode===TriangleFanDrawMode){// gl.TRIANGLE_FAN
     for(var i=1;i<=numberOfTriangles;i++){newIndices.push(index.getX(0));newIndices.push(index.getX(i));newIndices.push(index.getX(i+1));}}else{// gl.TRIANGLE_STRIP
     for(var i=0;i<numberOfTriangles;i++){if(i%2===0){newIndices.push(index.getX(i));newIndices.push(index.getX(i+1));newIndices.push(index.getX(i+2));}else{newIndices.push(index.getX(i+2));newIndices.push(index.getX(i+1));newIndices.push(index.getX(i));}}}if(newIndices.length/3!==numberOfTriangles){console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');}// build final geometry
     var newGeometry=geometry.clone();newGeometry.setIndex(newIndices);return newGeometry;}/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
               *
               * Creates BufferGeometries from primitives.
               *
               * @param {Array<GLTF.Primitive>} primitives
               * @return {Promise<Array<BufferGeometry>>}
               */GLTFParser.prototype.loadGeometries=function(primitives){var parser=this;var extensions=this.extensions;var cache=this.primitiveCache;function createDracoPrimitive(primitive){return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive,parser).then(function(geometry){return addPrimitiveAttributes(geometry,primitive,parser);});}var pending=[];for(var i=0,il=primitives.length;i<il;i++){var primitive=primitives[i];var cacheKey=createPrimitiveKey(primitive);// See if we've already created this geometry
     var cached=cache[cacheKey];if(cached){// Use the cached geometry if it exists
     pending.push(cached.promise);}else{var geometryPromise;if(primitive.extensions&&primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]){// Use DRACO geometry if available
     geometryPromise=createDracoPrimitive(primitive);}else{// Otherwise create a new geometry
     geometryPromise=addPrimitiveAttributes(new BufferGeometry(),primitive,parser);}// Cache this geometry
     cache[cacheKey]={primitive:primitive,promise:geometryPromise};pending.push(geometryPromise);}}return Promise.all(pending);};/**
               * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
               * @param {number} meshIndex
               * @return {Promise<Group|Mesh|SkinnedMesh>}
               */GLTFParser.prototype.loadMesh=function(meshIndex){var parser=this;var json=this.json;var meshDef=json.meshes[meshIndex];var primitives=meshDef.primitives;var pending=[];for(var i=0,il=primitives.length;i<il;i++){var material=primitives[i].material===undefined?createDefaultMaterial(this.cache):this.getDependency('material',primitives[i].material);pending.push(material);}pending.push(parser.loadGeometries(primitives));return Promise.all(pending).then(function(results){var materials=results.slice(0,results.length-1);var geometries=results[results.length-1];var meshes=[];for(var i=0,il=geometries.length;i<il;i++){var geometry=geometries[i];var primitive=primitives[i];// 1. create Mesh
     var mesh;var material=materials[i];if(primitive.mode===WEBGL_CONSTANTS.TRIANGLES||primitive.mode===WEBGL_CONSTANTS.TRIANGLE_STRIP||primitive.mode===WEBGL_CONSTANTS.TRIANGLE_FAN||primitive.mode===undefined){// .isSkinnedMesh isn't in glTF spec. See ._markDefs()
     mesh=meshDef.isSkinnedMesh===true?new SkinnedMesh(geometry,material):new Mesh(geometry,material);if(mesh.isSkinnedMesh===true&&!mesh.geometry.attributes.skinWeight.normalized){// we normalize floating point skin weight array to fix malformed assets (see #15319)
     // it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs
     mesh.normalizeSkinWeights();}if(primitive.mode===WEBGL_CONSTANTS.TRIANGLE_STRIP){mesh.geometry=toTrianglesDrawMode(mesh.geometry,TriangleStripDrawMode);}else if(primitive.mode===WEBGL_CONSTANTS.TRIANGLE_FAN){mesh.geometry=toTrianglesDrawMode(mesh.geometry,TriangleFanDrawMode);}}else if(primitive.mode===WEBGL_CONSTANTS.LINES){mesh=new LineSegments(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.LINE_STRIP){mesh=new Line(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.LINE_LOOP){mesh=new LineLoop(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.POINTS){mesh=new Points(geometry,material);}else{throw new Error('THREE.GLTFLoader: Primitive mode unsupported: '+primitive.mode);}if(Object.keys(mesh.geometry.morphAttributes).length>0){updateMorphTargets(mesh,meshDef);}mesh.name=parser.createUniqueName(meshDef.name||'mesh_'+meshIndex);if(geometries.length>1)mesh.name+='_'+i;assignExtrasToUserData(mesh,meshDef);parser.assignFinalMaterial(mesh);meshes.push(mesh);}if(meshes.length===1){return meshes[0];}var group=new Group();for(var i=0,il=meshes.length;i<il;i++){group.add(meshes[i]);}return group;});};/**
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
               * @param {number} cameraIndex
               * @return {Promise<THREE.Camera>}
               */GLTFParser.prototype.loadCamera=function(cameraIndex){var camera;var cameraDef=this.json.cameras[cameraIndex];var params=cameraDef[cameraDef.type];if(!params){console.warn('THREE.GLTFLoader: Missing camera parameters.');return;}if(cameraDef.type==='perspective'){camera=new PerspectiveCamera(MathUtils.radToDeg(params.yfov),params.aspectRatio||1,params.znear||1,params.zfar||2e6);}else if(cameraDef.type==='orthographic'){camera=new OrthographicCamera(-params.xmag,params.xmag,params.ymag,-params.ymag,params.znear,params.zfar);}if(cameraDef.name)camera.name=this.createUniqueName(cameraDef.name);assignExtrasToUserData(camera,cameraDef);return Promise.resolve(camera);};/**
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
               * @param {number} skinIndex
               * @return {Promise<Object>}
               */GLTFParser.prototype.loadSkin=function(skinIndex){var skinDef=this.json.skins[skinIndex];var skinEntry={joints:skinDef.joints};if(skinDef.inverseBindMatrices===undefined){return Promise.resolve(skinEntry);}return this.getDependency('accessor',skinDef.inverseBindMatrices).then(function(accessor){skinEntry.inverseBindMatrices=accessor;return skinEntry;});};/**
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
               * @param {number} animationIndex
               * @return {Promise<AnimationClip>}
               */GLTFParser.prototype.loadAnimation=function(animationIndex){var json=this.json;var animationDef=json.animations[animationIndex];var pendingNodes=[];var pendingInputAccessors=[];var pendingOutputAccessors=[];var pendingSamplers=[];var pendingTargets=[];for(var i=0,il=animationDef.channels.length;i<il;i++){var channel=animationDef.channels[i];var sampler=animationDef.samplers[channel.sampler];var target=channel.target;var name=target.node!==undefined?target.node:target.id;// NOTE: target.id is deprecated.
     var input=animationDef.parameters!==undefined?animationDef.parameters[sampler.input]:sampler.input;var output=animationDef.parameters!==undefined?animationDef.parameters[sampler.output]:sampler.output;pendingNodes.push(this.getDependency('node',name));pendingInputAccessors.push(this.getDependency('accessor',input));pendingOutputAccessors.push(this.getDependency('accessor',output));pendingSamplers.push(sampler);pendingTargets.push(target);}return Promise.all([Promise.all(pendingNodes),Promise.all(pendingInputAccessors),Promise.all(pendingOutputAccessors),Promise.all(pendingSamplers),Promise.all(pendingTargets)]).then(function(dependencies){var nodes=dependencies[0];var inputAccessors=dependencies[1];var outputAccessors=dependencies[2];var samplers=dependencies[3];var targets=dependencies[4];var tracks=[];for(var i=0,il=nodes.length;i<il;i++){var node=nodes[i];var inputAccessor=inputAccessors[i];var outputAccessor=outputAccessors[i];var sampler=samplers[i];var target=targets[i];if(node===undefined)continue;node.updateMatrix();node.matrixAutoUpdate=true;var TypedKeyframeTrack;switch(PATH_PROPERTIES[target.path]){case PATH_PROPERTIES.weights:TypedKeyframeTrack=NumberKeyframeTrack;break;case PATH_PROPERTIES.rotation:TypedKeyframeTrack=QuaternionKeyframeTrack;break;case PATH_PROPERTIES.position:case PATH_PROPERTIES.scale:default:TypedKeyframeTrack=VectorKeyframeTrack;break;}var targetName=node.name?node.name:node.uuid;var interpolation=sampler.interpolation!==undefined?INTERPOLATION[sampler.interpolation]:InterpolateLinear;var targetNames=[];if(PATH_PROPERTIES[target.path]===PATH_PROPERTIES.weights){// Node may be a Group (glTF mesh with several primitives) or a Mesh.
     node.traverse(function(object){if(object.isMesh===true&&object.morphTargetInfluences){targetNames.push(object.name?object.name:object.uuid);}});}else{targetNames.push(targetName);}var outputArray=outputAccessor.array;if(outputAccessor.normalized){var scale;if(outputArray.constructor===Int8Array){scale=1/127;}else if(outputArray.constructor===Uint8Array){scale=1/255;}else if(outputArray.constructor==Int16Array){scale=1/32767;}else if(outputArray.constructor===Uint16Array){scale=1/65535;}else{throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');}var scaled=new Float32Array(outputArray.length);for(var j=0,jl=outputArray.length;j<jl;j++){scaled[j]=outputArray[j]*scale;}outputArray=scaled;}for(var j=0,jl=targetNames.length;j<jl;j++){var track=new TypedKeyframeTrack(targetNames[j]+'.'+PATH_PROPERTIES[target.path],inputAccessor.array,outputArray,interpolation);// Override interpolation with custom factory method.
     if(sampler.interpolation==='CUBICSPLINE'){track.createInterpolant=function InterpolantFactoryMethodGLTFCubicSpline(result){// A CUBICSPLINE keyframe in glTF has three output values for each input value,
     // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()
     // must be divided by three to get the interpolant's sampleSize argument.
     return new GLTFCubicSplineInterpolant(this.times,this.values,this.getValueSize()/3,result);};// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.
     track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=true;}tracks.push(track);}}var name=animationDef.name?animationDef.name:'animation_'+animationIndex;return new AnimationClip(name,undefined,tracks);});};/**
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
               * @param {number} nodeIndex
               * @return {Promise<Object3D>}
               */GLTFParser.prototype.loadNode=function(nodeIndex){var json=this.json;var extensions=this.extensions;var parser=this;var nodeDef=json.nodes[nodeIndex];// reserve node's name before its dependencies, so the root has the intended name.
     var nodeName=nodeDef.name?parser.createUniqueName(nodeDef.name):'';return function(){var pending=[];if(nodeDef.mesh!==undefined){pending.push(parser.getDependency('mesh',nodeDef.mesh).then(function(mesh){var node=parser._getNodeRef(parser.meshCache,nodeDef.mesh,mesh);// if weights are provided on the node, override weights on the mesh.
     if(nodeDef.weights!==undefined){node.traverse(function(o){if(!o.isMesh)return;for(var i=0,il=nodeDef.weights.length;i<il;i++){o.morphTargetInfluences[i]=nodeDef.weights[i];}});}return node;}));}if(nodeDef.camera!==undefined){pending.push(parser.getDependency('camera',nodeDef.camera).then(function(camera){return parser._getNodeRef(parser.cameraCache,nodeDef.camera,camera);}));}parser._invokeAll(function(ext){return ext.createNodeAttachment&&ext.createNodeAttachment(nodeIndex);}).forEach(function(promise){pending.push(promise);});return Promise.all(pending);}().then(function(objects){var node;// .isBone isn't in glTF spec. See ._markDefs
     if(nodeDef.isBone===true){node=new Bone();}else if(objects.length>1){node=new Group();}else if(objects.length===1){node=objects[0];}else{node=new Object3D();}if(node!==objects[0]){for(var i=0,il=objects.length;i<il;i++){node.add(objects[i]);}}if(nodeDef.name){node.userData.name=nodeDef.name;node.name=nodeName;}assignExtrasToUserData(node,nodeDef);if(nodeDef.extensions)addUnknownExtensionsToUserData(extensions,node,nodeDef);if(nodeDef.matrix!==undefined){var matrix=new Matrix4();matrix.fromArray(nodeDef.matrix);node.applyMatrix4(matrix);}else{if(nodeDef.translation!==undefined){node.position.fromArray(nodeDef.translation);}if(nodeDef.rotation!==undefined){node.quaternion.fromArray(nodeDef.rotation);}if(nodeDef.scale!==undefined){node.scale.fromArray(nodeDef.scale);}}parser.associations.set(node,{type:'nodes',index:nodeIndex});return node;});};/**
               * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
               * @param {number} sceneIndex
               * @return {Promise<Group>}
               */GLTFParser.prototype.loadScene=function(){// scene node hierachy builder
     function buildNodeHierachy(nodeId,parentObject,json,parser){var nodeDef=json.nodes[nodeId];return parser.getDependency('node',nodeId).then(function(node){if(nodeDef.skin===undefined)return node;// build skeleton here as well
     var skinEntry;return parser.getDependency('skin',nodeDef.skin).then(function(skin){skinEntry=skin;var pendingJoints=[];for(var i=0,il=skinEntry.joints.length;i<il;i++){pendingJoints.push(parser.getDependency('node',skinEntry.joints[i]));}return Promise.all(pendingJoints);}).then(function(jointNodes){node.traverse(function(mesh){if(!mesh.isMesh)return;var bones=[];var boneInverses=[];for(var j=0,jl=jointNodes.length;j<jl;j++){var jointNode=jointNodes[j];if(jointNode){bones.push(jointNode);var mat=new Matrix4();if(skinEntry.inverseBindMatrices!==undefined){mat.fromArray(skinEntry.inverseBindMatrices.array,j*16);}boneInverses.push(mat);}else{console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',skinEntry.joints[j]);}}mesh.bind(new Skeleton(bones,boneInverses),mesh.matrixWorld);});return node;});}).then(function(node){// build node hierachy
     parentObject.add(node);var pending=[];if(nodeDef.children){var children=nodeDef.children;for(var i=0,il=children.length;i<il;i++){var child=children[i];pending.push(buildNodeHierachy(child,node,json,parser));}}return Promise.all(pending);});}return function loadScene(sceneIndex){var json=this.json;var extensions=this.extensions;var sceneDef=this.json.scenes[sceneIndex];var parser=this;// Loader returns Group, not Scene.
     // See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172
     var scene=new Group();if(sceneDef.name)scene.name=parser.createUniqueName(sceneDef.name);assignExtrasToUserData(scene,sceneDef);if(sceneDef.extensions)addUnknownExtensionsToUserData(extensions,scene,sceneDef);var nodeIds=sceneDef.nodes||[];var pending=[];for(var i=0,il=nodeIds.length;i<il;i++){pending.push(buildNodeHierachy(nodeIds[i],scene,json,parser));}return Promise.all(pending).then(function(){return scene;});};}();return GLTFLoader;}();var _a$1,_b;var $retainerCount=Symbol('retainerCount');var $recentlyUsed=Symbol('recentlyUsed');var $evict=Symbol('evict');var $evictionThreshold=Symbol('evictionThreshold');var $cache=Symbol('cache');var CacheEvictionPolicy=/*#__PURE__*/function(){function CacheEvictionPolicy(cache){var evictionThreshold=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;_classCallCheck(this,CacheEvictionPolicy);this[_a$1]=new Map();this[_b]=[];this[$cache]=cache;this[$evictionThreshold]=evictionThreshold;}_createClass(CacheEvictionPolicy,[{key:"retainerCount",value:function retainerCount(key){return this[$retainerCount].get(key)||0;}},{key:"reset",value:function reset(){this[$retainerCount].clear();this[$recentlyUsed]=[];}},{key:"retain",value:function retain(key){if(!this[$retainerCount].has(key)){this[$retainerCount].set(key,0);}this[$retainerCount].set(key,this[$retainerCount].get(key)+1);var recentlyUsedIndex=this[$recentlyUsed].indexOf(key);if(recentlyUsedIndex!==-1){this[$recentlyUsed].splice(recentlyUsedIndex,1);}this[$recentlyUsed].unshift(key);this[$evict]();}},{key:"release",value:function release(key){if(this[$retainerCount].has(key)){this[$retainerCount].set(key,Math.max(this[$retainerCount].get(key)-1,0));}this[$evict]();}},{key:(_a$1=$retainerCount,_b=$recentlyUsed,$evict),value:function value(){if(this[$recentlyUsed].length<this[$evictionThreshold]){return;}for(var _i331=this[$recentlyUsed].length-1;_i331>=this[$evictionThreshold];--_i331){var key=this[$recentlyUsed][_i331];var retainerCount=this[$retainerCount].get(key);if(retainerCount===0){this[$cache].delete(key);this[$recentlyUsed].splice(_i331,1);}}}},{key:"evictionThreshold",set:function set(value){this[$evictionThreshold]=value;this[$evict]();},get:function get(){return this[$evictionThreshold];}},{key:"cache",get:function get(){return this[$cache];}}]);return CacheEvictionPolicy;}();var _a$2,_b$1;var loadWithLoader=function loadWithLoader(url,loader){var progressCallback=arguments.length>2&&arguments[2]!==undefined?arguments[2]:function(){};var onProgress=function onProgress(event){var fraction=event.loaded/event.total;progressCallback(Math.max(0,Math.min(1,isFinite(fraction)?fraction:1)));};return new Promise(function(resolve,reject){loader.load(url,resolve,onProgress,reject);});};var cache=new Map();var preloaded=new Map();var dracoDecoderLocation;var dracoLoader=new DRACOLoader();var $loader=Symbol('loader');var $evictionPolicy=Symbol('evictionPolicy');var $GLTFInstance=Symbol('GLTFInstance');var CachingGLTFLoader=/*#__PURE__*/function(_EventDispatcher){_inherits(CachingGLTFLoader,_EventDispatcher);var _super11=_createSuper(CachingGLTFLoader);function CachingGLTFLoader(GLTFInstance){var _this22;_classCallCheck(this,CachingGLTFLoader);_this22=_super11.call(this);_this22[_b$1]=new GLTFLoader();_this22[$GLTFInstance]=GLTFInstance;_this22[$loader].setDRACOLoader(dracoLoader);return _this22;}_createClass(CachingGLTFLoader,[{key:"preload",value:function(){var _preload=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(url,element){var progressCallback,rawGLTFLoads,_GLTFInstance,gltfInstanceLoads,_args2=arguments;return regeneratorRuntime.wrap(function _callee2$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:progressCallback=_args2.length>2&&_args2[2]!==undefined?_args2[2]:function(){};this.dispatchEvent({type:'preload',element:element,src:url});if(!cache.has(url)){rawGLTFLoads=loadWithLoader(url,this[$loader],function(progress){progressCallback(progress*0.8);});_GLTFInstance=this[$GLTFInstance];gltfInstanceLoads=rawGLTFLoads.then(function(rawGLTF){return _GLTFInstance.prepare(rawGLTF);}).then(function(preparedGLTF){progressCallback(0.9);return new _GLTFInstance(preparedGLTF);});cache.set(url,gltfInstanceLoads);}_context3.next=5;return cache.get(url);case 5:preloaded.set(url,true);if(progressCallback){progressCallback(1.0);}case 7:case"end":return _context3.stop();}}},_callee2,this);}));function preload(_x3,_x4){return _preload.apply(this,arguments);}return preload;}()},{key:"load",value:function(){var _load=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(url,element){var _this23=this;var progressCallback,gltf,clone,_args3=arguments;return regeneratorRuntime.wrap(function _callee3$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:progressCallback=_args3.length>2&&_args3[2]!==undefined?_args3[2]:function(){};_context4.next=3;return this.preload(url,element,progressCallback);case 3:_context4.next=5;return cache.get(url);case 5:gltf=_context4.sent;_context4.next=8;return gltf.clone();case 8:clone=_context4.sent;this[$evictionPolicy].retain(url);clone.dispose=function(){var originalDispose=clone.dispose;var disposed=false;return function(){if(disposed){return;}disposed=true;originalDispose.apply(clone);_this23[$evictionPolicy].release(url);};}();return _context4.abrupt("return",clone);case 12:case"end":return _context4.stop();}}},_callee3,this);}));function load(_x5,_x6){return _load.apply(this,arguments);}return load;}()},{key:(_a$2=$evictionPolicy,_b$1=$loader,$evictionPolicy),get:function get(){return this.constructor[$evictionPolicy];}}],[{key:"setDRACODecoderLocation",value:function setDRACODecoderLocation(url){dracoDecoderLocation=url;dracoLoader.setDecoderPath(url);}},{key:"getDRACODecoderLocation",value:function getDRACODecoderLocation(){return dracoDecoderLocation;}},{key:"clearCache",value:function clearCache(){var _this24=this;cache.forEach(function(_value,url){_this24.delete(url);});this[$evictionPolicy].reset();}},{key:"has",value:function has(url){return cache.has(url);}},{key:"delete",value:function(){var _delete2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4(url){var gltfLoads,gltf;return regeneratorRuntime.wrap(function _callee4$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(this.has(url)){_context5.next=2;break;}return _context5.abrupt("return");case 2:gltfLoads=cache.get(url);preloaded.delete(url);cache.delete(url);_context5.next=7;return gltfLoads;case 7:gltf=_context5.sent;gltf.dispose();case 9:case"end":return _context5.stop();}}},_callee4,this);}));function _delete(_x7){return _delete2.apply(this,arguments);}return _delete;}()},{key:"hasFinishedLoading",value:function hasFinishedLoading(url){return!!preloaded.get(url);}},{key:"cache",get:function get(){return cache;}}]);return CachingGLTFLoader;}(EventDispatcher);CachingGLTFLoader[_a$2]=new CacheEvictionPolicy(CachingGLTFLoader);var _a$3;var SETTLING_TIME=10000;var DECAY_MILLISECONDS=50;var NATURAL_FREQUENCY=1/DECAY_MILLISECONDS;var NIL_SPEED=0.0002*NATURAL_FREQUENCY;var $velocity=Symbol('velocity');var Damper=/*#__PURE__*/function(){function Damper(){_classCallCheck(this,Damper);this[_a$3]=0;}_createClass(Damper,[{key:"update",value:function update(x,xGoal,timeStepMilliseconds,xNormalization){if(x==null||xNormalization===0){return xGoal;}if(x===xGoal&&this[$velocity]===0){return xGoal;}if(timeStepMilliseconds<0){return x;}var deltaX=x-xGoal;var intermediateVelocity=this[$velocity]+NATURAL_FREQUENCY*deltaX;var intermediateX=deltaX+timeStepMilliseconds*intermediateVelocity;var decay=Math.exp(-NATURAL_FREQUENCY*timeStepMilliseconds);var newVelocity=(intermediateVelocity-NATURAL_FREQUENCY*intermediateX)*decay;var acceleration=-NATURAL_FREQUENCY*(newVelocity+intermediateVelocity*decay);if(Math.abs(newVelocity)<NIL_SPEED*Math.abs(xNormalization)&&acceleration*deltaX>=0){this[$velocity]=0;return xGoal;}else{this[$velocity]=newVelocity;return xGoal+intermediateX*decay;}}}]);return Damper;}();_a$3=$velocity;var CSS2DObject=function CSS2DObject(element){Object3D.call(this);this.element=element||document.createElement('div');this.element.style.position='absolute';this.addEventListener('removed',function(){this.traverse(function(object){if(_instanceof(object.element,Element)&&object.element.parentNode!==null){object.element.parentNode.removeChild(object.element);}});});};CSS2DObject.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:CSS2DObject,copy:function copy(source,recursive){Object3D.prototype.copy.call(this,source,recursive);this.element=source.element.cloneNode(true);return this;}});//
     var CSS2DRenderer=function CSS2DRenderer(){var _this=this;var _width,_height;var _widthHalf,_heightHalf;var vector=new Vector3();var viewMatrix=new Matrix4();var viewProjectionMatrix=new Matrix4();var cache={objects:new WeakMap()};var domElement=document.createElement('div');domElement.style.overflow='hidden';this.domElement=domElement;this.getSize=function(){return{width:_width,height:_height};};this.setSize=function(width,height){_width=width;_height=height;_widthHalf=_width/2;_heightHalf=_height/2;domElement.style.width=width+'px';domElement.style.height=height+'px';};var renderObject=function renderObject(object,scene,camera){if(_instanceof(object,CSS2DObject)){object.onBeforeRender(_this,scene,camera);vector.setFromMatrixPosition(object.matrixWorld);vector.applyMatrix4(viewProjectionMatrix);var element=object.element;var style='translate(-50%,-50%) translate('+(vector.x*_widthHalf+_widthHalf)+'px,'+(-vector.y*_heightHalf+_heightHalf)+'px)';element.style.WebkitTransform=style;element.style.MozTransform=style;element.style.oTransform=style;element.style.transform=style;element.style.display=object.visible&&vector.z>=-1&&vector.z<=1?'':'none';var objectData={distanceToCameraSquared:getDistanceToSquared(camera,object)};cache.objects.set(object,objectData);if(element.parentNode!==domElement){domElement.appendChild(element);}object.onAfterRender(_this,scene,camera);}for(var i=0,l=object.children.length;i<l;i++){renderObject(object.children[i],scene,camera);}};var getDistanceToSquared=function(){var a=new Vector3();var b=new Vector3();return function(object1,object2){a.setFromMatrixPosition(object1.matrixWorld);b.setFromMatrixPosition(object2.matrixWorld);return a.distanceToSquared(b);};}();var filterAndFlatten=function filterAndFlatten(scene){var result=[];scene.traverse(function(object){if(_instanceof(object,CSS2DObject))result.push(object);});return result;};var zOrder=function zOrder(scene){var sorted=filterAndFlatten(scene).sort(function(a,b){var distanceA=cache.objects.get(a).distanceToCameraSquared;var distanceB=cache.objects.get(b).distanceToCameraSquared;return distanceA-distanceB;});var zMax=sorted.length;for(var i=0,l=sorted.length;i<l;i++){sorted[i].element.style.zIndex=zMax-i;}};this.render=function(scene,camera){if(scene.autoUpdate===true)scene.updateMatrixWorld();if(camera.parent===null)camera.updateMatrixWorld();viewMatrix.copy(camera.matrixWorldInverse);viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix,viewMatrix);renderObject(scene,scene,camera);zOrder(scene);};};var numberNode=function numberNode(value,unit){return{type:'number',number:value,unit:unit};};var parseExpressions=function(){var cache={};var MAX_PARSE_ITERATIONS=1000;return function(inputString){var cacheKey=inputString;if(cacheKey in cache){return cache[cacheKey];}var expressions=[];var parseIterations=0;while(inputString){if(++parseIterations>MAX_PARSE_ITERATIONS){inputString='';break;}var expressionParseResult=parseExpression(inputString);var expression=expressionParseResult.nodes[0];if(expression==null||expression.terms.length===0){break;}expressions.push(expression);inputString=expressionParseResult.remainingInput;}return cache[cacheKey]=expressions;};}();var parseExpression=function(){var IS_IDENT_RE=/^(\-\-|[a-z\u0240-\uffff])/i;var IS_OPERATOR_RE=/^([\*\+\/]|[\-]\s)/i;var IS_EXPRESSION_END_RE=/^[\),]/;var FUNCTION_ARGUMENTS_FIRST_TOKEN='(';var HEX_FIRST_TOKEN='#';return function(inputString){var terms=[];while(inputString.length){inputString=inputString.trim();if(IS_EXPRESSION_END_RE.test(inputString)){break;}else if(inputString[0]===FUNCTION_ARGUMENTS_FIRST_TOKEN){var _parseFunctionArgumen=parseFunctionArguments(inputString),nodes=_parseFunctionArgumen.nodes,remainingInput=_parseFunctionArgumen.remainingInput;inputString=remainingInput;terms.push({type:'function',name:{type:'ident',value:'calc'},arguments:nodes});}else if(IS_IDENT_RE.test(inputString)){var identParseResult=parseIdent(inputString);var identNode=identParseResult.nodes[0];inputString=identParseResult.remainingInput;if(inputString[0]===FUNCTION_ARGUMENTS_FIRST_TOKEN){var _parseFunctionArgumen2=parseFunctionArguments(inputString),_nodes=_parseFunctionArgumen2.nodes,_remainingInput=_parseFunctionArgumen2.remainingInput;terms.push({type:'function',name:identNode,arguments:_nodes});inputString=_remainingInput;}else{terms.push(identNode);}}else if(IS_OPERATOR_RE.test(inputString)){terms.push({type:'operator',value:inputString[0]});inputString=inputString.slice(1);}else{var _ref=inputString[0]===HEX_FIRST_TOKEN?parseHex(inputString):parseNumber(inputString),_nodes2=_ref.nodes,_remainingInput2=_ref.remainingInput;if(_nodes2.length===0){break;}terms.push(_nodes2[0]);inputString=_remainingInput2;}}return{nodes:[{type:'expression',terms:terms}],remainingInput:inputString};};}();var parseIdent=function(){var NOT_IDENT_RE=/[^a-z^0-9^_^\-^\u0240-\uffff]/i;return function(inputString){var match=inputString.match(NOT_IDENT_RE);var ident=match==null?inputString:inputString.substr(0,match.index);var remainingInput=match==null?'':inputString.substr(match.index);return{nodes:[{type:'ident',value:ident}],remainingInput:remainingInput};};}();var parseNumber=function(){var VALUE_RE=/[\+\-]?(\d+[\.]\d+|\d+|[\.]\d+)([eE][\+\-]?\d+)?/;var UNIT_RE=/^[a-z%]+/i;var ALLOWED_UNITS=/^(m|mm|cm|rad|deg|[%])$/;return function(inputString){var valueMatch=inputString.match(VALUE_RE);var value=valueMatch==null?'0':valueMatch[0];inputString=value==null?inputString:inputString.slice(value.length);var unitMatch=inputString.match(UNIT_RE);var unit=unitMatch!=null&&unitMatch[0]!==''?unitMatch[0]:null;var remainingInput=unitMatch==null?inputString:inputString.slice(unit.length);if(unit!=null&&!ALLOWED_UNITS.test(unit)){unit=null;}return{nodes:[{type:'number',number:parseFloat(value)||0,unit:unit}],remainingInput:remainingInput};};}();var parseHex=function(){var HEX_RE=/^[a-f0-9]*/i;return function(inputString){inputString=inputString.slice(1).trim();var hexMatch=inputString.match(HEX_RE);var nodes=hexMatch==null?[]:[{type:'hex',value:hexMatch[0]}];return{nodes:nodes,remainingInput:hexMatch==null?inputString:inputString.slice(hexMatch[0].length)};};}();var parseFunctionArguments=function parseFunctionArguments(inputString){var expressionNodes=[];inputString=inputString.slice(1).trim();while(inputString.length){var expressionParseResult=parseExpression(inputString);expressionNodes.push(expressionParseResult.nodes[0]);inputString=expressionParseResult.remainingInput.trim();if(inputString[0]===','){inputString=inputString.slice(1).trim();}else if(inputString[0]===')'){inputString=inputString.slice(1);break;}}return{nodes:expressionNodes,remainingInput:inputString};};var $visitedTypes=Symbol('visitedTypes');var ASTWalker=/*#__PURE__*/function(){function ASTWalker(visitedTypes){_classCallCheck(this,ASTWalker);this[$visitedTypes]=visitedTypes;}_createClass(ASTWalker,[{key:"walk",value:function walk(ast,callback){var remaining=ast.slice();while(remaining.length){var next=remaining.shift();if(this[$visitedTypes].indexOf(next.type)>-1){callback(next);}switch(next.type){case'expression':remaining.unshift.apply(remaining,_toConsumableArray(next.terms));break;case'function':remaining.unshift.apply(remaining,[next.name].concat(_toConsumableArray(next.arguments)));break;}}}}]);return ASTWalker;}();var ZERO=Object.freeze({type:'number',number:0,unit:null});var degreesToRadians=function degreesToRadians(numberNode){var fallbackRadianValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var number=numberNode.number,unit=numberNode.unit;if(!isFinite(number)){number=fallbackRadianValue;unit='rad';}else if(numberNode.unit==='rad'||numberNode.unit==null){return numberNode;}var valueIsDegrees=unit==='deg'&&number!=null;var value=valueIsDegrees?number:0;var radians=value*Math.PI/180;return{type:'number',number:radians,unit:'rad'};};var lengthToBaseMeters=function lengthToBaseMeters(numberNode){var fallbackMeterValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var number=numberNode.number,unit=numberNode.unit;if(!isFinite(number)){number=fallbackMeterValue;unit='m';}else if(numberNode.unit==='m'){return numberNode;}var scale;switch(unit){default:scale=1;break;case'cm':scale=1/100;break;case'mm':scale=1/1000;break;}var value=scale*number;return{type:'number',number:value,unit:'m'};};var normalizeUnit=function(){var identity=function identity(node){return node;};var unitNormalizers={'rad':identity,'deg':degreesToRadians,'m':identity,'mm':lengthToBaseMeters,'cm':lengthToBaseMeters};return function(node){var fallback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ZERO;var number=node.number,unit=node.unit;if(!isFinite(number)){number=fallback.number;unit=fallback.unit;}if(unit==null){return node;}var normalize=unitNormalizers[unit];if(normalize==null){return fallback;}return normalize(node);};}();var Hotspot=/*#__PURE__*/function(_CSS2DObject){_inherits(Hotspot,_CSS2DObject);var _super12=_createSuper(Hotspot);function Hotspot(config){var _this25;_classCallCheck(this,Hotspot);_this25=_super12.call(this,document.createElement('div'));_this25.normal=new Vector3(0,1,0);_this25.initialized=false;_this25.referenceCount=1;_this25.pivot=document.createElement('div');_this25.slot=document.createElement('slot');_this25.element.classList.add('annotation-wrapper');_this25.slot.name=config.name;_this25.element.appendChild(_this25.pivot);_this25.pivot.appendChild(_this25.slot);_this25.updatePosition(config.position);_this25.updateNormal(config.normal);return _this25;}_createClass(Hotspot,[{key:"show",value:function show(){if(!this.facingCamera||!this.initialized){this.updateVisibility(true);}}},{key:"hide",value:function hide(){if(this.facingCamera||!this.initialized){this.updateVisibility(false);}}},{key:"increment",value:function increment(){this.referenceCount++;}},{key:"decrement",value:function decrement(){if(this.referenceCount>0){--this.referenceCount;}return this.referenceCount===0;}},{key:"updatePosition",value:function updatePosition(position){if(position==null)return;var positionNodes=parseExpressions(position)[0].terms;for(var _i332=0;_i332<3;++_i332){this.position.setComponent(_i332,normalizeUnit(positionNodes[_i332]).number);}}},{key:"updateNormal",value:function updateNormal(normal){if(normal==null)return;var normalNodes=parseExpressions(normal)[0].terms;for(var _i333=0;_i333<3;++_i333){this.normal.setComponent(_i333,normalizeUnit(normalNodes[_i333]).number);}}},{key:"orient",value:function orient(radians){this.pivot.style.transform="rotate(".concat(radians,"rad)");}},{key:"updateVisibility",value:function updateVisibility(show){if(show){this.element.classList.remove('hide');}else{this.element.classList.add('hide');}this.slot.assignedNodes().forEach(function(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var element=node;var visibilityAttribute=element.dataset.visibilityAttribute;if(visibilityAttribute!=null){var attributeName="data-".concat(visibilityAttribute);if(show){element.setAttribute(attributeName,'');}else{element.removeAttribute(attributeName);}}element.dispatchEvent(new CustomEvent('hotspot-visibility',{detail:{visible:show}}));});this.initialized=true;}},{key:"facingCamera",get:function get(){return!this.element.classList.contains('hide');}}]);return Hotspot;}(CSS2DObject);var reduceVertices=function reduceVertices(model,func){var value=0;var vector=new Vector3();model.traverse(function(object){var i,l;object.updateWorldMatrix(false,false);var geometry=object.geometry;if(geometry!==undefined){if(geometry.isGeometry){var _vertices6=geometry.vertices;for(i=0,l=_vertices6.length;i<l;i++){vector.copy(_vertices6[i]);vector.applyMatrix4(object.matrixWorld);value=func(value,vector);}}else if(geometry.isBufferGeometry){var attribute=geometry.attributes.position;if(attribute!==undefined){for(i=0,l=attribute.count;i<l;i++){vector.fromBufferAttribute(attribute,i).applyMatrix4(object.matrixWorld);value=func(value,vector);}}}}});return value;};var OFFSET=0.001;var LOG_MAX_RESOLUTION=9;var LOG_MIN_RESOLUTION=6;var ANIMATION_SCALING=2;var Shadow=/*#__PURE__*/function(_DirectionalLight){_inherits(Shadow,_DirectionalLight);var _super13=_createSuper(Shadow);function Shadow(model,softness){var _this26;_classCallCheck(this,Shadow);_this26=_super13.call(this);_this26.shadowMaterial=new ShadowMaterial();_this26.boundingBox=new Box3();_this26.size=new Vector3();_this26.isAnimated=false;_this26.needsUpdate=false;_this26.intensity=0;_this26.castShadow=true;_this26.frustumCulled=false;_this26.floor=new Mesh(new PlaneBufferGeometry(),_this26.shadowMaterial);_this26.floor.rotateX(-Math.PI/2);_this26.floor.receiveShadow=true;_this26.floor.castShadow=false;_this26.floor.frustumCulled=false;_this26.add(_this26.floor);_this26.shadow.camera.up.set(0,0,1);model.add(_assertThisInitialized(_this26));_this26.target=model;_this26.setModel(model,softness);return _this26;}_createClass(Shadow,[{key:"setModel",value:function setModel(model,softness){this.isAnimated=model.animationNames.length>0;this.boundingBox.copy(model.boundingBox);this.size.copy(model.size);var boundingBox=this.boundingBox,size=this.size;if(this.isAnimated){var maxDimension=Math.max(size.x,size.y,size.z)*ANIMATION_SCALING;size.y=maxDimension;boundingBox.expandByVector(size.subScalar(maxDimension).multiplyScalar(-0.5));boundingBox.max.y=boundingBox.min.y+maxDimension;size.set(maxDimension,maxDimension,maxDimension);}var shadowOffset=size.y*OFFSET;this.position.y=boundingBox.max.y+shadowOffset;boundingBox.getCenter(this.floor.position);this.setSoftness(softness);}},{key:"setSoftness",value:function setSoftness(softness){var resolution=Math.pow(2,LOG_MAX_RESOLUTION-softness*(LOG_MAX_RESOLUTION-LOG_MIN_RESOLUTION));this.setMapSize(resolution);}},{key:"setMapSize",value:function setMapSize(maxMapSize){var _this$shadow=this.shadow,camera=_this$shadow.camera,mapSize=_this$shadow.mapSize,map=_this$shadow.map;var size=this.size,boundingBox=this.boundingBox;if(map!=null){map.dispose();this.shadow.map=null;}if(this.isAnimated){maxMapSize*=ANIMATION_SCALING;}var width=Math.floor(size.x>size.z?maxMapSize:maxMapSize*size.x/size.z);var height=Math.floor(size.x>size.z?maxMapSize*size.z/size.x:maxMapSize);mapSize.set(width,height);var widthPad=2.5*size.x/width;var heightPad=2.5*size.z/height;camera.left=-boundingBox.max.x-widthPad;camera.right=-boundingBox.min.x+widthPad;camera.bottom=boundingBox.min.z-heightPad;camera.top=boundingBox.max.z+heightPad;this.setScaleAndOffset(camera.zoom,0);this.shadow.updateMatrices(this);this.floor.scale.set(size.x+2*widthPad,size.z+2*heightPad,1);this.needsUpdate=true;}},{key:"setIntensity",value:function setIntensity(intensity){this.shadowMaterial.opacity=intensity;if(intensity>0){this.visible=true;this.floor.visible=true;}else{this.visible=false;this.floor.visible=false;}}},{key:"getIntensity",value:function getIntensity(){return this.shadowMaterial.opacity;}},{key:"setRotation",value:function setRotation(radiansY){this.shadow.camera.up.set(Math.sin(radiansY),0,Math.cos(radiansY));this.shadow.updateMatrices(this);}},{key:"setScaleAndOffset",value:function setScaleAndOffset(scale,offset){var sizeY=this.size.y;var inverseScale=1/scale;var shadowOffset=sizeY*OFFSET;this.floor.position.y=2*shadowOffset-sizeY+offset*inverseScale;var camera=this.shadow.camera;camera.zoom=scale;camera.near=0;camera.far=sizeY*scale-offset;camera.projectionMatrix.makeOrthographic(camera.left*scale,camera.right*scale,camera.top*scale,camera.bottom*scale,camera.near,camera.far);camera.projectionMatrixInverse.getInverse(camera.projectionMatrix);}}]);return Shadow;}(DirectionalLight);var _a$4,_b$2;var DEFAULT_FOV_DEG=45;var DEFAULT_HALF_FOV=DEFAULT_FOV_DEG/2*Math.PI/180;var SAFE_RADIUS_RATIO=Math.sin(DEFAULT_HALF_FOV);var DEFAULT_TAN_FOV=Math.tan(DEFAULT_HALF_FOV);var $shadow=Symbol('shadow');var $cancelPendingSourceChange=Symbol('cancelPendingSourceChange');var $currentGLTF=Symbol('currentGLTF');var view=new Vector3();var target=new Vector3();var normalWorld=new Vector3();var Model=/*#__PURE__*/function(_Object3D3){_inherits(Model,_Object3D3);var _super14=_createSuper(Model);function Model(){var _this27;_classCallCheck(this,Model);_this27=_super14.call(this);_this27[_a$4]=null;_this27[_b$2]=null;_this27.animationsByName=new Map();_this27.currentAnimationAction=null;_this27.animations=[];_this27.modelContainer=new Object3D();_this27.animationNames=[];_this27.boundingBox=new Box3();_this27.size=new Vector3();_this27.idealCameraDistance=0;_this27.fieldOfViewAspect=0;_this27.userData={url:null};_this27.url=null;_this27.name='Model';_this27.modelContainer.name='ModelContainer';_this27.add(_this27.modelContainer);_this27.mixer=new AnimationMixer(_this27.modelContainer);return _this27;}_createClass(Model,[{key:"hasModel",value:function hasModel(){return!!this.modelContainer.children.length;}},{key:"setObject",value:function setObject(model){this.clear();this.modelContainer.add(model);this.updateFraming();this.dispatchEvent({type:'model-load'});}},{key:"setSource",value:function(){var _setSource=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6(element,url,progressCallback){var _this28=this;var gltf,_gltf,animations,animationsByName,animationNames,_iterator2,_step2,animation;return regeneratorRuntime.wrap(function _callee6$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:if(!(!url||url===this.url)){_context7.next=3;break;}if(progressCallback){progressCallback(1);}return _context7.abrupt("return");case 3:if(this[$cancelPendingSourceChange]!=null){this[$cancelPendingSourceChange]();this[$cancelPendingSourceChange]=null;}this.url=url;_context7.prev=5;_context7.next=8;return new Promise(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5(resolve,reject){var result;return regeneratorRuntime.wrap(function _callee5$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_this28[$cancelPendingSourceChange]=function(){return reject();};_context6.prev=1;_context6.next=4;return element[$renderer].loader.load(url,element,progressCallback);case 4:result=_context6.sent;resolve(result);_context6.next=11;break;case 8:_context6.prev=8;_context6.t0=_context6["catch"](1);reject(_context6.t0);case 11:case"end":return _context6.stop();}}},_callee5,null,[[1,8]]);}));return function(_x11,_x12){return _ref2.apply(this,arguments);};}());case 8:gltf=_context7.sent;_context7.next=16;break;case 11:_context7.prev=11;_context7.t0=_context7["catch"](5);if(!(_context7.t0==null)){_context7.next=15;break;}return _context7.abrupt("return");case 15:throw _context7.t0;case 16:this.clear();this[$currentGLTF]=gltf;if(gltf!=null){this.modelContainer.add(gltf.scene);}_gltf=gltf,animations=_gltf.animations;animationsByName=new Map();animationNames=[];_iterator2=_createForOfIteratorHelper(animations);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){animation=_step2.value;animationsByName.set(animation.name,animation);animationNames.push(animation.name);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}this.animations=animations;this.animationsByName=animationsByName;this.animationNames=animationNames;this.userData.url=url;this.updateFraming();this.dispatchEvent({type:'model-load',url:url});case 30:case"end":return _context7.stop();}}},_callee6,this,[[5,11]]);}));function setSource(_x8,_x9,_x10){return _setSource.apply(this,arguments);}return setSource;}()},{key:"playAnimation",value:function playAnimation(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var crossfadeTime=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var animations=this.animations;if(animations==null||animations.length===0){console.warn("Cannot play animation (model does not have any animations)");return;}var animationClip=null;if(name!=null){animationClip=this.animationsByName.get(name);}if(animationClip==null){animationClip=animations[0];}try{var lastAnimationAction=this.currentAnimationAction;this.currentAnimationAction=this.mixer.clipAction(animationClip,this).play();this.currentAnimationAction.enabled=true;if(lastAnimationAction!=null&&this.currentAnimationAction!==lastAnimationAction){this.currentAnimationAction.crossFadeFrom(lastAnimationAction,crossfadeTime,false);}}catch(error){console.error(error);}}},{key:"stopAnimation",value:function stopAnimation(){if(this.currentAnimationAction!=null){this.currentAnimationAction.stop();this.currentAnimationAction.reset();this.currentAnimationAction=null;}this.mixer.stopAllAction();}},{key:"updateAnimation",value:function updateAnimation(step){this.mixer.update(step);}},{key:"clear",value:function clear(){this.url=null;this.userData={url:null};var gltf=this[$currentGLTF];if(gltf!=null){var _iterator3=_createForOfIteratorHelper(this.modelContainer.children),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var child=_step3.value;this.modelContainer.remove(child);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}gltf.dispose();this[$currentGLTF]=null;}if(this.currentAnimationAction!=null){this.currentAnimationAction.stop();this.currentAnimationAction=null;}this.mixer.stopAllAction();this.mixer.uncacheRoot(this);}},{key:"updateFraming",value:function updateFraming(){var _this29=this;var center=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.remove(this.modelContainer);if(center==null){this.boundingBox.setFromObject(this.modelContainer);this.boundingBox.getSize(this.size);center=this.boundingBox.getCenter(new Vector3());}var radiusSquared=function radiusSquared(value,vertex){return Math.max(value,center.distanceToSquared(vertex));};var framedRadius=Math.sqrt(reduceVertices(this.modelContainer,radiusSquared));this.idealCameraDistance=framedRadius/SAFE_RADIUS_RATIO;var horizontalFov=function horizontalFov(value,vertex){vertex.sub(center);var radiusXZ=Math.sqrt(vertex.x*vertex.x+vertex.z*vertex.z);return Math.max(value,radiusXZ/(_this29.idealCameraDistance-Math.abs(vertex.y)));};this.fieldOfViewAspect=reduceVertices(this.modelContainer,horizontalFov)/DEFAULT_TAN_FOV;this.add(this.modelContainer);}},{key:"setShadowIntensity",value:function setShadowIntensity(shadowIntensity,shadowSoftness){var shadow=this[$shadow];if(shadow!=null){shadow.setIntensity(shadowIntensity);shadow.setModel(this,shadowSoftness);}else if(shadowIntensity>0){shadow=new Shadow(this,shadowSoftness);shadow.setIntensity(shadowIntensity);this[$shadow]=shadow;}}},{key:"setShadowSoftness",value:function setShadowSoftness(softness){var shadow=this[$shadow];if(shadow!=null){shadow.setSoftness(softness);}}},{key:"setShadowRotation",value:function setShadowRotation(radiansY){var shadow=this[$shadow];if(shadow!=null){shadow.setRotation(radiansY);}}},{key:"updateShadow",value:function updateShadow(){var shadow=this[$shadow];if(shadow==null){return false;}else{var needsUpdate=shadow.needsUpdate;shadow.needsUpdate=false;return needsUpdate;}}},{key:"setShadowScaleAndOffset",value:function setShadowScaleAndOffset(scale,offset){var shadow=this[$shadow];if(shadow!=null){shadow.setScaleAndOffset(scale,offset);}}},{key:"addHotspot",value:function addHotspot(hotspot){this.add(hotspot);}},{key:"removeHotspot",value:function removeHotspot(hotspot){this.remove(hotspot);}},{key:"forHotspots",value:function forHotspots(func){var children=this.children;for(var _i334=0,l=children.length;_i334<l;_i334++){var hotspot=children[_i334];if(_instanceof(hotspot,Hotspot)){func(hotspot);}}}},{key:"updateHotspots",value:function updateHotspots(viewerPosition){var _this30=this;this.forHotspots(function(hotspot){view.copy(viewerPosition);target.setFromMatrixPosition(hotspot.matrixWorld);view.sub(target);normalWorld.copy(hotspot.normal).transformDirection(_this30.matrixWorld);if(view.dot(normalWorld)<0){hotspot.hide();}else{hotspot.show();}});}},{key:"orientHotspots",value:function orientHotspots(radians){this.forHotspots(function(hotspot){hotspot.orient(radians);});}},{key:"setHotspotsVisibility",value:function setHotspotsVisibility(visible){this.forHotspots(function(hotspot){hotspot.visible=visible;});}},{key:"currentGLTF",get:function get(){return this[$currentGLTF];}},{key:"animationTime",set:function set(value){this.mixer.setTime(value);},get:function get(){if(this.currentAnimationAction!=null){return this.currentAnimationAction.time;}return 0;}},{key:"hasActiveAnimation",get:function get(){return this.currentAnimationAction!=null;}}]);return Model;}(Object3D);_a$4=$shadow,_b$2=$currentGLTF;var DEFAULT_TAN_FOV$1=Math.tan(DEFAULT_FOV_DEG/2*Math.PI/180);var raycaster=new Raycaster();var vector3=new Vector3();var ModelScene=/*#__PURE__*/function(_Scene){_inherits(ModelScene,_Scene);var _super15=_createSuper(ModelScene);function ModelScene(_ref3){var _this31;var canvas=_ref3.canvas,element=_ref3.element,width=_ref3.width,height=_ref3.height;_classCallCheck(this,ModelScene);_this31=_super15.call(this);_this31.aspect=1;_this31.shadowIntensity=0;_this31.shadowSoftness=1;_this31.width=1;_this31.height=1;_this31.isDirty=false;_this31.context=null;_this31.exposure=1;_this31.canScale=true;_this31.framedFieldOfView=DEFAULT_FOV_DEG;_this31.camera=new PerspectiveCamera(45,1,0.1,100);_this31.goalTarget=new Vector3();_this31.targetDamperX=new Damper();_this31.targetDamperY=new Damper();_this31.targetDamperZ=new Damper();_this31.name='ModelScene';_this31.element=element;_this31.canvas=canvas;_this31.model=new Model();_this31.camera=new PerspectiveCamera(45,1,0.1,100);_this31.camera.name='MainCamera';_this31.activeCamera=_this31.camera;_this31.add(_this31.model);_this31.setSize(width,height);_this31.model.addEventListener('model-load',function(event){return _this31.onModelLoad(event);});return _this31;}_createClass(ModelScene,[{key:"createContext",value:function createContext(){{this.context=this.canvas.getContext('2d');}}},{key:"setModelSource",value:function(){var _setModelSource=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee7(source,progressCallback){return regeneratorRuntime.wrap(function _callee7$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.prev=0;_context8.next=3;return this.model.setSource(this.element,source,progressCallback);case 3:_context8.next=8;break;case 5:_context8.prev=5;_context8.t0=_context8["catch"](0);throw new Error("Could not set model source to '".concat(source,"': ").concat(_context8.t0.message));case 8:case"end":return _context8.stop();}}},_callee7,this,[[0,5]]);}));function setModelSource(_x13,_x14){return _setModelSource.apply(this,arguments);}return setModelSource;}()},{key:"setSize",value:function setSize(width,height){if(this.width===width&&this.height===height){return;}this.width=Math.max(width,1);this.height=Math.max(height,1);this.aspect=this.width/this.height;this.frameModel();this.isDirty=true;}},{key:"frameModel",value:function frameModel(){var vertical=DEFAULT_TAN_FOV$1*Math.max(1,this.model.fieldOfViewAspect/this.aspect);this.framedFieldOfView=2*Math.atan(vertical)*180/Math.PI;}},{key:"getSize",value:function getSize(){return{width:this.width,height:this.height};}},{key:"getCamera",value:function getCamera(){return this.activeCamera;}},{key:"setCamera",value:function setCamera(camera){this.activeCamera=camera;}},{key:"onModelLoad",value:function onModelLoad(event){this.frameModel();this.setShadowIntensity(this.shadowIntensity);this.isDirty=true;this.dispatchEvent({type:'model-load',url:event.url});}},{key:"setTarget",value:function setTarget(modelX,modelY,modelZ){this.goalTarget.set(-modelX,-modelY,-modelZ);}},{key:"getTarget",value:function getTarget(){return vector3.copy(this.goalTarget).multiplyScalar(-1);}},{key:"jumpToGoal",value:function jumpToGoal(){this.updateTarget(SETTLING_TIME);}},{key:"updateTarget",value:function updateTarget(delta){var goal=this.goalTarget;var target=this.model.position;if(!goal.equals(target)){var radius=this.model.idealCameraDistance;var x=target.x,y=target.y,z=target.z;x=this.targetDamperX.update(x,goal.x,delta,radius);y=this.targetDamperY.update(y,goal.y,delta,radius);z=this.targetDamperZ.update(z,goal.z,delta,radius);this.model.position.set(x,y,z);this.model.updateMatrixWorld();this.model.setShadowRotation(this.yaw);this.isDirty=true;}}},{key:"pointTowards",value:function pointTowards(worldX,worldZ){var _this$position=this.position,x=_this$position.x,z=_this$position.z;this.yaw=Math.atan2(worldX-x,worldZ-z);}},{key:"setShadowIntensity",value:function setShadowIntensity(shadowIntensity){shadowIntensity=Math.max(shadowIntensity,0);this.shadowIntensity=shadowIntensity;if(this.model.hasModel()){this.model.setShadowIntensity(shadowIntensity,this.shadowSoftness);}}},{key:"setShadowSoftness",value:function setShadowSoftness(softness){this.shadowSoftness=softness;this.model.setShadowSoftness(softness);}},{key:"positionAndNormalFromPoint",value:function positionAndNormalFromPoint(pixelPosition){var object=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;raycaster.setFromCamera(pixelPosition,this.getCamera());var hits=raycaster.intersectObject(object,true);if(hits.length===0){return null;}var hit=hits[0];if(hit.face==null){return null;}hit.face.normal.applyNormalMatrix(new Matrix3().getNormalMatrix(hit.object.matrixWorld));return{position:hit.point,normal:hit.face.normal};}},{key:"yaw",set:function set(radiansY){this.rotation.y=radiansY;this.model.setShadowRotation(radiansY);this.isDirty=true;},get:function get(){return this.rotation.y;}}]);return ModelScene;}(Scene);/**
          * This class generates custom mipmaps for a roughness map by encoding the lost variation in the
          * normal map mip levels as increased roughness in the corresponding roughness mip levels. This
          * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when
          * using PMREM. If the normal map is larger than the roughness map, the roughness map will be
          * enlarged to match the dimensions of the normal map.
          */var _mipmapMaterial=_getMipmapMaterial();var _mesh$1=new Mesh(new PlaneBufferGeometry(2,2),_mipmapMaterial);var _flatCamera$1=new OrthographicCamera(0,1,0,1,0,1);var _tempTarget=null;var _renderer=null;function RoughnessMipmapper(renderer){_renderer=renderer;_renderer.compile(_mesh$1,_flatCamera$1);}RoughnessMipmapper.prototype={constructor:RoughnessMipmapper,generateMipmaps:function generateMipmaps(material){if('roughnessMap'in material===false)return;var roughnessMap=material.roughnessMap,normalMap=material.normalMap;if(roughnessMap===null||normalMap===null||!roughnessMap.generateMipmaps||material.userData.roughnessUpdated)return;material.userData.roughnessUpdated=true;var width=Math.max(roughnessMap.image.width,normalMap.image.width);var height=Math.max(roughnessMap.image.height,normalMap.image.height);if(!MathUtils.isPowerOfTwo(width)||!MathUtils.isPowerOfTwo(height))return;var oldTarget=_renderer.getRenderTarget();var autoClear=_renderer.autoClear;_renderer.autoClear=false;if(_tempTarget===null||_tempTarget.width!==width||_tempTarget.height!==height){if(_tempTarget!==null)_tempTarget.dispose();_tempTarget=new WebGLRenderTarget(width,height,{depthBuffer:false});_tempTarget.scissorTest=true;}if(width!==roughnessMap.image.width||height!==roughnessMap.image.height){var params={wrapS:roughnessMap.wrapS,wrapT:roughnessMap.wrapT,magFilter:roughnessMap.magFilter,minFilter:roughnessMap.minFilter,depthBuffer:false};var newRoughnessTarget=new WebGLRenderTarget(width,height,params);newRoughnessTarget.texture.generateMipmaps=true;// Setting the render target causes the memory to be allocated.
     _renderer.setRenderTarget(newRoughnessTarget);material.roughnessMap=newRoughnessTarget.texture;if(material.metalnessMap==roughnessMap)material.metalnessMap=material.roughnessMap;if(material.aoMap==roughnessMap)material.aoMap=material.roughnessMap;}_mipmapMaterial.uniforms.roughnessMap.value=roughnessMap;_mipmapMaterial.uniforms.normalMap.value=normalMap;var position=new Vector2(0,0);var texelSize=_mipmapMaterial.uniforms.texelSize.value;for(var mip=0;width>=1&&height>=1;++mip,width/=2,height/=2){// Rendering to a mip level is not allowed in webGL1. Instead we must set
     // up a secondary texture to write the result to, then copy it back to the
     // proper mipmap level.
     texelSize.set(1.0/width,1.0/height);if(mip==0)texelSize.set(0.0,0.0);_tempTarget.viewport.set(position.x,position.y,width,height);_tempTarget.scissor.set(position.x,position.y,width,height);_renderer.setRenderTarget(_tempTarget);_renderer.render(_mesh$1,_flatCamera$1);_renderer.copyFramebufferToTexture(position,material.roughnessMap,mip);_mipmapMaterial.uniforms.roughnessMap.value=material.roughnessMap;}if(roughnessMap!==material.roughnessMap)roughnessMap.dispose();_renderer.setRenderTarget(oldTarget);_renderer.autoClear=autoClear;},dispose:function dispose(){_mipmapMaterial.dispose();_mesh$1.geometry.dispose();if(_tempTarget!=null)_tempTarget.dispose();}};function _getMipmapMaterial(){var shaderMaterial=new RawShaderMaterial({uniforms:{roughnessMap:{value:null},normalMap:{value:null},texelSize:{value:new Vector2(1,1)}},vertexShader:/* glsl */"\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t",fragmentShader:/* glsl */"\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t",blending:NoBlending,depthTest:false,depthWrite:false});shaderMaterial.type='RoughnessMipmapper';return shaderMaterial;}var deserializeUrl=function deserializeUrl(url){return!!url&&url!=='null'?toFullUrl(url):null;};var assertIsArCandidate=function assertIsArCandidate(){if(IS_WEBXR_AR_CANDIDATE){return;}var missingApis=[];if(!HAS_WEBXR_DEVICE_API){missingApis.push('WebXR Device API');}if(!HAS_WEBXR_HIT_TEST_API){missingApis.push('WebXR Hit Test API');}throw new Error("The following APIs are required for AR, but are missing in this browser: ".concat(missingApis.join(', ')));};var toFullUrl=function toFullUrl(partialUrl){var url=new URL(partialUrl,window.location.toString());return url.toString();};var throttle=function throttle(fn,ms){var timer=null;var throttled=function throttled(){if(timer!=null){return;}fn.apply(void 0,arguments);timer=self.setTimeout(function(){return timer=null;},ms);};throttled.flush=function(){if(timer!=null){self.clearTimeout(timer);timer=null;}};return throttled;};var debounce=function debounce(fn,ms){var timer=null;return function(){for(var _len=arguments.length,args=new Array(_len),_key4=0;_key4<_len;_key4++){args[_key4]=arguments[_key4];}if(timer!=null){self.clearTimeout(timer);}timer=self.setTimeout(function(){timer=null;fn.apply(void 0,args);},ms);};};var clamp=function clamp(value,lowerLimit,upperLimit){return Math.max(lowerLimit,Math.min(upperLimit,value));};var CAPPED_DEVICE_PIXEL_RATIO=1;var resolveDpr=function(){var HAS_META_VIEWPORT_TAG=function(){var metas=document.head!=null?Array.from(document.head.querySelectorAll('meta')):[];var _iterator4=_createForOfIteratorHelper(metas),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var meta=_step4.value;if(meta.name==='viewport'){return true;}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}return false;}();if(!HAS_META_VIEWPORT_TAG){console.warn('No <meta name="viewport"> detected; <model-viewer> will cap pixel density at 1.');}return function(){return HAS_META_VIEWPORT_TAG?window.devicePixelRatio:CAPPED_DEVICE_PIXEL_RATIO;};}();var isDebugMode=function(){var debugQueryParameterName='model-viewer-debug-mode';var debugQueryParameter=new RegExp("[?&]".concat(debugQueryParameterName,"(&|$)"));return function(){return self.ModelViewerElement&&self.ModelViewerElement.debugMode||self.location&&self.location.search&&self.location.search.match(debugQueryParameter);};}();var getFirstMapKey=function getFirstMapKey(map){if(map.keys!=null){return map.keys().next().value||null;}var firstKey=null;try{map.forEach(function(_value,key,_map){firstKey=key;throw new Error();});}catch(_error){}return firstKey;};var waitForEvent=function waitForEvent(target,eventName){var predicate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return new Promise(function(resolve){function handler(event){if(!predicate||predicate(event)){resolve(event);target.removeEventListener(eventName,handler);}}target.addEventListener(eventName,handler);});};var RADIUS=0.2;var LINE_WIDTH=0.03;var MAX_OPACITY=0.75;var SEGMENTS=12;var DELTA_PHI=Math.PI/(2*SEGMENTS);var vector2=new Vector2();var addCorner=function addCorner(vertices,cornerX,cornerY){var phi=cornerX>0?cornerY>0?0:-Math.PI/2:cornerY>0?Math.PI/2:Math.PI;for(var _i335=0;_i335<=SEGMENTS;++_i335){vertices.push(cornerX+(RADIUS-LINE_WIDTH)*Math.cos(phi),cornerY+(RADIUS-LINE_WIDTH)*Math.sin(phi),0,cornerX+RADIUS*Math.cos(phi),cornerY+RADIUS*Math.sin(phi),0);phi+=DELTA_PHI;}};var PlacementBox=/*#__PURE__*/function(_Mesh){_inherits(PlacementBox,_Mesh);var _super16=_createSuper(PlacementBox);function PlacementBox(model){var _this32;_classCallCheck(this,PlacementBox);var geometry=new BufferGeometry();var triangles=[];var vertices=[];var size=model.size,boundingBox=model.boundingBox;var x=size.x/2;var y=size.z/2;addCorner(vertices,x,y);addCorner(vertices,-x,y);addCorner(vertices,-x,-y);addCorner(vertices,x,-y);var numVertices=vertices.length/3;for(var _i336=0;_i336<numVertices-2;_i336+=2){triangles.push(_i336,_i336+1,_i336+3,_i336,_i336+3,_i336+2);}var i=numVertices-2;triangles.push(i,i+1,1,i,1,0);geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setIndex(triangles);_this32=_super16.call(this,geometry);var material=_this32.material;material.side=DoubleSide;material.transparent=true;material.opacity=0;_this32.goalOpacity=0;_this32.opacityDamper=new Damper();_this32.hitPlane=new Mesh(new PlaneBufferGeometry(size.x+2*RADIUS,size.z+2*RADIUS));_this32.hitPlane.visible=false;_this32.add(_this32.hitPlane);_this32.rotateX(-Math.PI/2);boundingBox.getCenter(_this32.position);_this32.shadowHeight=boundingBox.min.y;_this32.position.y=_this32.shadowHeight;model.add(_assertThisInitialized(_this32));return _this32;}_createClass(PlacementBox,[{key:"getHit",value:function getHit(scene,screenX,screenY){vector2.set(screenX,-screenY);this.hitPlane.visible=true;var hitResult=scene.positionAndNormalFromPoint(vector2,this.hitPlane);this.hitPlane.visible=false;return hitResult==null?null:hitResult.position;}},{key:"updateOpacity",value:function updateOpacity(delta){var material=this.material;material.opacity=this.opacityDamper.update(material.opacity,this.goalOpacity,delta,1);this.visible=material.opacity>0;}},{key:"dispose",value:function dispose(){var _this$hitPlane=this.hitPlane,geometry=_this$hitPlane.geometry,material=_this$hitPlane.material;geometry.dispose();material.dispose();this.geometry.dispose();this.material.dispose();}},{key:"offsetHeight",set:function set(offset){this.position.y=this.shadowHeight+offset;},get:function get(){return this.position.y-this.shadowHeight;}},{key:"show",set:function set(visible){this.goalOpacity=visible?MAX_OPACITY:0;}}]);return PlacementBox;}(Mesh);var _a$5,_b$3,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x$1,_y$1,_z$1,_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12;var AR_SHADOW_INTENSITY=0.3;var ROTATION_RATE=1.5;var HIT_ANGLE_DEG=20;var INTRO_DAMPER_RATE=0.4;var SCALE_SNAP_HIGH=1.2;var SCALE_SNAP_LOW=1/SCALE_SNAP_HIGH;var MIN_VIEWPORT_SCALE=0.25;var ARStatus={NOT_PRESENTING:'not-presenting',SESSION_STARTED:'session-started',OBJECT_PLACED:'object-placed',FAILED:'failed'};var $presentedScene=Symbol('presentedScene');var $placementBox=Symbol('placementBox');var $lastTick=Symbol('lastTick');var $turntableRotation=Symbol('turntableRotation');var $oldShadowIntensity=Symbol('oldShadowIntensity');var $oldBackground=Symbol('oldBackground');var $rafId=Symbol('rafId');var $currentSession=Symbol('currentSession');var $tick=Symbol('tick');var $refSpace=Symbol('refSpace');var $viewerRefSpace=Symbol('viewerRefSpace');var $frame=Symbol('frame');var $initialized=Symbol('initialized');var $initialModelToWorld=Symbol('initialModelToWorld');var $placementComplete=Symbol('placementComplete');var $initialHitSource=Symbol('hitTestSource');var $transientHitTestSource=Symbol('transiertHitTestSource');var $inputSource=Symbol('inputSource');var $isTranslating=Symbol('isTranslating');var $isRotating=Symbol('isRotating');var $isScaling=Symbol('isScaling');var $lastDragPosition=Symbol('lastDragPosition');var $lastScalar=Symbol('lastScalar');var $goalPosition=Symbol('goalPosition');var $goalYaw=Symbol('goalYaw');var $goalScale=Symbol('goalScale');var $xDamper=Symbol('xDamper');var $yDamper=Symbol('yDamper');var $zDamper=Symbol('zDamper');var $yawDamper=Symbol('yawDamper');var $scaleDamper=Symbol('scaleDamper');var $damperRate=Symbol('damperRate');var $resolveCleanup=Symbol('resolveCleanup');var $exitWebXRButtonContainer=Symbol('exitWebXRButtonContainer');var $onWebXRFrame=Symbol('onWebXRFrame');var $postSessionCleanup=Symbol('postSessionCleanup');var $updateCamera=Symbol('updateCamera');var $placeInitially=Symbol('placeInitially');var $getHitPoint=Symbol('getHitPoint');var $onSelectStart=Symbol('onSelectStart');var $onSelectEnd=Symbol('onSelect');var $onUpdateScene=Symbol('onUpdateScene');var $fingerSeparation=Symbol('fingerSeparation');var $processInput=Symbol('processInput');var $moveScene=Symbol('moveScene');var $onExitWebXRButtonContainerClick=Symbol('onExitWebXRButtonContainerClick');var vector3$1=new Vector3();var matrix4=new Matrix4();var hitPosition=new Vector3();var ARRenderer=/*#__PURE__*/function(_EventDispatcher2){_inherits(ARRenderer,_EventDispatcher2);var _super17=_createSuper(ARRenderer);function ARRenderer(renderer){var _this33;_classCallCheck(this,ARRenderer);_this33=_super17.call(this);_this33.renderer=renderer;_this33.camera=new PerspectiveCamera();_this33[_a$5]=null;_this33[_b$3]=null;_this33[_c]=null;_this33[_d]=null;_this33[_e]=null;_this33[_f]=null;_this33[_g]=null;_this33[_h]=null;_this33[_j]=null;_this33[_k]=null;_this33[_l]=null;_this33[_m]=null;_this33[_o]=null;_this33[_p]=null;_this33[_q]=null;_this33[_r]=null;_this33[_s]=false;_this33[_t]=new Matrix4();_this33[_u]=false;_this33[_v]=false;_this33[_w]=false;_this33[_x$1]=false;_this33[_y$1]=new Vector3();_this33[_z$1]=0;_this33[_0]=new Vector3();_this33[_1]=0;_this33[_2]=1;_this33[_3]=new Damper();_this33[_4]=new Damper();_this33[_5]=new Damper();_this33[_6]=new Damper();_this33[_7]=new Damper();_this33[_8]=1;_this33[_9]=function(){return _this33.stopPresenting();};_this33[_10]=function(){if(_this33[$placementBox]!=null&&_this33.isPresenting){_this33[$placementBox].dispose();_this33[$placementBox]=new PlacementBox(_this33[$presentedScene].model);}};_this33[_11]=function(event){var hitSource=_this33[$transientHitTestSource];if(hitSource==null){return;}var fingers=_this33[$frame].getHitTestResultsForTransientInput(hitSource);var scene=_this33[$presentedScene];var box=_this33[$placementBox];if(fingers.length===1){_this33[$inputSource]=event.inputSource;var axes=_this33[$inputSource].gamepad.axes;var _hitPosition=box.getHit(_this33[$presentedScene],axes[0],axes[1]);box.show=true;if(_hitPosition!=null){_this33[$isTranslating]=true;_this33[$lastDragPosition].copy(_hitPosition);}else{_this33[$isRotating]=true;_this33[$lastScalar]=axes[0];}}else if(fingers.length===2&&scene.canScale){box.show=true;_this33[$isScaling]=true;_this33[$lastScalar]=_this33[$fingerSeparation](fingers)/scene.scale.x;}};_this33[_12]=function(){_this33[$isTranslating]=false;_this33[$isRotating]=false;_this33[$isScaling]=false;_this33[$inputSource]=null;_this33[$goalPosition].y+=_this33[$placementBox].offsetHeight*_this33[$presentedScene].scale.x;_this33[$placementBox].show=false;};_this33.threeRenderer=renderer.threeRenderer;_this33.camera.matrixAutoUpdate=false;return _this33;}_createClass(ARRenderer,[{key:"resolveARSession",value:function(){var _resolveARSession=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee8(scene){var session,gl,waitForXRAnimationFrame,_session$renderState$,framebuffer,framebufferWidth,framebufferHeight,exitButton;return regeneratorRuntime.wrap(function _callee8$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:assertIsArCandidate();_context9.next=3;return navigator.xr.requestSession('immersive-ar',{requiredFeatures:['hit-test'],optionalFeatures:['dom-overlay'],domOverlay:{root:scene.element.shadowRoot.querySelector('div.default')}});case 3:session=_context9.sent;gl=this.threeRenderer.context;_context9.next=7;return gl.makeXRCompatible();case 7:session.updateRenderState({baseLayer:new XRWebGLLayer(session,gl,{alpha:true})});waitForXRAnimationFrame=new Promise(function(resolve,_reject){session.requestAnimationFrame(function(){return resolve();});});_context9.next=11;return waitForXRAnimationFrame;case 11:scene.element[$onResize](window.screen);_session$renderState$=session.renderState.baseLayer,framebuffer=_session$renderState$.framebuffer,framebufferWidth=_session$renderState$.framebufferWidth,framebufferHeight=_session$renderState$.framebufferHeight;this.threeRenderer.setFramebuffer(framebuffer);this.threeRenderer.setPixelRatio(1);this.threeRenderer.setSize(framebufferWidth,framebufferHeight,false);exitButton=scene.element.shadowRoot.querySelector('.slot.exit-webxr-ar-button');exitButton.classList.add('enabled');exitButton.addEventListener('click',this[$onExitWebXRButtonContainerClick]);this[$exitWebXRButtonContainer]=exitButton;return _context9.abrupt("return",session);case 21:case"end":return _context9.stop();}}},_callee8,this);}));function resolveARSession(_x15){return _resolveARSession.apply(this,arguments);}return resolveARSession;}()},{key:"supportsPresentation",value:function(){var _supportsPresentation=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee9(){return regeneratorRuntime.wrap(function _callee9$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_context10.prev=0;assertIsArCandidate();_context10.next=4;return navigator.xr.isSessionSupported('immersive-ar');case 4:return _context10.abrupt("return",_context10.sent);case 7:_context10.prev=7;_context10.t0=_context10["catch"](0);return _context10.abrupt("return",false);case 10:case"end":return _context10.stop();}}},_callee9,null,[[0,7]]);}));function supportsPresentation(){return _supportsPresentation.apply(this,arguments);}return supportsPresentation;}()},{key:"present",value:function(){var _present=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee10(scene){var _this34=this;var waitForAnimationFrame,currentSession,radians,ray;return regeneratorRuntime.wrap(function _callee10$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:if(this.isPresenting){console.warn('Cannot present while a model is already presenting');}waitForAnimationFrame=new Promise(function(resolve,_reject){requestAnimationFrame(function(){return resolve();});});scene.model.setHotspotsVisibility(false);scene.isDirty=true;_context11.next=6;return waitForAnimationFrame;case 6:this[$presentedScene]=scene;_context11.next=9;return this.resolveARSession(scene);case 9:currentSession=_context11.sent;currentSession.addEventListener('end',function(){_this34[$postSessionCleanup]();},{once:true});_context11.next=13;return currentSession.requestReferenceSpace('local');case 13:this[$refSpace]=_context11.sent;_context11.next=16;return currentSession.requestReferenceSpace('viewer');case 16:this[$viewerRefSpace]=_context11.sent;scene.setCamera(this.camera);this[$initialized]=false;this[$damperRate]=INTRO_DAMPER_RATE;this[$turntableRotation]=scene.yaw;scene.yaw=0;this[$goalYaw]=0;this[$goalScale]=1;this[$oldBackground]=scene.background;scene.background=null;this[$oldShadowIntensity]=scene.shadowIntensity;scene.setShadowIntensity(0);scene.addEventListener('model-load',this[$onUpdateScene]);radians=HIT_ANGLE_DEG*Math.PI/180;ray=new XRRay(new DOMPoint(0,0,0),{x:0,y:-Math.sin(radians),z:-Math.cos(radians)});currentSession.requestHitTestSource({space:this[$viewerRefSpace],offsetRay:ray}).then(function(hitTestSource){_this34[$initialHitSource]=hitTestSource;});this[$currentSession]=currentSession;this[$placementBox]=new PlacementBox(scene.model);this[$placementComplete]=false;this[$lastTick]=performance.now();this[$tick]();case 37:case"end":return _context11.stop();}}},_callee10,this);}));function present(_x16){return _present.apply(this,arguments);}return present;}()},{key:"stopPresenting",value:function(){var _stopPresenting=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee11(){var _this35=this;var cleanupPromise;return regeneratorRuntime.wrap(function _callee11$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:if(this.isPresenting){_context12.next=2;break;}return _context12.abrupt("return");case 2:cleanupPromise=new Promise(function(resolve){_this35[$resolveCleanup]=resolve;});_context12.prev=3;_context12.next=6;return this[$currentSession].end();case 6:_context12.next=8;return cleanupPromise;case 8:_context12.next=15;break;case 10:_context12.prev=10;_context12.t0=_context12["catch"](3);console.warn('Error while trying to end AR session');console.warn(_context12.t0);this[$postSessionCleanup]();case 15:case"end":return _context12.stop();}}},_callee11,this,[[3,10]]);}));function stopPresenting(){return _stopPresenting.apply(this,arguments);}return stopPresenting;}()},{key:(_a$5=$placementBox,_b$3=$lastTick,_c=$turntableRotation,_d=$oldShadowIntensity,_e=$oldBackground,_f=$rafId,_g=$currentSession,_h=$refSpace,_j=$viewerRefSpace,_k=$frame,_l=$initialHitSource,_m=$transientHitTestSource,_o=$inputSource,_p=$presentedScene,_q=$resolveCleanup,_r=$exitWebXRButtonContainer,_s=$initialized,_t=$initialModelToWorld,_u=$placementComplete,_v=$isTranslating,_w=$isRotating,_x$1=$isScaling,_y$1=$lastDragPosition,_z$1=$lastScalar,_0=$goalPosition,_1=$goalYaw,_2=$goalScale,_3=$xDamper,_4=$yDamper,_5=$zDamper,_6=$yawDamper,_7=$scaleDamper,_8=$damperRate,_9=$onExitWebXRButtonContainerClick,$postSessionCleanup),value:function value(){this.threeRenderer.setFramebuffer(null);var session=this[$currentSession];if(session!=null){session.removeEventListener('selectstart',this[$onSelectStart]);session.removeEventListener('selectend',this[$onSelectEnd]);session.cancelAnimationFrame(this[$rafId]);this[$currentSession]=null;}var scene=this[$presentedScene];if(scene!=null){var model=scene.model,element=scene.element;scene.setCamera(scene.camera);model.remove(this[$placementBox]);scene.position.set(0,0,0);scene.scale.set(1,1,1);model.setShadowScaleAndOffset(1,0);var yaw=this[$turntableRotation];if(yaw!=null){scene.yaw=yaw;}var intensity=this[$oldShadowIntensity];if(intensity!=null){scene.setShadowIntensity(intensity);}var background=this[$oldBackground];if(background!=null){scene.background=background;}scene.removeEventListener('model-load',this[$onUpdateScene]);model.orientHotspots(0);element.requestUpdate('cameraTarget');element[$onResize](element.getBoundingClientRect());}this.renderer.height=0;var exitButton=this[$exitWebXRButtonContainer];if(exitButton!=null){exitButton.classList.remove('enabled');exitButton.removeEventListener('click',this[$onExitWebXRButtonContainerClick]);this[$exitWebXRButtonContainer]=null;}var hitSource=this[$transientHitTestSource];if(hitSource!=null){hitSource.cancel();this[$transientHitTestSource]=null;}var hitSourceInitial=this[$initialHitSource];if(hitSourceInitial!=null){hitSourceInitial.cancel();this[$initialHitSource]=null;}if(this[$placementBox]!=null){this[$placementBox].dispose();this[$placementBox]=null;}this[$lastTick]=null;this[$turntableRotation]=null;this[$oldShadowIntensity]=null;this[$oldBackground]=null;this[$rafId]=null;this[$refSpace]=null;this[$presentedScene]=null;this[$viewerRefSpace]=null;this[$frame]=null;this[$inputSource]=null;if(this[$resolveCleanup]!=null){this[$resolveCleanup]();}this.dispatchEvent({type:'status',status:ARStatus.NOT_PRESENTING});}},{key:"updateTarget",value:function updateTarget(){var scene=this[$presentedScene];if(scene!=null){var _target3=scene.getTarget();scene.setTarget(_target3.x,scene.model.boundingBox.min.y,_target3.z);}}},{key:(_10=$onUpdateScene,$updateCamera),value:function value(view){var camera=this.camera;var cameraMatrix=camera.matrix;cameraMatrix.fromArray(view.transform.matrix);camera.updateMatrixWorld(true);camera.position.setFromMatrixPosition(cameraMatrix);if(this[$initialHitSource]!=null){var _this$$presentedScene=this[$presentedScene],position=_this$$presentedScene.position,model=_this$$presentedScene.model;var radius=model.idealCameraDistance;camera.getWorldDirection(position);position.multiplyScalar(radius);position.add(camera.position);}if(!this[$initialized]){camera.projectionMatrix.fromArray(view.projectionMatrix);camera.projectionMatrixInverse.getInverse(camera.projectionMatrix);var _camera$position=camera.position,x=_camera$position.x,z=_camera$position.z;var scene=this[$presentedScene];scene.pointTowards(x,z);scene.model.updateMatrixWorld(true);this[$goalYaw]=scene.yaw;this[$initialModelToWorld].copy(scene.model.matrixWorld);scene.model.setHotspotsVisibility(true);this[$initialized]=true;this.dispatchEvent({type:'status',status:ARStatus.SESSION_STARTED});}if(view.requestViewportScale&&view.recommendedViewportScale){var scale=view.recommendedViewportScale;view.requestViewportScale(Math.max(scale,MIN_VIEWPORT_SCALE));}var layer=this[$currentSession].renderState.baseLayer;var viewport=layer.getViewport(view);this.threeRenderer.setViewport(viewport.x,viewport.y,viewport.width,viewport.height);this[$presentedScene].model.orientHotspots(Math.atan2(cameraMatrix.elements[1],cameraMatrix.elements[5]));}},{key:$placeInitially,value:function value(frame){var _this36=this;var hitSource=this[$initialHitSource];if(hitSource==null){return;}var hitTestResults=frame.getHitTestResults(hitSource);if(hitTestResults.length==0){return;}var hit=hitTestResults[0];var hitMatrix=this[$getHitPoint](hit);if(hitMatrix==null){return;}this.placeModel(hitMatrix);hitSource.cancel();this[$initialHitSource]=null;var session=frame.session;session.addEventListener('selectstart',this[$onSelectStart]);session.addEventListener('selectend',this[$onSelectEnd]);session.requestHitTestSourceForTransientInput({profile:'generic-touchscreen'}).then(function(hitTestSource){_this36[$transientHitTestSource]=hitTestSource;});}},{key:$getHitPoint,value:function value(hitResult){var pose=hitResult.getPose(this[$refSpace]);if(pose==null){return null;}var hitMatrix=matrix4.fromArray(pose.transform.matrix);return hitMatrix.elements[5]>0.75?hitPosition.setFromMatrixPosition(hitMatrix):null;}},{key:"placeModel",value:function placeModel(hit){var scene=this[$presentedScene];var model=scene.model;var _model$boundingBox=model.boundingBox,min=_model$boundingBox.min,max=_model$boundingBox.max;this[$placementBox].show=true;var goal=this[$goalPosition];goal.copy(hit);var floor=hit.y;var origin=this.camera.position.clone();var direction=hit.clone().sub(origin).normalize();origin.sub(direction.multiplyScalar(model.idealCameraDistance));var ray=new Ray(origin,direction.normalize());var modelToWorld=this[$initialModelToWorld];var modelPosition=new Vector3().setFromMatrixPosition(modelToWorld).add(hit);modelToWorld.setPosition(modelPosition);var world2Model=new Matrix4().getInverse(modelToWorld);ray.applyMatrix4(world2Model);max.y+=10;ray.intersectBox(model.boundingBox,modelPosition);max.y-=10;if(modelPosition!=null){modelPosition.applyMatrix4(modelToWorld);goal.add(hit).sub(modelPosition);}var target=scene.getTarget();scene.setTarget(target.x,min.y,target.z);goal.y=floor;this.dispatchEvent({type:'status',status:ARStatus.OBJECT_PLACED});}},{key:(_11=$onSelectStart,_12=$onSelectEnd,$fingerSeparation),value:function value(fingers){var fingerOne=fingers[0].inputSource.gamepad.axes;var fingerTwo=fingers[1].inputSource.gamepad.axes;var deltaX=fingerTwo[0]-fingerOne[0];var deltaY=fingerTwo[1]-fingerOne[1];return Math.sqrt(deltaX*deltaX+deltaY*deltaY);}},{key:$processInput,value:function value(frame){var _this37=this;var hitSource=this[$transientHitTestSource];if(hitSource==null){return;}if(!this[$isTranslating]&&!this[$isScaling]&&!this[$isRotating]){return;}var fingers=frame.getHitTestResultsForTransientInput(hitSource);var scene=this[$presentedScene];var scale=scene.scale.x;if(this[$isScaling]){if(fingers.length<2){this[$isScaling]=false;}else{var separation=this[$fingerSeparation](fingers);var _scale2=separation/this[$lastScalar];this[$goalScale]=_scale2<SCALE_SNAP_HIGH&&_scale2>SCALE_SNAP_LOW?1:_scale2;}return;}else if(fingers.length===2&&scene.canScale){this[$isTranslating]=false;this[$isRotating]=false;this[$isScaling]=true;this[$lastScalar]=this[$fingerSeparation](fingers)/scale;return;}if(this[$isRotating]){var thisDragX=this[$inputSource].gamepad.axes[0];this[$goalYaw]+=(thisDragX-this[$lastScalar])*ROTATION_RATE;this[$lastScalar]=thisDragX;}else if(this[$isTranslating]){fingers.forEach(function(finger){if(finger.inputSource!==_this37[$inputSource]||finger.results.length<1){return;}var hit=_this37[$getHitPoint](finger.results[0]);if(hit==null){return;}_this37[$goalPosition].sub(_this37[$lastDragPosition]);var offset=hit.y-_this37[$lastDragPosition].y;if(offset<0){_this37[$placementBox].offsetHeight=offset/scale;_this37[$presentedScene].model.setShadowScaleAndOffset(scale,offset);var cameraPosition=vector3$1.copy(_this37.camera.position);var alpha=-offset/(cameraPosition.y-hit.y);cameraPosition.multiplyScalar(alpha);hit.multiplyScalar(1-alpha).add(cameraPosition);}_this37[$goalPosition].add(hit);_this37[$lastDragPosition].copy(hit);});}}},{key:$moveScene,value:function value(delta){var scene=this[$presentedScene];var model=scene.model,position=scene.position,yaw=scene.yaw;var radius=model.idealCameraDistance;var goal=this[$goalPosition];var oldScale=scene.scale.x;var box=this[$placementBox];if(this[$initialHitSource]==null&&(!goal.equals(position)||this[$goalScale]!==oldScale)){var x=position.x,y=position.y,z=position.z;delta*=this[$damperRate];x=this[$xDamper].update(x,goal.x,delta,radius);y=this[$yDamper].update(y,goal.y,delta,radius);z=this[$zDamper].update(z,goal.z,delta,radius);position.set(x,y,z);var newScale=this[$scaleDamper].update(oldScale,this[$goalScale],delta,1);scene.scale.set(newScale,newScale,newScale);if(!this[$isTranslating]){var offset=goal.y-y;if(this[$placementComplete]){box.offsetHeight=offset/newScale;model.setShadowScaleAndOffset(newScale,offset);}else if(offset===0){this[$placementComplete]=true;box.show=false;scene.setShadowIntensity(AR_SHADOW_INTENSITY);this[$damperRate]=1;}}}box.updateOpacity(delta);scene.updateTarget(delta);scene.updateMatrixWorld(true);scene.yaw=this[$yawDamper].update(yaw,this[$goalYaw],delta,Math.PI);}},{key:$tick,value:function value(){var _this38=this;this[$rafId]=this[$currentSession].requestAnimationFrame(function(time,frame){return _this38[$onWebXRFrame](time,frame);});}},{key:$onWebXRFrame,value:function value(time,frame){this[$frame]=frame;var pose=frame.getViewerPose(this[$refSpace]);this[$tick]();var scene=this[$presentedScene];if(pose==null||scene==null){return;}var isFirstView=true;var _iterator5=_createForOfIteratorHelper(pose.views),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _view3=_step5.value;this[$updateCamera](_view3);if(isFirstView){this[$placeInitially](frame);this[$processInput](frame);var delta=time-this[$lastTick];this[$moveScene](delta);this.renderer.preRender(scene,time,delta);this[$lastTick]=time;}this.threeRenderer.render(scene,this.camera);isFirstView=false;}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}},{key:"presentedScene",get:function get(){return this[$presentedScene];}},{key:"isPresenting",get:function get(){return this[$presentedScene]!=null;}}]);return ARRenderer;}(EventDispatcher);var Debugger=/*#__PURE__*/function(){function Debugger(renderer){_classCallCheck(this,Debugger);renderer.threeRenderer.debug={checkShaderErrors:true};Promise.resolve().then(function(){self.dispatchEvent(new CustomEvent('model-viewer-renderer-debug',{detail:{renderer:renderer,THREE:{ShaderMaterial:ShaderMaterial,Texture:Texture,Mesh:Mesh,Scene:Scene,PlaneBufferGeometry:PlaneBufferGeometry,OrthographicCamera:OrthographicCamera,WebGLRenderTarget:WebGLRenderTarget}}}));});}_createClass(Debugger,[{key:"addScene",value:function addScene(scene){self.dispatchEvent(new CustomEvent('model-viewer-scene-added-debug',{detail:{scene:scene}}));}},{key:"removeScene",value:function removeScene(scene){self.dispatchEvent(new CustomEvent('model-viewer-scene-removed-debug',{detail:{scene:scene}}));}}]);return Debugger;}();var $threeGLTF=Symbol('threeGLTF');var $gltf=Symbol('gltf');var $gltfElementMap=Symbol('gltfElementMap');var $threeObjectMap=Symbol('threeObjectMap');var $parallelTraverseThreeScene=Symbol('parallelTraverseThreeScene');var $correlateOriginalThreeGLTF=Symbol('correlateOriginalThreeGLTF');var $correlateCloneThreeGLTF=Symbol('correlateCloneThreeGLTF');/**
          * The Three.js GLTFLoader provides us with an in-memory representation
          * of a glTF in terms of Three.js constructs. It also provides us with a copy
          * of the deserialized glTF without any Three.js decoration, and a mapping of
          * glTF elements to their corresponding Three.js constructs.
          *
          * A CorrelatedSceneGraph exposes a synchronously available mapping of glTF
          * element references to their corresponding Three.js constructs.
          */var CorrelatedSceneGraph=/*#__PURE__*/function(){function CorrelatedSceneGraph(threeGLTF,gltf,threeObjectMap,gltfElementMap){_classCallCheck(this,CorrelatedSceneGraph);this[$threeGLTF]=threeGLTF;this[$gltf]=gltf;this[$gltfElementMap]=gltfElementMap;this[$threeObjectMap]=threeObjectMap;}/**
              * Produce a CorrelatedSceneGraph from a naturally generated Three.js GLTF.
              * Such GLTFs are produced by Three.js' GLTFLoader, and contain cached
              * details that expedite the correlation step.
              *
              * If a CorrelatedSceneGraph is provided as the second argument, re-correlates
              * a cloned Three.js GLTF with a clone of the glTF hierarchy used to produce
              * the upstream Three.js GLTF that the clone was created from. The result
              * CorrelatedSceneGraph is representative of the cloned hierarchy.
              */_createClass(CorrelatedSceneGraph,[{key:"threeGLTF",/**
              * The source Three.js GLTF result given to us by a Three.js GLTFLoader.
              */get:function get(){return this[$threeGLTF];}/**
              * The in-memory deserialized source glTF.
              */},{key:"gltf",get:function get(){return this[$gltf];}/**
              * A Map of glTF element references to arrays of corresponding Three.js
              * object references. Three.js objects are kept in arrays to account for
              * cases where more than one Three.js object corresponds to a single glTF
              * element.
              */},{key:"gltfElementMap",get:function get(){return this[$gltfElementMap];}/**
              * A map of individual Three.js objects to corresponding elements in the
              * source glTF.
              */},{key:"threeObjectMap",get:function get(){return this[$threeObjectMap];}}],[{key:"from",value:function from(threeGLTF,upstreamCorrelatedSceneGraph){if(upstreamCorrelatedSceneGraph!=null){return this[$correlateCloneThreeGLTF](threeGLTF,upstreamCorrelatedSceneGraph);}else{return this[$correlateOriginalThreeGLTF](threeGLTF);}}},{key:$correlateOriginalThreeGLTF,value:function value(threeGLTF){var gltf=threeGLTF.parser.json;var associations=threeGLTF.parser.associations;var gltfElementMap=new Map();// NOTE: IE11 does not have Map iterator methods
     associations.forEach(function(gltfElementReference,threeObject){// Note: GLTFLoader creates a "default" material that has no corresponding
     // glTF element in the case that no materials are specified in the source
     // glTF. This means that for basic models without any of their own
     // materials, we might accidentally try to present a configurable glTF
     // material that doesn't exist. It might be valuable to make this default
     // material configurable in the future, but for now we ignore it.
     if(gltfElementReference==null){return;}var type=gltfElementReference.type,index=gltfElementReference.index;var elementArray=gltf[type]||[];var gltfElement=elementArray[index];if(gltfElement==null){// TODO: Maybe throw here...
     return;}var threeObjects=gltfElementMap.get(gltfElement);if(threeObjects==null){threeObjects=new Set();gltfElementMap.set(gltfElement,threeObjects);}threeObjects.add(threeObject);});return new CorrelatedSceneGraph(threeGLTF,gltf,associations,gltfElementMap);}/**
              * Transfers the association between a raw glTF and a Three.js scene graph
              * to a clone of the Three.js scene graph, resolved as a new
              * CorrelatedsceneGraph instance.
              */},{key:$correlateCloneThreeGLTF,value:function value(cloneThreeGLTF,upstreamCorrelatedSceneGraph){var originalThreeGLTF=upstreamCorrelatedSceneGraph.threeGLTF;var originalGLTF=upstreamCorrelatedSceneGraph.gltf;var cloneGLTF=JSON.parse(JSON.stringify(originalGLTF));var cloneThreeObjectMap=new Map();var cloneGLTFELementMap=new Map();for(var _i337=0;_i337<originalThreeGLTF.scenes.length;_i337++){this[$parallelTraverseThreeScene](originalThreeGLTF.scenes[_i337],cloneThreeGLTF.scenes[_i337],function(object,cloneObject){var elementReference=upstreamCorrelatedSceneGraph.threeObjectMap.get(object);if(elementReference!=null){var type=elementReference.type,index=elementReference.index;var cloneElement=cloneGLTF[type][index];cloneThreeObjectMap.set(cloneObject,{type:type,index:index});var cloneObjects=cloneGLTFELementMap.get(cloneElement)||new Set();cloneObjects.add(cloneObject);cloneGLTFELementMap.set(cloneElement,cloneObjects);}});}return new CorrelatedSceneGraph(cloneThreeGLTF,cloneGLTF,cloneThreeObjectMap,cloneGLTFELementMap);}/**
              * Traverses two presumably identical Three.js scenes, and invokes a callback
              * for each Object3D or Material encountered, including the initial scene.
              * Adapted from
              * https://github.com/mrdoob/three.js/blob/7c1424c5819ab622a346dd630ee4e6431388021e/examples/jsm/utils/SkeletonUtils.js#L586-L596
              */},{key:$parallelTraverseThreeScene,value:function value(sceneOne,sceneTwo,callback){var isMesh=function isMesh(object){return object.isMesh;};var traverse=function traverse(a,b){callback(a,b);if(a.isObject3D){if(isMesh(a)){if(Array.isArray(a.material)){for(var _i338=0;_i338<a.material.length;++_i338){traverse(a.material[_i338],b.material[_i338]);}}else{traverse(a.material,b.material);}}for(var _i339=0;_i339<a.children.length;++_i339){traverse(a.children[_i339],b.children[_i339]);}}};traverse(sceneOne,sceneTwo);}}]);return CorrelatedSceneGraph;}();var SkeletonUtils={retarget:function(){var pos=new Vector3(),quat=new Quaternion(),scale=new Vector3(),bindBoneMatrix=new Matrix4(),relativeMatrix=new Matrix4(),globalMatrix=new Matrix4();return function(target,source,options){options=options||{};options.preserveMatrix=options.preserveMatrix!==undefined?options.preserveMatrix:true;options.preservePosition=options.preservePosition!==undefined?options.preservePosition:true;options.preserveHipPosition=options.preserveHipPosition!==undefined?options.preserveHipPosition:false;options.useTargetMatrix=options.useTargetMatrix!==undefined?options.useTargetMatrix:false;options.hip=options.hip!==undefined?options.hip:"hip";options.names=options.names||{};var sourceBones=source.isObject3D?source.skeleton.bones:this.getBones(source),bones=target.isObject3D?target.skeleton.bones:this.getBones(target),bindBones,bone,name,boneTo,bonesPosition,i;// reset bones
     if(target.isObject3D){target.skeleton.pose();}else{options.useTargetMatrix=true;options.preserveMatrix=false;}if(options.preservePosition){bonesPosition=[];for(i=0;i<bones.length;i++){bonesPosition.push(bones[i].position.clone());}}if(options.preserveMatrix){// reset matrix
     target.updateMatrixWorld();target.matrixWorld.identity();// reset children matrix
     for(i=0;i<target.children.length;++i){target.children[i].updateMatrixWorld(true);}}if(options.offsets){bindBones=[];for(i=0;i<bones.length;++i){bone=bones[i];name=options.names[bone.name]||bone.name;if(options.offsets&&options.offsets[name]){bone.matrix.multiply(options.offsets[name]);bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);bone.updateMatrixWorld();}bindBones.push(bone.matrixWorld.clone());}}for(i=0;i<bones.length;++i){bone=bones[i];name=options.names[bone.name]||bone.name;boneTo=this.getBoneByName(name,sourceBones);globalMatrix.copy(bone.matrixWorld);if(boneTo){boneTo.updateMatrixWorld();if(options.useTargetMatrix){relativeMatrix.copy(boneTo.matrixWorld);}else{relativeMatrix.getInverse(target.matrixWorld);relativeMatrix.multiply(boneTo.matrixWorld);}// ignore scale to extract rotation
     scale.setFromMatrixScale(relativeMatrix);relativeMatrix.scale(scale.set(1/scale.x,1/scale.y,1/scale.z));// apply to global matrix
     globalMatrix.makeRotationFromQuaternion(quat.setFromRotationMatrix(relativeMatrix));if(target.isObject3D){var boneIndex=bones.indexOf(bone),wBindMatrix=bindBones?bindBones[boneIndex]:bindBoneMatrix.getInverse(target.skeleton.boneInverses[boneIndex]);globalMatrix.multiply(wBindMatrix);}globalMatrix.copyPosition(relativeMatrix);}if(bone.parent&&bone.parent.isBone){bone.matrix.getInverse(bone.parent.matrixWorld);bone.matrix.multiply(globalMatrix);}else{bone.matrix.copy(globalMatrix);}if(options.preserveHipPosition&&name===options.hip){bone.matrix.setPosition(pos.set(0,bone.position.y,0));}bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);bone.updateMatrixWorld();}if(options.preservePosition){for(i=0;i<bones.length;++i){bone=bones[i];name=options.names[bone.name]||bone.name;if(name!==options.hip){bone.position.copy(bonesPosition[i]);}}}if(options.preserveMatrix){// restore matrix
     target.updateMatrixWorld(true);}};}(),retargetClip:function retargetClip(target,source,clip,options){options=options||{};options.useFirstFramePosition=options.useFirstFramePosition!==undefined?options.useFirstFramePosition:false;options.fps=options.fps!==undefined?options.fps:30;options.names=options.names||[];if(!source.isObject3D){source=this.getHelperFromSkeleton(source);}var numFrames=Math.round(clip.duration*(options.fps/1000)*1000),delta=1/options.fps,convertedTracks=[],mixer=new AnimationMixer(source),bones=this.getBones(target.skeleton),boneDatas=[],positionOffset,bone,boneTo,boneData,name,i,j;mixer.clipAction(clip).play();mixer.update(0);source.updateMatrixWorld();for(i=0;i<numFrames;++i){var time=i*delta;this.retarget(target,source,options);for(j=0;j<bones.length;++j){name=options.names[bones[j].name]||bones[j].name;boneTo=this.getBoneByName(name,source.skeleton);if(boneTo){bone=bones[j];boneData=boneDatas[j]=boneDatas[j]||{bone:bone};if(options.hip===name){if(!boneData.pos){boneData.pos={times:new Float32Array(numFrames),values:new Float32Array(numFrames*3)};}if(options.useFirstFramePosition){if(i===0){positionOffset=bone.position.clone();}bone.position.sub(positionOffset);}boneData.pos.times[i]=time;bone.position.toArray(boneData.pos.values,i*3);}if(!boneData.quat){boneData.quat={times:new Float32Array(numFrames),values:new Float32Array(numFrames*4)};}boneData.quat.times[i]=time;bone.quaternion.toArray(boneData.quat.values,i*4);}}mixer.update(delta);source.updateMatrixWorld();}for(i=0;i<boneDatas.length;++i){boneData=boneDatas[i];if(boneData){if(boneData.pos){convertedTracks.push(new VectorKeyframeTrack(".bones["+boneData.bone.name+"].position",boneData.pos.times,boneData.pos.values));}convertedTracks.push(new QuaternionKeyframeTrack(".bones["+boneData.bone.name+"].quaternion",boneData.quat.times,boneData.quat.values));}}mixer.uncacheAction(clip);return new AnimationClip(clip.name,-1,convertedTracks);},getHelperFromSkeleton:function getHelperFromSkeleton(skeleton){var source=new SkeletonHelper(skeleton.bones[0]);source.skeleton=skeleton;return source;},getSkeletonOffsets:function(){var targetParentPos=new Vector3(),targetPos=new Vector3(),sourceParentPos=new Vector3(),sourcePos=new Vector3(),targetDir=new Vector2(),sourceDir=new Vector2();return function(target,source,options){options=options||{};options.hip=options.hip!==undefined?options.hip:"hip";options.names=options.names||{};if(!source.isObject3D){source=this.getHelperFromSkeleton(source);}var nameKeys=Object.keys(options.names),nameValues=Object.values(options.names),sourceBones=source.isObject3D?source.skeleton.bones:this.getBones(source),bones=target.isObject3D?target.skeleton.bones:this.getBones(target),offsets=[],bone,boneTo,name,i;target.skeleton.pose();for(i=0;i<bones.length;++i){bone=bones[i];name=options.names[bone.name]||bone.name;boneTo=this.getBoneByName(name,sourceBones);if(boneTo&&name!==options.hip){var boneParent=this.getNearestBone(bone.parent,nameKeys),boneToParent=this.getNearestBone(boneTo.parent,nameValues);boneParent.updateMatrixWorld();boneToParent.updateMatrixWorld();targetParentPos.setFromMatrixPosition(boneParent.matrixWorld);targetPos.setFromMatrixPosition(bone.matrixWorld);sourceParentPos.setFromMatrixPosition(boneToParent.matrixWorld);sourcePos.setFromMatrixPosition(boneTo.matrixWorld);targetDir.subVectors(new Vector2(targetPos.x,targetPos.y),new Vector2(targetParentPos.x,targetParentPos.y)).normalize();sourceDir.subVectors(new Vector2(sourcePos.x,sourcePos.y),new Vector2(sourceParentPos.x,sourceParentPos.y)).normalize();var laterialAngle=targetDir.angle()-sourceDir.angle();var offset=new Matrix4().makeRotationFromEuler(new Euler(0,0,laterialAngle));bone.matrix.multiply(offset);bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);bone.updateMatrixWorld();offsets[name]=offset;}}return offsets;};}(),renameBones:function renameBones(skeleton,names){var bones=this.getBones(skeleton);for(var i=0;i<bones.length;++i){var bone=bones[i];if(names[bone.name]){bone.name=names[bone.name];}}return this;},getBones:function getBones(skeleton){return Array.isArray(skeleton)?skeleton:skeleton.bones;},getBoneByName:function getBoneByName(name,skeleton){for(var i=0,bones=this.getBones(skeleton);i<bones.length;i++){if(name===bones[i].name)return bones[i];}},getNearestBone:function getNearestBone(bone,names){while(bone.isBone){if(names.indexOf(bone.name)!==-1){return bone;}bone=bone.parent;}},findBoneTrackData:function findBoneTrackData(name,tracks){var regexp=/\[(.*)\]\.(.*)/,result={name:name};for(var i=0;i<tracks.length;++i){// 1 is track name
     // 2 is track type
     var trackData=regexp.exec(tracks[i].name);if(trackData&&name===trackData[1]){result[trackData[2]]=i;}}return result;},getEqualsBonesNames:function getEqualsBonesNames(skeleton,targetSkeleton){var sourceBones=this.getBones(skeleton),targetBones=this.getBones(targetSkeleton),bones=[];search:for(var i=0;i<sourceBones.length;i++){var boneName=sourceBones[i].name;for(var j=0;j<targetBones.length;j++){if(boneName===targetBones[j].name){bones.push(boneName);continue search;}}}return bones;},clone:function clone(source){var sourceLookup=new Map();var cloneLookup=new Map();var clone=source.clone();parallelTraverse(source,clone,function(sourceNode,clonedNode){sourceLookup.set(clonedNode,sourceNode);cloneLookup.set(sourceNode,clonedNode);});clone.traverse(function(node){if(!node.isSkinnedMesh)return;var clonedMesh=node;var sourceMesh=sourceLookup.get(node);var sourceBones=sourceMesh.skeleton.bones;clonedMesh.skeleton=sourceMesh.skeleton.clone();clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);clonedMesh.skeleton.bones=sourceBones.map(function(bone){return cloneLookup.get(bone);});clonedMesh.bind(clonedMesh.skeleton,clonedMesh.bindMatrix);});return clone;}};function parallelTraverse(a,b,callback){callback(a,b);for(var i=0;i<a.children.length;i++){parallelTraverse(a.children[i],b.children[i],callback);}}var $prepared=Symbol('prepared');var $prepare=Symbol('prepare');var $preparedGLTF=Symbol('preparedGLTF');var $clone=Symbol('clone');var GLTFInstance=/*#__PURE__*/function(){function GLTFInstance(preparedGLTF){_classCallCheck(this,GLTFInstance);this[$preparedGLTF]=preparedGLTF;}_createClass(GLTFInstance,[{key:"clone",value:function clone(){var GLTFInstanceConstructor=this.constructor;var clonedGLTF=this[$clone]();return new GLTFInstanceConstructor(clonedGLTF);}},{key:"dispose",value:function dispose(){this.scenes.forEach(function(scene){scene.traverse(function(object){if(!object.isMesh){return;}var mesh=object;var materials=Array.isArray(mesh.material)?mesh.material:[mesh.material];materials.forEach(function(material){material.dispose();});mesh.geometry.dispose();});});}},{key:$clone,value:function value(){var source=this[$preparedGLTF];var scene=SkeletonUtils.clone(this.scene);var scenes=[scene];var userData=source.userData?Object.assign({},source.userData):{};return Object.assign(Object.assign({},source),{scene:scene,scenes:scenes,userData:userData});}},{key:"parser",get:function get(){return this[$preparedGLTF].parser;}},{key:"animations",get:function get(){return this[$preparedGLTF].animations;}},{key:"scene",get:function get(){return this[$preparedGLTF].scene;}},{key:"scenes",get:function get(){return this[$preparedGLTF].scenes;}},{key:"cameras",get:function get(){return this[$preparedGLTF].cameras;}},{key:"asset",get:function get(){return this[$preparedGLTF].asset;}},{key:"userData",get:function get(){return this[$preparedGLTF].userData;}}],[{key:"prepare",value:function prepare(source){if(source.scene==null){throw new Error('Model does not have a scene');}if(source[$prepared]){return source;}var prepared=this[$prepare](source);prepared[$prepared]=true;return prepared;}},{key:$prepare,value:function value(source){var scene=source.scene;var scenes=[scene];return Object.assign(Object.assign({},source),{scene:scene,scenes:scenes});}}]);return GLTFInstance;}();var alphaChunk="\n#ifdef ALPHATEST\n\n    if ( diffuseColor.a < ALPHATEST ) discard;\n    diffuseColor.a = 1.0;\n\n#endif\n";var $cloneAndPatchMaterial=Symbol('cloneAndPatchMaterial');var $correlatedSceneGraph=Symbol('correlatedSceneGraph');var ModelViewerGLTFInstance=/*#__PURE__*/function(_GLTFInstance2){_inherits(ModelViewerGLTFInstance,_GLTFInstance2);var _super18=_createSuper(ModelViewerGLTFInstance);function ModelViewerGLTFInstance(){_classCallCheck(this,ModelViewerGLTFInstance);return _super18.apply(this,arguments);}_createClass(ModelViewerGLTFInstance,[{key:$clone,value:function value(){var _this39=this;var clone=_get(_getPrototypeOf(ModelViewerGLTFInstance.prototype),$clone,this).call(this);var sourceUUIDToClonedMaterial=new Map();clone.scene.traverse(function(node){if(node.isMesh){var mesh=node;if(Array.isArray(mesh.material)){mesh.material=mesh.material.map(function(material){return _this39[$cloneAndPatchMaterial](material,sourceUUIDToClonedMaterial);});}else if(mesh.material!=null){mesh.material=_this39[$cloneAndPatchMaterial](mesh.material,sourceUUIDToClonedMaterial);}}});clone[$correlatedSceneGraph]=CorrelatedSceneGraph.from(clone,this.correlatedSceneGraph);return clone;}},{key:$cloneAndPatchMaterial,value:function value(material,sourceUUIDToClonedMaterial){if(sourceUUIDToClonedMaterial.has(material.uuid)){return sourceUUIDToClonedMaterial.get(material.uuid);}var clone=material.clone();var oldOnBeforeCompile=material.onBeforeCompile;clone.onBeforeCompile=material.isGLTFSpecularGlossinessMaterial?function(shader){oldOnBeforeCompile(shader,undefined);shader.fragmentShader=shader.fragmentShader.replace('#include <alphatest_fragment>',alphaChunk);}:function(shader){shader.fragmentShader=shader.fragmentShader.replace('#include <alphatest_fragment>',alphaChunk);oldOnBeforeCompile(shader,undefined);};clone.shadowSide=FrontSide;if(clone.transparent){clone.depthWrite=false;}if(!clone.alphaTest&&!clone.transparent){clone.alphaTest=-0.5;}sourceUUIDToClonedMaterial.set(material.uuid,clone);return clone;}},{key:"correlatedSceneGraph",get:function get(){return this[$preparedGLTF][$correlatedSceneGraph];}}],[{key:$prepare,value:function value(source){var prepared=_get(_getPrototypeOf(ModelViewerGLTFInstance),$prepare,this).call(this,source);if(prepared[$correlatedSceneGraph]==null){prepared[$correlatedSceneGraph]=CorrelatedSceneGraph.from(prepared);}var scene=prepared.scene;var meshesToDuplicate=[];scene.traverse(function(node){node.renderOrder=1000;node.frustumCulled=false;if(!node.name){node.name=node.uuid;}if(!node.isMesh){return;}node.castShadow=true;var mesh=node;var transparent=false;var materials=Array.isArray(mesh.material)?mesh.material:[mesh.material];materials.forEach(function(material){if(material.isMeshStandardMaterial){if(material.transparent&&material.side===DoubleSide){transparent=true;material.side=FrontSide;}Renderer.singleton.roughnessMipmapper.generateMipmaps(material);}});if(transparent){meshesToDuplicate.push(mesh);}});for(var _i340=0,_meshesToDuplicate=meshesToDuplicate;_i340<_meshesToDuplicate.length;_i340++){var mesh=_meshesToDuplicate[_i340];var materials=Array.isArray(mesh.material)?mesh.material:[mesh.material];var duplicateMaterials=materials.map(function(material){var backMaterial=material.clone();backMaterial.side=BackSide;return backMaterial;});var duplicateMaterial=Array.isArray(mesh.material)?duplicateMaterials:duplicateMaterials[0];var meshBack=new Mesh(mesh.geometry,duplicateMaterial);meshBack.renderOrder=-1;mesh.add(meshBack);}return prepared;}}]);return ModelViewerGLTFInstance;}(GLTFInstance);// https://github.com/mrdoob/three.js/issues/5552
     // http://en.wikipedia.org/wiki/RGBE_image_format
     var RGBELoader=function RGBELoader(manager){DataTextureLoader.call(this,manager);this.type=UnsignedByteType;};RGBELoader.prototype=Object.assign(Object.create(DataTextureLoader.prototype),{constructor:RGBELoader,// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html
     parse:function parse(buffer){var/* return codes for rgbe routines */ //RGBE_RETURN_SUCCESS = 0,
     RGBE_RETURN_FAILURE=-1,/* default error routine.  change this to change error handling */rgbe_read_error=1,rgbe_write_error=2,rgbe_format_error=3,rgbe_memory_error=4,rgbe_error=function rgbe_error(rgbe_error_code,msg){switch(rgbe_error_code){case rgbe_read_error:console.error("RGBELoader Read Error: "+(msg||''));break;case rgbe_write_error:console.error("RGBELoader Write Error: "+(msg||''));break;case rgbe_format_error:console.error("RGBELoader Bad File Format: "+(msg||''));break;default:case rgbe_memory_error:console.error("RGBELoader: Error: "+(msg||''));}return RGBE_RETURN_FAILURE;},/* offsets to red, green, and blue components in a data (float) pixel */ //RGBE_DATA_RED = 0,
     //RGBE_DATA_GREEN = 1,
     //RGBE_DATA_BLUE = 2,
     /* number of floats per pixel, use 4 since stored in rgba image format */ //RGBE_DATA_SIZE = 4,
     /* flags indicating which fields in an rgbe_header_info are valid */RGBE_VALID_PROGRAMTYPE=1,RGBE_VALID_FORMAT=2,RGBE_VALID_DIMENSIONS=4,NEWLINE="\n",fgets=function fgets(buffer,lineLimit,consume){lineLimit=!lineLimit?1024:lineLimit;var p=buffer.pos,i=-1,len=0,s='',chunkSize=128,chunk=String.fromCharCode.apply(null,new Uint16Array(buffer.subarray(p,p+chunkSize)));while(0>(i=chunk.indexOf(NEWLINE))&&len<lineLimit&&p<buffer.byteLength){s+=chunk;len+=chunk.length;p+=chunkSize;chunk+=String.fromCharCode.apply(null,new Uint16Array(buffer.subarray(p,p+chunkSize)));}if(-1<i){/*for (i=l-1; i>=0; i--) {
                                       byteCode = m.charCodeAt(i);
                                       if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;
                                       else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;
                                       if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate
                                  }*/if(false!==consume)buffer.pos+=len+i+1;return s+chunk.slice(0,i);}return false;},/* minimal header reading.  modify if you want to parse more information */RGBE_ReadHeader=function RGBE_ReadHeader(buffer){var line,match,// regexes to parse header info fields
     magic_token_re=/^#\?(\S+)$/,gamma_re=/^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/,exposure_re=/^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/,format_re=/^\s*FORMAT=(\S+)\s*$/,dimensions_re=/^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/,// RGBE format header struct
     header={valid:0,/* indicate which fields are valid */string:'',/* the actual header string */comments:'',/* comments found in header */programtype:'RGBE',/* listed at beginning of file to identify it after "#?". defaults to "RGBE" */format:'',/* RGBE format, default 32-bit_rle_rgbe */gamma:1.0,/* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */exposure:1.0,/* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */width:0,height:0/* image dimensions, width/height */};if(buffer.pos>=buffer.byteLength||!(line=fgets(buffer))){return rgbe_error(rgbe_read_error,"no header found");}/* if you want to require the magic token then uncomment the next line */if(!(match=line.match(magic_token_re))){return rgbe_error(rgbe_format_error,"bad initial token");}header.valid|=RGBE_VALID_PROGRAMTYPE;header.programtype=match[1];header.string+=line+"\n";while(true){line=fgets(buffer);if(false===line)break;header.string+=line+"\n";if('#'===line.charAt(0)){header.comments+=line+"\n";continue;// comment line
     }if(match=line.match(gamma_re)){header.gamma=parseFloat(match[1],10);}if(match=line.match(exposure_re)){header.exposure=parseFloat(match[1],10);}if(match=line.match(format_re)){header.valid|=RGBE_VALID_FORMAT;header.format=match[1];//'32-bit_rle_rgbe';
     }if(match=line.match(dimensions_re)){header.valid|=RGBE_VALID_DIMENSIONS;header.height=parseInt(match[1],10);header.width=parseInt(match[2],10);}if(header.valid&RGBE_VALID_FORMAT&&header.valid&RGBE_VALID_DIMENSIONS)break;}if(!(header.valid&RGBE_VALID_FORMAT)){return rgbe_error(rgbe_format_error,"missing format specifier");}if(!(header.valid&RGBE_VALID_DIMENSIONS)){return rgbe_error(rgbe_format_error,"missing image size specifier");}return header;},RGBE_ReadPixels_RLE=function RGBE_ReadPixels_RLE(buffer,w,h){var data_rgba,offset,pos,count,byteValue,scanline_buffer,ptr,ptr_end,i,l,off,isEncodedRun,scanline_width=w,num_scanlines=h,rgbeStart;if(// run length encoding is not allowed so read flat
     scanline_width<8||scanline_width>0x7fff||// this file is not run length encoded
     2!==buffer[0]||2!==buffer[1]||buffer[2]&0x80){// return the flat buffer
     return new Uint8Array(buffer);}if(scanline_width!==(buffer[2]<<8|buffer[3])){return rgbe_error(rgbe_format_error,"wrong scanline width");}data_rgba=new Uint8Array(4*w*h);if(!data_rgba.length){return rgbe_error(rgbe_memory_error,"unable to allocate buffer space");}offset=0;pos=0;ptr_end=4*scanline_width;rgbeStart=new Uint8Array(4);scanline_buffer=new Uint8Array(ptr_end);// read in each successive scanline
     while(num_scanlines>0&&pos<buffer.byteLength){if(pos+4>buffer.byteLength){return rgbe_error(rgbe_read_error);}rgbeStart[0]=buffer[pos++];rgbeStart[1]=buffer[pos++];rgbeStart[2]=buffer[pos++];rgbeStart[3]=buffer[pos++];if(2!=rgbeStart[0]||2!=rgbeStart[1]||(rgbeStart[2]<<8|rgbeStart[3])!=scanline_width){return rgbe_error(rgbe_format_error,"bad rgbe scanline format");}// read each of the four channels for the scanline into the buffer
     // first red, then green, then blue, then exponent
     ptr=0;while(ptr<ptr_end&&pos<buffer.byteLength){count=buffer[pos++];isEncodedRun=count>128;if(isEncodedRun)count-=128;if(0===count||ptr+count>ptr_end){return rgbe_error(rgbe_format_error,"bad scanline data");}if(isEncodedRun){// a (encoded) run of the same value
     byteValue=buffer[pos++];for(i=0;i<count;i++){scanline_buffer[ptr++]=byteValue;}//ptr += count;
     }else{// a literal-run
     scanline_buffer.set(buffer.subarray(pos,pos+count),ptr);ptr+=count;pos+=count;}}// now convert data from buffer into rgba
     // first red, then green, then blue, then exponent (alpha)
     l=scanline_width;//scanline_buffer.byteLength;
     for(i=0;i<l;i++){off=0;data_rgba[offset]=scanline_buffer[i+off];off+=scanline_width;//1;
     data_rgba[offset+1]=scanline_buffer[i+off];off+=scanline_width;//1;
     data_rgba[offset+2]=scanline_buffer[i+off];off+=scanline_width;//1;
     data_rgba[offset+3]=scanline_buffer[i+off];offset+=4;}num_scanlines--;}return data_rgba;};var RGBEByteToRGBFloat=function RGBEByteToRGBFloat(sourceArray,sourceOffset,destArray,destOffset){var e=sourceArray[sourceOffset+3];var scale=Math.pow(2.0,e-128.0)/255.0;destArray[destOffset+0]=sourceArray[sourceOffset+0]*scale;destArray[destOffset+1]=sourceArray[sourceOffset+1]*scale;destArray[destOffset+2]=sourceArray[sourceOffset+2]*scale;};var RGBEByteToRGBHalf=function(){// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410
     var floatView=new Float32Array(1);var int32View=new Int32Array(floatView.buffer);/* This method is faster than the OpenEXR implementation (very often
                         * used, eg. in Ogre), with the additional benefit of rounding, inspired
                         * by James Tursa?s half-precision code. */function toHalf(val){floatView[0]=val;var x=int32View[0];var bits=x>>16&0x8000;/* Get the sign */var m=x>>12&0x07ff;/* Keep one extra bit for rounding */var e=x>>23&0xff;/* Using int is faster here */ /* If zero, or denormal, or exponent underflows too much for a denormal
                              * half, return signed zero. */if(e<103)return bits;/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */if(e>142){bits|=0x7c00;/* If exponent was 0xff and one mantissa bit was set, it means NaN,
                                             * not Inf, so make sure we set one mantissa bit too. */bits|=(e==255?0:1)&&x&0x007fffff;return bits;}/* If exponent underflows but not too much, return a denormal */if(e<113){m|=0x0800;/* Extra rounding may overflow and set mantissa to 0 and exponent
                                   * to 1, which is OK. */bits|=(m>>114-e)+(m>>113-e&1);return bits;}bits|=e-112<<10|m>>1;/* Extra rounding. An overflow will set mantissa to 0 and increment
                              * the exponent, which is OK. */bits+=m&1;return bits;}return function(sourceArray,sourceOffset,destArray,destOffset){var e=sourceArray[sourceOffset+3];var scale=Math.pow(2.0,e-128.0)/255.0;destArray[destOffset+0]=toHalf(sourceArray[sourceOffset+0]*scale);destArray[destOffset+1]=toHalf(sourceArray[sourceOffset+1]*scale);destArray[destOffset+2]=toHalf(sourceArray[sourceOffset+2]*scale);};}();var byteArray=new Uint8Array(buffer);byteArray.pos=0;var rgbe_header_info=RGBE_ReadHeader(byteArray);if(RGBE_RETURN_FAILURE!==rgbe_header_info){var w=rgbe_header_info.width,h=rgbe_header_info.height,image_rgba_data=RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos),w,h);if(RGBE_RETURN_FAILURE!==image_rgba_data){switch(this.type){case UnsignedByteType:var data=image_rgba_data;var format=RGBEFormat;// handled as THREE.RGBAFormat in shaders
     var type=UnsignedByteType;break;case FloatType:var numElements=image_rgba_data.length/4*3;var floatArray=new Float32Array(numElements);for(var j=0;j<numElements;j++){RGBEByteToRGBFloat(image_rgba_data,j*4,floatArray,j*3);}var data=floatArray;var format=RGBFormat;var type=FloatType;break;case HalfFloatType:var numElements=image_rgba_data.length/4*3;var halfArray=new Uint16Array(numElements);for(var j=0;j<numElements;j++){RGBEByteToRGBHalf(image_rgba_data,j*4,halfArray,j*3);}var data=halfArray;var format=RGBFormat;var type=HalfFloatType;break;default:console.error('THREE.RGBELoader: unsupported type: ',this.type);break;}return{width:w,height:h,data:data,header:rgbe_header_info.string,gamma:rgbe_header_info.gamma,exposure:rgbe_header_info.exposure,format:format,type:type};}}return null;},setDataType:function setDataType(value){this.type=value;return this;},load:function load(url,onLoad,onProgress,onError){function onLoadCallback(texture,texData){switch(texture.type){case UnsignedByteType:texture.encoding=RGBEEncoding;texture.minFilter=NearestFilter;texture.magFilter=NearestFilter;texture.generateMipmaps=false;texture.flipY=true;break;case FloatType:texture.encoding=LinearEncoding;texture.minFilter=LinearFilter;texture.magFilter=LinearFilter;texture.generateMipmaps=false;texture.flipY=true;break;case HalfFloatType:texture.encoding=LinearEncoding;texture.minFilter=LinearFilter;texture.magFilter=LinearFilter;texture.generateMipmaps=false;texture.flipY=true;break;}if(onLoad)onLoad(texture,texData);}return DataTextureLoader.prototype.load.call(this,url,onLoadCallback,onProgress,onError);}});var EnvironmentScene=/*#__PURE__*/function(_Scene2){_inherits(EnvironmentScene,_Scene2);var _super19=_createSuper(EnvironmentScene);function EnvironmentScene(){var _this40;_classCallCheck(this,EnvironmentScene);_this40=_super19.call(this);_this40.position.y=-3.5;var geometry=new BoxBufferGeometry();geometry.deleteAttribute('uv');var roomMaterial=new MeshStandardMaterial({metalness:0,side:BackSide});var boxMaterial=new MeshStandardMaterial({metalness:0});var mainLight=new PointLight(0xffffff,500.0,28,2);mainLight.position.set(0.418,16.199,0.300);_this40.add(mainLight);var room=new Mesh(geometry,roomMaterial);room.position.set(-0.757,13.219,0.717);room.scale.set(31.713,28.305,28.591);_this40.add(room);var box1=new Mesh(geometry,boxMaterial);box1.position.set(-10.906,2.009,1.846);box1.rotation.set(0,-0.195,0);box1.scale.set(2.328,7.905,4.651);_this40.add(box1);var box2=new Mesh(geometry,boxMaterial);box2.position.set(-5.607,-0.754,-0.758);box2.rotation.set(0,0.994,0);box2.scale.set(1.970,1.534,3.955);_this40.add(box2);var box3=new Mesh(geometry,boxMaterial);box3.position.set(6.167,0.857,7.803);box3.rotation.set(0,0.561,0);box3.scale.set(3.927,6.285,3.687);_this40.add(box3);var box4=new Mesh(geometry,boxMaterial);box4.position.set(-2.017,0.018,6.124);box4.rotation.set(0,0.333,0);box4.scale.set(2.002,4.566,2.064);_this40.add(box4);var box5=new Mesh(geometry,boxMaterial);box5.position.set(2.291,-0.756,-2.621);box5.rotation.set(0,-0.286,0);box5.scale.set(1.546,1.552,1.496);_this40.add(box5);var box6=new Mesh(geometry,boxMaterial);box6.position.set(-2.193,-0.369,-5.547);box6.rotation.set(0,0.516,0);box6.scale.set(3.875,3.487,2.986);_this40.add(box6);var light1=new Mesh(geometry,_this40.createAreaLightMaterial(50));light1.position.set(-16.116,14.37,8.208);light1.scale.set(0.1,2.428,2.739);_this40.add(light1);var light2=new Mesh(geometry,_this40.createAreaLightMaterial(50));light2.position.set(-16.109,18.021,-8.207);light2.scale.set(0.1,2.425,2.751);_this40.add(light2);var light3=new Mesh(geometry,_this40.createAreaLightMaterial(17));light3.position.set(14.904,12.198,-1.832);light3.scale.set(0.15,4.265,6.331);_this40.add(light3);var light4=new Mesh(geometry,_this40.createAreaLightMaterial(43));light4.position.set(-0.462,8.89,14.520);light4.scale.set(4.38,5.441,0.088);_this40.add(light4);var light5=new Mesh(geometry,_this40.createAreaLightMaterial(20));light5.position.set(3.235,11.486,-12.541);light5.scale.set(2.5,2.0,0.1);_this40.add(light5);var light6=new Mesh(geometry,_this40.createAreaLightMaterial(100));light6.position.set(0.0,20.0,0.0);light6.scale.set(1.0,0.1,1.0);_this40.add(light6);return _this40;}_createClass(EnvironmentScene,[{key:"createAreaLightMaterial",value:function createAreaLightMaterial(intensity){var material=new MeshBasicMaterial();material.color.setScalar(intensity);return material;}}]);return EnvironmentScene;}(Scene);var GENERATED_SIGMA=0.04;Cache.enabled=true;var HDR_FILE_RE=/\.hdr(\.js)?$/;var ldrLoader=new TextureLoader();var hdrLoader=new RGBELoader();var userData={url:null};var TextureUtils=/*#__PURE__*/function(_EventDispatcher3){_inherits(TextureUtils,_EventDispatcher3);var _super20=_createSuper(TextureUtils);function TextureUtils(threeRenderer){var _this41;_classCallCheck(this,TextureUtils);_this41=_super20.call(this);_this41.generatedEnvironmentMap=null;_this41.skyboxCache=new Map();_this41.environmentMapCache=new Map();_this41.PMREMGenerator=new PMREMGenerator(threeRenderer);return _this41;}_createClass(TextureUtils,[{key:"load",value:function(){var _load2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee12(url){var progressCallback,isHDR,_loader2,texture,_args12=arguments;return regeneratorRuntime.wrap(function _callee12$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:progressCallback=_args12.length>1&&_args12[1]!==undefined?_args12[1]:function(){};_context13.prev=1;isHDR=HDR_FILE_RE.test(url);_loader2=isHDR?hdrLoader:ldrLoader;_context13.next=6;return new Promise(function(resolve,reject){return _loader2.load(url,resolve,function(event){progressCallback(event.loaded/event.total*0.9);},reject);});case 6:texture=_context13.sent;progressCallback(1.0);this.addMetadata(texture,url);texture.mapping=EquirectangularReflectionMapping;if(isHDR){texture.encoding=RGBEEncoding;texture.minFilter=NearestFilter;texture.magFilter=NearestFilter;texture.flipY=true;}else{texture.encoding=GammaEncoding;}return _context13.abrupt("return",texture);case 12:_context13.prev=12;if(progressCallback){progressCallback(1);}return _context13.finish(12);case 15:case"end":return _context13.stop();}}},_callee12,this,[[1,,12,15]]);}));function load(_x17){return _load2.apply(this,arguments);}return load;}()},{key:"generateEnvironmentMapAndSkybox",value:function(){var _generateEnvironmentMapAndSkybox=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee13(){var skyboxUrl,environmentMapUrl,options,progressTracker,updateGenerationProgress,skyboxLoads,environmentMapLoads,_yield$Promise$all,_yield$Promise$all2,environmentMap,skybox,_args13=arguments;return regeneratorRuntime.wrap(function _callee13$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:skyboxUrl=_args13.length>0&&_args13[0]!==undefined?_args13[0]:null;environmentMapUrl=_args13.length>1&&_args13[1]!==undefined?_args13[1]:null;options=_args13.length>2&&_args13[2]!==undefined?_args13[2]:{};progressTracker=options.progressTracker;updateGenerationProgress=progressTracker!=null?progressTracker.beginActivity():function(){};_context14.prev=5;skyboxLoads=Promise.resolve(null);if(!!skyboxUrl){skyboxLoads=this.loadSkyboxFromUrl(skyboxUrl,progressTracker);}if(!!environmentMapUrl){environmentMapLoads=this.loadEnvironmentMapFromUrl(environmentMapUrl,progressTracker);}else if(!!skyboxUrl){environmentMapLoads=this.loadEnvironmentMapFromUrl(skyboxUrl,progressTracker);}else{environmentMapLoads=this.loadGeneratedEnvironmentMap();}_context14.next=11;return Promise.all([environmentMapLoads,skyboxLoads]);case 11:_yield$Promise$all=_context14.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);environmentMap=_yield$Promise$all2[0];skybox=_yield$Promise$all2[1];if(!(environmentMap==null)){_context14.next=17;break;}throw new Error('Failed to load environment map.');case 17:return _context14.abrupt("return",{environmentMap:environmentMap,skybox:skybox});case 18:_context14.prev=18;updateGenerationProgress(1.0);return _context14.finish(18);case 21:case"end":return _context14.stop();}}},_callee13,this,[[5,,18,21]]);}));function generateEnvironmentMapAndSkybox(){return _generateEnvironmentMapAndSkybox.apply(this,arguments);}return generateEnvironmentMapAndSkybox;}()},{key:"addMetadata",value:function addMetadata(texture,url){if(texture==null){return;}texture.userData=Object.assign(Object.assign({},userData),{url:url});}},{key:"loadSkyboxFromUrl",value:function loadSkyboxFromUrl(url,progressTracker){if(!this.skyboxCache.has(url)){var progressCallback=progressTracker?progressTracker.beginActivity():function(){};var skyboxMapLoads=this.load(url,progressCallback);this.skyboxCache.set(url,skyboxMapLoads);}return this.skyboxCache.get(url);}},{key:"loadEnvironmentMapFromUrl",value:function loadEnvironmentMapFromUrl(url,progressTracker){var _this42=this;if(!this.environmentMapCache.has(url)){var environmentMapLoads=this.loadSkyboxFromUrl(url,progressTracker).then(function(equirect){var cubeUV=_this42.PMREMGenerator.fromEquirectangular(equirect);_this42.addMetadata(cubeUV.texture,url);return cubeUV;});this.PMREMGenerator.compileEquirectangularShader();this.environmentMapCache.set(url,environmentMapLoads);}return this.environmentMapCache.get(url);}},{key:"loadGeneratedEnvironmentMap",value:function loadGeneratedEnvironmentMap(){if(this.generatedEnvironmentMap==null){var defaultScene=new EnvironmentScene();this.generatedEnvironmentMap=this.PMREMGenerator.fromScene(defaultScene,GENERATED_SIGMA);this.addMetadata(this.generatedEnvironmentMap.texture,null);}return Promise.resolve(this.generatedEnvironmentMap);}},{key:"dispose",value:function(){var _dispose=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee14(){var allTargetsLoad,_i341,_allTargetsLoad,targetLoads,_target4;return regeneratorRuntime.wrap(function _callee14$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:allTargetsLoad=[];this.environmentMapCache.forEach(function(targetLoads){allTargetsLoad.push(targetLoads);});this.environmentMapCache.clear();_i341=0,_allTargetsLoad=allTargetsLoad;case 4:if(!(_i341<_allTargetsLoad.length)){_context15.next=18;break;}targetLoads=_allTargetsLoad[_i341];_context15.prev=6;_context15.next=9;return targetLoads;case 9:_target4=_context15.sent;_target4.dispose();_context15.next=15;break;case 13:_context15.prev=13;_context15.t0=_context15["catch"](6);case 15:_i341++;_context15.next=4;break;case 18:if(this.generatedEnvironmentMap!=null){this.generatedEnvironmentMap.dispose();this.generatedEnvironmentMap=null;}case 19:case"end":return _context15.stop();}}},_callee14,this,[[6,13]]);}));function dispose(){return _dispose.apply(this,arguments);}return dispose;}()}]);return TextureUtils;}(EventDispatcher);var _a$6,_b$4;var DURATION_DECAY=0.2;var LOW_FRAME_DURATION_MS=18;var HIGH_FRAME_DURATION_MS=26;var MAX_AVG_CHANGE_MS=2;var SCALE_STEP=0.79;var DEFAULT_MIN_SCALE=0.5;var $onWebGLContextLost=Symbol('onWebGLContextLost');var $webGLContextLostHandler=Symbol('webGLContextLostHandler');var $singleton=Symbol('singleton');var Renderer=/*#__PURE__*/function(_EventDispatcher4){_inherits(Renderer,_EventDispatcher4);var _super21=_createSuper(Renderer);function Renderer(options){var _this43;_classCallCheck(this,Renderer);_this43=_super21.call(this);_this43.loader=new CachingGLTFLoader(ModelViewerGLTFInstance);_this43.width=0;_this43.height=0;_this43.dpr=1;_this43.minScale=DEFAULT_MIN_SCALE;_this43.debugger=null;_this43.scenes=new Set();_this43.multipleScenesVisible=false;_this43.scale=1;_this43.avgFrameDuration=(HIGH_FRAME_DURATION_MS+LOW_FRAME_DURATION_MS)/2;_this43[_b$4]=function(event){return _this43[$onWebGLContextLost](event);};_this43.dpr=resolveDpr();_this43.canvasElement=document.createElement('canvas');_this43.canvasElement.id='webgl-canvas';_this43.canvas3D=_this43.canvasElement;_this43.canvas3D.addEventListener('webglcontextlost',_this43[$webGLContextLostHandler]);try{_this43.threeRenderer=new WebGL1Renderer({canvas:_this43.canvas3D,alpha:true,antialias:true,powerPreference:'high-performance',preserveDrawingBuffer:true});_this43.threeRenderer.autoClear=true;_this43.threeRenderer.outputEncoding=GammaEncoding;_this43.threeRenderer.gammaFactor=2.2;_this43.threeRenderer.physicallyCorrectLights=true;_this43.threeRenderer.setPixelRatio(1);_this43.threeRenderer.shadowMap.enabled=true;_this43.threeRenderer.shadowMap.type=PCFSoftShadowMap;_this43.threeRenderer.shadowMap.autoUpdate=false;_this43.debugger=options!=null&&!!options.debug?new Debugger(_assertThisInitialized(_this43)):null;_this43.threeRenderer.debug={checkShaderErrors:!!_this43.debugger};_this43.threeRenderer.toneMapping=ACESFilmicToneMapping;}catch(error){console.warn(error);}_this43.arRenderer=new ARRenderer(_assertThisInitialized(_this43));_this43.textureUtils=_this43.canRender?new TextureUtils(_this43.threeRenderer):null;_this43.roughnessMipmapper=new RoughnessMipmapper(_this43.threeRenderer);_this43.updateRendererSize();_this43.lastTick=performance.now();_this43.avgFrameDuration=0;return _this43;}_createClass(Renderer,[{key:"updateRendererSize",value:function updateRendererSize(){var dpr=resolveDpr();if(dpr!==this.dpr){var _iterator6=_createForOfIteratorHelper(this.scenes),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var scene=_step6.value;var element=scene.element;element[$updateSize](element.getBoundingClientRect());}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}var width=0;var height=0;var _iterator7=_createForOfIteratorHelper(this.scenes),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _scene=_step7.value;width=Math.max(width,_scene.width);height=Math.max(height,_scene.height);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}if(width===this.width&&height===this.height&&dpr===this.dpr){return;}this.width=width;this.height=height;this.dpr=dpr;if(this.canRender){this.threeRenderer.setSize(width*dpr,height*dpr,false);}var widthCSS=width/this.scale;var heightCSS=height/this.scale;this.canvasElement.style.width="".concat(widthCSS,"px");this.canvasElement.style.height="".concat(heightCSS,"px");var _iterator8=_createForOfIteratorHelper(this.scenes),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var _scene2=_step8.value;var canvas=_scene2.canvas;canvas.width=Math.round(width*dpr);canvas.height=Math.round(height*dpr);canvas.style.width="".concat(widthCSS,"px");canvas.style.height="".concat(heightCSS,"px");_scene2.isDirty=true;}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}},{key:"updateRendererScale",value:function updateRendererScale(){var scale=this.scale;if(this.avgFrameDuration>HIGH_FRAME_DURATION_MS&&scale>this.minScale){scale*=SCALE_STEP;}else if(this.avgFrameDuration<LOW_FRAME_DURATION_MS&&scale<1){scale/=SCALE_STEP;scale=Math.min(scale,1);}scale=Math.max(scale,this.minScale);if(scale==this.scale){return;}this.scale=scale;this.avgFrameDuration=(HIGH_FRAME_DURATION_MS+LOW_FRAME_DURATION_MS)/2;var width=this.width/scale;var height=this.height/scale;this.canvasElement.style.width="".concat(width,"px");this.canvasElement.style.height="".concat(height,"px");var _iterator9=_createForOfIteratorHelper(this.scenes),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var scene=_step9.value;var _style=scene.canvas.style;_style.width="".concat(width,"px");_style.height="".concat(height,"px");scene.isDirty=true;}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}}},{key:"registerScene",value:function registerScene(scene){var _this44=this;this.scenes.add(scene);var canvas=scene.canvas;canvas.width=Math.round(this.width*this.dpr);canvas.height=Math.round(this.height*this.dpr);canvas.style.width="".concat(this.width/this.scale,"px");canvas.style.height="".concat(this.height/this.scale,"px");if(this.multipleScenesVisible){canvas.classList.add('show');}scene.isDirty=true;if(this.canRender&&this.scenes.size>0){this.threeRenderer.setAnimationLoop(function(time){return _this44.render(time);});}if(this.debugger!=null){this.debugger.addScene(scene);}}},{key:"unregisterScene",value:function unregisterScene(scene){this.scenes.delete(scene);if(this.canRender&&this.scenes.size===0){this.threeRenderer.setAnimationLoop(null);}if(this.debugger!=null){this.debugger.removeScene(scene);}}},{key:"displayCanvas",value:function displayCanvas(scene){return this.multipleScenesVisible?scene.element[$canvas]:this.canvasElement;}},{key:"selectCanvas",value:function selectCanvas(){var visibleScenes=0;var visibleInput=null;var _iterator10=_createForOfIteratorHelper(this.scenes),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var scene=_step10.value;var element=scene.element;if(element.modelIsVisible){++visibleScenes;visibleInput=element[$userInputElement];}}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}var multipleScenesVisible=visibleScenes>1||USE_OFFSCREEN_CANVAS;var canvasElement=this.canvasElement;if(multipleScenesVisible===this.multipleScenesVisible&&(multipleScenesVisible||canvasElement.parentElement===visibleInput)){return;}this.multipleScenesVisible=multipleScenesVisible;if(multipleScenesVisible){canvasElement.classList.remove('show');}var _iterator11=_createForOfIteratorHelper(this.scenes),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var _scene3=_step11.value;var userInputElement=_scene3.element[$userInputElement];var canvas=_scene3.element[$canvas];if(multipleScenesVisible){canvas.classList.add('show');_scene3.isDirty=true;}else if(userInputElement===visibleInput){userInputElement.appendChild(canvasElement);canvasElement.classList.add('show');canvas.classList.remove('show');_scene3.isDirty=true;}}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}}},{key:"orderedScenes",value:function orderedScenes(){var scenes=[];for(var _i342=0,_arr2=[false,true];_i342<_arr2.length;_i342++){var visible=_arr2[_i342];var _iterator12=_createForOfIteratorHelper(this.scenes),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var scene=_step12.value;if(scene.element.modelIsVisible===visible){scenes.push(scene);}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}}return scenes;}},{key:"preRender",value:function preRender(scene,t,delta){var element=scene.element,exposure=scene.exposure,model=scene.model;element[$tick$1](t,delta);var exposureIsNumber=typeof exposure==='number'&&!self.isNaN(exposure);this.threeRenderer.toneMappingExposure=exposureIsNumber?exposure:1.0;if(model.updateShadow()){this.threeRenderer.shadowMap.needsUpdate=true;}}},{key:"render",value:function render(t){var delta=t-this.lastTick;this.lastTick=t;if(!this.canRender||this.isPresenting){return;}this.avgFrameDuration+=clamp(DURATION_DECAY*(delta-this.avgFrameDuration),-MAX_AVG_CHANGE_MS,MAX_AVG_CHANGE_MS);this.selectCanvas();this.updateRendererSize();this.updateRendererScale();var dpr=this.dpr,scale=this.scale;var _iterator13=_createForOfIteratorHelper(this.orderedScenes()),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var scene=_step13.value;if(!scene.element[$sceneIsReady]()){continue;}this.preRender(scene,t,delta);if(!scene.isDirty){continue;}scene.isDirty=false;if(!scene.element.modelIsVisible&&!this.multipleScenesVisible){var _iterator14=_createForOfIteratorHelper(this.scenes),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var _scene4=_step14.value;if(_scene4.element.modelIsVisible){_scene4.isDirty=true;}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}}var width=Math.min(Math.ceil(scene.width*scale*dpr),this.canvas3D.width);var height=Math.min(Math.ceil(scene.height*scale*dpr),this.canvas3D.height);this.threeRenderer.setRenderTarget(null);this.threeRenderer.setViewport(0,Math.floor(this.height*dpr)-height,width,height);this.threeRenderer.render(scene,scene.getCamera());if(this.multipleScenesVisible){if(scene.context==null){scene.createContext();}{var context2D=scene.context;context2D.clearRect(0,0,width,height);context2D.drawImage(this.canvas3D,0,0,width,height,0,0,width,height);}}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}}},{key:"dispose",value:function dispose(){if(this.textureUtils!=null){this.textureUtils.dispose();}if(this.threeRenderer!=null){this.threeRenderer.dispose();}this.textureUtils=null;this.threeRenderer=null;this.scenes.clear();this.canvas3D.removeEventListener('webglcontextlost',this[$webGLContextLostHandler]);}},{key:(_a$6=$singleton,_b$4=$webGLContextLostHandler,$onWebGLContextLost),value:function value(event){this.dispatchEvent({type:'contextlost',sourceEvent:event});}},{key:"canRender",get:function get(){return this.threeRenderer!=null;}},{key:"scaleFactor",get:function get(){return this.scale;}},{key:"isPresenting",get:function get(){return this.arRenderer.isPresenting;}}],[{key:"resetSingleton",value:function resetSingleton(){this[$singleton].dispose();this[$singleton]=new Renderer({debug:isDebugMode()});}},{key:"singleton",get:function get(){return this[$singleton];}}]);return Renderer;}(EventDispatcher);Renderer[_a$6]=new Renderer({debug:isDebugMode()});var dataUrlToBlob=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee15(base64DataUrl){return regeneratorRuntime.wrap(function _callee15$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:return _context16.abrupt("return",new Promise(function(resolve,reject){var sliceSize=512;var typeMatch=base64DataUrl.match(/data:(.*);/);if(!typeMatch){return reject(new Error("".concat(base64DataUrl," is not a valid data Url")));}var type=typeMatch[1];var base64=base64DataUrl.replace(/data:image\/\w+;base64,/,'');var byteCharacters=atob(base64);var byteArrays=[];for(var offset=0;offset<byteCharacters.length;offset+=sliceSize){var _slice=byteCharacters.slice(offset,offset+sliceSize);var byteNumbers=new Array(_slice.length);for(var _i343=0;_i343<_slice.length;_i343++){byteNumbers[_i343]=_slice.charCodeAt(_i343);}var byteArray=new Uint8Array(byteNumbers);byteArrays.push(byteArray);}resolve(new Blob(byteArrays,{type:type}));}));case 1:case"end":return _context16.stop();}}},_callee15);}));return function dataUrlToBlob(_x18){return _ref4.apply(this,arguments);};}();var _a$7,_b$5;var $ongoingActivities=Symbol('ongoingActivities');var $announceTotalProgress=Symbol('announceTotalProgress');var $eventDelegate=Symbol('eventDelegate');var ACTIVITY_PROGRESS_WEIGHT=0.5;var ProgressTracker=/*#__PURE__*/function(){function ProgressTracker(){var _this45=this;_classCallCheck(this,ProgressTracker);this[_a$7]=document.createDocumentFragment();this.addEventListener=function(){var _this45$$eventDelegat;return(_this45$$eventDelegat=_this45[$eventDelegate]).addEventListener.apply(_this45$$eventDelegat,arguments);};this.removeEventListener=function(){var _this45$$eventDelegat2;return(_this45$$eventDelegat2=_this45[$eventDelegate]).removeEventListener.apply(_this45$$eventDelegat2,arguments);};this.dispatchEvent=function(){var _this45$$eventDelegat3;return(_this45$$eventDelegat3=_this45[$eventDelegate]).dispatchEvent.apply(_this45$$eventDelegat3,arguments);};this[_b$5]=new Set();}_createClass(ProgressTracker,[{key:"beginActivity",value:function beginActivity(){var _this46=this;var activity={progress:0};this[$ongoingActivities].add(activity);if(this.ongoingActivityCount===1){this[$announceTotalProgress]();}return function(progress){var nextProgress;nextProgress=Math.max(clamp(progress,0,1),activity.progress);if(nextProgress!==activity.progress){activity.progress=nextProgress;_this46[$announceTotalProgress]();}return activity.progress;};}},{key:(_a$7=$eventDelegate,_b$5=$ongoingActivities,$announceTotalProgress),value:function value(){var totalProgress=0;var statusCount=0;var completedActivities=0;var _iterator15=_createForOfIteratorHelper(this[$ongoingActivities]),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var activity=_step15.value;var progress=activity.progress;var compoundWeight=ACTIVITY_PROGRESS_WEIGHT/Math.pow(2,statusCount++);totalProgress+=progress*compoundWeight;if(progress===1.0){completedActivities++;}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}if(completedActivities===this.ongoingActivityCount){totalProgress=1.0;this[$ongoingActivities].clear();}this.dispatchEvent(new CustomEvent('progress',{detail:{totalProgress:totalProgress}}));}},{key:"ongoingActivityCount",get:function get(){return this[$ongoingActivities].size;}}]);return ProgressTracker;}();var __decorate=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var _a$8,_b$6,_c$1,_d$1,_e$1,_f$1,_g$1,_h$1,_j$1,_k$1;var CLEAR_MODEL_TIMEOUT_MS=1000;var FALLBACK_SIZE_UPDATE_THRESHOLD_MS=50;var ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD=0;var UNSIZED_MEDIA_WIDTH=300;var UNSIZED_MEDIA_HEIGHT=150;var blobCanvas=document.createElement('canvas');var blobContext=null;var $template=Symbol('template');var $fallbackResizeHandler=Symbol('fallbackResizeHandler');var $defaultAriaLabel=Symbol('defaultAriaLabel');var $resizeObserver=Symbol('resizeObserver');var $intersectionObserver=Symbol('intersectionObserver');var $clearModelTimeout=Symbol('clearModelTimeout');var $onContextLost=Symbol('onContextLost');var $contextLostHandler=Symbol('contextLostHandler');var $loaded=Symbol('loaded');var $updateSize=Symbol('updateSize');var $isElementInViewport=Symbol('isElementInViewport');var $announceModelVisibility=Symbol('announceModelVisibility');var $ariaLabel=Symbol('ariaLabel');var $loadedTime=Symbol('loadedTime');var $updateSource=Symbol('updateSource');var $markLoaded=Symbol('markLoaded');var $container=Symbol('container');var $userInputElement=Symbol('input');var $canvas=Symbol('canvas');var $scene=Symbol('scene');var $needsRender=Symbol('needsRender');var $tick$1=Symbol('tick');var $onModelLoad=Symbol('onModelLoad');var $onResize=Symbol('onResize');var $renderer=Symbol('renderer');var $progressTracker=Symbol('progressTracker');var $getLoaded=Symbol('getLoaded');var $getModelIsVisible=Symbol('getModelIsVisible');var $shouldAttemptPreload=Symbol('shouldAttemptPreload');var $sceneIsReady=Symbol('sceneIsReady');var $hasTransitioned=Symbol('hasTransitioned');var toVector3D=function toVector3D(v){return{x:v.x,y:v.y,z:v.z,toString:function toString(){return"".concat(this.x,"m ").concat(this.y,"m ").concat(this.z,"m");}};};var ModelViewerElementBase=/*#__PURE__*/function(_UpdatingElement){_inherits(ModelViewerElementBase,_UpdatingElement);var _super22=_createSuper(ModelViewerElementBase);function ModelViewerElementBase(){var _this47;_classCallCheck(this,ModelViewerElementBase);_this47=_super22.call(this);_this47.alt=null;_this47.src=null;_this47[_a$8]=false;_this47[_b$6]=false;_this47[_c$1]=0;_this47[_d$1]=null;_this47[_e$1]=debounce(function(){var boundingRect=_this47.getBoundingClientRect();_this47[$updateSize](boundingRect);},FALLBACK_SIZE_UPDATE_THRESHOLD_MS);_this47[_f$1]=debounce(function(oldVisibility){var newVisibility=_this47.modelIsVisible;if(newVisibility!==oldVisibility){_this47.dispatchEvent(new CustomEvent('model-visibility',{detail:{visible:newVisibility}}));}},ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD);_this47[_g$1]=null;_this47[_h$1]=null;_this47[_j$1]=new ProgressTracker();_this47[_k$1]=function(event){return _this47[$onContextLost](event);};var template=_this47.constructor.template;if(window.ShadyCSS){window.ShadyCSS.styleElement(_assertThisInitialized(_this47),{});}_this47.attachShadow({mode:'open'});var shadowRoot=_this47.shadowRoot;shadowRoot.appendChild(template.content.cloneNode(true));_this47[$container]=shadowRoot.querySelector('.container');_this47[$userInputElement]=shadowRoot.querySelector('.userInput');_this47[$canvas]=shadowRoot.querySelector('canvas');_this47[$defaultAriaLabel]=_this47[$userInputElement].getAttribute('aria-label');var width,height;if(_this47.isConnected){var rect=_this47.getBoundingClientRect();width=rect.width;height=rect.height;}else{width=UNSIZED_MEDIA_WIDTH;height=UNSIZED_MEDIA_HEIGHT;}_this47[$scene]=new ModelScene({canvas:_this47[$canvas],element:_assertThisInitialized(_this47),width:width,height:height});_this47[$scene].addEventListener('model-load',function(event){_this47[$markLoaded]();_this47[$onModelLoad]();_this47.dispatchEvent(new CustomEvent('load',{detail:{url:event.url}}));});Promise.resolve().then(function(){_this47[$updateSize](_this47.getBoundingClientRect());});if(HAS_RESIZE_OBSERVER){_this47[$resizeObserver]=new ResizeObserver(function(entries){if(_this47[$renderer].isPresenting){return;}var _iterator16=_createForOfIteratorHelper(entries),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var entry=_step16.value;if(entry.target===_assertThisInitialized(_this47)){_this47[$updateSize](entry.contentRect);}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}});}if(HAS_INTERSECTION_OBSERVER){_this47[$intersectionObserver]=new IntersectionObserver(function(entries){var _iterator17=_createForOfIteratorHelper(entries),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var entry=_step17.value;if(entry.target===_assertThisInitialized(_this47)){var oldVisibility=_this47.modelIsVisible;_this47[$isElementInViewport]=entry.isIntersecting;_this47[$announceModelVisibility](oldVisibility);if(_this47[$isElementInViewport]&&!_this47[$sceneIsReady]()){_this47[$updateSource]();}}}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}},{root:null,rootMargin:'0px',threshold:0});}else{_this47[$isElementInViewport]=true;}return _this47;}_createClass(ModelViewerElementBase,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(ModelViewerElementBase.prototype),"connectedCallback",this)&&_get(_getPrototypeOf(ModelViewerElementBase.prototype),"connectedCallback",this).call(this);if(HAS_RESIZE_OBSERVER){this[$resizeObserver].observe(this);}else{self.addEventListener('resize',this[$fallbackResizeHandler]);}if(HAS_INTERSECTION_OBSERVER){this[$intersectionObserver].observe(this);}var renderer=this[$renderer];renderer.addEventListener('contextlost',this[$contextLostHandler]);renderer.registerScene(this[$scene]);if(this[$clearModelTimeout]!=null){self.clearTimeout(this[$clearModelTimeout]);this[$clearModelTimeout]=null;this.requestUpdate('src',null);}}},{key:"disconnectedCallback",value:function disconnectedCallback(){var _this48=this;_get(_getPrototypeOf(ModelViewerElementBase.prototype),"disconnectedCallback",this)&&_get(_getPrototypeOf(ModelViewerElementBase.prototype),"disconnectedCallback",this).call(this);if(HAS_RESIZE_OBSERVER){this[$resizeObserver].unobserve(this);}else{self.removeEventListener('resize',this[$fallbackResizeHandler]);}if(HAS_INTERSECTION_OBSERVER){this[$intersectionObserver].unobserve(this);}var renderer=this[$renderer];renderer.removeEventListener('contextlost',this[$contextLostHandler]);renderer.unregisterScene(this[$scene]);this[$clearModelTimeout]=self.setTimeout(function(){_this48[$scene].model.clear();},CLEAR_MODEL_TIMEOUT_MS);}},{key:"updated",value:function updated(changedProperties){_get(_getPrototypeOf(ModelViewerElementBase.prototype),"updated",this).call(this,changedProperties);if(changedProperties.has('src')&&(this.src==null||this.src!==this[$scene].model.url)){this[$loaded]=false;this[$loadedTime]=0;this[$updateSource]();}if(changedProperties.has('alt')){var ariaLabel=this.alt==null?this[$defaultAriaLabel]:this.alt;this[$userInputElement].setAttribute('aria-label',ariaLabel);}}},{key:"toDataURL",value:function toDataURL(type,encoderOptions){return this[$renderer].displayCanvas(this[$scene]).toDataURL(type,encoderOptions);}},{key:"toBlob",value:function(){var _toBlob=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee17(options){var _this49=this;var mimeType,qualityArgument,idealAspect,_this$$scene,width,height,model,aspect,_this$$renderer,dpr,scaleFactor,outputWidth,outputHeight,offsetX,offsetY,oldHeight,oldWidth;return regeneratorRuntime.wrap(function _callee17$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:mimeType=options?options.mimeType:undefined;qualityArgument=options?options.qualityArgument:undefined;idealAspect=options?options.idealAspect:undefined;_this$$scene=this[$scene],width=_this$$scene.width,height=_this$$scene.height,model=_this$$scene.model,aspect=_this$$scene.aspect;_this$$renderer=this[$renderer],dpr=_this$$renderer.dpr,scaleFactor=_this$$renderer.scaleFactor;outputWidth=width*scaleFactor*dpr;outputHeight=height*scaleFactor*dpr;offsetX=0;offsetY=0;if(idealAspect===true){if(model.fieldOfViewAspect>aspect){oldHeight=outputHeight;outputHeight=Math.round(outputWidth/model.fieldOfViewAspect);offsetY=(oldHeight-outputHeight)/2;}else{oldWidth=outputWidth;outputWidth=Math.round(outputHeight*model.fieldOfViewAspect);offsetX=(oldWidth-outputWidth)/2;}}blobCanvas.width=outputWidth;blobCanvas.height=outputHeight;_context18.prev=12;return _context18.abrupt("return",new Promise(/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee16(resolve,reject){return regeneratorRuntime.wrap(function _callee16$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:if(blobContext==null){blobContext=blobCanvas.getContext('2d');}blobContext.drawImage(_this49[$renderer].displayCanvas(_this49[$scene]),offsetX,offsetY,outputWidth,outputHeight,0,0,outputWidth,outputHeight);if(!blobCanvas.msToBlob){_context17.next=5;break;}if(!(!mimeType||mimeType==='image/png')){_context17.next=5;break;}return _context17.abrupt("return",resolve(blobCanvas.msToBlob()));case 5:if(blobCanvas.toBlob){_context17.next=11;break;}_context17.t0=resolve;_context17.next=9;return dataUrlToBlob(blobCanvas.toDataURL(mimeType,qualityArgument));case 9:_context17.t1=_context17.sent;return _context17.abrupt("return",(0,_context17.t0)(_context17.t1));case 11:blobCanvas.toBlob(function(blob){if(!blob){return reject(new Error('Unable to retrieve canvas blob'));}resolve(blob);},mimeType,qualityArgument);case 12:case"end":return _context17.stop();}}},_callee16);}));return function(_x20,_x21){return _ref5.apply(this,arguments);};}()));case 14:_context18.prev=14;this[$updateSize]({width:width,height:height});return _context18.finish(14);case 17:case"end":return _context18.stop();}}},_callee17,this,[[12,,14,17]]);}));function toBlob(_x19){return _toBlob.apply(this,arguments);}return toBlob;}()},{key:$getLoaded,value:function value(){return this[$loaded];}},{key:$getModelIsVisible,value:function value(){return this.loaded&&this[$isElementInViewport];}},{key:$hasTransitioned,value:function value(){return this.modelIsVisible;}},{key:$shouldAttemptPreload,value:function value(){return!!this.src&&this[$isElementInViewport];}},{key:$sceneIsReady,value:function value(){return this[$loaded];}},{key:$updateSize,value:function value(_ref6){var width=_ref6.width,height=_ref6.height;this[$container].style.width="".concat(width,"px");this[$container].style.height="".concat(height,"px");this[$onResize]({width:parseFloat(width),height:parseFloat(height)});}},{key:$tick$1,value:function value(_time,_delta){}},{key:$markLoaded,value:function value(){if(this[$loaded]){return;}this[$loaded]=true;this[$loadedTime]=performance.now();}},{key:$needsRender,value:function value(){this[$scene].isDirty=true;}},{key:$onModelLoad,value:function value(){}},{key:$onResize,value:function value(e){this[$scene].setSize(e.width,e.height);}},{key:$onContextLost,value:function value(event){this.dispatchEvent(new CustomEvent('error',{detail:{type:'webglcontextlost',sourceError:event.sourceEvent}}));}},{key:$updateSource,value:function(){var _value2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee18(){var updateSourceProgress,source,detail;return regeneratorRuntime.wrap(function _callee18$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:if(!(this.loaded||!this[$shouldAttemptPreload]())){_context19.next=2;break;}return _context19.abrupt("return");case 2:updateSourceProgress=this[$progressTracker].beginActivity();source=this.src;_context19.prev=4;_context19.next=7;return this[$scene].setModelSource(source,function(progress){return updateSourceProgress(progress*0.8);});case 7:detail={url:source};this.dispatchEvent(new CustomEvent('preload',{detail:detail}));_context19.next=14;break;case 11:_context19.prev=11;_context19.t0=_context19["catch"](4);this.dispatchEvent(new CustomEvent('error',{detail:_context19.t0}));case 14:_context19.prev=14;updateSourceProgress(0.9);requestAnimationFrame(function(){requestAnimationFrame(function(){updateSourceProgress(1.0);});});return _context19.finish(14);case 18:case"end":return _context19.stop();}}},_callee18,this,[[4,11,14,18]]);}));function value(){return _value2.apply(this,arguments);}return value;}()},{key:"loaded",get:function get(){return this[$getLoaded]();}},{key:(_a$8=$isElementInViewport,_b$6=$loaded,_c$1=$loadedTime,_d$1=$clearModelTimeout,_e$1=$fallbackResizeHandler,_f$1=$announceModelVisibility,_g$1=$resizeObserver,_h$1=$intersectionObserver,_j$1=$progressTracker,_k$1=$contextLostHandler,$renderer),get:function get(){return Renderer.singleton;}},{key:"modelIsVisible",get:function get(){return this[$getModelIsVisible]();}},{key:$ariaLabel,get:function get(){return this.alt==null||this.alt==='null'?this[$defaultAriaLabel]:this.alt;}}],[{key:"is",get:function get(){return'model-viewer';}},{key:"template",get:function get(){if(!this.hasOwnProperty($template)){this[$template]=makeTemplate(this.is);}return this[$template];}},{key:"modelCacheSize",set:function set(value){CachingGLTFLoader[$evictionPolicy].evictionThreshold=value;},get:function get(){return CachingGLTFLoader[$evictionPolicy].evictionThreshold;}},{key:"minimumRenderScale",set:function set(value){if(value>1){console.warn('<model-viewer> minimumRenderScale has been clamped to a maximum value of 1.');}if(value<=0){console.warn('<model-viewer> minimumRenderScale has been clamped to a minimum value of 0. This could result in single-pixel renders on some devices; consider increasing.');}Renderer.singleton.minScale=Math.max(0,Math.min(1,value));},get:function get(){return Renderer.singleton.minScale;}}]);return ModelViewerElementBase;}(UpdatingElement);__decorate([property({type:String})],ModelViewerElementBase.prototype,"alt",void 0);__decorate([property({type:String})],ModelViewerElementBase.prototype,"src",void 0);var __decorate$1=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var MILLISECONDS_PER_SECOND=1000.0;var $changeAnimation=Symbol('changeAnimation');var $paused=Symbol('paused');var AnimationMixin=function AnimationMixin(ModelViewerElement){var _a;var AnimationModelViewerElement=/*#__PURE__*/function(_ModelViewerElement){_inherits(AnimationModelViewerElement,_ModelViewerElement);var _super23=_createSuper(AnimationModelViewerElement);function AnimationModelViewerElement(){var _this50;_classCallCheck(this,AnimationModelViewerElement);_this50=_super23.apply(this,arguments);_this50.autoplay=false;_this50.animationName=undefined;_this50.animationCrossfadeDuration=300;_this50[_a]=true;return _this50;}_createClass(AnimationModelViewerElement,[{key:"pause",value:function pause(){if(this[$paused]){return;}this[$paused]=true;this[$renderer].threeRenderer.shadowMap.autoUpdate=false;this.dispatchEvent(new CustomEvent('pause'));}},{key:"play",value:function play(){if(this[$paused]&&this.availableAnimations.length>0){this[$paused]=false;this[$renderer].threeRenderer.shadowMap.autoUpdate=true;if(!this[$scene].model.hasActiveAnimation){this[$changeAnimation]();}this.dispatchEvent(new CustomEvent('play'));}}},{key:(_a=$paused,$onModelLoad),value:function value(){_get(_getPrototypeOf(AnimationModelViewerElement.prototype),$onModelLoad,this).call(this);this[$paused]=true;if(this.autoplay){this[$changeAnimation]();this.play();}}},{key:$tick$1,value:function value(_time,delta){_get(_getPrototypeOf(AnimationModelViewerElement.prototype),$tick$1,this).call(this,_time,delta);if(this[$paused]||!this[$hasTransitioned]()){return;}var model=this[$scene].model;model.updateAnimation(delta/MILLISECONDS_PER_SECOND);this[$needsRender]();}},{key:"updated",value:function updated(changedProperties){_get(_getPrototypeOf(AnimationModelViewerElement.prototype),"updated",this).call(this,changedProperties);if(changedProperties.has('autoplay')&&this.autoplay){this.play();}if(changedProperties.has('animationName')){this[$changeAnimation]();}}},{key:$updateSource,value:function(){var _value3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee19(){return regeneratorRuntime.wrap(function _callee19$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:this[$scene].model.stopAnimation();return _context20.abrupt("return",_get(_getPrototypeOf(AnimationModelViewerElement.prototype),$updateSource,this).call(this));case 2:case"end":return _context20.stop();}}},_callee19,this);}));function value(){return _value3.apply(this,arguments);}return value;}()},{key:$changeAnimation,value:function value(){var model=this[$scene].model;model.playAnimation(this.animationName,this.animationCrossfadeDuration/MILLISECONDS_PER_SECOND);if(this[$paused]){model.updateAnimation(0);this[$needsRender]();}}},{key:"availableAnimations",get:function get(){if(this.loaded){return this[$scene].model.animationNames;}return[];}},{key:"paused",get:function get(){return this[$paused];}},{key:"currentTime",get:function get(){return this[$scene].model.animationTime;},set:function set(value){this[$scene].model.animationTime=value;this[$renderer].threeRenderer.shadowMap.needsUpdate=true;this[$needsRender]();}}]);return AnimationModelViewerElement;}(ModelViewerElement);__decorate$1([property({type:Boolean})],AnimationModelViewerElement.prototype,"autoplay",void 0);__decorate$1([property({type:String,attribute:'animation-name'})],AnimationModelViewerElement.prototype,"animationName",void 0);__decorate$1([property({type:Number,attribute:'animation-crossfade-duration'})],AnimationModelViewerElement.prototype,"animationCrossfadeDuration",void 0);return AnimationModelViewerElement;};var $annotationRenderer=Symbol('annotationRenderer');var $hotspotMap=Symbol('hotspotMap');var $mutationCallback=Symbol('mutationCallback');var $observer=Symbol('observer');var $addHotspot=Symbol('addHotspot');var $removeHotspot=Symbol('removeHotspot');var pixelPosition=new Vector2();var worldToModel=new Matrix4();var worldToModelNormal=new Matrix3();var AnnotationMixin=function AnnotationMixin(ModelViewerElement){var _a,_b,_c,_d;var AnnotationModelViewerElement=/*#__PURE__*/function(_ModelViewerElement2){_inherits(AnnotationModelViewerElement,_ModelViewerElement2);var _super24=_createSuper(AnnotationModelViewerElement);function AnnotationModelViewerElement(){var _this51;_classCallCheck(this,AnnotationModelViewerElement);for(var _len2=arguments.length,args=new Array(_len2),_key5=0;_key5<_len2;_key5++){args[_key5]=arguments[_key5];}_this51=_super24.call.apply(_super24,[this].concat(args));_this51[_a]=new CSS2DRenderer();_this51[_b]=new Map();_this51[_c]=function(mutations){mutations.forEach(function(mutation){if(!_instanceof(mutation,MutationRecord)||mutation.type==='childList'){mutation.addedNodes.forEach(function(node){_this51[$addHotspot](node);});mutation.removedNodes.forEach(function(node){_this51[$removeHotspot](node);});_this51[$needsRender]();}});};_this51[_d]=new MutationObserver(_this51[$mutationCallback]);var domElement=_this51[$annotationRenderer].domElement;var style=domElement.style;style.display='none';style.pointerEvents='none';style.position='absolute';style.top='0';_this51.shadowRoot.querySelector('.default').appendChild(domElement);return _this51;}_createClass(AnnotationModelViewerElement,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(AnnotationModelViewerElement.prototype),"connectedCallback",this).call(this);for(var _i344=0;_i344<this.children.length;++_i344){this[$addHotspot](this.children[_i344]);}var _self=self,ShadyDOM=_self.ShadyDOM;if(ShadyDOM==null){this[$observer].observe(this,{childList:true});}else{this[$observer]=ShadyDOM.observeChildren(this,this[$mutationCallback]);}}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(AnnotationModelViewerElement.prototype),"disconnectedCallback",this).call(this);var _self2=self,ShadyDOM=_self2.ShadyDOM;if(ShadyDOM==null){this[$observer].disconnect();}else{ShadyDOM.unobserveChildren(this[$observer]);}}},{key:"updateHotspot",value:function updateHotspot(config){var hotspot=this[$hotspotMap].get(config.name);if(hotspot==null){return;}hotspot.updatePosition(config.position);hotspot.updateNormal(config.normal);}},{key:"positionAndNormalFromPoint",value:function positionAndNormalFromPoint(pixelX,pixelY){var scene=this[$scene];var width=scene.width,height=scene.height,model=scene.model;pixelPosition.set(pixelX/width,pixelY/height).multiplyScalar(2).subScalar(1);pixelPosition.y*=-1;var hit=scene.positionAndNormalFromPoint(pixelPosition);if(hit==null){return null;}worldToModel.getInverse(model.matrixWorld);var position=toVector3D(hit.position.applyMatrix4(worldToModel));worldToModelNormal.getNormalMatrix(worldToModel);var normal=toVector3D(hit.normal.applyNormalMatrix(worldToModelNormal));return{position:position,normal:normal};}},{key:(_a=$annotationRenderer,_b=$hotspotMap,_c=$mutationCallback,_d=$observer,$tick$1),value:function value(time,delta){_get(_getPrototypeOf(AnnotationModelViewerElement.prototype),$tick$1,this).call(this,time,delta);var scene=this[$scene];var camera=scene.getCamera();if(scene.isDirty){scene.model.updateHotspots(camera.position);this[$annotationRenderer].domElement.style.display='';this[$annotationRenderer].render(scene,camera);}}},{key:$onResize,value:function value(e){_get(_getPrototypeOf(AnnotationModelViewerElement.prototype),$onResize,this).call(this,e);this[$annotationRenderer].setSize(e.width,e.height);}},{key:$addHotspot,value:function value(node){if(!(_instanceof(node,HTMLElement)&&node.slot.indexOf('hotspot')===0)){return;}var hotspot=this[$hotspotMap].get(node.slot);if(hotspot!=null){hotspot.increment();}else{hotspot=new Hotspot({name:node.slot,position:node.dataset.position,normal:node.dataset.normal});this[$hotspotMap].set(node.slot,hotspot);this[$scene].model.addHotspot(hotspot);this[$annotationRenderer].domElement.appendChild(hotspot.element);}this[$scene].isDirty=true;}},{key:$removeHotspot,value:function value(node){if(!_instanceof(node,HTMLElement)){return;}var hotspot=this[$hotspotMap].get(node.slot);if(!hotspot){return;}if(hotspot.decrement()){this[$scene].model.removeHotspot(hotspot);this[$hotspotMap].delete(node.slot);}this[$scene].isDirty=true;}}]);return AnnotationModelViewerElement;}(ModelViewerElement);return AnnotationModelViewerElement;};var enumerationDeserializer=function enumerationDeserializer(allowedNames){return function(valueString){try{var expressions=parseExpressions(valueString);var names=(expressions.length?expressions[0].terms:[]).filter(function(valueNode){return valueNode&&valueNode.type==='ident';}).map(function(valueNode){return valueNode.value;}).filter(function(name){return allowedNames.indexOf(name)>-1;});var result=new Set();var _iterator18=_createForOfIteratorHelper(names),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var name=_step18.value;result.add(name);}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}return result;}catch(_error){}return new Set();};};var __decorate$2=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var isWebXRBlocked=false;var isSceneViewerBlocked=false;var noArViewerSigil='#model-viewer-no-ar-fallback';var deserializeQuickLookBrowsers=enumerationDeserializer(['safari','chrome']);var deserializeARModes=enumerationDeserializer(['quick-look','scene-viewer','webxr','none']);var DEFAULT_AR_MODES='webxr scene-viewer quick-look';var ARMode={QUICK_LOOK:'quick-look',SCENE_VIEWER:'scene-viewer',WEBXR:'webxr',NONE:'none'};var $arButtonContainer=Symbol('arButtonContainer');var $enterARWithWebXR=Symbol('enterARWithWebXR');var $openSceneViewer=Symbol('openSceneViewer');var $openIOSARQuickLook=Symbol('openIOSARQuickLook');var $canActivateAR=Symbol('canActivateAR');var $arMode=Symbol('arMode');var $arModes=Symbol('arModes');var $canLaunchQuickLook=Symbol('canLaunchQuickLook');var $quickLookBrowsers=Symbol('quickLookBrowsers');var $arAnchor=Symbol('arAnchor');var $preload=Symbol('preload');var $onARButtonContainerClick=Symbol('onARButtonContainerClick');var $onARStatus=Symbol('onARStatus');var $onARTap=Symbol('onARTap');var $selectARMode=Symbol('selectARMode');var ARMixin=function ARMixin(ModelViewerElement){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k;var ARModelViewerElement=/*#__PURE__*/function(_ModelViewerElement3){_inherits(ARModelViewerElement,_ModelViewerElement3);var _super25=_createSuper(ARModelViewerElement);function ARModelViewerElement(){var _this52;_classCallCheck(this,ARModelViewerElement);_this52=_super25.apply(this,arguments);_this52.ar=false;_this52.arScale='auto';_this52.arModes=DEFAULT_AR_MODES;_this52.iosSrc=null;_this52.quickLookBrowsers='safari';_this52[_a]=false;_this52[_b]=_this52.shadowRoot.querySelector('.ar-button');_this52[_c]=document.createElement('a');_this52[_d]=new Set();_this52[_e]=ARMode.NONE;_this52[_f]=false;_this52[_g]=new Set();_this52[_h]=function(event){event.preventDefault();_this52.activateAR();};_this52[_j]=function(_ref7){var status=_ref7.status;if(status===ARStatus.NOT_PRESENTING||_this52[$renderer].arRenderer.presentedScene===_this52[$scene]){_this52.setAttribute('ar-status',status);_this52.dispatchEvent(new CustomEvent('ar-status',{detail:{status:status}}));}};_this52[_k]=function(event){if(event.data=='_apple_ar_quicklook_button_tapped'){_this52.dispatchEvent(new CustomEvent('quick-look-button-tapped'));}};return _this52;}_createClass(ARModelViewerElement,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(ARModelViewerElement.prototype),"connectedCallback",this).call(this);this[$renderer].arRenderer.addEventListener('status',this[$onARStatus]);this.setAttribute('ar-status',ARStatus.NOT_PRESENTING);this[$arAnchor].addEventListener('message',this[$onARTap]);}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(ARModelViewerElement.prototype),"disconnectedCallback",this).call(this);this[$renderer].arRenderer.removeEventListener('status',this[$onARStatus]);this[$arAnchor].removeEventListener('message',this[$onARTap]);}},{key:"update",value:function(){var _update2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee20(changedProperties){return regeneratorRuntime.wrap(function _callee20$(_context21){while(1){switch(_context21.prev=_context21.next){case 0:_get(_getPrototypeOf(ARModelViewerElement.prototype),"update",this).call(this,changedProperties);if(changedProperties.has('quickLookBrowsers')){this[$quickLookBrowsers]=deserializeQuickLookBrowsers(this.quickLookBrowsers);}if(!(!changedProperties.has('ar')&&!changedProperties.has('arModes')&&!changedProperties.has('iosSrc'))){_context21.next=4;break;}return _context21.abrupt("return");case 4:if(changedProperties.has('arModes')){this[$arModes]=deserializeARModes(this.arModes);}if(changedProperties.has('arScale')){this[$scene].canScale=this.arScale!=='fixed';}this[$selectARMode]();case 7:case"end":return _context21.stop();}}},_callee20,this);}));function update(_x22){return _update2.apply(this,arguments);}return update;}()},{key:"activateAR",value:function(){var _activateAR=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee21(){return regeneratorRuntime.wrap(function _callee21$(_context22){while(1){switch(_context22.prev=_context22.next){case 0:_context22.t0=this[$arMode];_context22.next=_context22.t0===ARMode.QUICK_LOOK?3:_context22.t0===ARMode.WEBXR?5:_context22.t0===ARMode.SCENE_VIEWER?8:10;break;case 3:this[$openIOSARQuickLook]();return _context22.abrupt("break",12);case 5:_context22.next=7;return this[$enterARWithWebXR]();case 7:return _context22.abrupt("break",12);case 8:this[$openSceneViewer]();return _context22.abrupt("break",12);case 10:console.warn('No AR Mode can be activated. This is probably due to missing \
     configuration or device capabilities');return _context22.abrupt("break",12);case 12:case"end":return _context22.stop();}}},_callee21,this);}));function activateAR(){return _activateAR.apply(this,arguments);}return activateAR;}()},{key:(_a=$canActivateAR,_b=$arButtonContainer,_c=$arAnchor,_d=$arModes,_e=$arMode,_f=$preload,_g=$quickLookBrowsers,_h=$onARButtonContainerClick,_j=$onARStatus,_k=$onARTap,$selectARMode),value:function(){var _value4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee22(){var arModes,_i345,_arModes,_value5,status;return regeneratorRuntime.wrap(function _callee22$(_context23){while(1){switch(_context23.prev=_context23.next){case 0:this[$arMode]=ARMode.NONE;if(!this.ar){_context23.next=28;break;}arModes=[];this[$arModes].forEach(function(value){arModes.push(value);});_i345=0,_arModes=arModes;case 5:if(!(_i345<_arModes.length)){_context23.next=28;break;}_value5=_arModes[_i345];_context23.t0=_value5==='webxr'&&IS_WEBXR_AR_CANDIDATE&&!isWebXRBlocked;if(!_context23.t0){_context23.next=12;break;}_context23.next=11;return this[$renderer].arRenderer.supportsPresentation();case 11:_context23.t0=_context23.sent;case 12:if(!_context23.t0){_context23.next=17;break;}this[$arMode]=ARMode.WEBXR;return _context23.abrupt("break",28);case 17:if(!(_value5==='scene-viewer'&&IS_SCENEVIEWER_CANDIDATE&&!isSceneViewerBlocked)){_context23.next=22;break;}this[$arMode]=ARMode.SCENE_VIEWER;return _context23.abrupt("break",28);case 22:if(!(_value5==='quick-look'&&!!this.iosSrc&&this[$canLaunchQuickLook]&&IS_AR_QUICKLOOK_CANDIDATE)){_context23.next=25;break;}this[$arMode]=ARMode.QUICK_LOOK;return _context23.abrupt("break",28);case 25:_i345++;_context23.next=5;break;case 28:if(this.canActivateAR){this[$arButtonContainer].classList.add('enabled');this[$arButtonContainer].addEventListener('click',this[$onARButtonContainerClick]);}else if(this[$arButtonContainer].classList.contains('enabled')){this[$arButtonContainer].removeEventListener('click',this[$onARButtonContainerClick]);this[$arButtonContainer].classList.remove('enabled');status=ARStatus.FAILED;this.setAttribute('ar-status',status);this.dispatchEvent(new CustomEvent('ar-status',{detail:{status:status}}));}case 29:case"end":return _context23.stop();}}},_callee22,this);}));function value(){return _value4.apply(this,arguments);}return value;}()},{key:$enterARWithWebXR,value:function(){var _value6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee23(){return regeneratorRuntime.wrap(function _callee23$(_context24){while(1){switch(_context24.prev=_context24.next){case 0:console.log('Attempting to present in AR...');if(this[$loaded]){_context24.next=7;break;}this[$preload]=true;this[$updateSource]();_context24.next=6;return waitForEvent(this,'load');case 6:this[$preload]=false;case 7:_context24.prev=7;this[$arButtonContainer].removeEventListener('click',this[$onARButtonContainerClick]);_context24.next=11;return this[$renderer].arRenderer.present(this[$scene]);case 11:_context24.next=23;break;case 13:_context24.prev=13;_context24.t0=_context24["catch"](7);console.warn('Error while trying to present to AR');console.error(_context24.t0);_context24.next=19;return this[$renderer].arRenderer.stopPresenting();case 19:isWebXRBlocked=true;_context24.next=22;return this[$selectARMode]();case 22:this.activateAR();case 23:_context24.prev=23;this[$selectARMode]();return _context24.finish(23);case 26:case"end":return _context24.stop();}}},_callee23,this,[[7,13,23,26]]);}));function value(){return _value6.apply(this,arguments);}return value;}()},{key:$shouldAttemptPreload,value:function value(){return _get(_getPrototypeOf(ARModelViewerElement.prototype),$shouldAttemptPreload,this).call(this)||this[$preload];}},{key:$openSceneViewer,value:function value(){var _this53=this;var gltfSrc=this.src.replace('?','&');var location=self.location.toString();var locationUrl=new URL(location);var modelUrl=new URL(gltfSrc,location);locationUrl.hash=noArViewerSigil;var intentParams="?file=".concat(modelUrl.toString(),"&mode=ar_only");if(!gltfSrc.includes('&link=')){intentParams+="&link=".concat(location);}if(!gltfSrc.includes('&title=')){intentParams+="&title=".concat(encodeURIComponent(this.alt||''));}if(this.arScale==='fixed'){intentParams+="&resizable=false";}var intent="intent://arvr.google.com/scene-viewer/1.0".concat(intentParams,"#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=").concat(encodeURIComponent(locationUrl.toString()),";end;");var undoHashChange=function undoHashChange(){if(self.location.hash===noArViewerSigil){isSceneViewerBlocked=true;self.history.back();_this53[$selectARMode]();}};self.addEventListener('hashchange',undoHashChange,{once:true});this[$arAnchor].setAttribute('href',intent);this[$arAnchor].click();}},{key:$openIOSARQuickLook,value:function value(){var modelUrl=new URL(this.iosSrc,self.location.toString());if(this.arScale==='fixed'){modelUrl.hash='allowsContentScaling=0';}var anchor=this[$arAnchor];anchor.setAttribute('rel','ar');var img=document.createElement('img');anchor.appendChild(img);anchor.setAttribute('href',modelUrl.toString());anchor.click();anchor.removeChild(img);}},{key:"canActivateAR",get:function get(){return this[$arMode]!==ARMode.NONE;}},{key:$canLaunchQuickLook,get:function get(){if(IS_IOS_CHROME){return this[$quickLookBrowsers].has('chrome');}else if(IS_IOS_SAFARI){return this[$quickLookBrowsers].has('safari');}return false;}}]);return ARModelViewerElement;}(ModelViewerElement);__decorate$2([property({type:Boolean,attribute:'ar'})],ARModelViewerElement.prototype,"ar",void 0);__decorate$2([property({type:String,attribute:'ar-scale'})],ARModelViewerElement.prototype,"arScale",void 0);__decorate$2([property({type:String,attribute:'ar-modes'})],ARModelViewerElement.prototype,"arModes",void 0);__decorate$2([property({type:String,attribute:'ios-src'})],ARModelViewerElement.prototype,"iosSrc",void 0);__decorate$2([property({type:String,attribute:'quick-look-browsers'})],ARModelViewerElement.prototype,"quickLookBrowsers",void 0);return ARModelViewerElement;};var _a$9,_b$7,_c$2;var $evaluate=Symbol('evaluate');var $lastValue=Symbol('lastValue');var Evaluator=/*#__PURE__*/function(){function Evaluator(){_classCallCheck(this,Evaluator);this[_a$9]=null;}_createClass(Evaluator,[{key:"evaluate",value:function evaluate(){if(!this.isConstant||this[$lastValue]==null){this[$lastValue]=this[$evaluate]();}return this[$lastValue];}},{key:"isConstant",get:function get(){return false;}}],[{key:"evaluatableFor",value:function evaluatableFor(node){var basis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ZERO;if(_instanceof(node,Evaluator)){return node;}if(node.type==='number'){if(node.unit==='%'){return new PercentageEvaluator(node,basis);}return node;}switch(node.name.value){case'calc':return new CalcEvaluator(node,basis);case'env':return new EnvEvaluator(node);}return ZERO;}},{key:"evaluate",value:function evaluate(evaluatable){if(_instanceof(evaluatable,Evaluator)){return evaluatable.evaluate();}return evaluatable;}},{key:"isConstant",value:function isConstant(evaluatable){if(_instanceof(evaluatable,Evaluator)){return evaluatable.isConstant;}return true;}},{key:"applyIntrinsics",value:function applyIntrinsics(evaluated,intrinsics){var basis=intrinsics.basis,keywords=intrinsics.keywords;var auto=keywords.auto;return basis.map(function(basisNode,index){var autoSubstituteNode=auto[index]==null?basisNode:auto[index];var evaluatedNode=evaluated[index]?evaluated[index]:autoSubstituteNode;if(evaluatedNode.type==='ident'){var keyword=evaluatedNode.value;if(keyword in keywords){evaluatedNode=keywords[keyword][index];}}if(evaluatedNode==null||evaluatedNode.type==='ident'){evaluatedNode=autoSubstituteNode;}if(evaluatedNode.unit==='%'){return numberNode(evaluatedNode.number/100*basisNode.number,basisNode.unit);}evaluatedNode=normalizeUnit(evaluatedNode,basisNode);if(evaluatedNode.unit!==basisNode.unit){return basisNode;}return evaluatedNode;});}}]);return Evaluator;}();_a$9=$lastValue;var $percentage=Symbol('percentage');var $basis=Symbol('basis');var PercentageEvaluator=/*#__PURE__*/function(_Evaluator){_inherits(PercentageEvaluator,_Evaluator);var _super26=_createSuper(PercentageEvaluator);function PercentageEvaluator(percentage,basis){var _this54;_classCallCheck(this,PercentageEvaluator);_this54=_super26.call(this);_this54[$percentage]=percentage;_this54[$basis]=basis;return _this54;}_createClass(PercentageEvaluator,[{key:$evaluate,value:function value(){return numberNode(this[$percentage].number/100*this[$basis].number,this[$basis].unit);}},{key:"isConstant",get:function get(){return true;}}]);return PercentageEvaluator;}(Evaluator);var $identNode=Symbol('identNode');var EnvEvaluator=/*#__PURE__*/function(_Evaluator2){_inherits(EnvEvaluator,_Evaluator2);var _super27=_createSuper(EnvEvaluator);function EnvEvaluator(envFunction){var _this55;_classCallCheck(this,EnvEvaluator);_this55=_super27.call(this);_this55[_b$7]=null;var identNode=envFunction.arguments.length?envFunction.arguments[0].terms[0]:null;if(identNode!=null&&identNode.type==='ident'){_this55[$identNode]=identNode;}return _this55;}_createClass(EnvEvaluator,[{key:(_b$7=$identNode,$evaluate),value:function value(){if(this[$identNode]!=null){switch(this[$identNode].value){case'window-scroll-y':var verticalScrollPosition=window.pageYOffset;var verticalScrollMax=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight);var scrollY=verticalScrollPosition/(verticalScrollMax-window.innerHeight)||0;return{type:'number',number:scrollY,unit:null};}}return ZERO;}},{key:"isConstant",get:function get(){return false;}}]);return EnvEvaluator;}(Evaluator);var IS_MULTIPLICATION_RE=/[\*\/]/;var $evaluator=Symbol('evalutor');var CalcEvaluator=/*#__PURE__*/function(_Evaluator3){_inherits(CalcEvaluator,_Evaluator3);var _super28=_createSuper(CalcEvaluator);function CalcEvaluator(calcFunction){var _this56;var basis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ZERO;_classCallCheck(this,CalcEvaluator);_this56=_super28.call(this);_this56[_c$2]=null;if(calcFunction.arguments.length!==1){return _possibleConstructorReturn(_this56);}var terms=calcFunction.arguments[0].terms.slice();var secondOrderTerms=[];while(terms.length){var term=terms.shift();if(secondOrderTerms.length>0){var previousTerm=secondOrderTerms[secondOrderTerms.length-1];if(previousTerm.type==='operator'&&IS_MULTIPLICATION_RE.test(previousTerm.value)){var operator=secondOrderTerms.pop();var leftValue=secondOrderTerms.pop();if(leftValue==null){return _possibleConstructorReturn(_this56);}secondOrderTerms.push(new OperatorEvaluator(operator,Evaluator.evaluatableFor(leftValue,basis),Evaluator.evaluatableFor(term,basis)));continue;}}secondOrderTerms.push(term.type==='operator'?term:Evaluator.evaluatableFor(term,basis));}while(secondOrderTerms.length>2){var _secondOrderTerms$spl=secondOrderTerms.splice(0,3),_secondOrderTerms$spl2=_slicedToArray(_secondOrderTerms$spl,3),left=_secondOrderTerms$spl2[0],_operator=_secondOrderTerms$spl2[1],right=_secondOrderTerms$spl2[2];if(_operator.type!=='operator'){return _possibleConstructorReturn(_this56);}secondOrderTerms.unshift(new OperatorEvaluator(_operator,Evaluator.evaluatableFor(left,basis),Evaluator.evaluatableFor(right,basis)));}if(secondOrderTerms.length===1){_this56[$evaluator]=secondOrderTerms[0];}return _this56;}_createClass(CalcEvaluator,[{key:(_c$2=$evaluator,$evaluate),value:function value(){return this[$evaluator]!=null?Evaluator.evaluate(this[$evaluator]):ZERO;}},{key:"isConstant",get:function get(){return this[$evaluator]==null||Evaluator.isConstant(this[$evaluator]);}}]);return CalcEvaluator;}(Evaluator);var $operator=Symbol('operator');var $left=Symbol('left');var $right=Symbol('right');var OperatorEvaluator=/*#__PURE__*/function(_Evaluator4){_inherits(OperatorEvaluator,_Evaluator4);var _super29=_createSuper(OperatorEvaluator);function OperatorEvaluator(operator,left,right){var _this57;_classCallCheck(this,OperatorEvaluator);_this57=_super29.call(this);_this57[$operator]=operator;_this57[$left]=left;_this57[$right]=right;return _this57;}_createClass(OperatorEvaluator,[{key:$evaluate,value:function value(){var leftNode=normalizeUnit(Evaluator.evaluate(this[$left]));var rightNode=normalizeUnit(Evaluator.evaluate(this[$right]));var leftValue=leftNode.number,leftUnit=leftNode.unit;var rightValue=rightNode.number,rightUnit=rightNode.unit;if(rightUnit!=null&&leftUnit!=null&&rightUnit!=leftUnit){return ZERO;}var unit=leftUnit||rightUnit;var value;switch(this[$operator].value){case'+':value=leftValue+rightValue;break;case'-':value=leftValue-rightValue;break;case'/':value=leftValue/rightValue;break;case'*':value=leftValue*rightValue;break;default:return ZERO;}return{type:'number',number:value,unit:unit};}},{key:"isConstant",get:function get(){return Evaluator.isConstant(this[$left])&&Evaluator.isConstant(this[$right]);}}]);return OperatorEvaluator;}(Evaluator);var $evaluatables=Symbol('evaluatables');var $intrinsics=Symbol('intrinsics');var StyleEvaluator=/*#__PURE__*/function(_Evaluator5){_inherits(StyleEvaluator,_Evaluator5);var _super30=_createSuper(StyleEvaluator);function StyleEvaluator(expressions,intrinsics){var _this58;_classCallCheck(this,StyleEvaluator);_this58=_super30.call(this);_this58[$intrinsics]=intrinsics;var firstExpression=expressions[0];var terms=firstExpression!=null?firstExpression.terms:[];_this58[$evaluatables]=intrinsics.basis.map(function(basisNode,index){var term=terms[index];if(term==null){return{type:'ident',value:'auto'};}if(term.type==='ident'){return term;}return Evaluator.evaluatableFor(term,basisNode);});return _this58;}_createClass(StyleEvaluator,[{key:$evaluate,value:function value(){var evaluated=this[$evaluatables].map(function(evaluatable){return Evaluator.evaluate(evaluatable);});return Evaluator.applyIntrinsics(evaluated,this[$intrinsics]).map(function(numberNode){return numberNode.number;});}},{key:"isConstant",get:function get(){var _iterator19=_createForOfIteratorHelper(this[$evaluatables]),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var evaluatable=_step19.value;if(!Evaluator.isConstant(evaluatable)){return false;}}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}return true;}}]);return StyleEvaluator;}(Evaluator);var _a$a,_b$8,_c$3,_d$2;var $instances=Symbol('instances');var $activateListener=Symbol('activateListener');var $deactivateListener=Symbol('deactivateListener');var $notifyInstances=Symbol('notifyInstances');var $notify=Symbol('notify');var $scrollCallback=Symbol('callback');var ScrollObserver=/*#__PURE__*/function(){function ScrollObserver(callback){_classCallCheck(this,ScrollObserver);this[$scrollCallback]=callback;}_createClass(ScrollObserver,[{key:"observe",value:function observe(){if(ScrollObserver[$instances].size===0){ScrollObserver[$activateListener]();}ScrollObserver[$instances].add(this);}},{key:"disconnect",value:function disconnect(){ScrollObserver[$instances].delete(this);if(ScrollObserver[$instances].size===0){ScrollObserver[$deactivateListener]();}}},{key:$notify,value:function value(){this[$scrollCallback]();}}],[{key:$notifyInstances,value:function value(){var _iterator20=_createForOfIteratorHelper(ScrollObserver[$instances]),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var instance=_step20.value;instance[$notify]();}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}}},{key:(_a$a=$instances,$activateListener),value:function value(){window.addEventListener('scroll',this[$notifyInstances],{passive:true});}},{key:$deactivateListener,value:function value(){window.removeEventListener('scroll',this[$notifyInstances]);}}]);return ScrollObserver;}();ScrollObserver[_a$a]=new Set();var $computeStyleCallback=Symbol('computeStyleCallback');var $astWalker=Symbol('astWalker');var $dependencies=Symbol('dependencies');var $scrollHandler=Symbol('scrollHandler');var $onScroll=Symbol('onScroll');var StyleEffector=/*#__PURE__*/function(){function StyleEffector(callback){var _this59=this;_classCallCheck(this,StyleEffector);this[_b$8]={};this[_c$3]=new ASTWalker(['function']);this[_d$2]=function(){return _this59[$onScroll]();};this[$computeStyleCallback]=callback;}_createClass(StyleEffector,[{key:"observeEffectsFor",value:function observeEffectsFor(ast){var _this60=this;var newDependencies={};var oldDependencies=this[$dependencies];this[$astWalker].walk(ast,function(functionNode){var name=functionNode.name;var firstArgument=functionNode.arguments[0];var firstTerm=firstArgument.terms[0];if(name.value!=='env'||firstTerm==null||firstTerm.type!=='ident'){return;}switch(firstTerm.value){case'window-scroll-y':if(newDependencies['window-scroll']==null){var observer='window-scroll'in oldDependencies?oldDependencies['window-scroll']:new ScrollObserver(_this60[$scrollHandler]);observer.observe();delete oldDependencies['window-scroll'];newDependencies['window-scroll']=observer;}break;}});for(var environmentState in oldDependencies){var observer=oldDependencies[environmentState];observer.disconnect();}this[$dependencies]=newDependencies;}},{key:"dispose",value:function dispose(){for(var environmentState in this[$dependencies]){var observer=this[$dependencies][environmentState];observer.disconnect();}}},{key:(_b$8=$dependencies,_c$3=$astWalker,_d$2=$scrollHandler,$onScroll),value:function value(){this[$computeStyleCallback]({relatedState:'window-scroll'});}}]);return StyleEffector;}();var style=function style(config){var observeEffects=config.observeEffects||false;var getIntrinsics=_instanceof(config.intrinsics,Function)?config.intrinsics:function(){return config.intrinsics;};return function(proto,propertyName){var _Object$definePropert;var originalUpdated=proto.updated;var originalConnectedCallback=proto.connectedCallback;var originalDisconnectedCallback=proto.disconnectedCallback;var $styleEffector=Symbol("".concat(propertyName,"StyleEffector"));var $styleEvaluator=Symbol("".concat(propertyName,"StyleEvaluator"));var $updateEvaluator=Symbol("".concat(propertyName,"UpdateEvaluator"));var $evaluateAndSync=Symbol("".concat(propertyName,"EvaluateAndSync"));Object.defineProperties(proto,(_Object$definePropert={},_defineProperty(_Object$definePropert,$styleEffector,{value:null,writable:true}),_defineProperty(_Object$definePropert,$styleEvaluator,{value:null,writable:true}),_defineProperty(_Object$definePropert,$updateEvaluator,{value:function value(){var _this61=this;var ast=parseExpressions(this[propertyName]);this[$styleEvaluator]=new StyleEvaluator(ast,getIntrinsics(this));if(this[$styleEffector]==null&&observeEffects){this[$styleEffector]=new StyleEffector(function(){return _this61[$evaluateAndSync]();});}if(this[$styleEffector]!=null){this[$styleEffector].observeEffectsFor(ast);}}}),_defineProperty(_Object$definePropert,$evaluateAndSync,{value:function value(){if(this[$styleEvaluator]==null){return;}var result=this[$styleEvaluator].evaluate();this[config.updateHandler](result);}}),_defineProperty(_Object$definePropert,"updated",{value:function value(changedProperties){if(changedProperties.has(propertyName)){this[$updateEvaluator]();this[$evaluateAndSync]();}originalUpdated.call(this,changedProperties);}}),_defineProperty(_Object$definePropert,"connectedCallback",{value:function value(){originalConnectedCallback.call(this);this.requestUpdate(propertyName,this[propertyName]);}}),_defineProperty(_Object$definePropert,"disconnectedCallback",{value:function value(){originalDisconnectedCallback.call(this);if(this[$styleEffector]!=null){this[$styleEffector].dispose();this[$styleEffector]=null;}}}),_Object$definePropert));};};var DEFAULT_OPTIONS=Object.freeze({minimumRadius:0,maximumRadius:Infinity,minimumPolarAngle:Math.PI/8,maximumPolarAngle:Math.PI-Math.PI/8,minimumAzimuthalAngle:-Infinity,maximumAzimuthalAngle:Infinity,minimumFieldOfView:10,maximumFieldOfView:45,interactionPolicy:'always-allow',touchAction:'pan-y'});var TOUCH_EVENT_RE=/^touch(start|end|move)$/;var KEYBOARD_ORBIT_INCREMENT=Math.PI/8;var ZOOM_SENSITIVITY=0.04;var KeyCode={PAGE_UP:33,PAGE_DOWN:34,LEFT:37,UP:38,RIGHT:39,DOWN:40};var ChangeSource={USER_INTERACTION:'user-interaction',NONE:'none'};var SmoothControls=/*#__PURE__*/function(_EventDispatcher5){_inherits(SmoothControls,_EventDispatcher5);var _super31=_createSuper(SmoothControls);function SmoothControls(camera,element){var _this62;_classCallCheck(this,SmoothControls);_this62=_super31.call(this);_this62.camera=camera;_this62.element=element;_this62.sensitivity=1;_this62._interactionEnabled=false;_this62.isUserChange=false;_this62.isUserPointing=false;_this62.spherical=new Spherical();_this62.goalSpherical=new Spherical();_this62.thetaDamper=new Damper();_this62.phiDamper=new Damper();_this62.radiusDamper=new Damper();_this62.logFov=Math.log(DEFAULT_OPTIONS.maximumFieldOfView);_this62.goalLogFov=_this62.logFov;_this62.fovDamper=new Damper();_this62.pointerIsDown=false;_this62.lastPointerPosition={clientX:0,clientY:0};_this62.touchMode='rotate';_this62.touchDecided=false;_this62.onPointerMove=function(event){if(!_this62.pointerIsDown||!_this62.canInteract){return;}if(TOUCH_EVENT_RE.test(event.type)){var touches=event.touches;switch(_this62.touchMode){case'zoom':if(_this62.lastTouches.length>1&&touches.length>1){var lastTouchDistance=_this62.twoTouchDistance(_this62.lastTouches[0],_this62.lastTouches[1]);var touchDistance=_this62.twoTouchDistance(touches[0],touches[1]);var deltaZoom=ZOOM_SENSITIVITY*(lastTouchDistance-touchDistance)/10.0;_this62.userAdjustOrbit(0,0,deltaZoom);}break;case'rotate':var touchAction=_this62._options.touchAction;if(!_this62.touchDecided&&touchAction!=='none'){_this62.touchDecided=true;var _touches$=touches[0],clientX=_touches$.clientX,clientY=_touches$.clientY;var dx=Math.abs(clientX-_this62.lastPointerPosition.clientX);var dy=Math.abs(clientY-_this62.lastPointerPosition.clientY);if(touchAction==='pan-y'&&dy>dx&&document.body.scrollHeight>window.innerHeight||touchAction==='pan-x'&&dx>dy){_this62.touchMode='scroll';return;}}_this62.handleSinglePointerMove(touches[0]);break;case'scroll':return;}_this62.lastTouches=touches;}else{_this62.handleSinglePointerMove(event);}if(event.cancelable){event.preventDefault();}};_this62.onPointerDown=function(event){_this62.pointerIsDown=true;_this62.isUserPointing=false;if(TOUCH_EVENT_RE.test(event.type)){var touches=event.touches;_this62.touchDecided=false;switch(touches.length){default:case 1:_this62.touchMode='rotate';_this62.handleSinglePointerDown(touches[0]);break;case 2:_this62.touchMode='zoom';break;}_this62.lastTouches=touches;}else{_this62.handleSinglePointerDown(event);}};_this62.onPointerUp=function(_event){_this62.element.style.cursor='grab';_this62.pointerIsDown=false;if(_this62.isUserPointing){_this62.dispatchEvent({type:'pointer-change-end',pointer:Object.assign({},_this62.lastPointerPosition)});}};_this62.onWheel=function(event){if(!_this62.canInteract){return;}var deltaZoom=event.deltaY*(event.deltaMode==1?18:1)*ZOOM_SENSITIVITY/30;_this62.userAdjustOrbit(0,0,deltaZoom);if(event.cancelable){event.preventDefault();}};_this62.onKeyDown=function(event){var relevantKey=false;switch(event.keyCode){case KeyCode.PAGE_UP:relevantKey=true;_this62.userAdjustOrbit(0,0,ZOOM_SENSITIVITY);break;case KeyCode.PAGE_DOWN:relevantKey=true;_this62.userAdjustOrbit(0,0,-1*ZOOM_SENSITIVITY);break;case KeyCode.UP:relevantKey=true;_this62.userAdjustOrbit(0,-KEYBOARD_ORBIT_INCREMENT,0);break;case KeyCode.DOWN:relevantKey=true;_this62.userAdjustOrbit(0,KEYBOARD_ORBIT_INCREMENT,0);break;case KeyCode.LEFT:relevantKey=true;_this62.userAdjustOrbit(-KEYBOARD_ORBIT_INCREMENT,0,0);break;case KeyCode.RIGHT:relevantKey=true;_this62.userAdjustOrbit(KEYBOARD_ORBIT_INCREMENT,0,0);break;}if(relevantKey&&event.cancelable){event.preventDefault();}};_this62._options=Object.assign({},DEFAULT_OPTIONS);_this62.setOrbit(0,Math.PI/2,1);_this62.setFieldOfView(100);_this62.jumpToGoal();return _this62;}_createClass(SmoothControls,[{key:"enableInteraction",value:function enableInteraction(){if(this._interactionEnabled===false){var element=this.element;element.addEventListener('mousemove',this.onPointerMove);element.addEventListener('mousedown',this.onPointerDown);element.addEventListener('wheel',this.onWheel);element.addEventListener('keydown',this.onKeyDown);element.addEventListener('touchstart',this.onPointerDown,{passive:true});element.addEventListener('touchmove',this.onPointerMove);self.addEventListener('mouseup',this.onPointerUp);self.addEventListener('touchend',this.onPointerUp);this.element.style.cursor='grab';this._interactionEnabled=true;}}},{key:"disableInteraction",value:function disableInteraction(){if(this._interactionEnabled===true){var element=this.element;element.removeEventListener('mousemove',this.onPointerMove);element.removeEventListener('mousedown',this.onPointerDown);element.removeEventListener('wheel',this.onWheel);element.removeEventListener('keydown',this.onKeyDown);element.removeEventListener('touchstart',this.onPointerDown);element.removeEventListener('touchmove',this.onPointerMove);self.removeEventListener('mouseup',this.onPointerUp);self.removeEventListener('touchend',this.onPointerUp);element.style.cursor='';this._interactionEnabled=false;}}},{key:"getCameraSpherical",value:function getCameraSpherical(){var target=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Spherical();return target.copy(this.spherical);}},{key:"getFieldOfView",value:function getFieldOfView(){return this.camera.fov;}},{key:"applyOptions",value:function applyOptions(_options){Object.assign(this._options,_options);this.setOrbit();this.setFieldOfView(Math.exp(this.goalLogFov));}},{key:"updateNearFar",value:function updateNearFar(nearPlane,farPlane){this.camera.near=Math.max(nearPlane,farPlane/1000);this.camera.far=farPlane;this.camera.updateProjectionMatrix();}},{key:"updateAspect",value:function updateAspect(aspect){this.camera.aspect=aspect;this.camera.updateProjectionMatrix();}},{key:"setOrbit",value:function setOrbit(){var goalTheta=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.goalSpherical.theta;var goalPhi=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.goalSpherical.phi;var goalRadius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.goalSpherical.radius;var _this$_options=this._options,minimumAzimuthalAngle=_this$_options.minimumAzimuthalAngle,maximumAzimuthalAngle=_this$_options.maximumAzimuthalAngle,minimumPolarAngle=_this$_options.minimumPolarAngle,maximumPolarAngle=_this$_options.maximumPolarAngle,minimumRadius=_this$_options.minimumRadius,maximumRadius=_this$_options.maximumRadius;var _this$goalSpherical=this.goalSpherical,theta=_this$goalSpherical.theta,phi=_this$goalSpherical.phi,radius=_this$goalSpherical.radius;var nextTheta=clamp(goalTheta,minimumAzimuthalAngle,maximumAzimuthalAngle);if(!isFinite(minimumAzimuthalAngle)&&!isFinite(maximumAzimuthalAngle)){this.spherical.theta=this.wrapAngle(this.spherical.theta-nextTheta)+nextTheta;}var nextPhi=clamp(goalPhi,minimumPolarAngle,maximumPolarAngle);var nextRadius=clamp(goalRadius,minimumRadius,maximumRadius);if(nextTheta===theta&&nextPhi===phi&&nextRadius===radius){return false;}this.goalSpherical.theta=nextTheta;this.goalSpherical.phi=nextPhi;this.goalSpherical.radius=nextRadius;this.goalSpherical.makeSafe();this.isUserChange=false;return true;}},{key:"setRadius",value:function setRadius(radius){this.goalSpherical.radius=radius;this.setOrbit();}},{key:"setFieldOfView",value:function setFieldOfView(fov){var _this$_options2=this._options,minimumFieldOfView=_this$_options2.minimumFieldOfView,maximumFieldOfView=_this$_options2.maximumFieldOfView;fov=clamp(fov,minimumFieldOfView,maximumFieldOfView);this.goalLogFov=Math.log(fov);}},{key:"adjustOrbit",value:function adjustOrbit(deltaTheta,deltaPhi,deltaZoom){var _this$goalSpherical2=this.goalSpherical,theta=_this$goalSpherical2.theta,phi=_this$goalSpherical2.phi,radius=_this$goalSpherical2.radius;var _this$_options3=this._options,minimumRadius=_this$_options3.minimumRadius,maximumRadius=_this$_options3.maximumRadius,minimumFieldOfView=_this$_options3.minimumFieldOfView,maximumFieldOfView=_this$_options3.maximumFieldOfView;var dTheta=this.spherical.theta-theta;var dThetaLimit=Math.PI-0.001;var goalTheta=theta-clamp(deltaTheta,-dThetaLimit-dTheta,dThetaLimit-dTheta);var goalPhi=phi-deltaPhi;var deltaRatio=deltaZoom===0?0:deltaZoom>0?(maximumRadius-radius)/(Math.log(maximumFieldOfView)-this.goalLogFov):(radius-minimumRadius)/(this.goalLogFov-Math.log(minimumFieldOfView));var goalRadius=radius+deltaZoom*Math.min(isFinite(deltaRatio)?deltaRatio:Infinity,maximumRadius-minimumRadius);this.setOrbit(goalTheta,goalPhi,goalRadius);if(deltaZoom!==0){var goalLogFov=this.goalLogFov+deltaZoom;this.setFieldOfView(Math.exp(goalLogFov));}}},{key:"jumpToGoal",value:function jumpToGoal(){this.update(0,SETTLING_TIME);}},{key:"update",value:function update(_time,delta){if(this.isStationary()){return;}var _this$_options4=this._options,maximumPolarAngle=_this$_options4.maximumPolarAngle,maximumRadius=_this$_options4.maximumRadius;var dTheta=this.spherical.theta-this.goalSpherical.theta;if(Math.abs(dTheta)>Math.PI&&!isFinite(this._options.minimumAzimuthalAngle)&&!isFinite(this._options.maximumAzimuthalAngle)){this.spherical.theta-=Math.sign(dTheta)*2*Math.PI;}this.spherical.theta=this.thetaDamper.update(this.spherical.theta,this.goalSpherical.theta,delta,Math.PI);this.spherical.phi=this.phiDamper.update(this.spherical.phi,this.goalSpherical.phi,delta,maximumPolarAngle);this.spherical.radius=this.radiusDamper.update(this.spherical.radius,this.goalSpherical.radius,delta,maximumRadius);this.logFov=this.fovDamper.update(this.logFov,this.goalLogFov,delta,1);this.moveCamera();}},{key:"isStationary",value:function isStationary(){return this.goalSpherical.theta===this.spherical.theta&&this.goalSpherical.phi===this.spherical.phi&&this.goalSpherical.radius===this.spherical.radius&&this.goalLogFov===this.logFov;}},{key:"moveCamera",value:function moveCamera(){this.spherical.makeSafe();this.camera.position.setFromSpherical(this.spherical);this.camera.setRotationFromEuler(new Euler(this.spherical.phi-Math.PI/2,this.spherical.theta,0,'YXZ'));if(this.camera.fov!==Math.exp(this.logFov)){this.camera.fov=Math.exp(this.logFov);this.camera.updateProjectionMatrix();}var source=this.isUserChange?ChangeSource.USER_INTERACTION:ChangeSource.NONE;this.dispatchEvent({type:'change',source:source});}},{key:"userAdjustOrbit",value:function userAdjustOrbit(deltaTheta,deltaPhi,deltaZoom){this.adjustOrbit(deltaTheta*this.sensitivity,deltaPhi*this.sensitivity,deltaZoom);this.isUserChange=true;this.dispatchEvent({type:'change',source:ChangeSource.USER_INTERACTION});}},{key:"wrapAngle",value:function wrapAngle(radians){var normalized=(radians+Math.PI)/(2*Math.PI);var wrapped=normalized-Math.floor(normalized);return wrapped*2*Math.PI-Math.PI;}},{key:"pixelLengthToSphericalAngle",value:function pixelLengthToSphericalAngle(pixelLength){return 2*Math.PI*pixelLength/this.element.clientHeight;}},{key:"twoTouchDistance",value:function twoTouchDistance(touchOne,touchTwo){var xOne=touchOne.clientX,yOne=touchOne.clientY;var xTwo=touchTwo.clientX,yTwo=touchTwo.clientY;var xDelta=xTwo-xOne;var yDelta=yTwo-yOne;return Math.sqrt(xDelta*xDelta+yDelta*yDelta);}},{key:"handleSinglePointerMove",value:function handleSinglePointerMove(pointer){var clientX=pointer.clientX,clientY=pointer.clientY;var deltaTheta=this.pixelLengthToSphericalAngle(clientX-this.lastPointerPosition.clientX);var deltaPhi=this.pixelLengthToSphericalAngle(clientY-this.lastPointerPosition.clientY);this.lastPointerPosition.clientX=clientX;this.lastPointerPosition.clientY=clientY;if(this.isUserPointing===false){this.isUserPointing=true;this.dispatchEvent({type:'pointer-change-start',pointer:Object.assign({},pointer)});}this.userAdjustOrbit(deltaTheta,deltaPhi,0);}},{key:"handleSinglePointerDown",value:function handleSinglePointerDown(pointer){this.lastPointerPosition.clientX=pointer.clientX;this.lastPointerPosition.clientY=pointer.clientY;this.element.style.cursor='grabbing';}},{key:"interactionEnabled",get:function get(){return this._interactionEnabled;}},{key:"options",get:function get(){return this._options;}},{key:"canInteract",get:function get(){if(this._options.interactionPolicy=='allow-when-focused'){var rootNode=this.element.getRootNode();return rootNode.activeElement===this.element;}return this._options.interactionPolicy==='always-allow';}}]);return SmoothControls;}(EventDispatcher);var easeInOutQuad=function easeInOutQuad(t){return t<.5?2*t*t:-1+(4-2*t)*t;};var interpolate=function interpolate(start,end){var ease=arguments.length>2&&arguments[2]!==undefined?arguments[2]:easeInOutQuad;return function(time){return start+(end-start)*ease(time);};};var sequence=function sequence(tracks,weights){var totalWeight=weights.reduce(function(total,weight){return total+weight;},0);var ratios=weights.map(function(weight){return weight/totalWeight;});return function(time){var start=0;var ratio=Infinity;var track=function track(){return 0;};for(var _i346=0;_i346<ratios.length;++_i346){ratio=ratios[_i346];track=tracks[_i346];if(time<=start+ratio){break;}start+=ratio;}return track((time-start)/ratio);};};var timeline=function timeline(initialValue,keyframes){var tracks=[];var weights=[];var lastValue=initialValue;for(var _i347=0;_i347<keyframes.length;++_i347){var keyframe=keyframes[_i347];var value=keyframe.value,frames=keyframe.frames;var ease=keyframe.ease||easeInOutQuad;var track=interpolate(lastValue,value,ease);tracks.push(track);weights.push(frames);lastValue=value;}return sequence(tracks,weights);};var __decorate$3=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var PROMPT_ANIMATION_TIME=5000;var wiggle=timeline(0,[{frames:5,value:-1},{frames:1,value:-1},{frames:8,value:1},{frames:1,value:1},{frames:5,value:0},{frames:18,value:0}]);var fade=timeline(0,[{frames:1,value:1},{frames:5,value:1},{frames:1,value:0},{frames:6,value:0}]);var DEFAULT_CAMERA_ORBIT='0deg 75deg 105%';var DEFAULT_CAMERA_TARGET='auto auto auto';var DEFAULT_FIELD_OF_VIEW='auto';var MINIMUM_RADIUS_RATIO=1.1*SAFE_RADIUS_RATIO;var AZIMUTHAL_QUADRANT_LABELS=['front','right','back','left'];var POLAR_TRIENT_LABELS=['upper-','','lower-'];var DEFAULT_INTERACTION_PROMPT_THRESHOLD=3000;var INTERACTION_PROMPT='Use mouse, touch or arrow keys to control the camera!';var InteractionPromptStrategy={AUTO:'auto',WHEN_FOCUSED:'when-focused',NONE:'none'};var InteractionPromptStyle={BASIC:'basic',WIGGLE:'wiggle'};var InteractionPolicy={ALWAYS_ALLOW:'always-allow',WHEN_FOCUSED:'allow-when-focused'};var TouchAction={PAN_Y:'pan-y',PAN_X:'pan-x',NONE:'none'};var fieldOfViewIntrinsics=function fieldOfViewIntrinsics(element){return{basis:[numberNode(element[$zoomAdjustedFieldOfView]*Math.PI/180,'rad')],keywords:{auto:[null]}};};var minFieldOfViewIntrinsics={basis:[degreesToRadians(numberNode(25,'deg'))],keywords:{auto:[null]}};var maxFieldOfViewIntrinsics=function maxFieldOfViewIntrinsics(element){var scene=element[$scene];return{basis:[degreesToRadians(numberNode(45,'deg'))],keywords:{auto:[numberNode(scene.framedFieldOfView,'deg')]}};};var cameraOrbitIntrinsics=function(){var defaultTerms=parseExpressions(DEFAULT_CAMERA_ORBIT)[0].terms;var theta=normalizeUnit(defaultTerms[0]);var phi=normalizeUnit(defaultTerms[1]);return function(element){var radius=element[$scene].model.idealCameraDistance;return{basis:[theta,phi,numberNode(radius,'m')],keywords:{auto:[null,null,numberNode(105,'%')]}};};}();var minCameraOrbitIntrinsics=function minCameraOrbitIntrinsics(element){var radius=MINIMUM_RADIUS_RATIO*element[$scene].model.idealCameraDistance;return{basis:[numberNode(-Infinity,'rad'),numberNode(Math.PI/8,'rad'),numberNode(radius,'m')],keywords:{auto:[null,null,null]}};};var maxCameraOrbitIntrinsics=function maxCameraOrbitIntrinsics(element){var orbitIntrinsics=cameraOrbitIntrinsics(element);var evaluator=new StyleEvaluator([],orbitIntrinsics);var defaultRadius=evaluator.evaluate()[2];return{basis:[numberNode(Infinity,'rad'),numberNode(Math.PI-Math.PI/8,'rad'),numberNode(defaultRadius,'m')],keywords:{auto:[null,null,null]}};};var cameraTargetIntrinsics=function cameraTargetIntrinsics(element){var center=element[$scene].model.boundingBox.getCenter(new Vector3());return{basis:[numberNode(center.x,'m'),numberNode(center.y,'m'),numberNode(center.z,'m')],keywords:{auto:[null,null,null]}};};var HALF_PI=Math.PI/2.0;var THIRD_PI=Math.PI/3.0;var QUARTER_PI=HALF_PI/2.0;var TAU=2.0*Math.PI;var $controls=Symbol('controls');var $promptElement=Symbol('promptElement');var $promptAnimatedContainer=Symbol('promptAnimatedContainer');var $deferInteractionPrompt=Symbol('deferInteractionPrompt');var $updateAria=Symbol('updateAria');var $updateCameraForRadius=Symbol('updateCameraForRadius');var $blurHandler=Symbol('blurHandler');var $focusHandler=Symbol('focusHandler');var $changeHandler=Symbol('changeHandler');var $pointerChangeHandler=Symbol('pointerChangeHandler');var $onBlur=Symbol('onBlur');var $onFocus=Symbol('onFocus');var $onChange=Symbol('onChange');var $onPointerChange=Symbol('onPointerChange');var $waitingToPromptUser=Symbol('waitingToPromptUser');var $userHasInteracted=Symbol('userHasInteracted');var $promptElementVisibleTime=Symbol('promptElementVisibleTime');var $lastPromptOffset=Symbol('lastPromptOffset');var $focusedTime=Symbol('focusedTime');var $zoomAdjustedFieldOfView=Symbol('zoomAdjustedFieldOfView');var $lastSpherical=Symbol('lastSpherical');var $jumpCamera=Symbol('jumpCamera');var $initialized$1=Symbol('initialized');var $maintainThetaPhi=Symbol('maintainThetaPhi');var $syncCameraOrbit=Symbol('syncCameraOrbit');var $syncFieldOfView=Symbol('syncFieldOfView');var $syncCameraTarget=Symbol('syncCameraTarget');var $syncMinCameraOrbit=Symbol('syncMinCameraOrbit');var $syncMaxCameraOrbit=Symbol('syncMaxCameraOrbit');var $syncMinFieldOfView=Symbol('syncMinFieldOfView');var $syncMaxFieldOfView=Symbol('syncMaxFieldOfView');var ControlsMixin=function ControlsMixin(ModelViewerElement){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s;var ControlsModelViewerElement=/*#__PURE__*/function(_ModelViewerElement4){_inherits(ControlsModelViewerElement,_ModelViewerElement4);var _super32=_createSuper(ControlsModelViewerElement);function ControlsModelViewerElement(){var _this63;_classCallCheck(this,ControlsModelViewerElement);_this63=_super32.apply(this,arguments);_this63.cameraControls=false;_this63.cameraOrbit=DEFAULT_CAMERA_ORBIT;_this63.cameraTarget=DEFAULT_CAMERA_TARGET;_this63.fieldOfView=DEFAULT_FIELD_OF_VIEW;_this63.minCameraOrbit='auto';_this63.maxCameraOrbit='auto';_this63.minFieldOfView='auto';_this63.maxFieldOfView='auto';_this63.interactionPromptThreshold=DEFAULT_INTERACTION_PROMPT_THRESHOLD;_this63.interactionPromptStyle=InteractionPromptStyle.WIGGLE;_this63.interactionPrompt=InteractionPromptStrategy.AUTO;_this63.interactionPolicy=InteractionPolicy.ALWAYS_ALLOW;_this63.orbitSensitivity=1;_this63.touchAction=TouchAction.PAN_Y;_this63[_a]=_this63.shadowRoot.querySelector('.interaction-prompt');_this63[_b]=_this63.shadowRoot.querySelector('.interaction-prompt > .animated-container');_this63[_c]=Infinity;_this63[_d]=0;_this63[_e]=Infinity;_this63[_f]=false;_this63[_g]=false;_this63[_h]=new SmoothControls(_this63[$scene].camera,_this63[$userInputElement]);_this63[_j]=0;_this63[_k]=new Spherical();_this63[_l]=false;_this63[_m]=false;_this63[_o]=false;_this63[_p]=function(event){return _this63[$onChange](event);};_this63[_q]=function(event){return _this63[$onPointerChange](event);};_this63[_r]=function(){return _this63[$onFocus]();};_this63[_s]=function(){return _this63[$onBlur]();};return _this63;}_createClass(ControlsModelViewerElement,[{key:"getCameraOrbit",value:function getCameraOrbit(){var _this$$lastSpherical=this[$lastSpherical],theta=_this$$lastSpherical.theta,phi=_this$$lastSpherical.phi,radius=_this$$lastSpherical.radius;return{theta:theta,phi:phi,radius:radius};}},{key:"getCameraTarget",value:function getCameraTarget(){return toVector3D(this[$scene].getTarget());}},{key:"getFieldOfView",value:function getFieldOfView(){return this[$controls].getFieldOfView();}},{key:"getMinimumFieldOfView",value:function getMinimumFieldOfView(){return this[$controls].options.minimumFieldOfView;}},{key:"getMaximumFieldOfView",value:function getMaximumFieldOfView(){return this[$controls].options.maximumFieldOfView;}},{key:"jumpCameraToGoal",value:function jumpCameraToGoal(){this[$jumpCamera]=true;this.requestUpdate($jumpCamera,false);}},{key:"resetInteractionPrompt",value:function resetInteractionPrompt(){this[$lastPromptOffset]=0;this[$promptElementVisibleTime]=Infinity;this[$userHasInteracted]=false;this[$waitingToPromptUser]=this.interactionPrompt===InteractionPromptStrategy.AUTO&&this.cameraControls;}},{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(ControlsModelViewerElement.prototype),"connectedCallback",this).call(this);this[$controls].addEventListener('change',this[$changeHandler]);this[$controls].addEventListener('pointer-change-start',this[$pointerChangeHandler]);this[$controls].addEventListener('pointer-change-end',this[$pointerChangeHandler]);}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(ControlsModelViewerElement.prototype),"disconnectedCallback",this).call(this);this[$controls].removeEventListener('change',this[$changeHandler]);this[$controls].removeEventListener('pointer-change-start',this[$pointerChangeHandler]);this[$controls].removeEventListener('pointer-change-end',this[$pointerChangeHandler]);}},{key:"updated",value:function updated(changedProperties){var _this64=this;_get(_getPrototypeOf(ControlsModelViewerElement.prototype),"updated",this).call(this,changedProperties);var controls=this[$controls];var input=this[$userInputElement];if(changedProperties.has('cameraControls')){if(this.cameraControls){controls.enableInteraction();if(this.interactionPrompt===InteractionPromptStrategy.AUTO){this[$waitingToPromptUser]=true;}input.addEventListener('focus',this[$focusHandler]);input.addEventListener('blur',this[$blurHandler]);}else{input.removeEventListener('focus',this[$focusHandler]);input.removeEventListener('blur',this[$blurHandler]);controls.disableInteraction();this[$deferInteractionPrompt]();}}if(changedProperties.has('interactionPrompt')||changedProperties.has('cameraControls')||changedProperties.has('src')){if(this.interactionPrompt===InteractionPromptStrategy.AUTO&&this.cameraControls&&!this[$userHasInteracted]){this[$waitingToPromptUser]=true;}else{this[$deferInteractionPrompt]();}}if(changedProperties.has('interactionPromptStyle')){this[$promptElement].classList.toggle('wiggle',this.interactionPromptStyle===InteractionPromptStyle.WIGGLE);}if(changedProperties.has('interactionPolicy')){var interactionPolicy=this.interactionPolicy;controls.applyOptions({interactionPolicy:interactionPolicy});}if(changedProperties.has('touchAction')){var touchAction=this.touchAction;controls.applyOptions({touchAction:touchAction});}if(changedProperties.has('orbitSensitivity')){this[$controls].sensitivity=this.orbitSensitivity;}if(this[$jumpCamera]===true){Promise.resolve().then(function(){_this64[$controls].jumpToGoal();_this64[$scene].jumpToGoal();_this64[$jumpCamera]=false;});}}},{key:(_a=$promptElement,_b=$promptAnimatedContainer,_c=$focusedTime,_d=$lastPromptOffset,_e=$promptElementVisibleTime,_f=$userHasInteracted,_g=$waitingToPromptUser,_h=$controls,_j=$zoomAdjustedFieldOfView,_k=$lastSpherical,_l=$jumpCamera,_m=$initialized$1,_o=$maintainThetaPhi,_p=$changeHandler,_q=$pointerChangeHandler,_r=$focusHandler,_s=$blurHandler,$syncFieldOfView),value:function value(style){this[$controls].setFieldOfView(style[0]*180/Math.PI);}},{key:$syncCameraOrbit,value:function value(style){if(this[$maintainThetaPhi]){var _this$getCameraOrbit=this.getCameraOrbit(),theta=_this$getCameraOrbit.theta,phi=_this$getCameraOrbit.phi;style[0]=theta;style[1]=phi;this[$maintainThetaPhi]=false;}this[$controls].setOrbit(style[0],style[1],style[2]);}},{key:$syncMinCameraOrbit,value:function value(style){this[$controls].applyOptions({minimumAzimuthalAngle:style[0],minimumPolarAngle:style[1],minimumRadius:style[2]});this.jumpCameraToGoal();}},{key:$syncMaxCameraOrbit,value:function value(style){this[$controls].applyOptions({maximumAzimuthalAngle:style[0],maximumPolarAngle:style[1],maximumRadius:style[2]});this[$updateCameraForRadius](style[2]);this.jumpCameraToGoal();}},{key:$syncMinFieldOfView,value:function value(style){this[$controls].applyOptions({minimumFieldOfView:style[0]*180/Math.PI});this.jumpCameraToGoal();}},{key:$syncMaxFieldOfView,value:function value(style){this[$controls].applyOptions({maximumFieldOfView:style[0]*180/Math.PI});this.jumpCameraToGoal();}},{key:$syncCameraTarget,value:function value(style){var _style2=_slicedToArray(style,3),x=_style2[0],y=_style2[1],z=_style2[2];this[$scene].setTarget(x,y,z);this[$renderer].arRenderer.updateTarget();}},{key:$tick$1,value:function value(time,delta){_get(_getPrototypeOf(ControlsModelViewerElement.prototype),$tick$1,this).call(this,time,delta);if(this[$renderer].isPresenting||!this[$hasTransitioned]()){return;}var now=performance.now();if(this[$waitingToPromptUser]){var thresholdTime=this.interactionPrompt===InteractionPromptStrategy.AUTO?this[$loadedTime]:this[$focusedTime];if(this.loaded&&now>thresholdTime+this.interactionPromptThreshold){this[$userInputElement].setAttribute('aria-label',INTERACTION_PROMPT);this[$waitingToPromptUser]=false;this[$promptElementVisibleTime]=now;this[$promptElement].classList.add('visible');}}if(isFinite(this[$promptElementVisibleTime])&&this.interactionPromptStyle===InteractionPromptStyle.WIGGLE){var scene=this[$scene];var animationTime=(now-this[$promptElementVisibleTime])/PROMPT_ANIMATION_TIME%1;var offset=wiggle(animationTime);var opacity=fade(animationTime);this[$promptAnimatedContainer].style.opacity="".concat(opacity);if(offset!==this[$lastPromptOffset]){var xOffset=offset*scene.width*0.05;var deltaTheta=(offset-this[$lastPromptOffset])*Math.PI/16;this[$promptAnimatedContainer].style.transform="translateX(".concat(xOffset,"px)");this[$controls].adjustOrbit(deltaTheta,0,0);this[$lastPromptOffset]=offset;}}this[$controls].update(time,delta);this[$scene].updateTarget(delta);}},{key:$deferInteractionPrompt,value:function value(){this[$waitingToPromptUser]=false;this[$promptElement].classList.remove('visible');this[$promptElementVisibleTime]=Infinity;}},{key:$updateCameraForRadius,value:function value(radius){var idealCameraDistance=this[$scene].model.idealCameraDistance;var maximumRadius=Math.max(idealCameraDistance,radius);var near=0;var far=2*maximumRadius;this[$controls].updateNearFar(near,far);}},{key:$updateAria,value:function value(){var _this$$lastSpherical2=this[$lastSpherical],lastTheta=_this$$lastSpherical2.theta,lastPhi=_this$$lastSpherical2.phi;var _this$$controls$getCa=this[$controls].getCameraSpherical(this[$lastSpherical]),theta=_this$$controls$getCa.theta,phi=_this$$controls$getCa.phi;var rootNode=this.getRootNode();if(rootNode!=null&&rootNode.activeElement===this){var lastAzimuthalQuadrant=(4+Math.floor((lastTheta%TAU+QUARTER_PI)/HALF_PI))%4;var azimuthalQuadrant=(4+Math.floor((theta%TAU+QUARTER_PI)/HALF_PI))%4;var lastPolarTrient=Math.floor(lastPhi/THIRD_PI);var polarTrient=Math.floor(phi/THIRD_PI);if(azimuthalQuadrant!==lastAzimuthalQuadrant||polarTrient!==lastPolarTrient){var azimuthalQuadrantLabel=AZIMUTHAL_QUADRANT_LABELS[azimuthalQuadrant];var polarTrientLabel=POLAR_TRIENT_LABELS[polarTrient];var ariaLabel="View from stage ".concat(polarTrientLabel).concat(azimuthalQuadrantLabel);this[$userInputElement].setAttribute('aria-label',ariaLabel);}}}},{key:$onResize,value:function value(event){var controls=this[$controls];var oldFramedFieldOfView=this[$scene].framedFieldOfView;_get(_getPrototypeOf(ControlsModelViewerElement.prototype),$onResize,this).call(this,event);var newFramedFieldOfView=this[$scene].framedFieldOfView;var zoom=controls.getFieldOfView()/oldFramedFieldOfView;this[$zoomAdjustedFieldOfView]=newFramedFieldOfView*zoom;controls.updateAspect(this[$scene].aspect);this.requestUpdate('maxFieldOfView',this.maxFieldOfView);this.requestUpdate('fieldOfView',this.fieldOfView);this.jumpCameraToGoal();}},{key:$onModelLoad,value:function value(){_get(_getPrototypeOf(ControlsModelViewerElement.prototype),$onModelLoad,this).call(this);var framedFieldOfView=this[$scene].framedFieldOfView;this[$zoomAdjustedFieldOfView]=framedFieldOfView;if(this[$initialized$1]){this[$maintainThetaPhi]=true;}else{this[$initialized$1]=true;}this.requestUpdate('maxFieldOfView',this.maxFieldOfView);this.requestUpdate('fieldOfView',this.fieldOfView);this.requestUpdate('minCameraOrbit',this.minCameraOrbit);this.requestUpdate('maxCameraOrbit',this.maxCameraOrbit);this.requestUpdate('cameraOrbit',this.cameraOrbit);this.requestUpdate('cameraTarget',this.cameraTarget);this.jumpCameraToGoal();}},{key:$onFocus,value:function value(){var input=this[$userInputElement];if(!isFinite(this[$focusedTime])){this[$focusedTime]=performance.now();}var ariaLabel=this[$ariaLabel];if(input.getAttribute('aria-label')!==ariaLabel){input.setAttribute('aria-label',ariaLabel);}if(this.interactionPrompt===InteractionPromptStrategy.WHEN_FOCUSED&&!this[$userHasInteracted]){this[$waitingToPromptUser]=true;}}},{key:$onBlur,value:function value(){if(this.interactionPrompt!==InteractionPromptStrategy.WHEN_FOCUSED){return;}this[$waitingToPromptUser]=false;this[$promptElement].classList.remove('visible');this[$promptElementVisibleTime]=Infinity;this[$focusedTime]=Infinity;}},{key:$onChange,value:function value(_ref8){var source=_ref8.source;this[$updateAria]();this[$needsRender]();if(source===ChangeSource.USER_INTERACTION){this[$userHasInteracted]=true;this[$deferInteractionPrompt]();}this.dispatchEvent(new CustomEvent('camera-change',{detail:{source:source}}));}},{key:$onPointerChange,value:function value(event){if(event.type==='pointer-change-start'){this[$container].classList.add('pointer-tumbling');}else{this[$container].classList.remove('pointer-tumbling');}}}]);return ControlsModelViewerElement;}(ModelViewerElement);__decorate$3([property({type:Boolean,attribute:'camera-controls'})],ControlsModelViewerElement.prototype,"cameraControls",void 0);__decorate$3([style({intrinsics:cameraOrbitIntrinsics,observeEffects:true,updateHandler:$syncCameraOrbit}),property({type:String,attribute:'camera-orbit',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"cameraOrbit",void 0);__decorate$3([style({intrinsics:cameraTargetIntrinsics,observeEffects:true,updateHandler:$syncCameraTarget}),property({type:String,attribute:'camera-target',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"cameraTarget",void 0);__decorate$3([style({intrinsics:fieldOfViewIntrinsics,observeEffects:true,updateHandler:$syncFieldOfView}),property({type:String,attribute:'field-of-view',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"fieldOfView",void 0);__decorate$3([style({intrinsics:minCameraOrbitIntrinsics,updateHandler:$syncMinCameraOrbit}),property({type:String,attribute:'min-camera-orbit',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"minCameraOrbit",void 0);__decorate$3([style({intrinsics:maxCameraOrbitIntrinsics,updateHandler:$syncMaxCameraOrbit}),property({type:String,attribute:'max-camera-orbit',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"maxCameraOrbit",void 0);__decorate$3([style({intrinsics:minFieldOfViewIntrinsics,updateHandler:$syncMinFieldOfView}),property({type:String,attribute:'min-field-of-view',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"minFieldOfView",void 0);__decorate$3([style({intrinsics:maxFieldOfViewIntrinsics,updateHandler:$syncMaxFieldOfView}),property({type:String,attribute:'max-field-of-view',hasChanged:function hasChanged(){return true;}})],ControlsModelViewerElement.prototype,"maxFieldOfView",void 0);__decorate$3([property({type:Number,attribute:'interaction-prompt-threshold'})],ControlsModelViewerElement.prototype,"interactionPromptThreshold",void 0);__decorate$3([property({type:String,attribute:'interaction-prompt-style'})],ControlsModelViewerElement.prototype,"interactionPromptStyle",void 0);__decorate$3([property({type:String,attribute:'interaction-prompt'})],ControlsModelViewerElement.prototype,"interactionPrompt",void 0);__decorate$3([property({type:String,attribute:'interaction-policy'})],ControlsModelViewerElement.prototype,"interactionPolicy",void 0);__decorate$3([property({type:Number,attribute:'orbit-sensitivity'})],ControlsModelViewerElement.prototype,"orbitSensitivity",void 0);__decorate$3([property({type:String,attribute:'touch-action'})],ControlsModelViewerElement.prototype,"touchAction",void 0);return ControlsModelViewerElement;};var __decorate$4=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var BASE_OPACITY=0.1;var DEFAULT_SHADOW_INTENSITY=0.0;var DEFAULT_SHADOW_SOFTNESS=1.0;var DEFAULT_EXPOSURE=1.0;var $currentEnvironmentMap=Symbol('currentEnvironmentMap');var $applyEnvironmentMap=Symbol('applyEnvironmentMap');var $updateEnvironment=Symbol('updateEnvironment');var $cancelEnvironmentUpdate=Symbol('cancelEnvironmentUpdate');var $onPreload=Symbol('onPreload');var EnvironmentMixin=function EnvironmentMixin(ModelViewerElement){var _a,_b,_c;var EnvironmentModelViewerElement=/*#__PURE__*/function(_ModelViewerElement5){_inherits(EnvironmentModelViewerElement,_ModelViewerElement5);var _super33=_createSuper(EnvironmentModelViewerElement);function EnvironmentModelViewerElement(){var _this65;_classCallCheck(this,EnvironmentModelViewerElement);_this65=_super33.apply(this,arguments);_this65.environmentImage=null;_this65.skyboxImage=null;_this65.shadowIntensity=DEFAULT_SHADOW_INTENSITY;_this65.shadowSoftness=DEFAULT_SHADOW_SOFTNESS;_this65.exposure=DEFAULT_EXPOSURE;_this65[_a]=null;_this65[_b]=null;_this65[_c]=function(event){if(event.element===_assertThisInitialized(_this65)){_this65[$updateEnvironment]();}};return _this65;}_createClass(EnvironmentModelViewerElement,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(EnvironmentModelViewerElement.prototype),"connectedCallback",this).call(this);this[$renderer].loader.addEventListener('preload',this[$onPreload]);}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(EnvironmentModelViewerElement.prototype),"disconnectedCallback",this).call(this);this[$renderer].loader.removeEventListener('preload',this[$onPreload]);}},{key:"updated",value:function updated(changedProperties){_get(_getPrototypeOf(EnvironmentModelViewerElement.prototype),"updated",this).call(this,changedProperties);if(changedProperties.has('shadowIntensity')){this[$scene].setShadowIntensity(this.shadowIntensity*BASE_OPACITY);this[$needsRender]();}if(changedProperties.has('shadowSoftness')){this[$scene].setShadowSoftness(this.shadowSoftness);this[$needsRender]();}if(changedProperties.has('exposure')){this[$scene].exposure=this.exposure;this[$needsRender]();}if((changedProperties.has('environmentImage')||changedProperties.has('skyboxImage'))&&this[$shouldAttemptPreload]()){this[$updateEnvironment]();}}},{key:(_a=$currentEnvironmentMap,_b=$cancelEnvironmentUpdate,_c=$onPreload,$onModelLoad),value:function value(){_get(_getPrototypeOf(EnvironmentModelViewerElement.prototype),$onModelLoad,this).call(this);if(this[$currentEnvironmentMap]!=null){this[$applyEnvironmentMap](this[$currentEnvironmentMap]);}}},{key:$updateEnvironment,value:function(){var _value7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee25(){var _this66=this;var skyboxImage,environmentImage,textureUtils,_yield$Promise,environmentMap,skybox,environment;return regeneratorRuntime.wrap(function _callee25$(_context26){while(1){switch(_context26.prev=_context26.next){case 0:skyboxImage=this.skyboxImage,environmentImage=this.environmentImage;if(this[$cancelEnvironmentUpdate]!=null){this[$cancelEnvironmentUpdate]();this[$cancelEnvironmentUpdate]=null;}textureUtils=this[$renderer].textureUtils;if(!(textureUtils==null)){_context26.next=5;break;}return _context26.abrupt("return");case 5:_context26.prev=5;_context26.next=8;return new Promise(/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee24(resolve,reject){var texturesLoad;return regeneratorRuntime.wrap(function _callee24$(_context25){while(1){switch(_context25.prev=_context25.next){case 0:texturesLoad=textureUtils.generateEnvironmentMapAndSkybox(deserializeUrl(skyboxImage),deserializeUrl(environmentImage),{progressTracker:_this66[$progressTracker]});_this66[$cancelEnvironmentUpdate]=function(){return reject(texturesLoad);};_context25.t0=resolve;_context25.next=5;return texturesLoad;case 5:_context25.t1=_context25.sent;(0,_context25.t0)(_context25.t1);case 7:case"end":return _context25.stop();}}},_callee24);}));return function(_x23,_x24){return _ref9.apply(this,arguments);};}());case 8:_yield$Promise=_context26.sent;environmentMap=_yield$Promise.environmentMap;skybox=_yield$Promise.skybox;environment=environmentMap.texture;if(skybox!=null){this[$scene].background=skybox.userData.url===environment.userData.url?environment:skybox;}else{this[$scene].background=null;}this[$applyEnvironmentMap](environmentMap.texture);this[$scene].model.dispatchEvent({type:'envmap-update'});_context26.next=22;break;case 17:_context26.prev=17;_context26.t0=_context26["catch"](5);if(!_instanceof(_context26.t0,Error)){_context26.next=22;break;}this[$applyEnvironmentMap](null);throw _context26.t0;case 22:case"end":return _context26.stop();}}},_callee25,this,[[5,17]]);}));function value(){return _value7.apply(this,arguments);}return value;}()},{key:$applyEnvironmentMap,value:function value(environmentMap){this[$currentEnvironmentMap]=environmentMap;this[$scene].environment=this[$currentEnvironmentMap];this.dispatchEvent(new CustomEvent('environment-change'));this[$needsRender]();}}]);return EnvironmentModelViewerElement;}(ModelViewerElement);__decorate$4([property({type:String,attribute:'environment-image'})],EnvironmentModelViewerElement.prototype,"environmentImage",void 0);__decorate$4([property({type:String,attribute:'skybox-image'})],EnvironmentModelViewerElement.prototype,"skyboxImage",void 0);__decorate$4([property({type:Number,attribute:'shadow-intensity'})],EnvironmentModelViewerElement.prototype,"shadowIntensity",void 0);__decorate$4([property({type:Number,attribute:'shadow-softness'})],EnvironmentModelViewerElement.prototype,"shadowSoftness",void 0);__decorate$4([property({type:Number})],EnvironmentModelViewerElement.prototype,"exposure",void 0);return EnvironmentModelViewerElement;};var _a$b,_b$9;var INITIAL_STATUS_ANNOUNCEMENT='This page includes one or more 3D models that are loading';var FINISHED_LOADING_ANNOUNCEMENT='All 3D models in the page have loaded';var UPDATE_STATUS_DEBOUNCE_MS=100;var $modelViewerStatusInstance=Symbol('modelViewerStatusInstance');var $updateStatus=Symbol('updateStatus');var LoadingStatusAnnouncer=/*#__PURE__*/function(_EventDispatcher6){_inherits(LoadingStatusAnnouncer,_EventDispatcher6);var _super34=_createSuper(LoadingStatusAnnouncer);function LoadingStatusAnnouncer(){var _this67;_classCallCheck(this,LoadingStatusAnnouncer);_this67=_super34.call(this);_this67[_a$b]=null;_this67.registeredInstanceStatuses=new Map();_this67.loadingPromises=[];_this67.statusElement=document.createElement('p');_this67.statusUpdateInProgress=false;_this67[_b$9]=debounce(function(){return _this67.updateStatus();},UPDATE_STATUS_DEBOUNCE_MS);var _assertThisInitialize=_assertThisInitialized(_this67),statusElement=_assertThisInitialize.statusElement;var style=statusElement.style;statusElement.setAttribute('role','status');statusElement.classList.add('screen-reader-only');style.top=style.left='0';style.pointerEvents='none';return _this67;}_createClass(LoadingStatusAnnouncer,[{key:"registerInstance",value:function registerInstance(modelViewer){if(this.registeredInstanceStatuses.has(modelViewer)){return;}var onUnregistered=function onUnregistered(){};var loadShouldBeMeasured=modelViewer.loaded===false&&!!modelViewer.src;var loadAttemptCompletes=new Promise(function(resolve){if(!loadShouldBeMeasured){resolve();return;}var resolveHandler=function resolveHandler(){resolve();modelViewer.removeEventListener('load',resolveHandler);modelViewer.removeEventListener('error',resolveHandler);};modelViewer.addEventListener('load',resolveHandler);modelViewer.addEventListener('error',resolveHandler);onUnregistered=resolveHandler;});this.registeredInstanceStatuses.set(modelViewer,{onUnregistered:onUnregistered});this.loadingPromises.push(loadAttemptCompletes);if(this.modelViewerStatusInstance==null){this.modelViewerStatusInstance=modelViewer;}}},{key:"unregisterInstance",value:function unregisterInstance(modelViewer){if(!this.registeredInstanceStatuses.has(modelViewer)){return;}var statuses=this.registeredInstanceStatuses;var instanceStatus=statuses.get(modelViewer);statuses.delete(modelViewer);instanceStatus.onUnregistered();if(this.modelViewerStatusInstance===modelViewer){this.modelViewerStatusInstance=statuses.size>0?getFirstMapKey(statuses):null;}}},{key:"updateStatus",value:function(){var _updateStatus=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee26(){var loadingPromises;return regeneratorRuntime.wrap(function _callee26$(_context27){while(1){switch(_context27.prev=_context27.next){case 0:if(!(this.statusUpdateInProgress||this.loadingPromises.length===0)){_context27.next=2;break;}return _context27.abrupt("return");case 2:this.statusElement.textContent=INITIAL_STATUS_ANNOUNCEMENT;this.statusUpdateInProgress=true;this.dispatchEvent({type:'initial-status-announced'});case 5:if(!this.loadingPromises.length){_context27.next=12;break;}loadingPromises=this.loadingPromises;this.loadingPromises=[];_context27.next=10;return Promise.all(loadingPromises);case 10:_context27.next=5;break;case 12:this.statusElement.textContent=FINISHED_LOADING_ANNOUNCEMENT;this.statusUpdateInProgress=false;this.dispatchEvent({type:'finished-loading-announced'});case 15:case"end":return _context27.stop();}}},_callee26,this);}));function updateStatus(){return _updateStatus.apply(this,arguments);}return updateStatus;}()},{key:"modelViewerStatusInstance",get:function get(){return this[$modelViewerStatusInstance];},set:function set(value){var currentInstance=this[$modelViewerStatusInstance];if(currentInstance===value){return;}var statusElement=this.statusElement;if(value!=null&&value.shadowRoot!=null){value.shadowRoot.appendChild(statusElement);}else if(statusElement.parentNode!=null){statusElement.parentNode.removeChild(statusElement);}this[$modelViewerStatusInstance]=value;this[$updateStatus]();}}]);return LoadingStatusAnnouncer;}(EventDispatcher);_a$b=$modelViewerStatusInstance,_b$9=$updateStatus;var __decorate$5=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var PROGRESS_BAR_UPDATE_THRESHOLD=100;var PROGRESS_MASK_BASE_OPACITY=0.2;var DEFAULT_DRACO_DECODER_LOCATION='https://www.gstatic.com/draco/versioned/decoders/1.3.6/';var SPACE_KEY=32;var ENTER_KEY=13;var RevealStrategy={AUTO:'auto',INTERACTION:'interaction',MANUAL:'manual'};var LoadingStrategy={AUTO:'auto',LAZY:'lazy',EAGER:'eager'};var PosterDismissalSource={INTERACTION:'interaction'};var loadingStatusAnnouncer=new LoadingStatusAnnouncer();var $defaultProgressBarElement=Symbol('defaultProgressBarElement');var $defaultProgressMaskElement=Symbol('defaultProgressMaskElement');var $posterContainerElement=Symbol('posterContainerElement');var $defaultPosterElement=Symbol('defaultPosterElement');var $posterDismissalSource=Symbol('posterDismissalSource');var $showPoster=Symbol('showPoster');var $hidePoster=Symbol('hidePoster');var $modelIsRevealed=Symbol('modelIsRevealed');var $updateProgressBar=Symbol('updateProgressBar');var $lastReportedProgress=Symbol('lastReportedProgress');var $transitioned=Symbol('transitioned');var $ariaLabelCallToAction=Symbol('ariaLabelCallToAction');var $clickHandler=Symbol('clickHandler');var $keydownHandler=Symbol('keydownHandler');var $progressHandler=Symbol('processHandler');var $onClick=Symbol('onClick');var $onKeydown=Symbol('onKeydown');var $onProgress=Symbol('onProgress');var LoadingMixin=function LoadingMixin(ModelViewerElement){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o;var LoadingModelViewerElement=/*#__PURE__*/function(_ModelViewerElement6){_inherits(LoadingModelViewerElement,_ModelViewerElement6);var _super35=_createSuper(LoadingModelViewerElement);function LoadingModelViewerElement(){var _this68;_classCallCheck(this,LoadingModelViewerElement);for(var _len3=arguments.length,args=new Array(_len3),_key6=0;_key6<_len3;_key6++){args[_key6]=arguments[_key6];}_this68=_super35.call.apply(_super35,[this].concat(args));_this68.poster=null;_this68.reveal=RevealStrategy.AUTO;_this68.loading=LoadingStrategy.AUTO;_this68[_a]=false;_this68[_b]=false;_this68[_c]=0;_this68[_d]=null;_this68[_e]=_this68.shadowRoot.querySelector('.slot.poster');_this68[_f]=_this68.shadowRoot.querySelector('#default-poster');_this68[_g]=_this68.shadowRoot.querySelector('#default-progress-bar > .bar');_this68[_h]=_this68.shadowRoot.querySelector('#default-progress-bar > .mask');_this68[_j]=_this68[$defaultPosterElement].getAttribute('aria-label');_this68[_k]=function(){return _this68[$onClick]();};_this68[_l]=function(event){return _this68[$onKeydown](event);};_this68[_m]=function(event){return _this68[$onProgress](event);};_this68[_o]=throttle(function(progress){var parentNode=_this68[$defaultProgressBarElement].parentNode;requestAnimationFrame(function(){_this68[$defaultProgressMaskElement].style.opacity="".concat((1.0-progress)*PROGRESS_MASK_BASE_OPACITY);_this68[$defaultProgressBarElement].style.transform="scaleX(".concat(progress,")");if(progress===0){parentNode.removeChild(_this68[$defaultProgressBarElement]);parentNode.appendChild(_this68[$defaultProgressBarElement]);}if(progress===1.0){_this68[$defaultProgressBarElement].classList.add('hide');}else{_this68[$defaultProgressBarElement].classList.remove('hide');}});},PROGRESS_BAR_UPDATE_THRESHOLD);var ModelViewerElement=self.ModelViewerElement||{};var dracoDecoderLocation=ModelViewerElement.dracoDecoderLocation||DEFAULT_DRACO_DECODER_LOCATION;CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);return _this68;}_createClass(LoadingModelViewerElement,[{key:"dismissPoster",value:function dismissPoster(){if(this[$sceneIsReady]()){this[$hidePoster]();}else{this[$posterDismissalSource]=PosterDismissalSource.INTERACTION;this[$updateSource]();}}},{key:"getDimensions",value:function getDimensions(){return toVector3D(this[$scene].model.size);}},{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(LoadingModelViewerElement.prototype),"connectedCallback",this).call(this);this[$posterContainerElement].addEventListener('click',this[$clickHandler]);this[$posterContainerElement].addEventListener('keydown',this[$keydownHandler]);this[$progressTracker].addEventListener('progress',this[$progressHandler]);loadingStatusAnnouncer.registerInstance(this);}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(LoadingModelViewerElement.prototype),"disconnectedCallback",this).call(this);this[$posterContainerElement].removeEventListener('click',this[$clickHandler]);this[$posterContainerElement].removeEventListener('keydown',this[$keydownHandler]);this[$progressTracker].removeEventListener('progress',this[$progressHandler]);loadingStatusAnnouncer.unregisterInstance(this);}},{key:"updated",value:function(){var _updated=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee27(changedProperties){return regeneratorRuntime.wrap(function _callee27$(_context28){while(1){switch(_context28.prev=_context28.next){case 0:_get(_getPrototypeOf(LoadingModelViewerElement.prototype),"updated",this).call(this,changedProperties);if(changedProperties.has('poster')&&this.poster!=null){this[$defaultPosterElement].style.backgroundImage="url(".concat(this.poster,")");}if(changedProperties.has('alt')){this[$defaultPosterElement].setAttribute('aria-label',"".concat(this[$ariaLabel],". ").concat(this[$ariaLabelCallToAction]));}if(changedProperties.has('reveal')||changedProperties.has('loaded')){if(!this[$sceneIsReady]()){this[$updateSource]();}}case 4:case"end":return _context28.stop();}}},_callee27,this);}));function updated(_x25){return _updated.apply(this,arguments);}return updated;}()},{key:(_a=$modelIsRevealed,_b=$transitioned,_c=$lastReportedProgress,_d=$posterDismissalSource,_e=$posterContainerElement,_f=$defaultPosterElement,_g=$defaultProgressBarElement,_h=$defaultProgressMaskElement,_j=$ariaLabelCallToAction,_k=$clickHandler,_l=$keydownHandler,_m=$progressHandler,_o=$updateProgressBar,$onClick),value:function value(){if(this.reveal===RevealStrategy.MANUAL){return;}this.dismissPoster();}},{key:$onKeydown,value:function value(event){if(this.reveal===RevealStrategy.MANUAL){return;}switch(event.keyCode){case SPACE_KEY:case ENTER_KEY:this.dismissPoster();break;}}},{key:$onProgress,value:function value(event){var progress=event.detail.totalProgress;this[$lastReportedProgress]=Math.max(progress,this[$lastReportedProgress]);if(progress===1.0){this[$updateProgressBar].flush();if(this[$sceneIsReady]()&&(this[$posterDismissalSource]!=null||this.reveal===RevealStrategy.AUTO)){this[$hidePoster]();}}this[$updateProgressBar](progress);this.dispatchEvent(new CustomEvent('progress',{detail:{totalProgress:progress}}));}},{key:$shouldAttemptPreload,value:function value(){return!!this.src&&(this[$posterDismissalSource]!=null||this.loading===LoadingStrategy.EAGER||this.reveal===RevealStrategy.AUTO&&this[$isElementInViewport]);}},{key:$sceneIsReady,value:function value(){var src=this.src;return!!src&&_get(_getPrototypeOf(LoadingModelViewerElement.prototype),$sceneIsReady,this).call(this)&&this[$lastReportedProgress]===1.0;}},{key:$showPoster,value:function value(){var posterContainerElement=this[$posterContainerElement];var defaultPosterElement=this[$defaultPosterElement];defaultPosterElement.removeAttribute('tabindex');defaultPosterElement.removeAttribute('aria-hidden');posterContainerElement.classList.add('show');var oldVisibility=this.modelIsVisible;this[$modelIsRevealed]=false;this[$announceModelVisibility](oldVisibility);this[$transitioned]=false;}},{key:$hidePoster,value:function value(){var _this69=this;this[$posterDismissalSource]=null;var posterContainerElement=this[$posterContainerElement];var defaultPosterElement=this[$defaultPosterElement];if(posterContainerElement.classList.contains('show')){posterContainerElement.classList.remove('show');var oldVisibility=this.modelIsVisible;this[$modelIsRevealed]=true;this[$announceModelVisibility](oldVisibility);posterContainerElement.addEventListener('transitionend',function(){requestAnimationFrame(function(){_this69[$transitioned]=true;var root=_this69.getRootNode();if(root&&root.activeElement===_this69){_this69[$userInputElement].focus();}defaultPosterElement.setAttribute('aria-hidden','true');defaultPosterElement.tabIndex=-1;_this69.dispatchEvent(new CustomEvent('poster-dismissed'));});},{once:true});}}},{key:$getModelIsVisible,value:function value(){return _get(_getPrototypeOf(LoadingModelViewerElement.prototype),$getModelIsVisible,this).call(this)&&this[$modelIsRevealed];}},{key:$hasTransitioned,value:function value(){return _get(_getPrototypeOf(LoadingModelViewerElement.prototype),$hasTransitioned,this).call(this)&&this[$transitioned];}},{key:$updateSource,value:function(){var _value8=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee28(){return regeneratorRuntime.wrap(function _callee28$(_context29){while(1){switch(_context29.prev=_context29.next){case 0:this[$lastReportedProgress]=0;if(this[$scene].model.currentGLTF==null||this.src==null||!this[$shouldAttemptPreload]()){this[$showPoster]();}_context29.next=4;return _get(_getPrototypeOf(LoadingModelViewerElement.prototype),$updateSource,this).call(this);case 4:case"end":return _context29.stop();}}},_callee28,this);}));function value(){return _value8.apply(this,arguments);}return value;}()}],[{key:"mapURLs",value:function mapURLs(callback){Renderer.singleton.loader[$loader].manager.setURLModifier(callback);}},{key:"dracoDecoderLocation",set:function set(value){CachingGLTFLoader.setDRACODecoderLocation(value);},get:function get(){return CachingGLTFLoader.getDRACODecoderLocation();}}]);return LoadingModelViewerElement;}(ModelViewerElement);__decorate$5([property({type:String})],LoadingModelViewerElement.prototype,"poster",void 0);__decorate$5([property({type:String})],LoadingModelViewerElement.prototype,"reveal",void 0);__decorate$5([property({type:String})],LoadingModelViewerElement.prototype,"loading",void 0);return LoadingModelViewerElement;};/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */ /**
          * The protocol between 3DOM execution contexts is strictly defined.
          * Only specific types of messages are allowed, and their types are
          * all included in the ThreeDOMMessageType map.
          */var ThreeDOMMessageType={// === Host -> Scene Graph ===
     // Used when the host execution context and scene graph execution context
     // are negotiating a connection
     HANDSHAKE:1,// A message that indicates that a custom script is meant to be imported
     // into the scene graph execution context
     IMPORT_SCRIPT:2,// A notification from the host execution context that the main Model has
     // changed, including the sparse, serialized scene graph of the new Model
     MODEL_CHANGE:3,// A notification that confirms or denies a request from the scene graph
     // context to mutate the scene graph
     MUTATION_RESULT:4,// === Scene Graph => Host ===
     // Notification sent to the host execution context to indicate that the
     // scene graph execution context has finished initializing
     CONTEXT_INITIALIZED:5,// A request from the scene graph execution context to mutate some detail
     // of the backing host scene graph
     MUTATE:6};/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var $ownerModel=Symbol('ownerModel');/**
          * The basic implementation for all 3DOM scene graph participants.
          * Scene graph nodes are distinguished by their "owner" Model. All scene
          * graph nodes have an owner Model associated with them except for the
          * sole Model in the scene graph, whose ownerModel property is not defined.
          */var ThreeDOMElement=/*#__PURE__*/function(){function ThreeDOMElement(kernel){_classCallCheck(this,ThreeDOMElement);if(kernel==null){throw new Error('Illegal constructor');}this[$ownerModel]=kernel.model;}/**
              * The Model of provenance for this scene graph element, or undefined if
              * element is itself a Model.
              */_createClass(ThreeDOMElement,[{key:"ownerModel",get:function get(){return this[$ownerModel];}}]);return ThreeDOMElement;}();/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var $kernel=Symbol('kernel');var $uri=Symbol('uri');var $name=Symbol('name');var Image=/*#__PURE__*/function(_ThreeDOMElement){_inherits(Image,_ThreeDOMElement);var _super36=_createSuper(Image);function Image(kernel,serialized){var _this70;_classCallCheck(this,Image);_this70=_super36.call(this,kernel);_this70[$kernel]=kernel;_this70[$uri]=serialized.uri||null;if(serialized.name!=null){_this70[$name]=serialized.name;}return _this70;}_createClass(Image,[{key:"setURI",value:function(){var _setURI=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee29(uri){return regeneratorRuntime.wrap(function _callee29$(_context30){while(1){switch(_context30.prev=_context30.next){case 0:_context30.next=2;return this[$kernel].mutate(this,'uri',uri);case 2:this[$uri]=uri;case 3:case"end":return _context30.stop();}}},_callee29,this);}));function setURI(_x26){return _setURI.apply(this,arguments);}return setURI;}()},{key:"name",get:function get(){return this[$name];}},{key:"type",get:function get(){return this.uri!=null?'external':'embedded';}},{key:"uri",get:function get(){return this[$uri];}}]);return Image;}(ThreeDOMElement);/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$c,_b$a,_c$4;var $pbrMetallicRoughness=Symbol('pbrMetallicRoughness');var $normalTexture=Symbol('normalTexture');var $occlusionTexture=Symbol('occlusionTexture');var $emissiveTexture=Symbol('emissiveTexture');var $kernel$1=Symbol('kernel');var $name$1=Symbol('name');/**
          * A Material represents a live material in the backing scene graph. Its
          * primary purpose is to give the user write access to discrete properties
          * (for example, the base color factor) of the backing material.
          */var Material$1=/*#__PURE__*/function(_ThreeDOMElement2){_inherits(Material$1,_ThreeDOMElement2);var _super37=_createSuper(Material$1);function Material$1(kernel,serialized){var _this71;_classCallCheck(this,Material$1);_this71=_super37.call(this,kernel);_this71[_a$c]=null;_this71[_b$a]=null;_this71[_c$4]=null;_this71[$kernel$1]=kernel;if(serialized.name!=null){_this71[$name$1]=serialized.name;}var pbrMetallicRoughness=serialized.pbrMetallicRoughness,normalTexture=serialized.normalTexture,occlusionTexture=serialized.occlusionTexture,emissiveTexture=serialized.emissiveTexture;_this71[$pbrMetallicRoughness]=kernel.deserialize('pbr-metallic-roughness',pbrMetallicRoughness);if(normalTexture!=null){_this71[$normalTexture]=kernel.deserialize('texture-info',normalTexture);}if(occlusionTexture!=null){_this71[$occlusionTexture]=kernel.deserialize('texture-info',occlusionTexture);}if(emissiveTexture!=null){_this71[$emissiveTexture]=kernel.deserialize('texture-info',emissiveTexture);}return _this71;}/**
              * The PBR properties that are assigned to this material, if any.
              */_createClass(Material$1,[{key:"pbrMetallicRoughness",get:function get(){return this[$pbrMetallicRoughness];}},{key:"normalTexture",get:function get(){return this[$normalTexture];}},{key:"occlusionTexture",get:function get(){return this[$occlusionTexture];}},{key:"emissiveTexture",get:function get(){return this[$emissiveTexture];}/**
              * The name of the material. Note that names are optional and not
              * guaranteed to be unique.
              */},{key:"name",get:function get(){return this[$name$1];}}]);return Material$1;}(ThreeDOMElement);_a$c=$normalTexture,_b$a=$occlusionTexture,_c$4=$emissiveTexture;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$d;var $materials=Symbol('material');var $kernel$2=Symbol('kernel');/**
          * A Model is the root element of a 3DOM scene graph. It is considered the
          * element of provenance for all other elements that participate in the same
          * graph. All other elements in the graph can be accessed in from the Model
          * in some fashion.
          */var Model$1=/*#__PURE__*/function(_ThreeDOMElement3){_inherits(Model$1,_ThreeDOMElement3);var _super38=_createSuper(Model$1);function Model$1(kernel,serialized){var _this72;_classCallCheck(this,Model$1);_this72=_super38.call(this,kernel);_this72[_a$d]=Object.freeze([]);_this72[$kernel$2]=kernel;var _iterator21=_createForOfIteratorHelper(serialized.materials),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var material=_step21.value;_this72[$kernel$2].deserialize('material',material);}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}return _this72;}/**
              * The set of Material elements in the graph, in sparse traversal order.
              * Note that this set will include any Materials that are not part of the
              * currently activate scene.
              *
              * TODO(#1002): This value needs to be sensitive to scene graph order
              */_createClass(Model$1,[{key:"materials",get:function get(){return this[$kernel$2].getElementsByType('material');}/**
              * A Model has no owner model; it owns itself.
              */},{key:"ownerModel",get:function get(){return this;}}]);return Model$1;}(ThreeDOMElement);_a$d=$materials;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$e,_b$b;var $kernel$3=Symbol('kernel');var $baseColorFactor=Symbol('baseColorFactor');var $baseColorTexture=Symbol('baseColorTexture');var $metallicRoughnessTexture=Symbol('metallicRoughnessTexture');var $metallicFactor=Symbol('metallicFactor');var $roughnessFactor=Symbol('roughnessFactor');/**
          * PBRMetallicRoughness exposes the PBR properties for a given Material.
          */var PBRMetallicRoughness=/*#__PURE__*/function(_ThreeDOMElement4){_inherits(PBRMetallicRoughness,_ThreeDOMElement4);var _super39=_createSuper(PBRMetallicRoughness);function PBRMetallicRoughness(kernel,serialized){var _this73;_classCallCheck(this,PBRMetallicRoughness);_this73=_super39.call(this,kernel);_this73[_a$e]=null;_this73[_b$b]=null;_this73[$kernel$3]=kernel;_this73[$baseColorFactor]=Object.freeze(serialized.baseColorFactor);_this73[$metallicFactor]=serialized.metallicFactor;_this73[$roughnessFactor]=serialized.roughnessFactor;var baseColorTexture=serialized.baseColorTexture,metallicRoughnessTexture=serialized.metallicRoughnessTexture;if(baseColorTexture!=null){_this73[$baseColorTexture]=kernel.deserialize('texture-info',baseColorTexture);}if(metallicRoughnessTexture!=null){_this73[$metallicRoughnessTexture]=kernel.deserialize('texture-info',metallicRoughnessTexture);}return _this73;}/**
              * The base color factor of the material in RGBA format.
              */_createClass(PBRMetallicRoughness,[{key:"setBaseColorFactor",/**
              * Set the base color factor of the material.
              *
              * @see ../api.ts
              */value:function(){var _setBaseColorFactor=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee30(color){return regeneratorRuntime.wrap(function _callee30$(_context31){while(1){switch(_context31.prev=_context31.next){case 0:_context31.next=2;return this[$kernel$3].mutate(this,'baseColorFactor',color);case 2:this[$baseColorFactor]=Object.freeze(color);case 3:case"end":return _context31.stop();}}},_callee30,this);}));function setBaseColorFactor(_x27){return _setBaseColorFactor.apply(this,arguments);}return setBaseColorFactor;}()/**
              * Set the metallic factor of the material.
              *
              * @see ../api.ts
              */},{key:"setMetallicFactor",value:function(){var _setMetallicFactor=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee31(factor){return regeneratorRuntime.wrap(function _callee31$(_context32){while(1){switch(_context32.prev=_context32.next){case 0:_context32.next=2;return this[$kernel$3].mutate(this,'metallicFactor',factor);case 2:this[$metallicFactor]=factor;case 3:case"end":return _context32.stop();}}},_callee31,this);}));function setMetallicFactor(_x28){return _setMetallicFactor.apply(this,arguments);}return setMetallicFactor;}()/**
              * Set the roughness factor of the material.
              *
              * @see ../api.ts
              */},{key:"setRoughnessFactor",value:function(){var _setRoughnessFactor=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee32(factor){return regeneratorRuntime.wrap(function _callee32$(_context33){while(1){switch(_context33.prev=_context33.next){case 0:_context33.next=2;return this[$kernel$3].mutate(this,'roughnessFactor',factor);case 2:this[$roughnessFactor]=factor;case 3:case"end":return _context33.stop();}}},_callee32,this);}));function setRoughnessFactor(_x29){return _setRoughnessFactor.apply(this,arguments);}return setRoughnessFactor;}()},{key:"baseColorFactor",get:function get(){return this[$baseColorFactor];}/**
              * The metalness factor of the material in range [0,1].
              */},{key:"metallicFactor",get:function get(){return this[$metallicFactor];}/**
              * The roughness factor of the material in range [0,1].
              */},{key:"roughnessFactor",get:function get(){return this[$roughnessFactor];}},{key:"baseColorTexture",get:function get(){return this[$baseColorTexture];}},{key:"metallicRoughnessTexture",get:function get(){return this[$metallicRoughnessTexture];}}]);return PBRMetallicRoughness;}(ThreeDOMElement);_a$e=$baseColorTexture,_b$b=$metallicRoughnessTexture;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$f,_b$c;var $kernel$4=Symbol('kernel');var $minFilter=Symbol('minFilter');var $magFilter=Symbol('magFilter');var $wrapS=Symbol('wrapS');var $wrapT=Symbol('wrapT');var $name$2=Symbol('name');var Sampler=/*#__PURE__*/function(_ThreeDOMElement5){_inherits(Sampler,_ThreeDOMElement5);var _super40=_createSuper(Sampler);function Sampler(kernel,serialized){var _this74;_classCallCheck(this,Sampler);_this74=_super40.call(this,kernel);_this74[_a$f]=null;_this74[_b$c]=null;_this74[$kernel$4]=kernel;if(serialized.name!=null){_this74[$name$2]=serialized.name;}_this74[$minFilter]=serialized.minFilter||null;_this74[$magFilter]=serialized.magFilter||null;_this74[$wrapS]=serialized.wrapS||10497;_this74[$wrapT]=serialized.wrapT||10497;return _this74;}_createClass(Sampler,[{key:"setMinFilter",value:function(){var _setMinFilter=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee33(filter){return regeneratorRuntime.wrap(function _callee33$(_context34){while(1){switch(_context34.prev=_context34.next){case 0:_context34.next=2;return this[$kernel$4].mutate(this,'minFilter',filter);case 2:this[$minFilter]=filter;case 3:case"end":return _context34.stop();}}},_callee33,this);}));function setMinFilter(_x30){return _setMinFilter.apply(this,arguments);}return setMinFilter;}()},{key:"setMagFilter",value:function(){var _setMagFilter=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee34(filter){return regeneratorRuntime.wrap(function _callee34$(_context35){while(1){switch(_context35.prev=_context35.next){case 0:_context35.next=2;return this[$kernel$4].mutate(this,'magFilter',filter);case 2:this[$magFilter]=filter;case 3:case"end":return _context35.stop();}}},_callee34,this);}));function setMagFilter(_x31){return _setMagFilter.apply(this,arguments);}return setMagFilter;}()},{key:"setWrapS",value:function(){var _setWrapS=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee35(mode){return regeneratorRuntime.wrap(function _callee35$(_context36){while(1){switch(_context36.prev=_context36.next){case 0:_context36.next=2;return this[$kernel$4].mutate(this,'wrapS',mode);case 2:this[$wrapS]=mode;case 3:case"end":return _context36.stop();}}},_callee35,this);}));function setWrapS(_x32){return _setWrapS.apply(this,arguments);}return setWrapS;}()},{key:"setWrapT",value:function(){var _setWrapT=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee36(mode){return regeneratorRuntime.wrap(function _callee36$(_context37){while(1){switch(_context37.prev=_context37.next){case 0:_context37.next=2;return this[$kernel$4].mutate(this,'wrapT',mode);case 2:this[$wrapT]=mode;case 3:case"end":return _context37.stop();}}},_callee36,this);}));function setWrapT(_x33){return _setWrapT.apply(this,arguments);}return setWrapT;}()},{key:"name",get:function get(){return this[$name$2];}},{key:"minFilter",get:function get(){return this[$minFilter];}},{key:"magFilter",get:function get(){return this[$magFilter];}},{key:"wrapS",get:function get(){return this[$wrapS];}},{key:"wrapT",get:function get(){return this[$wrapT];}}]);return Sampler;}(ThreeDOMElement);_a$f=$minFilter,_b$c=$magFilter;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$g;var $kernel$5=Symbol('kernel');var $texture=Symbol('texture');var TextureInfo=/*#__PURE__*/function(_ThreeDOMElement6){_inherits(TextureInfo,_ThreeDOMElement6);var _super41=_createSuper(TextureInfo);function TextureInfo(kernel,serialized){var _this75;_classCallCheck(this,TextureInfo);_this75=_super41.call(this,kernel);_this75[_a$g]=null;_this75[$kernel$5]=kernel;var texture=serialized.texture;if(texture!=null){_this75[$texture]=kernel.deserialize('texture',texture);}return _this75;}_createClass(TextureInfo,[{key:"setTexture",value:function(){var _setTexture=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee37(texture){return regeneratorRuntime.wrap(function _callee37$(_context38){while(1){switch(_context38.prev=_context38.next){case 0:_context38.next=2;return this[$kernel$5].mutate(this,'texture',texture);case 2:this[$texture]=texture;case 3:case"end":return _context38.stop();}}},_callee37,this);}));function setTexture(_x34){return _setTexture.apply(this,arguments);}return setTexture;}()},{key:"texture",get:function get(){return this[$texture];}}]);return TextureInfo;}(ThreeDOMElement);_a$g=$texture;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$h,_b$d;var $kernel$6=Symbol('kernel');var $source=Symbol('source');var $sampler=Symbol('sampler');var $name$3=Symbol('name');var Texture$1=/*#__PURE__*/function(_ThreeDOMElement7){_inherits(Texture$1,_ThreeDOMElement7);var _super42=_createSuper(Texture$1);function Texture$1(kernel,serialized){var _this76;_classCallCheck(this,Texture$1);_this76=_super42.call(this,kernel);_this76[_a$h]=null;_this76[_b$d]=null;_this76[$kernel$6]=kernel;var sampler=serialized.sampler,source=serialized.source,name=serialized.name;if(name!=null){_this76[$name$3]=name;}if(sampler!=null){_this76[$sampler]=kernel.deserialize('sampler',sampler);}if(source!=null){_this76[$source]=kernel.deserialize('image',source);}return _this76;}_createClass(Texture$1,[{key:"setSampler",value:function(){var _setSampler=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee38(sampler){return regeneratorRuntime.wrap(function _callee38$(_context39){while(1){switch(_context39.prev=_context39.next){case 0:_context39.next=2;return this[$kernel$6].mutate(this,'sampler',sampler);case 2:this[$sampler]=sampler;case 3:case"end":return _context39.stop();}}},_callee38,this);}));function setSampler(_x35){return _setSampler.apply(this,arguments);}return setSampler;}()},{key:"setSource",value:function(){var _setSource2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee39(image){return regeneratorRuntime.wrap(function _callee39$(_context40){while(1){switch(_context40.prev=_context40.next){case 0:_context40.next=2;return this[$kernel$6].mutate(this,'source',image);case 2:this[$source]=image;case 3:case"end":return _context40.stop();}}},_callee39,this);}));function setSource(_x36){return _setSource2.apply(this,arguments);}return setSource;}()},{key:"name",get:function get(){return this[$name$3];}},{key:"sampler",get:function get(){return this[$sampler];}},{key:"source",get:function get(){return this[$source];}}]);return Texture$1;}(ThreeDOMElement);_a$h=$source,_b$d=$sampler;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$i,_b$e,_c$5,_d$3,_e$2,_f$2;var ThreeDOMElementMap={'model':Model$1,'material':Material$1,'pbr-metallic-roughness':PBRMetallicRoughness,'image':Image,'sampler':Sampler,'texture':Texture$1,'texture-info':TextureInfo};var $onMessageEvent=Symbol('onMessageEvent');var $port=Symbol('port');var $model=Symbol('model');var $elementsByLocalId=Symbol('elementsByLocalId');var $localIdsByElement=Symbol('localIdsByElement');var $elementsByType=Symbol('elementsByType');var $pendingMutations=Symbol('pendingMutations');var $nextMutationId=Symbol('nextMutationId');/**
          * A ModelKernel is the core business logic implementation for a distinct
          * Model that has been exposed to a script execution context. The ModelKernel
          * is an internal detail, and should never be explicitly exposed to users of
          * a Model.
          *
          * The ModelKernel primarily handles deserializing scene graph elements, and
          * communicating mutations from the 3DOM execution context to the host
          * execution context where the backing scene graph lives.
          *
          * A ModelKernel also maintains a comprehensive map of elements by type to
          * assist scene graph elements in querying for their contemporaries.
          */var ModelKernel=/*#__PURE__*/function(){function ModelKernel(port,serialized){var _this77=this;_classCallCheck(this,ModelKernel);this[_a$i]=new Map();this[_b$e]=new Map();this[_c$5]=new Map();this[_d$3]=new Map();this[_e$2]=0;this[_f$2]=function(event){var data=event.data;switch(data&&data.type){case ThreeDOMMessageType.MUTATION_RESULT:{var message=data;var applied=message.applied,mutationId=message.mutationId;var pendingMutation=_this77[$pendingMutations].get(mutationId);_this77[$pendingMutations].delete(mutationId);if(pendingMutation!=null){applied?pendingMutation.resolve():pendingMutation.reject();}break;}}};var types=new Array('model','material','pbr-metallic-roughness','sampler','image','texture','texture-info');for(var _i348=0,_types=types;_i348<_types.length;_i348++){var type=_types[_i348];this[$elementsByType].set(type,new Set());}this[$port]=port;this[$port].addEventListener('message',this[$onMessageEvent]);this[$port].start();this[$model]=this.deserialize('model',serialized);}/**
              * The root scene graph element, a Model, that is the entrypoint for the
              * entire scene graph that is backed by this kernel.
              */_createClass(ModelKernel,[{key:"mutate",/**
              * Mutate a property of a property of a given scene graph element. All
              * direct mutations of the scene graph are considered asynchronous. This
              * method returns a Promise that resolves when the mutation has been
              * successfully applied to the backing scene graph, and rejects if the
              * mutation failed or is otherwise not allowed.
              *
              * TODO(#1006): How to validate values?
              */value:function(){var _mutate=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee40(element,property,value){var _this78=this;var id;return regeneratorRuntime.wrap(function _callee40$(_context41){while(1){switch(_context41.prev=_context41.next){case 0:if(this[$localIdsByElement].has(element)){_context41.next=2;break;}throw new Error('Cannot mutate unknown element');case 2:id=this[$localIdsByElement].get(element);if(_instanceof(value,ThreeDOMElement)){value=this[$localIdsByElement].get(value);}return _context41.abrupt("return",new Promise(function(resolve,reject){var mutationId=_this78[$nextMutationId]++;// TODO(#1006): Validate mutations before sending to host context:
     _this78[$port].postMessage({type:ThreeDOMMessageType.MUTATE,id:id,property:property,value:value,mutationId:mutationId});// TODO(#1011): Add timeout to reject this mutation:
     _this78[$pendingMutations].set(mutationId,{resolve:resolve,reject:reject});}));case 5:case"end":return _context41.stop();}}},_callee40,this);}));function mutate(_x37,_x38,_x39){return _mutate.apply(this,arguments);}return mutate;}()/**
              * Deserializes a JSON representation of a scene graph element into a live
              * element that is backed by this ModelKernel.
              */},{key:"deserialize",value:function deserialize(type,serialized){var id=serialized.id;// TODO: Add test to ensure that we don't double-deserialize elements
     if(this[$elementsByLocalId].has(id)){return this[$elementsByLocalId].get(id);}var ElementConstructor=ThreeDOMElementMap[type];if(ElementConstructor==null){throw new Error("Cannot deserialize unknown type: ".concat(type));}// eslint-disable-next-line @typescript-eslint/no-explicit-any
     var element=new ElementConstructor(this,serialized);this[$elementsByLocalId].set(id,element);this[$localIdsByElement].set(element,id);// We know that the all accepted types have been pre-populated in the
     // [$elementsByType] map:
     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
     this[$elementsByType].get(type).add(element);return element;}/**
              * Look up all scene graph elements given a type string. Type strings
              * are lower-cased, hyphenated versions of the constructor names of their
              * corresponding classes. For example, a query for 'pbr-metallic-roughness'
              * element types will yield the list of PBRMetallicRoughness elements in
              * sparse tree order.
              */},{key:"getElementsByType",value:function getElementsByType(type){if(!this[$elementsByType].has(type)){return[];}// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
     return Array.from(this[$elementsByType].get(type));}/**
              * Deactivate the ModelKernel. This has the effect of blocking all future
              * mutations to the scene graph. Once deactivated, a ModelKernel cannot be
              * reactivated.
              *
              * The ModelKernel should be deactivated before it is disposed of, or else
              * it will leak in memory.
              */},{key:"deactivate",value:function deactivate(){this[$port].close();this[$port].removeEventListener('message',this[$onMessageEvent]);}},{key:"model",get:function get(){return this[$model];}}]);return ModelKernel;}();_a$i=$elementsByLocalId,_b$e=$localIdsByElement,_c$5=$elementsByType,_d$3=$pendingMutations,_e$2=$nextMutationId,_f$2=$onMessageEvent;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$j;var $modelGraft=Symbol('modelGraft');var $port$1=Symbol('port');var $onMessageEvent$1=Symbol('onMessageEvent');/**
          * A ModelGraftManipulator is an internal construct intended to consolidate
          * any mutations that operate on the backing scene graph. It can be thought
          * of as a host execution context counterpart to the ModelKernel in the scene
          * graph execution context.
          */var ModelGraftManipulator=/*#__PURE__*/function(){function ModelGraftManipulator(modelGraft,port){var _this79=this;_classCallCheck(this,ModelGraftManipulator);this[_a$j]=/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee41(event){var data,applied,mutationId;return regeneratorRuntime.wrap(function _callee41$(_context42){while(1){switch(_context42.prev=_context42.next){case 0:data=event.data;if(!(data&&data.type)){_context42.next=12;break;}if(!(data.type===ThreeDOMMessageType.MUTATE)){_context42.next=12;break;}applied=false;mutationId=data.mutationId;_context42.prev=5;_context42.next=8;return _this79[$modelGraft].mutate(data.id,data.property,data.value);case 8:applied=true;case 9:_context42.prev=9;_this79[$port$1].postMessage({type:ThreeDOMMessageType.MUTATION_RESULT,applied:applied,mutationId:mutationId});return _context42.finish(9);case 12:case"end":return _context42.stop();}}},_callee41,null,[[5,,9,12]]);}));return function(_x40){return _ref10.apply(this,arguments);};}();this[$modelGraft]=modelGraft;this[$port$1]=port;this[$port$1].addEventListener('message',this[$onMessageEvent$1]);this[$port$1].start();}/**
              * Clean up internal state so that the ModelGraftManipulator can be properly
              * garbage collected.
              */_createClass(ModelGraftManipulator,[{key:"dispose",value:function dispose(){this[$port$1].removeEventListener('message',this[$onMessageEvent$1]);this[$port$1].close();}}]);return ModelGraftManipulator;}();_a$j=$onMessageEvent$1;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */ /**
          * Produces a "locally" unique ID. This ID is only guaranteed to be unique
          * over the lifetime of the function and in the current execution context.
          */var getLocallyUniqueId=function(){var id=0;return function(){return id++;};}();var $callbacks=Symbol('callbacks');var $visitMesh=Symbol('visitMesh');var $visitElement=Symbol('visitElement');var $visitNode=Symbol('visitNode');var $visitScene=Symbol('visitScene');var $visitMaterial=Symbol('visitMaterial');/**
          * GLTFTreeVisitor implements a deterministic traversal order of a valid,
          * deserialized glTF 2.0 model. It supports selective element visitation via
          * callbacks configured based on element type. For example, to visit all
          * materials in all scenes in a glTF:
          *
          * ```javascript
          * const visitor = new GLTFTreeVisitor({
          *   material: (material, index, hierarchy) => {
          *     // material is a glTF 2.0 Material
          *     // index is the index of material in gltf.materials
          *     // hierarchy includes ancestors of material in the glTF
          *   }
          * });
          *
          * visitor.visit(someInMemoryGLTF, { allScenes: true });
          * ```
          *
          * The traversal order of the visitor is pre-order, depth-first.
          *
          * Note that the traversal order is not guaranteed to correspond to the
          * index of a given element in any way. Rather, traversal order is based
          * on the hierarchical order of the scene graph.
          */var GLTFTreeVisitor=/*#__PURE__*/function(){function GLTFTreeVisitor(callbacks){_classCallCheck(this,GLTFTreeVisitor);this[$callbacks]=callbacks;}/**
              * Visit a given in-memory glTF via the configured callbacks of this visitor.
              * Optionally, all scenes may be visited (as opposed to just the active one).
              * Sparse traversal can also be specified, in which case elements that
              * re-appear multiple times in the scene graph will only be visited once.
              */_createClass(GLTFTreeVisitor,[{key:"visit",value:function visit(gltf){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var allScenes=!!options.allScenes;var sparse=!!options.sparse;var scenes=allScenes?gltf.scenes||[]:gltf.scenes&&gltf.scene!=null?[gltf.scenes[gltf.scene]]:[];var state={hierarchy:[],visited:new Set(),sparse:sparse,gltf:gltf};var _iterator22=_createForOfIteratorHelper(scenes),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var scene=_step22.value;this[$visitScene](gltf.scenes.indexOf(scene),state);}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}}},{key:$visitElement,value:function value(index,elementList,state,visit,traverse){if(elementList==null){return;}var element=elementList[index];var sparse=state.sparse,hierarchy=state.hierarchy,visited=state.visited;if(element==null){return;}if(sparse&&visited.has(element)){return;}visited.add(element);hierarchy.push(element);if(visit!=null){visit(element,index,hierarchy);}if(traverse!=null){traverse(element);}hierarchy.pop();}},{key:$visitScene,value:function value(index,state){var _this80=this;var gltf=state.gltf;var visit=this[$callbacks].scene;this[$visitElement](index,gltf.scenes,state,visit,function(scene){// A scene is not required to have a list of nodes
     if(scene.nodes==null){return;}var _iterator23=_createForOfIteratorHelper(scene.nodes),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var nodeIndex=_step23.value;_this80[$visitNode](nodeIndex,state);}}catch(err){_iterator23.e(err);}finally{_iterator23.f();}});}},{key:$visitNode,value:function value(index,state){var _this81=this;var gltf=state.gltf;var visit=this[$callbacks].node;this[$visitElement](index,gltf.nodes,state,visit,function(node){if(node.mesh!=null){_this81[$visitMesh](node.mesh,state);}if(node.children!=null){var _iterator24=_createForOfIteratorHelper(node.children),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var childNodeIndex=_step24.value;_this81[$visitNode](childNodeIndex,state);}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}}});}},{key:$visitMesh,value:function value(index,state){var _this82=this;var gltf=state.gltf;var visit=this[$callbacks].mesh;this[$visitElement](index,gltf.meshes,state,visit,function(mesh){var _iterator25=_createForOfIteratorHelper(mesh.primitives),_step25;try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var primitive=_step25.value;if(primitive.material!=null){_this82[$visitMaterial](primitive.material,state);}}}catch(err){_iterator25.e(err);}finally{_iterator25.f();}});}},{key:$visitMaterial,value:function value(index,state){var gltf=state.gltf;var visit=this[$callbacks].material;this[$visitElement](index,gltf.materials,state,visit);}}]);return GLTFTreeVisitor;}();/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$k;var $correlatedObjects=Symbol('correlatedObjects');var $sourceObject=Symbol('sourceObject');var $graft=Symbol('graft');var $id=Symbol('id');/**
          * A SerializableThreeDOMElement is the common primitive of all scene graph
          * elements that have been facaded in the host execution context. It adds
          * a common interface to these elements in support of convenient
          * serializability.
          */var ThreeDOMElement$1=/*#__PURE__*/function(){function ThreeDOMElement$1(graft,element){var correlatedObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,ThreeDOMElement$1);this[_a$k]=getLocallyUniqueId();this[$graft]=graft;this[$sourceObject]=element;this[$correlatedObjects]=correlatedObjects;graft.adopt(this);}/**
              * The Model of provenance for this scene graph element.
              */_createClass(ThreeDOMElement$1,[{key:"mutate",/**
              * Mutate a property of the scene graph element. Returns a promise that
              * resolves when the mutation has been successfully applied.
              */value:function mutate(_property,_value){throw new Error('Mutation not implemented for this element');}/**
              * Serialize the element in order to share it with a worker context.
              */},{key:"toJSON",value:function toJSON(){var serialized={id:this[$id]};var name=this.name;if(name!=null){serialized.name=name;}return serialized;}},{key:"ownerModel",get:function get(){return this[$graft].model;}/**
              * The unique ID that marks this element. In generally, an ID should only be
              * considered unique to the element in the context of its scene graph. These
              * IDs are not guaranteed to be stable across script executions.
              */},{key:"internalID",get:function get(){return this[$id];}/**
              * Some (but not all) scene graph elements may have an optional name. The
              * Object3D.prototype.name property is sometimes auto-generated by Three.js.
              * We only want to expose a name that is set in the source glTF, so Three.js
              * generated names are ignored.
              */},{key:"name",get:function get(){return this[$sourceObject].name||null;}/**
              * The backing Three.js scene graph construct for this element.
              */},{key:"correlatedObjects",get:function get(){return this[$correlatedObjects];}/**
              * The canonical GLTF or GLTFElement represented by this facade.
              */},{key:"sourceObject",get:function get(){return this[$sourceObject];}}]);return ThreeDOMElement$1;}();_a$k=$id;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$l;var loader=new ImageLoader();var $threeTextures=Symbol('threeTextures');var $bufferViewImages=Symbol('bufferViewImages');/**
          * Image facade implementation for Three.js textures
          */var Image$1=/*#__PURE__*/function(_ThreeDOMElement$){_inherits(Image$1,_ThreeDOMElement$);var _super43=_createSuper(Image$1);function Image$1(graft,image,correlatedTextures){var _this83;_classCallCheck(this,Image$1);_this83=_super43.call(this,graft,image,correlatedTextures);_this83[_a$l]=new WeakMap();if(image.bufferView!=null){var _iterator26=_createForOfIteratorHelper(correlatedTextures),_step26;try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var texture=_step26.value;_this83[$bufferViewImages].set(texture,texture.image);}}catch(err){_iterator26.e(err);}finally{_iterator26.f();}}return _this83;}_createClass(Image$1,[{key:"mutate",value:function(){var _mutate2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee42(property,value){var image,_iterator27,_step27,texture;return regeneratorRuntime.wrap(function _callee42$(_context43){while(1){switch(_context43.prev=_context43.next){case 0:image=null;if(!(property!=='uri')){_context43.next=3;break;}throw new Error("Cannot configure property \"".concat(property,"\" on Image"));case 3:if(!(value!=null)){_context43.next=7;break;}_context43.next=6;return new Promise(function(resolve,reject){loader.load(value,resolve,undefined,reject);});case 6:image=_context43.sent;case 7:_iterator27=_createForOfIteratorHelper(this[$threeTextures]);try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){texture=_step27.value;// If the URI is set to null but the Image had an associated buffer view
     // (this would happen if it started out as embedded), then fall back to
     // the cached object URL created by GLTFLoader:
     if(image==null&&this.sourceObject.bufferView!=null){texture.image=this[$bufferViewImages].get(texture);}else{texture.image=image;}texture.needsUpdate=true;}}catch(err){_iterator27.e(err);}finally{_iterator27.f();}case 9:case"end":return _context43.stop();}}},_callee42,this);}));function mutate(_x41,_x42){return _mutate2.apply(this,arguments);}return mutate;}()},{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(Image$1.prototype),"toJSON",this).call(this);var uri=this.sourceObject.uri;if(uri!=null){serialized.uri=uri;}return serialized;}},{key:$threeTextures,get:function get(){return this[$correlatedObjects];}}]);return Image$1;}(ThreeDOMElement$1);_a$l=$bufferViewImages;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var isMinFilter=function(){var minFilterValues=[9728,9729,9984,9985,9986,9987];return function(value){return minFilterValues.indexOf(value)>-1;};}();var isMagFilter=function(){var magFilterValues=[9728,9729];return function(value){return magFilterValues.indexOf(value)>-1;};}();var isWrapMode=function(){var wrapModes=[33071,33648,10497];return function(value){return wrapModes.indexOf(value)>-1;};}();var isValidSamplerValue=function isValidSamplerValue(property,value){switch(property){case'minFilter':return isMinFilter(value);case'magFilter':return isMagFilter(value);case'wrapS':case'wrapT':return isWrapMode(value);default:throw new Error("Cannot configure property \"".concat(property,"\" on Sampler"));}};// These defaults represent a convergence of glTF defaults for wrap mode and
     // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose its
     // own defaults for filters.
     // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler
     // @see https://threejs.org/docs/#api/en/textures/Texture
     var defaultValues={minFilter:9987,magFilter:9729,wrapS:10497,wrapT:10497};var $threeTextures$1=Symbol('threeTextures');/**
          * Sampler facade implementation for Three.js textures
          */var Sampler$1=/*#__PURE__*/function(_ThreeDOMElement$2){_inherits(Sampler$1,_ThreeDOMElement$2);var _super44=_createSuper(Sampler$1);_createClass(Sampler$1,[{key:$threeTextures$1,get:function get(){return this[$correlatedObjects];}}]);function Sampler$1(graft,sampler,correlatedTextures){_classCallCheck(this,Sampler$1);return _super44.call(this,graft,sampler,correlatedTextures);}_createClass(Sampler$1,[{key:"mutate",value:function(){var _mutate3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee43(property,value){var sampler,_iterator28,_step28,texture,_iterator29,_step29,_texture;return regeneratorRuntime.wrap(function _callee43$(_context44){while(1){switch(_context44.prev=_context44.next){case 0:sampler=this.sourceObject;if(value!=null){if(isValidSamplerValue(property,value)){sampler[property]=value;_iterator28=_createForOfIteratorHelper(this[$threeTextures$1]);try{for(_iterator28.s();!(_step28=_iterator28.n()).done;){texture=_step28.value;texture[property]=value;texture.needsUpdate=true;}}catch(err){_iterator28.e(err);}finally{_iterator28.f();}}}else if(property in sampler){delete sampler[property];_iterator29=_createForOfIteratorHelper(this[$threeTextures$1]);try{for(_iterator29.s();!(_step29=_iterator29.n()).done;){_texture=_step29.value;_texture[property]=defaultValues[property];_texture.needsUpdate=true;}}catch(err){_iterator29.e(err);}finally{_iterator29.f();}}case 2:case"end":return _context44.stop();}}},_callee43,this);}));function mutate(_x43,_x44){return _mutate3.apply(this,arguments);}return mutate;}()},{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(Sampler$1.prototype),"toJSON",this).call(this);var _this$sourceObject=this.sourceObject,minFilter=_this$sourceObject.minFilter,magFilter=_this$sourceObject.magFilter,wrapS=_this$sourceObject.wrapS,wrapT=_this$sourceObject.wrapT;if(minFilter!=null){serialized.minFilter=minFilter;}if(magFilter!=null){serialized.magFilter=magFilter;}if(wrapS!==10497){serialized.wrapS=wrapS;}if(wrapT!==10497){serialized.wrapT=wrapT;}return serialized;}}]);return Sampler$1;}(ThreeDOMElement$1);/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$m,_b$f;var $source$1=Symbol('source');var $sampler$1=Symbol('sampler');/**
          * Material facade implementation for Three.js materials
          */var Texture$2=/*#__PURE__*/function(_ThreeDOMElement$3){_inherits(Texture$2,_ThreeDOMElement$3);var _super45=_createSuper(Texture$2);function Texture$2(graft,texture,correlatedTextures){var _this84;_classCallCheck(this,Texture$2);_this84=_super45.call(this,graft,texture,correlatedTextures);_this84[_a$m]=null;_this84[_b$f]=null;var glTF=graft.correlatedSceneGraph.gltf;var samplerIndex=texture.sampler,imageIndex=texture.source;if(samplerIndex!=null){var sampler=glTF.samplers&&glTF.samplers[samplerIndex];if(sampler!=null){_this84[$sampler$1]=new Sampler$1(graft,sampler,correlatedTextures);}}if(imageIndex!=null){var image=glTF.images&&glTF.images[imageIndex];if(image!=null){_this84[$source$1]=new Image$1(graft,image,correlatedTextures);}}return _this84;}_createClass(Texture$2,[{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(Texture$2.prototype),"toJSON",this).call(this);var sampler=this.sampler,source=this.source;if(sampler!=null){serialized.sampler=sampler.toJSON();}if(source!=null){serialized.source=source.toJSON();}return serialized;}},{key:"sampler",get:function get(){return this[$sampler$1];}},{key:"source",get:function get(){return this[$source$1];}}]);return Texture$2;}(ThreeDOMElement$1);_a$m=$source$1,_b$f=$sampler$1;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$n;var $texture$1=Symbol('texture');/**
          * TextureInfo facade implementation for Three.js materials
          */var TextureInfo$1=/*#__PURE__*/function(_ThreeDOMElement$4){_inherits(TextureInfo$1,_ThreeDOMElement$4);var _super46=_createSuper(TextureInfo$1);function TextureInfo$1(graft,textureInfo,correlatedTextures){var _this85;_classCallCheck(this,TextureInfo$1);_this85=_super46.call(this,graft,textureInfo,correlatedTextures);_this85[_a$n]=null;var glTF=graft.correlatedSceneGraph.gltf;var textureIndex=textureInfo.index;var texture=textureIndex!=null&&glTF.textures!=null?glTF.textures[textureIndex]:null;if(texture!=null){_this85[$texture$1]=new Texture$2(graft,texture,correlatedTextures);}return _this85;}_createClass(TextureInfo$1,[{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(TextureInfo$1.prototype),"toJSON",this).call(this);var texture=this.texture;if(texture!=null){serialized.texture=texture.toJSON();}return serialized;}},{key:"texture",get:function get(){return this[$texture$1];}}]);return TextureInfo$1;}(ThreeDOMElement$1);_a$n=$texture$1;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$o,_b$g;var $threeMaterials=Symbol('threeMaterials');var $baseColorTexture$1=Symbol('baseColorTexture');var $metallicRoughnessTexture$1=Symbol('metallicRoughnessTexture');/**
          * PBR material properties facade implementation for Three.js materials
          */var PBRMetallicRoughness$1=/*#__PURE__*/function(_ThreeDOMElement$5){_inherits(PBRMetallicRoughness$1,_ThreeDOMElement$5);var _super47=_createSuper(PBRMetallicRoughness$1);function PBRMetallicRoughness$1(graft,pbrMetallicRoughness,correlatedMaterials){var _this86;_classCallCheck(this,PBRMetallicRoughness$1);_this86=_super47.call(this,graft,pbrMetallicRoughness,correlatedMaterials);_this86[_a$o]=null;_this86[_b$g]=null;var baseColorTexture=pbrMetallicRoughness.baseColorTexture,metallicRoughnessTexture=pbrMetallicRoughness.metallicRoughnessTexture;var baseColorTextures=new Set();var metallicRoughnessTextures=new Set();var _iterator30=_createForOfIteratorHelper(correlatedMaterials),_step30;try{for(_iterator30.s();!(_step30=_iterator30.n()).done;){var material=_step30.value;if(baseColorTexture!=null&&material.map!=null){baseColorTextures.add(material.map);}// NOTE: GLTFLoader users the same texture for metalnessMap and
     // roughnessMap in this case
     // @see https://github.com/mrdoob/three.js/blob/b4473c25816df4a09405c7d887d5c418ef47ee76/examples/js/loaders/GLTFLoader.js#L2173-L2174
     if(metallicRoughnessTexture!=null&&material.metalnessMap!=null){metallicRoughnessTextures.add(material.metalnessMap);}}}catch(err){_iterator30.e(err);}finally{_iterator30.f();}if(baseColorTextures.size>0){_this86[$baseColorTexture$1]=new TextureInfo$1(graft,baseColorTexture,baseColorTextures);}if(metallicRoughnessTextures.size>0){_this86[$metallicRoughnessTexture$1]=new TextureInfo$1(graft,metallicRoughnessTexture,metallicRoughnessTextures);}return _this86;}_createClass(PBRMetallicRoughness$1,[{key:"mutate",value:function(){var _mutate4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee44(property,value){var _iterator31,_step31,material,pbrMetallicRoughness,_iterator32,_step32,_material2,_pbrMetallicRoughness,_iterator33,_step33,_material3,_pbrMetallicRoughness2;return regeneratorRuntime.wrap(function _callee44$(_context45){while(1){switch(_context45.prev=_context45.next){case 0:if(['baseColorFactor','metallicFactor','roughnessFactor'].includes(property)){_context45.next=2;break;}throw new Error("Cannot mutate ".concat(property," on PBRMetallicRoughness"));case 2:_context45.t0=property;_context45.next=_context45.t0==='baseColorFactor'?5:_context45.t0==='metallicFactor'?8:_context45.t0==='roughnessFactor'?11:14;break;case 5:_iterator31=_createForOfIteratorHelper(this[$threeMaterials]);try{for(_iterator31.s();!(_step31=_iterator31.n()).done;){material=_step31.value;material.color.fromArray(value);material.opacity=value[3];pbrMetallicRoughness=this[$sourceObject];if(value===1&&value===1&&value===1&&value===1){delete pbrMetallicRoughness.baseColorFactor;}else{pbrMetallicRoughness.baseColorFactor=value;}}}catch(err){_iterator31.e(err);}finally{_iterator31.f();}return _context45.abrupt("break",14);case 8:_iterator32=_createForOfIteratorHelper(this[$threeMaterials]);try{for(_iterator32.s();!(_step32=_iterator32.n()).done;){_material2=_step32.value;_material2.metalness=value;_pbrMetallicRoughness=this[$sourceObject];_pbrMetallicRoughness.metallicFactor=value;}}catch(err){_iterator32.e(err);}finally{_iterator32.f();}return _context45.abrupt("break",14);case 11:_iterator33=_createForOfIteratorHelper(this[$threeMaterials]);try{for(_iterator33.s();!(_step33=_iterator33.n()).done;){_material3=_step33.value;_material3.roughness=value;_pbrMetallicRoughness2=this[$sourceObject];_pbrMetallicRoughness2.roughnessFactor=value;}}catch(err){_iterator33.e(err);}finally{_iterator33.f();}return _context45.abrupt("break",14);case 14:case"end":return _context45.stop();}}},_callee44,this);}));function mutate(_x45,_x46){return _mutate4.apply(this,arguments);}return mutate;}()},{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(PBRMetallicRoughness$1.prototype),"toJSON",this).call(this);var baseColorTexture=this.baseColorTexture,metallicRoughnessTexture=this.metallicRoughnessTexture,baseColorFactor=this.baseColorFactor,roughnessFactor=this.roughnessFactor,metallicFactor=this.metallicFactor;if(baseColorTexture!=null){serialized.baseColorTexture=baseColorTexture.toJSON();}if(baseColorFactor!=null){serialized.baseColorFactor=baseColorFactor;}if(metallicFactor!=null){serialized.metallicFactor=metallicFactor;}if(roughnessFactor!=null){serialized.roughnessFactor=roughnessFactor;}if(metallicRoughnessTexture!=null){serialized.metallicRoughnessTexture=metallicRoughnessTexture.toJSON();}return serialized;}},{key:(_a$o=$baseColorTexture$1,_b$g=$metallicRoughnessTexture$1,$threeMaterials),get:function get(){return this[$correlatedObjects];}},{key:"baseColorFactor",get:function get(){return this.sourceObject.baseColorFactor||[1,1,1,1];}},{key:"metallicFactor",get:function get(){return this.sourceObject.metallicFactor||0;}},{key:"roughnessFactor",get:function get(){return this.sourceObject.roughnessFactor||0;}},{key:"baseColorTexture",get:function get(){return this[$baseColorTexture$1];}},{key:"metallicRoughnessTexture",get:function get(){return this[$metallicRoughnessTexture$1];}}]);return PBRMetallicRoughness$1;}(ThreeDOMElement$1);/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$p,_b$h,_c$6,_d$4;var $pbrMetallicRoughness$1=Symbol('pbrMetallicRoughness');var $normalTexture$1=Symbol('normalTexture');var $occlusionTexture$1=Symbol('occlusionTexture');var $emissiveTexture$1=Symbol('emissiveTexture');/**
          * Material facade implementation for Three.js materials
          */var Material$2=/*#__PURE__*/function(_ThreeDOMElement$6){_inherits(Material$2,_ThreeDOMElement$6);var _super48=_createSuper(Material$2);function Material$2(graft,material,correlatedMaterials){var _this87;_classCallCheck(this,Material$2);_this87=_super48.call(this,graft,material,correlatedMaterials);_this87[_a$p]=null;_this87[_b$h]=null;_this87[_c$6]=null;_this87[_d$4]=null;var pbrMetallicRoughness=material.pbrMetallicRoughness,normalTexture=material.normalTexture,occlusionTexture=material.occlusionTexture,emissiveTexture=material.emissiveTexture;if(pbrMetallicRoughness!=null){_this87[$pbrMetallicRoughness$1]=new PBRMetallicRoughness$1(graft,pbrMetallicRoughness,correlatedMaterials);}var normalTextures=new Set();var occlusionTextures=new Set();var emissiveTextures=new Set();var _iterator34=_createForOfIteratorHelper(correlatedMaterials),_step34;try{for(_iterator34.s();!(_step34=_iterator34.n()).done;){var _material4=_step34.value;var normalMap=_material4.normalMap,aoMap=_material4.aoMap,emissiveMap=_material4.emissiveMap;if(normalTexture!=null&&normalMap!=null){normalTextures.add(normalMap);}if(occlusionTexture!=null&&aoMap!=null){occlusionTextures.add(aoMap);}if(emissiveTexture!=null&&emissiveMap!=null){emissiveTextures.add(emissiveMap);}}}catch(err){_iterator34.e(err);}finally{_iterator34.f();}if(normalTextures.size>0){_this87[$normalTexture$1]=new TextureInfo$1(graft,normalTexture,normalTextures);}if(occlusionTextures.size>0){_this87[$occlusionTexture$1]=new TextureInfo$1(graft,occlusionTexture,occlusionTextures);}if(emissiveTextures.size>0){_this87[$emissiveTexture$1]=new TextureInfo$1(graft,emissiveTexture,emissiveTextures);}return _this87;}_createClass(Material$2,[{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(Material$2.prototype),"toJSON",this).call(this);var pbrMetallicRoughness=this.pbrMetallicRoughness,normalTexture=this.normalTexture,occlusionTexture=this.occlusionTexture,emissiveTexture=this.emissiveTexture;if(pbrMetallicRoughness!=null){serialized.pbrMetallicRoughness=pbrMetallicRoughness.toJSON();}if(normalTexture!=null){serialized.normalTexture=normalTexture.toJSON();}if(occlusionTexture!=null){serialized.occlusionTexture=occlusionTexture.toJSON();}if(emissiveTexture!=null){serialized.emissiveTexture=emissiveTexture.toJSON();}return serialized;}},{key:"pbrMetallicRoughness",get:function get(){return this[$pbrMetallicRoughness$1];}},{key:"normalTexture",get:function get(){return this[$normalTexture$1];}},{key:"occlusionTexture",get:function get(){return this[$occlusionTexture$1];}},{key:"emissiveTexture",get:function get(){return this[$emissiveTexture$1];}}]);return Material$2;}(ThreeDOMElement$1);_a$p=$pbrMetallicRoughness$1,_b$h=$normalTexture$1,_c$6=$occlusionTexture$1,_d$4=$emissiveTexture$1;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$q,_b$i;var $modelUri=Symbol('modelUri');var $materials$1=Symbol('materials');/**
          * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.
          * Currently, the model only bothers itself with the materials in the Three.js
          * scene graph.
          */var Model$2=/*#__PURE__*/function(_ThreeDOMElement$7){_inherits(Model$2,_ThreeDOMElement$7);var _super49=_createSuper(Model$2);function Model$2(graft,modelUri,correlatedSceneGraph){var _this88;_classCallCheck(this,Model$2);_this88=_super49.call(this,graft,correlatedSceneGraph.gltf);_this88[_a$q]='';_this88[_b$i]=[];_this88[$modelUri]=modelUri;var visitor=new GLTFTreeVisitor({material:function material(_material5){_this88[$materials$1].push(new Material$2(graft,_material5,correlatedSceneGraph.gltfElementMap.get(_material5)));}});visitor.visit(correlatedSceneGraph.gltf,{sparse:true});return _this88;}/**
              * A flat list of all unique materials found in this scene graph. Materials
              * are listed in the order they appear during pre-order, depth-first traveral
              * of the scene graph.
              *
              * TODO(#1003): How do we handle non-active scenes?
              * TODO(#1002): Desctibe and enforce traversal order
              */_createClass(Model$2,[{key:"toJSON",value:function toJSON(){var serialized=_get(_getPrototypeOf(Model$2.prototype),"toJSON",this).call(this);serialized.modelUri=this[$modelUri];serialized.materials=this[$materials$1].map(function(material){return material.toJSON();});return serialized;}},{key:"materials",get:function get(){return this[$materials$1];}}]);return Model$2;}(ThreeDOMElement$1);_a$q=$modelUri,_b$i=$materials$1;/* @license
          * Copyright 2020 Google LLC. All Rights Reserved.
          * Licensed under the Apache License, Version 2.0 (the 'License');
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *     http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an 'AS IS' BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */var _a$r,_b$j;var $model$1=Symbol('model');var $correlatedSceneGraph$1=Symbol('correlatedSceneGraph');var $elementsByInternalId=Symbol('elementsByInternalId');var $eventDelegate$1=Symbol('eventDelegate');/**
          * ModelGraft
          *
          * This is a coordination primitive between a scene graph as represented by the
          * output for Three.js' GLTFLoader and a counterpart 3DOM facade. Since this is
          * the Three.js-specific implementation of the facade, the input is a GLTF-like
          * object whose keys refer to Three.js-specific constructs (e.g., gltf.scene is
          * a THREE.Scene).
          *
          * When created, the ModelGraft produces a Model that can be traversed and
          * manipulated to mutate the Three.js scene graph synchronously (but
          * indirectly). The benefit of this is that mutations to the Three.js scene can
          * be performed in a Three.js-agnostic fashion that is potentially portable to
          * alternative rendering backends.
          *
          * The scene graph representation produced by the ModelGraft is designed to
          * match the structures described in the glTF 2.0 spec as closely as possible.
          * Where there are deviations, it is usually for the purpose of making
          * synchronization easier, or else for ergonomics. For example, in glTF 2.0, the
          * graph is a series of flat arrays where nodes cross-reference each other by
          * index to represent hierarchy, but in a Model nodes have array members
          * containing refrences to their hierarchical children.
          *
          * An important goal of ModelGraft is to enable a scene in one JavaScript
          * context to be manipulated by script in a remote context, such as a distant
          * worker thread or even a different process. So, every node in the graph
          * is able to be serialized, and the serialized form includes an ID that is
          * locally unique to the ModelGraft instance that the node came from so that
          * the remote context can refer back to it. A ModelGraft can be thought of as
          * the host execution context counterpart to the ModelKernel in the scene graph
          * execution context.
          */var ModelGraft=/*#__PURE__*/function(){function ModelGraft(modelUri,correlatedSceneGraph){var _this89=this;_classCallCheck(this,ModelGraft);// NOTE(cdata): This eventDelegate hack is a quick trick to let us get the
     // EventTarget interface without implementing or requiring a full polyfill. We
     // should remove this once EventTarget is inheritable everywhere.
     this[_a$r]=document.createDocumentFragment();// NOTE(cdata): We declare each of these methods independently here so that we
     // can inherit the correct types from EventTarget's interface. Maybe there is
     // a better way to do this dynamically so that we don't repeat ourselves?
     this.addEventListener=function(){var _this89$$eventDelegat;return(_this89$$eventDelegat=_this89[$eventDelegate$1]).addEventListener.apply(_this89$$eventDelegat,arguments);};this.removeEventListener=function(){var _this89$$eventDelegat2;return(_this89$$eventDelegat2=_this89[$eventDelegate$1]).removeEventListener.apply(_this89$$eventDelegat2,arguments);};this.dispatchEvent=function(){var _this89$$eventDelegat3;return(_this89$$eventDelegat3=_this89[$eventDelegate$1]).dispatchEvent.apply(_this89$$eventDelegat3,arguments);};this[_b$j]=new Map();this[$correlatedSceneGraph$1]=correlatedSceneGraph;this[$model$1]=new Model$2(this,modelUri,correlatedSceneGraph);}_createClass(ModelGraft,[{key:"getElementByInternalId",value:function getElementByInternalId(id){var element=this[$elementsByInternalId].get(id);if(element==null){return null;}return element;}},{key:"adopt",value:function adopt(element){this[$elementsByInternalId].set(element.internalID,element);}},{key:"mutate",value:function(){var _mutate5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee45(id,property,value){var element;return regeneratorRuntime.wrap(function _callee45$(_context46){while(1){switch(_context46.prev=_context46.next){case 0:element=this.getElementByInternalId(id);_context46.next=3;return element.mutate(property,value);case 3:this.dispatchEvent(new CustomEvent('mutation',{detail:{element:element}}));case 4:case"end":return _context46.stop();}}},_callee45,this);}));function mutate(_x47,_x48,_x49){return _mutate5.apply(this,arguments);}return mutate;}()},{key:"correlatedSceneGraph",get:function get(){return this[$correlatedSceneGraph$1];}},{key:"model",get:function get(){return this[$model$1];}}]);return ModelGraft;}();_a$r=$eventDelegate$1,_b$j=$elementsByInternalId;//------------------------------------------------------------------------------
     // Constants
     //------------------------------------------------------------------------------
     var WEBGL_CONSTANTS={POINTS:0x0000,LINES:0x0001,LINE_LOOP:0x0002,LINE_STRIP:0x0003,TRIANGLES:0x0004,TRIANGLE_STRIP:0x0005,TRIANGLE_FAN:0x0006,UNSIGNED_BYTE:0x1401,UNSIGNED_SHORT:0x1403,FLOAT:0x1406,UNSIGNED_INT:0x1405,ARRAY_BUFFER:0x8892,ELEMENT_ARRAY_BUFFER:0x8893,NEAREST:0x2600,LINEAR:0x2601,NEAREST_MIPMAP_NEAREST:0x2700,LINEAR_MIPMAP_NEAREST:0x2701,NEAREST_MIPMAP_LINEAR:0x2702,LINEAR_MIPMAP_LINEAR:0x2703,CLAMP_TO_EDGE:33071,MIRRORED_REPEAT:33648,REPEAT:10497};var THREE_TO_WEBGL={};THREE_TO_WEBGL[NearestFilter]=WEBGL_CONSTANTS.NEAREST;THREE_TO_WEBGL[NearestMipmapNearestFilter]=WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;THREE_TO_WEBGL[NearestMipmapLinearFilter]=WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;THREE_TO_WEBGL[LinearFilter]=WEBGL_CONSTANTS.LINEAR;THREE_TO_WEBGL[LinearMipmapNearestFilter]=WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;THREE_TO_WEBGL[LinearMipmapLinearFilter]=WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;THREE_TO_WEBGL[ClampToEdgeWrapping]=WEBGL_CONSTANTS.CLAMP_TO_EDGE;THREE_TO_WEBGL[RepeatWrapping]=WEBGL_CONSTANTS.REPEAT;THREE_TO_WEBGL[MirroredRepeatWrapping]=WEBGL_CONSTANTS.MIRRORED_REPEAT;var PATH_PROPERTIES={scale:'scale',position:'translation',quaternion:'rotation',morphTargetInfluences:'weights'};//------------------------------------------------------------------------------
     // GLTF Exporter
     //------------------------------------------------------------------------------
     var GLTFExporter=function GLTFExporter(){};GLTFExporter.prototype={constructor:GLTFExporter,/**
               * Parse scenes and generate GLTF output
               * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes
               * @param  {Function} onDone  Callback on completed
               * @param  {Object} options options
               */parse:function parse(input,onDone,options){var DEFAULT_OPTIONS={binary:false,trs:false,onlyVisible:true,truncateDrawRange:true,embedImages:true,maxTextureSize:Infinity,animations:[],forcePowerOfTwoTextures:false,includeCustomExtensions:false};options=Object.assign({},DEFAULT_OPTIONS,options);if(options.animations.length>0){// Only TRS properties, and not matrices, may be targeted by animation.
     options.trs=true;}var outputJSON={asset:{version:"2.0",generator:"GLTFExporter"}};var byteOffset=0;var buffers=[];var pending=[];var nodeMap=new Map();var skins=[];var extensionsUsed={};var cachedData={meshes:new Map(),attributes:new Map(),attributesNormalized:new Map(),materials:new Map(),textures:new Map(),images:new Map()};var cachedCanvas;var uids=new Map();var uid=0;/**
                    * Assign and return a temporal unique id for an object
                    * especially which doesn't have .uuid
                    * @param  {Object} object
                    * @return {Integer}
                    */function getUID(object){if(!uids.has(object))uids.set(object,uid++);return uids.get(object);}/**
                    * Compare two arrays
                    * @param  {Array} array1 Array 1 to compare
                    * @param  {Array} array2 Array 2 to compare
                    * @return {Boolean}        Returns true if both arrays are equal
                    */function equalArray(array1,array2){return array1.length===array2.length&&array1.every(function(element,index){return element===array2[index];});}/**
                    * Converts a string to an ArrayBuffer.
                    * @param  {string} text
                    * @return {ArrayBuffer}
                    */function stringToArrayBuffer(text){if(window.TextEncoder!==undefined){return new TextEncoder().encode(text).buffer;}var array=new Uint8Array(new ArrayBuffer(text.length));for(var i=0,il=text.length;i<il;i++){var value=text.charCodeAt(i);// Replacing multi-byte character with space(0x20).
     array[i]=value>0xFF?0x20:value;}return array.buffer;}/**
                    * Get the min and max vectors from the given attribute
                    * @param  {BufferAttribute} attribute Attribute to find the min/max in range from start to start + count
                    * @param  {Integer} start
                    * @param  {Integer} count
                    * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)
                    */function getMinMax(attribute,start,count){var output={min:new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),max:new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)};for(var i=start;i<start+count;i++){for(var a=0;a<attribute.itemSize;a++){var value=attribute.array[i*attribute.itemSize+a];output.min[a]=Math.min(output.min[a],value);output.max[a]=Math.max(output.max[a],value);}}return output;}/**
                    * Checks if image size is POT.
                    *
                    * @param {Image} image The image to be checked.
                    * @returns {Boolean} Returns true if image size is POT.
                    *
                    */function isPowerOfTwo(image){return MathUtils.isPowerOfTwo(image.width)&&MathUtils.isPowerOfTwo(image.height);}/**
                    * Checks if normal attribute values are normalized.
                    *
                    * @param {BufferAttribute} normal
                    * @returns {Boolean}
                    *
                    */function isNormalizedNormalAttribute(normal){if(cachedData.attributesNormalized.has(normal)){return false;}var v=new Vector3();for(var i=0,il=normal.count;i<il;i++){// 0.0005 is from glTF-validator
     if(Math.abs(v.fromArray(normal.array,i*3).length()-1.0)>0.0005)return false;}return true;}/**
                    * Creates normalized normal buffer attribute.
                    *
                    * @param {BufferAttribute} normal
                    * @returns {BufferAttribute}
                    *
                    */function createNormalizedNormalAttribute(normal){if(cachedData.attributesNormalized.has(normal)){return cachedData.attributesNormalized.get(normal);}var attribute=normal.clone();var v=new Vector3();for(var i=0,il=attribute.count;i<il;i++){v.fromArray(attribute.array,i*3);if(v.x===0&&v.y===0&&v.z===0){// if values can't be normalized set (1, 0, 0)
     v.setX(1.0);}else{v.normalize();}v.toArray(attribute.array,i*3);}cachedData.attributesNormalized.set(normal,attribute);return attribute;}/**
                    * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.
                    * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment
                    *
                    * @param {Integer} bufferSize The size the original buffer.
                    * @returns {Integer} new buffer size with required padding.
                    *
                    */function getPaddedBufferSize(bufferSize){return Math.ceil(bufferSize/4)*4;}/**
                    * Returns a buffer aligned to 4-byte boundary.
                    *
                    * @param {ArrayBuffer} arrayBuffer Buffer to pad
                    * @param {Integer} paddingByte (Optional)
                    * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer
                    */function getPaddedArrayBuffer(arrayBuffer,paddingByte){paddingByte=paddingByte||0;var paddedLength=getPaddedBufferSize(arrayBuffer.byteLength);if(paddedLength!==arrayBuffer.byteLength){var array=new Uint8Array(paddedLength);array.set(new Uint8Array(arrayBuffer));if(paddingByte!==0){for(var i=arrayBuffer.byteLength;i<paddedLength;i++){array[i]=paddingByte;}}return array.buffer;}return arrayBuffer;}/**
                    * Serializes a userData.
                    *
                    * @param {THREE.Object3D|THREE.Material} object
                    * @param {Object} gltfProperty
                    */function serializeUserData(object,gltfProperty){if(Object.keys(object.userData).length===0){return;}try{var json=JSON.parse(JSON.stringify(object.userData));if(options.includeCustomExtensions&&json.gltfExtensions){if(gltfProperty.extensions===undefined){gltfProperty.extensions={};}for(var extensionName in json.gltfExtensions){gltfProperty.extensions[extensionName]=json.gltfExtensions[extensionName];extensionsUsed[extensionName]=true;}delete json.gltfExtensions;}if(Object.keys(json).length>0){gltfProperty.extras=json;}}catch(error){console.warn('THREE.GLTFExporter: userData of \''+object.name+'\' '+'won\'t be serialized because of JSON.stringify error - '+error.message);}}/**
                    * Applies a texture transform, if present, to the map definition. Requires
                    * the KHR_texture_transform extension.
                    */function applyTextureTransform(mapDef,texture){var didTransform=false;var transformDef={};if(texture.offset.x!==0||texture.offset.y!==0){transformDef.offset=texture.offset.toArray();didTransform=true;}if(texture.rotation!==0){transformDef.rotation=texture.rotation;didTransform=true;}if(texture.repeat.x!==1||texture.repeat.y!==1){transformDef.scale=texture.repeat.toArray();didTransform=true;}if(didTransform){mapDef.extensions=mapDef.extensions||{};mapDef.extensions['KHR_texture_transform']=transformDef;extensionsUsed['KHR_texture_transform']=true;}}/**
                    * Process a buffer to append to the default one.
                    * @param  {ArrayBuffer} buffer
                    * @return {Integer}
                    */function processBuffer(buffer){if(!outputJSON.buffers){outputJSON.buffers=[{byteLength:0}];}// All buffers are merged before export.
     buffers.push(buffer);return 0;}/**
                    * Process and generate a BufferView
                    * @param  {BufferAttribute} attribute
                    * @param  {number} componentType
                    * @param  {number} start
                    * @param  {number} count
                    * @param  {number} target (Optional) Target usage of the BufferView
                    * @return {Object}
                    */function processBufferView(attribute,componentType,start,count,target){if(!outputJSON.bufferViews){outputJSON.bufferViews=[];}// Create a new dataview and dump the attribute's array into it
     var componentSize;if(componentType===WEBGL_CONSTANTS.UNSIGNED_BYTE){componentSize=1;}else if(componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT){componentSize=2;}else{componentSize=4;}var byteLength=getPaddedBufferSize(count*attribute.itemSize*componentSize);var dataView=new DataView(new ArrayBuffer(byteLength));var offset=0;for(var i=start;i<start+count;i++){for(var a=0;a<attribute.itemSize;a++){var value;if(attribute.itemSize>4){// no support for interleaved data for itemSize > 4
     value=attribute.array[i*attribute.itemSize+a];}else{if(a===0)value=attribute.getX(i);else if(a===1)value=attribute.getY(i);else if(a===2)value=attribute.getZ(i);else if(a===3)value=attribute.getW(i);}if(componentType===WEBGL_CONSTANTS.FLOAT){dataView.setFloat32(offset,value,true);}else if(componentType===WEBGL_CONSTANTS.UNSIGNED_INT){dataView.setUint32(offset,value,true);}else if(componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT){dataView.setUint16(offset,value,true);}else if(componentType===WEBGL_CONSTANTS.UNSIGNED_BYTE){dataView.setUint8(offset,value);}offset+=componentSize;}}var gltfBufferView={buffer:processBuffer(dataView.buffer),byteOffset:byteOffset,byteLength:byteLength};if(target!==undefined)gltfBufferView.target=target;if(target===WEBGL_CONSTANTS.ARRAY_BUFFER){// Only define byteStride for vertex attributes.
     gltfBufferView.byteStride=attribute.itemSize*componentSize;}byteOffset+=byteLength;outputJSON.bufferViews.push(gltfBufferView);// @TODO Merge bufferViews where possible.
     var output={id:outputJSON.bufferViews.length-1,byteLength:0};return output;}/**
                    * Process and generate a BufferView from an image Blob.
                    * @param {Blob} blob
                    * @return {Promise<Integer>}
                    */function processBufferViewImage(blob){if(!outputJSON.bufferViews){outputJSON.bufferViews=[];}return new Promise(function(resolve){var reader=new window.FileReader();reader.readAsArrayBuffer(blob);reader.onloadend=function(){var buffer=getPaddedArrayBuffer(reader.result);var bufferView={buffer:processBuffer(buffer),byteOffset:byteOffset,byteLength:buffer.byteLength};byteOffset+=buffer.byteLength;outputJSON.bufferViews.push(bufferView);resolve(outputJSON.bufferViews.length-1);};});}/**
                    * Process attribute to generate an accessor
                    * @param  {BufferAttribute} attribute Attribute to process
                    * @param  {BufferGeometry} geometry (Optional) Geometry used for truncated draw range
                    * @param  {Integer} start (Optional)
                    * @param  {Integer} count (Optional)
                    * @return {Integer}           Index of the processed accessor on the "accessors" array
                    */function processAccessor(attribute,geometry,start,count){var types={1:'SCALAR',2:'VEC2',3:'VEC3',4:'VEC4',16:'MAT4'};var componentType;// Detect the component type of the attribute array (float, uint or ushort)
     if(attribute.array.constructor===Float32Array){componentType=WEBGL_CONSTANTS.FLOAT;}else if(attribute.array.constructor===Uint32Array){componentType=WEBGL_CONSTANTS.UNSIGNED_INT;}else if(attribute.array.constructor===Uint16Array){componentType=WEBGL_CONSTANTS.UNSIGNED_SHORT;}else if(attribute.array.constructor===Uint8Array){componentType=WEBGL_CONSTANTS.UNSIGNED_BYTE;}else{throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');}if(start===undefined)start=0;if(count===undefined)count=attribute.count;// @TODO Indexed buffer geometry with drawRange not supported yet
     if(options.truncateDrawRange&&geometry!==undefined&&geometry.index===null){var end=start+count;var end2=geometry.drawRange.count===Infinity?attribute.count:geometry.drawRange.start+geometry.drawRange.count;start=Math.max(start,geometry.drawRange.start);count=Math.min(end,end2)-start;if(count<0)count=0;}// Skip creating an accessor if the attribute doesn't have data to export
     if(count===0){return null;}var minMax=getMinMax(attribute,start,count);var bufferViewTarget;// If geometry isn't provided, don't infer the target usage of the bufferView. For
     // animation samplers, target must not be set.
     if(geometry!==undefined){bufferViewTarget=attribute===geometry.index?WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER:WEBGL_CONSTANTS.ARRAY_BUFFER;}var bufferView=processBufferView(attribute,componentType,start,count,bufferViewTarget);var gltfAccessor={bufferView:bufferView.id,byteOffset:bufferView.byteOffset,componentType:componentType,count:count,max:minMax.max,min:minMax.min,type:types[attribute.itemSize]};if(attribute.normalized===true){gltfAccessor.normalized=true;}if(!outputJSON.accessors){outputJSON.accessors=[];}outputJSON.accessors.push(gltfAccessor);return outputJSON.accessors.length-1;}/**
                    * Process image
                    * @param  {Image} image to process
                    * @param  {Integer} format of the image (e.g. THREE.RGBFormat, RGBAFormat etc)
                    * @param  {Boolean} flipY before writing out the image
                    * @return {Integer}     Index of the processed texture in the "images" array
                    */function processImage(image,format,flipY){if(!cachedData.images.has(image)){cachedData.images.set(image,{});}var cachedImages=cachedData.images.get(image);var mimeType=format===RGBAFormat?'image/png':'image/jpeg';var key=mimeType+":flipY/"+flipY.toString();if(cachedImages[key]!==undefined){return cachedImages[key];}if(!outputJSON.images){outputJSON.images=[];}var gltfImage={mimeType:mimeType};if(options.embedImages){var canvas=cachedCanvas=cachedCanvas||document.createElement('canvas');canvas.width=Math.min(image.width,options.maxTextureSize);canvas.height=Math.min(image.height,options.maxTextureSize);if(options.forcePowerOfTwoTextures&&!isPowerOfTwo(canvas)){console.warn('GLTFExporter: Resized non-power-of-two image.',image);canvas.width=MathUtils.floorPowerOfTwo(canvas.width);canvas.height=MathUtils.floorPowerOfTwo(canvas.height);}var ctx=canvas.getContext('2d');if(flipY===true){ctx.translate(0,canvas.height);ctx.scale(1,-1);}ctx.drawImage(image,0,0,canvas.width,canvas.height);if(options.binary===true){pending.push(new Promise(function(resolve){canvas.toBlob(function(blob){processBufferViewImage(blob).then(function(bufferViewIndex){gltfImage.bufferView=bufferViewIndex;resolve();});},mimeType);}));}else{gltfImage.uri=canvas.toDataURL(mimeType);}}else{gltfImage.uri=image.src;}outputJSON.images.push(gltfImage);var index=outputJSON.images.length-1;cachedImages[key]=index;return index;}/**
                    * Process sampler
                    * @param  {Texture} map Texture to process
                    * @return {Integer}     Index of the processed texture in the "samplers" array
                    */function processSampler(map){if(!outputJSON.samplers){outputJSON.samplers=[];}var gltfSampler={magFilter:THREE_TO_WEBGL[map.magFilter],minFilter:THREE_TO_WEBGL[map.minFilter],wrapS:THREE_TO_WEBGL[map.wrapS],wrapT:THREE_TO_WEBGL[map.wrapT]};outputJSON.samplers.push(gltfSampler);return outputJSON.samplers.length-1;}/**
                    * Process texture
                    * @param  {Texture} map Map to process
                    * @return {Integer}     Index of the processed texture in the "textures" array
                    */function processTexture(map){if(cachedData.textures.has(map)){return cachedData.textures.get(map);}if(!outputJSON.textures){outputJSON.textures=[];}var gltfTexture={sampler:processSampler(map),source:processImage(map.image,map.format,map.flipY)};if(map.name){gltfTexture.name=map.name;}outputJSON.textures.push(gltfTexture);var index=outputJSON.textures.length-1;cachedData.textures.set(map,index);return index;}/**
                    * Process material
                    * @param  {THREE.Material} material Material to process
                    * @return {Integer}      Index of the processed material in the "materials" array
                    */function processMaterial(material){if(cachedData.materials.has(material)){return cachedData.materials.get(material);}if(material.isShaderMaterial){console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');return null;}if(!outputJSON.materials){outputJSON.materials=[];}// @QUESTION Should we avoid including any attribute that has the default value?
     var gltfMaterial={pbrMetallicRoughness:{}};if(material.isMeshBasicMaterial){gltfMaterial.extensions={KHR_materials_unlit:{}};extensionsUsed['KHR_materials_unlit']=true;}else if(material.isGLTFSpecularGlossinessMaterial){gltfMaterial.extensions={KHR_materials_pbrSpecularGlossiness:{}};extensionsUsed['KHR_materials_pbrSpecularGlossiness']=true;}else if(!material.isMeshStandardMaterial){console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');}// pbrMetallicRoughness.baseColorFactor
     var color=material.color.toArray().concat([material.opacity]);if(!equalArray(color,[1,1,1,1])){gltfMaterial.pbrMetallicRoughness.baseColorFactor=color;}if(material.isMeshStandardMaterial){gltfMaterial.pbrMetallicRoughness.metallicFactor=material.metalness;gltfMaterial.pbrMetallicRoughness.roughnessFactor=material.roughness;}else if(material.isMeshBasicMaterial){gltfMaterial.pbrMetallicRoughness.metallicFactor=0.0;gltfMaterial.pbrMetallicRoughness.roughnessFactor=0.9;}else{gltfMaterial.pbrMetallicRoughness.metallicFactor=0.5;gltfMaterial.pbrMetallicRoughness.roughnessFactor=0.5;}// pbrSpecularGlossiness diffuse, specular and glossiness factor
     if(material.isGLTFSpecularGlossinessMaterial){if(gltfMaterial.pbrMetallicRoughness.baseColorFactor){gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor=gltfMaterial.pbrMetallicRoughness.baseColorFactor;}var specularFactor=[1,1,1];material.specular.toArray(specularFactor,0);gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor=specularFactor;gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor=material.glossiness;}// pbrMetallicRoughness.metallicRoughnessTexture
     if(material.metalnessMap||material.roughnessMap){if(material.metalnessMap===material.roughnessMap){var metalRoughMapDef={index:processTexture(material.metalnessMap)};applyTextureTransform(metalRoughMapDef,material.metalnessMap);gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture=metalRoughMapDef;}else{console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');}}// pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture
     if(material.map){var baseColorMapDef={index:processTexture(material.map)};applyTextureTransform(baseColorMapDef,material.map);if(material.isGLTFSpecularGlossinessMaterial){gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture=baseColorMapDef;}gltfMaterial.pbrMetallicRoughness.baseColorTexture=baseColorMapDef;}// pbrSpecularGlossiness specular map
     if(material.isGLTFSpecularGlossinessMaterial&&material.specularMap){var specularMapDef={index:processTexture(material.specularMap)};applyTextureTransform(specularMapDef,material.specularMap);gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture=specularMapDef;}if(material.emissive){// emissiveFactor
     var emissive=material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();if(!equalArray(emissive,[0,0,0])){gltfMaterial.emissiveFactor=emissive;}// emissiveTexture
     if(material.emissiveMap){var emissiveMapDef={index:processTexture(material.emissiveMap)};applyTextureTransform(emissiveMapDef,material.emissiveMap);gltfMaterial.emissiveTexture=emissiveMapDef;}}// normalTexture
     if(material.normalMap){var normalMapDef={index:processTexture(material.normalMap)};if(material.normalScale&&material.normalScale.x!==-1){if(material.normalScale.x!==material.normalScale.y){console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');}normalMapDef.scale=material.normalScale.x;}applyTextureTransform(normalMapDef,material.normalMap);gltfMaterial.normalTexture=normalMapDef;}// occlusionTexture
     if(material.aoMap){var occlusionMapDef={index:processTexture(material.aoMap),texCoord:1};if(material.aoMapIntensity!==1.0){occlusionMapDef.strength=material.aoMapIntensity;}applyTextureTransform(occlusionMapDef,material.aoMap);gltfMaterial.occlusionTexture=occlusionMapDef;}// alphaMode
     if(material.transparent){gltfMaterial.alphaMode='BLEND';}else{if(material.alphaTest>0.0){gltfMaterial.alphaMode='MASK';gltfMaterial.alphaCutoff=material.alphaTest;}}// doubleSided
     if(material.side===DoubleSide){gltfMaterial.doubleSided=true;}if(material.name!==''){gltfMaterial.name=material.name;}serializeUserData(material,gltfMaterial);outputJSON.materials.push(gltfMaterial);var index=outputJSON.materials.length-1;cachedData.materials.set(material,index);return index;}/**
                    * Process mesh
                    * @param  {THREE.Mesh} mesh Mesh to process
                    * @return {Integer}      Index of the processed mesh in the "meshes" array
                    */function processMesh(mesh){var meshCacheKeyParts=[mesh.geometry.uuid];if(Array.isArray(mesh.material)){for(var i=0,l=mesh.material.length;i<l;i++){meshCacheKeyParts.push(mesh.material[i].uuid);}}else{meshCacheKeyParts.push(mesh.material.uuid);}var meshCacheKey=meshCacheKeyParts.join(':');if(cachedData.meshes.has(meshCacheKey)){return cachedData.meshes.get(meshCacheKey);}var geometry=mesh.geometry;var mode;// Use the correct mode
     if(mesh.isLineSegments){mode=WEBGL_CONSTANTS.LINES;}else if(mesh.isLineLoop){mode=WEBGL_CONSTANTS.LINE_LOOP;}else if(mesh.isLine){mode=WEBGL_CONSTANTS.LINE_STRIP;}else if(mesh.isPoints){mode=WEBGL_CONSTANTS.POINTS;}else{mode=mesh.material.wireframe?WEBGL_CONSTANTS.LINES:WEBGL_CONSTANTS.TRIANGLES;}if(!geometry.isBufferGeometry){console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.');geometry=new BufferGeometry().setFromObject(mesh);}var gltfMesh={};var attributes={};var primitives=[];var targets=[];// Conversion between attributes names in threejs and gltf spec
     var nameConversion={uv:'TEXCOORD_0',uv2:'TEXCOORD_1',color:'COLOR_0',skinWeight:'WEIGHTS_0',skinIndex:'JOINTS_0'};var originalNormal=geometry.getAttribute('normal');if(originalNormal!==undefined&&!isNormalizedNormalAttribute(originalNormal)){console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');geometry.setAttribute('normal',createNormalizedNormalAttribute(originalNormal));}// @QUESTION Detect if .vertexColors = true?
     // For every attribute create an accessor
     var modifiedAttribute=null;for(var attributeName in geometry.attributes){// Ignore morph target attributes, which are exported later.
     if(attributeName.substr(0,5)==='morph')continue;var attribute=geometry.attributes[attributeName];attributeName=nameConversion[attributeName]||attributeName.toUpperCase();// Prefix all geometry attributes except the ones specifically
     // listed in the spec; non-spec attributes are considered custom.
     var validVertexAttributes=/^(POSITION|NORMAL|TANGENT|TEXCOORD_\d+|COLOR_\d+|JOINTS_\d+|WEIGHTS_\d+)$/;if(!validVertexAttributes.test(attributeName)){attributeName='_'+attributeName;}if(cachedData.attributes.has(getUID(attribute))){attributes[attributeName]=cachedData.attributes.get(getUID(attribute));continue;}// JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.
     modifiedAttribute=null;var array=attribute.array;if(attributeName==='JOINTS_0'&&!_instanceof(array,Uint16Array)&&!_instanceof(array,Uint8Array)){console.warn('GLTFExporter: Attribute "skinIndex" converted to type UNSIGNED_SHORT.');modifiedAttribute=new BufferAttribute(new Uint16Array(array),attribute.itemSize,attribute.normalized);}var accessor=processAccessor(modifiedAttribute||attribute,geometry);if(accessor!==null){attributes[attributeName]=accessor;cachedData.attributes.set(getUID(attribute),accessor);}}if(originalNormal!==undefined)geometry.setAttribute('normal',originalNormal);// Skip if no exportable attributes found
     if(Object.keys(attributes).length===0){return null;}// Morph targets
     if(mesh.morphTargetInfluences!==undefined&&mesh.morphTargetInfluences.length>0){var weights=[];var targetNames=[];var reverseDictionary={};if(mesh.morphTargetDictionary!==undefined){for(var key in mesh.morphTargetDictionary){reverseDictionary[mesh.morphTargetDictionary[key]]=key;}}for(var i=0;i<mesh.morphTargetInfluences.length;++i){var target={};var warned=false;for(var attributeName in geometry.morphAttributes){// glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.
     // Three.js doesn't support TANGENT yet.
     if(attributeName!=='position'&&attributeName!=='normal'){if(!warned){console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');warned=true;}continue;}var attribute=geometry.morphAttributes[attributeName][i];var gltfAttributeName=attributeName.toUpperCase();// Three.js morph attribute has absolute values while the one of glTF has relative values.
     //
     // glTF 2.0 Specification:
     // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets
     var baseAttribute=geometry.attributes[attributeName];if(cachedData.attributes.has(getUID(attribute))){target[gltfAttributeName]=cachedData.attributes.get(getUID(attribute));continue;}// Clones attribute not to override
     var relativeAttribute=attribute.clone();if(!geometry.morphTargetsRelative){for(var j=0,jl=attribute.count;j<jl;j++){relativeAttribute.setXYZ(j,attribute.getX(j)-baseAttribute.getX(j),attribute.getY(j)-baseAttribute.getY(j),attribute.getZ(j)-baseAttribute.getZ(j));}}target[gltfAttributeName]=processAccessor(relativeAttribute,geometry);cachedData.attributes.set(getUID(baseAttribute),target[gltfAttributeName]);}targets.push(target);weights.push(mesh.morphTargetInfluences[i]);if(mesh.morphTargetDictionary!==undefined)targetNames.push(reverseDictionary[i]);}gltfMesh.weights=weights;if(targetNames.length>0){gltfMesh.extras={};gltfMesh.extras.targetNames=targetNames;}}var isMultiMaterial=Array.isArray(mesh.material);if(isMultiMaterial&&geometry.groups.length===0)return null;var materials=isMultiMaterial?mesh.material:[mesh.material];var groups=isMultiMaterial?geometry.groups:[{materialIndex:0,start:undefined,count:undefined}];for(var i=0,il=groups.length;i<il;i++){var primitive={mode:mode,attributes:attributes};serializeUserData(geometry,primitive);if(targets.length>0)primitive.targets=targets;if(geometry.index!==null){var cacheKey=getUID(geometry.index);if(groups[i].start!==undefined||groups[i].count!==undefined){cacheKey+=':'+groups[i].start+':'+groups[i].count;}if(cachedData.attributes.has(cacheKey)){primitive.indices=cachedData.attributes.get(cacheKey);}else{primitive.indices=processAccessor(geometry.index,geometry,groups[i].start,groups[i].count);cachedData.attributes.set(cacheKey,primitive.indices);}if(primitive.indices===null)delete primitive.indices;}var material=processMaterial(materials[groups[i].materialIndex]);if(material!==null){primitive.material=material;}primitives.push(primitive);}gltfMesh.primitives=primitives;if(!outputJSON.meshes){outputJSON.meshes=[];}outputJSON.meshes.push(gltfMesh);var index=outputJSON.meshes.length-1;cachedData.meshes.set(meshCacheKey,index);return index;}/**
                    * Process camera
                    * @param  {THREE.Camera} camera Camera to process
                    * @return {Integer}      Index of the processed mesh in the "camera" array
                    */function processCamera(camera){if(!outputJSON.cameras){outputJSON.cameras=[];}var isOrtho=camera.isOrthographicCamera;var gltfCamera={type:isOrtho?'orthographic':'perspective'};if(isOrtho){gltfCamera.orthographic={xmag:camera.right*2,ymag:camera.top*2,zfar:camera.far<=0?0.001:camera.far,znear:camera.near<0?0:camera.near};}else{gltfCamera.perspective={aspectRatio:camera.aspect,yfov:MathUtils.degToRad(camera.fov),zfar:camera.far<=0?0.001:camera.far,znear:camera.near<0?0:camera.near};}if(camera.name!==''){gltfCamera.name=camera.type;}outputJSON.cameras.push(gltfCamera);return outputJSON.cameras.length-1;}/**
                    * Creates glTF animation entry from AnimationClip object.
                    *
                    * Status:
                    * - Only properties listed in PATH_PROPERTIES may be animated.
                    *
                    * @param {THREE.AnimationClip} clip
                    * @param {THREE.Object3D} root
                    * @return {number}
                    */function processAnimation(clip,root){if(!outputJSON.animations){outputJSON.animations=[];}clip=GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(),root);var tracks=clip.tracks;var channels=[];var samplers=[];for(var i=0;i<tracks.length;++i){var track=tracks[i];var trackBinding=PropertyBinding.parseTrackName(track.name);var trackNode=PropertyBinding.findNode(root,trackBinding.nodeName);var trackProperty=PATH_PROPERTIES[trackBinding.propertyName];if(trackBinding.objectName==='bones'){if(trackNode.isSkinnedMesh===true){trackNode=trackNode.skeleton.getBoneByName(trackBinding.objectIndex);}else{trackNode=undefined;}}if(!trackNode||!trackProperty){console.warn('THREE.GLTFExporter: Could not export animation track "%s".',track.name);return null;}var inputItemSize=1;var outputItemSize=track.values.length/track.times.length;if(trackProperty===PATH_PROPERTIES.morphTargetInfluences){outputItemSize/=trackNode.morphTargetInfluences.length;}var interpolation;// @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE
     // Detecting glTF cubic spline interpolant by checking factory method's special property
     // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return
     // valid value from .getInterpolation().
     if(track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline===true){interpolation='CUBICSPLINE';// itemSize of CUBICSPLINE keyframe is 9
     // (VEC3 * 3: inTangent, splineVertex, and outTangent)
     // but needs to be stored as VEC3 so dividing by 3 here.
     outputItemSize/=3;}else if(track.getInterpolation()===InterpolateDiscrete){interpolation='STEP';}else{interpolation='LINEAR';}samplers.push({input:processAccessor(new BufferAttribute(track.times,inputItemSize)),output:processAccessor(new BufferAttribute(track.values,outputItemSize)),interpolation:interpolation});channels.push({sampler:samplers.length-1,target:{node:nodeMap.get(trackNode),path:trackProperty}});}outputJSON.animations.push({name:clip.name||'clip_'+outputJSON.animations.length,samplers:samplers,channels:channels});return outputJSON.animations.length-1;}function processSkin(object){var node=outputJSON.nodes[nodeMap.get(object)];var skeleton=object.skeleton;if(skeleton===undefined)return null;var rootJoint=object.skeleton.bones[0];if(rootJoint===undefined)return null;var joints=[];var inverseBindMatrices=new Float32Array(skeleton.bones.length*16);for(var i=0;i<skeleton.bones.length;++i){joints.push(nodeMap.get(skeleton.bones[i]));skeleton.boneInverses[i].toArray(inverseBindMatrices,i*16);}if(outputJSON.skins===undefined){outputJSON.skins=[];}outputJSON.skins.push({inverseBindMatrices:processAccessor(new BufferAttribute(inverseBindMatrices,16)),joints:joints,skeleton:nodeMap.get(rootJoint)});var skinIndex=node.skin=outputJSON.skins.length-1;return skinIndex;}function processLight(light){var lightDef={};if(light.name)lightDef.name=light.name;lightDef.color=light.color.toArray();lightDef.intensity=light.intensity;if(light.isDirectionalLight){lightDef.type='directional';}else if(light.isPointLight){lightDef.type='point';if(light.distance>0)lightDef.range=light.distance;}else if(light.isSpotLight){lightDef.type='spot';if(light.distance>0)lightDef.range=light.distance;lightDef.spot={};lightDef.spot.innerConeAngle=(light.penumbra-1.0)*light.angle*-1.0;lightDef.spot.outerConeAngle=light.angle;}if(light.decay!==undefined&&light.decay!==2){console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, '+'and expects light.decay=2.');}if(light.target&&(light.target.parent!==light||light.target.position.x!==0||light.target.position.y!==0||light.target.position.z!==-1)){console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, '+'make light.target a child of the light with position 0,0,-1.');}var lights=outputJSON.extensions['KHR_lights_punctual'].lights;lights.push(lightDef);return lights.length-1;}/**
                    * Process Object3D node
                    * @param  {THREE.Object3D} node Object3D to processNode
                    * @return {Integer}      Index of the node in the nodes list
                    */function processNode(object){if(!outputJSON.nodes){outputJSON.nodes=[];}var gltfNode={};if(options.trs){var rotation=object.quaternion.toArray();var position=object.position.toArray();var scale=object.scale.toArray();if(!equalArray(rotation,[0,0,0,1])){gltfNode.rotation=rotation;}if(!equalArray(position,[0,0,0])){gltfNode.translation=position;}if(!equalArray(scale,[1,1,1])){gltfNode.scale=scale;}}else{if(object.matrixAutoUpdate){object.updateMatrix();}if(!equalArray(object.matrix.elements,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])){gltfNode.matrix=object.matrix.elements;}}// We don't export empty strings name because it represents no-name in Three.js.
     if(object.name!==''){gltfNode.name=String(object.name);}serializeUserData(object,gltfNode);if(object.isMesh||object.isLine||object.isPoints){var mesh=processMesh(object);if(mesh!==null){gltfNode.mesh=mesh;}}else if(object.isCamera){gltfNode.camera=processCamera(object);}else if(object.isDirectionalLight||object.isPointLight||object.isSpotLight){if(!extensionsUsed['KHR_lights_punctual']){outputJSON.extensions=outputJSON.extensions||{};outputJSON.extensions['KHR_lights_punctual']={lights:[]};extensionsUsed['KHR_lights_punctual']=true;}gltfNode.extensions=gltfNode.extensions||{};gltfNode.extensions['KHR_lights_punctual']={light:processLight(object)};}else if(object.isLight){console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.',object);return null;}if(object.isSkinnedMesh){skins.push(object);}if(object.children.length>0){var children=[];for(var i=0,l=object.children.length;i<l;i++){var child=object.children[i];if(child.visible||options.onlyVisible===false){var node=processNode(child);if(node!==null){children.push(node);}}}if(children.length>0){gltfNode.children=children;}}outputJSON.nodes.push(gltfNode);var nodeIndex=outputJSON.nodes.length-1;nodeMap.set(object,nodeIndex);return nodeIndex;}/**
                    * Process Scene
                    * @param  {Scene} node Scene to process
                    */function processScene(scene){if(!outputJSON.scenes){outputJSON.scenes=[];outputJSON.scene=0;}var gltfScene={};if(scene.name!==''){gltfScene.name=scene.name;}outputJSON.scenes.push(gltfScene);var nodes=[];for(var i=0,l=scene.children.length;i<l;i++){var child=scene.children[i];if(child.visible||options.onlyVisible===false){var node=processNode(child);if(node!==null){nodes.push(node);}}}if(nodes.length>0){gltfScene.nodes=nodes;}serializeUserData(scene,gltfScene);}/**
                    * Creates a Scene to hold a list of objects and parse it
                    * @param  {Array} objects List of objects to process
                    */function processObjects(objects){var scene=new Scene();scene.name='AuxScene';for(var i=0;i<objects.length;i++){// We push directly to children instead of calling `add` to prevent
     // modify the .parent and break its original scene and hierarchy
     scene.children.push(objects[i]);}processScene(scene);}function processInput(input){input=_instanceof(input,Array)?input:[input];var objectsWithoutScene=[];for(var i=0;i<input.length;i++){if(_instanceof(input[i],Scene)){processScene(input[i]);}else{objectsWithoutScene.push(input[i]);}}if(objectsWithoutScene.length>0){processObjects(objectsWithoutScene);}for(var i=0;i<skins.length;++i){processSkin(skins[i]);}for(var i=0;i<options.animations.length;++i){processAnimation(options.animations[i],input[0]);}}processInput(input);Promise.all(pending).then(function(){// Merge buffers.
     var blob=new Blob(buffers,{type:'application/octet-stream'});// Declare extensions.
     var extensionsUsedList=Object.keys(extensionsUsed);if(extensionsUsedList.length>0)outputJSON.extensionsUsed=extensionsUsedList;// Update bytelength of the single buffer.
     if(outputJSON.buffers&&outputJSON.buffers.length>0)outputJSON.buffers[0].byteLength=blob.size;if(options.binary===true){// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification
     var GLB_HEADER_BYTES=12;var GLB_HEADER_MAGIC=0x46546C67;var GLB_VERSION=2;var GLB_CHUNK_PREFIX_BYTES=8;var GLB_CHUNK_TYPE_JSON=0x4E4F534A;var GLB_CHUNK_TYPE_BIN=0x004E4942;var reader=new window.FileReader();reader.readAsArrayBuffer(blob);reader.onloadend=function(){// Binary chunk.
     var binaryChunk=getPaddedArrayBuffer(reader.result);var binaryChunkPrefix=new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));binaryChunkPrefix.setUint32(0,binaryChunk.byteLength,true);binaryChunkPrefix.setUint32(4,GLB_CHUNK_TYPE_BIN,true);// JSON chunk.
     var jsonChunk=getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)),0x20);var jsonChunkPrefix=new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));jsonChunkPrefix.setUint32(0,jsonChunk.byteLength,true);jsonChunkPrefix.setUint32(4,GLB_CHUNK_TYPE_JSON,true);// GLB header.
     var header=new ArrayBuffer(GLB_HEADER_BYTES);var headerView=new DataView(header);headerView.setUint32(0,GLB_HEADER_MAGIC,true);headerView.setUint32(4,GLB_VERSION,true);var totalByteLength=GLB_HEADER_BYTES+jsonChunkPrefix.byteLength+jsonChunk.byteLength+binaryChunkPrefix.byteLength+binaryChunk.byteLength;headerView.setUint32(8,totalByteLength,true);var glbBlob=new Blob([header,jsonChunkPrefix,jsonChunk,binaryChunkPrefix,binaryChunk],{type:'application/octet-stream'});var glbReader=new window.FileReader();glbReader.readAsArrayBuffer(glbBlob);glbReader.onloadend=function(){onDone(glbReader.result);};};}else{if(outputJSON.buffers&&outputJSON.buffers.length>0){var reader=new window.FileReader();reader.readAsDataURL(blob);reader.onloadend=function(){var base64data=reader.result;outputJSON.buffers[0].uri=base64data;onDone(outputJSON);};}else{onDone(outputJSON);}}});}};GLTFExporter.Utils={insertKeyframe:function insertKeyframe(track,time){var tolerance=0.001;// 1ms
     var valueSize=track.getValueSize();var times=new track.TimeBufferType(track.times.length+1);var values=new track.ValueBufferType(track.values.length+valueSize);var interpolant=track.createInterpolant(new track.ValueBufferType(valueSize));var index;if(track.times.length===0){times[0]=time;for(var i=0;i<valueSize;i++){values[i]=0;}index=0;}else if(time<track.times[0]){if(Math.abs(track.times[0]-time)<tolerance)return 0;times[0]=time;times.set(track.times,1);values.set(interpolant.evaluate(time),0);values.set(track.values,valueSize);index=0;}else if(time>track.times[track.times.length-1]){if(Math.abs(track.times[track.times.length-1]-time)<tolerance){return track.times.length-1;}times[times.length-1]=time;times.set(track.times,0);values.set(track.values,0);values.set(interpolant.evaluate(time),track.values.length);index=times.length-1;}else{for(var i=0;i<track.times.length;i++){if(Math.abs(track.times[i]-time)<tolerance)return i;if(track.times[i]<time&&track.times[i+1]>time){times.set(track.times.slice(0,i+1),0);times[i+1]=time;times.set(track.times.slice(i+1),i+2);values.set(track.values.slice(0,(i+1)*valueSize),0);values.set(interpolant.evaluate(time),(i+1)*valueSize);values.set(track.values.slice((i+1)*valueSize),(i+2)*valueSize);index=i+1;break;}}}track.times=times;track.values=values;return index;},mergeMorphTargetTracks:function mergeMorphTargetTracks(clip,root){var tracks=[];var mergedTracks={};var sourceTracks=clip.tracks;for(var i=0;i<sourceTracks.length;++i){var sourceTrack=sourceTracks[i];var sourceTrackBinding=PropertyBinding.parseTrackName(sourceTrack.name);var sourceTrackNode=PropertyBinding.findNode(root,sourceTrackBinding.nodeName);if(sourceTrackBinding.propertyName!=='morphTargetInfluences'||sourceTrackBinding.propertyIndex===undefined){// Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.
     tracks.push(sourceTrack);continue;}if(sourceTrack.createInterpolant!==sourceTrack.InterpolantFactoryMethodDiscrete&&sourceTrack.createInterpolant!==sourceTrack.InterpolantFactoryMethodLinear){if(sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){// This should never happen, because glTF morph target animations
     // affect all targets already.
     throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');}console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');sourceTrack=sourceTrack.clone();sourceTrack.setInterpolation(InterpolateLinear);}var targetCount=sourceTrackNode.morphTargetInfluences.length;var targetIndex=sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];if(targetIndex===undefined){throw new Error('THREE.GLTFExporter: Morph target name not found: '+sourceTrackBinding.propertyIndex);}var mergedTrack;// If this is the first time we've seen this object, create a new
     // track to store merged keyframe data for each morph target.
     if(mergedTracks[sourceTrackNode.uuid]===undefined){mergedTrack=sourceTrack.clone();var values=new mergedTrack.ValueBufferType(targetCount*mergedTrack.times.length);for(var j=0;j<mergedTrack.times.length;j++){values[j*targetCount+targetIndex]=mergedTrack.values[j];}// We need to take into consideration the intended target node
     // of our original un-merged morphTarget animation.
     mergedTrack.name=sourceTrackBinding.nodeName+'.morphTargetInfluences';mergedTrack.values=values;mergedTracks[sourceTrackNode.uuid]=mergedTrack;tracks.push(mergedTrack);continue;}var sourceInterpolant=sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));mergedTrack=mergedTracks[sourceTrackNode.uuid];// For every existing keyframe of the merged track, write a (possibly
     // interpolated) value from the source track.
     for(var j=0;j<mergedTrack.times.length;j++){mergedTrack.values[j*targetCount+targetIndex]=sourceInterpolant.evaluate(mergedTrack.times[j]);}// For every existing keyframe of the source track, write a (possibly
     // new) keyframe to the merged track. Values from the previous loop may
     // be written again, but keyframes are de-duplicated.
     for(var j=0;j<sourceTrack.times.length;j++){var keyframeIndex=this.insertKeyframe(mergedTrack,sourceTrack.times[j]);mergedTrack.values[keyframeIndex*targetCount+targetIndex]=sourceTrack.values[j];}}clip.tracks=tracks;return clip;}};var __decorate$6=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var $updateThreeSide=Symbol('updateThreeSide');var $currentGLTF$1=Symbol('currentGLTF');var $modelGraft$1=Symbol('modelGraft');var $mainPort=Symbol('mainPort');var $threePort=Symbol('threePort');var $manipulator=Symbol('manipulator');var $modelKernel=Symbol('modelKernel');var $onModelChange=Symbol('onModelChange');var $onModelGraftMutation=Symbol('onModelGraftMutation');var SceneGraphMixin=function SceneGraphMixin(ModelViewerElement){var _a,_b,_c,_d,_e,_f,_g;var _h;var SceneGraphModelViewerElement=/*#__PURE__*/function(_ModelViewerElement7){_inherits(SceneGraphModelViewerElement,_ModelViewerElement7);var _super50=_createSuper(SceneGraphModelViewerElement);function SceneGraphModelViewerElement(){var _this90;_classCallCheck(this,SceneGraphModelViewerElement);_this90=_super50.apply(this,arguments);_this90[_h]=null;_this90[_a]=null;_this90[_b]=null;_this90[_c]=null;_this90[_d]=null;_this90[_e]=null;_this90[_f]=function(event){var data=event.data;if(data&&data.type===ThreeDOMMessageType.MODEL_CHANGE){var serialized=data.model;var currentKernel=_this90[$modelKernel];if(currentKernel!=null){currentKernel.deactivate();}else if(serialized==null){return;}if(serialized!=null){_this90[$modelKernel]=new ModelKernel(data.port,serialized);}else{_this90[$modelKernel]=null;}_this90.dispatchEvent(new CustomEvent('scene-graph-ready',{detail:{url:serialized?serialized.modelUri:null}}));}};_this90[_g]=function(_event){_this90[$needsRender]();};return _this90;}_createClass(SceneGraphModelViewerElement,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(SceneGraphModelViewerElement.prototype),"connectedCallback",this).call(this);var _MessageChannel=new MessageChannel(),port1=_MessageChannel.port1,port2=_MessageChannel.port2;port1.start();port2.start();this[$mainPort]=port1;this[$threePort]=port2;this[$mainPort].onmessage=this[$onModelChange];}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(SceneGraphModelViewerElement.prototype),"disconnectedCallback",this).call(this);this[$mainPort].close();this[$threePort].close();this[$mainPort]=null;this[$threePort]=null;if(this[$manipulator]!=null){this[$manipulator].dispose();}if(this[$modelKernel]!=null){this[$modelKernel].deactivate();}}},{key:"updated",value:function updated(changedProperties){_get(_getPrototypeOf(SceneGraphModelViewerElement.prototype),"updated",this).call(this,changedProperties);if(changedProperties.has($modelGraft$1)){var oldModelGraft=changedProperties.get($modelGraft$1);if(oldModelGraft!=null){oldModelGraft.removeEventListener('mutation',this[$onModelGraftMutation]);}var modelGraft=this[$modelGraft$1];if(modelGraft!=null){modelGraft.addEventListener('mutation',this[$onModelGraftMutation]);}}}},{key:(_h=$modelGraft$1,_a=$currentGLTF$1,_b=$mainPort,_c=$threePort,_d=$manipulator,_e=$modelKernel,$onModelLoad),value:function value(){_get(_getPrototypeOf(SceneGraphModelViewerElement.prototype),$onModelLoad,this).call(this);this[$updateThreeSide]();}},{key:$updateThreeSide,value:function value(){var scene=this[$scene];var model=scene.model;var currentGLTF=model.currentGLTF;var modelGraft=null;var manipulator=null;if(currentGLTF!=null){var correlatedSceneGraph=currentGLTF.correlatedSceneGraph;var currentModelGraft=this[$modelGraft$1];var currentManipulator=this[$manipulator];if(correlatedSceneGraph!=null){if(currentManipulator!=null){currentManipulator.dispose();}if(currentModelGraft!=null&&currentGLTF===this[$currentGLTF$1]){return;}modelGraft=new ModelGraft(model.url||'',correlatedSceneGraph);var channel=null;if(modelGraft!=null&&modelGraft.model!=null){channel=new MessageChannel();manipulator=new ModelGraftManipulator(modelGraft,channel.port1);this[$threePort].postMessage({type:ThreeDOMMessageType.MODEL_CHANGE,model:modelGraft.model.toJSON(),port:channel.port2},[channel.port2]);}else{this[$threePort].postMessage({type:ThreeDOMMessageType.MODEL_CHANGE,model:null,port:null});}}}this[$modelGraft$1]=modelGraft;this[$manipulator]=manipulator;this[$currentGLTF$1]=currentGLTF;}},{key:"exportScene",value:function(){var _exportScene=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee47(options){var model;return regeneratorRuntime.wrap(function _callee47$(_context48){while(1){switch(_context48.prev=_context48.next){case 0:model=this[$scene].model;return _context48.abrupt("return",new Promise(/*#__PURE__*/function(){var _ref11=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee46(resolve,reject){var opts,shadow,visible,exporter;return regeneratorRuntime.wrap(function _callee46$(_context47){while(1){switch(_context47.prev=_context47.next){case 0:if(!(model==null)){_context47.next=2;break;}return _context47.abrupt("return",reject('Model missing or not yet loaded'));case 2:opts={binary:true,onlyVisible:true,maxTextureSize:Infinity,forcePowerOfTwoTextures:false,includeCustomExtensions:false,embedImages:true};Object.assign(opts,options);opts.animations=model.animations;opts.truncateDrawRange=true;shadow=model[$shadow];visible=false;if(shadow!=null){visible=shadow.visible;shadow.visible=false;}exporter=new GLTFExporter();exporter.parse(model.modelContainer,function(gltf){return resolve(new Blob([opts.binary?gltf:JSON.stringify(gltf)],{type:opts.binary?'application/octet-stream':'application/json'}));},opts);if(shadow!=null){shadow.visible=visible;}case 12:case"end":return _context47.stop();}}},_callee46);}));return function(_x51,_x52){return _ref11.apply(this,arguments);};}()));case 2:case"end":return _context48.stop();}}},_callee47,this);}));function exportScene(_x50){return _exportScene.apply(this,arguments);}return exportScene;}()},{key:"model",get:function get(){var kernel=this[$modelKernel];return kernel?kernel.model:undefined;}}]);return SceneGraphModelViewerElement;}(ModelViewerElement);_f=$onModelChange,_g=$onModelGraftMutation;__decorate$6([property({type:Object})],SceneGraphModelViewerElement.prototype,_h,void 0);return SceneGraphModelViewerElement;};var __decorate$7=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof undefined==="function")r=undefined(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var DEFAULT_ROTATION_SPEED=Math.PI/32;var AUTO_ROTATE_DELAY_DEFAULT=3000;var rotationRateIntrinsics={basis:[degreesToRadians(numberNode(DEFAULT_ROTATION_SPEED,'rad'))],keywords:{auto:[null]}};var $autoRotateStartTime=Symbol('autoRotateStartTime');var $radiansPerSecond=Symbol('radiansPerSecond');var $syncRotationRate=Symbol('syncRotationRate');var $cameraChangeHandler=Symbol('cameraChangeHandler');var $onCameraChange=Symbol('onCameraChange');var StagingMixin=function StagingMixin(ModelViewerElement){var _a,_b,_c;var StagingModelViewerElement=/*#__PURE__*/function(_ModelViewerElement8){_inherits(StagingModelViewerElement,_ModelViewerElement8);var _super51=_createSuper(StagingModelViewerElement);function StagingModelViewerElement(){var _this91;_classCallCheck(this,StagingModelViewerElement);_this91=_super51.apply(this,arguments);_this91.autoRotate=false;_this91.autoRotateDelay=AUTO_ROTATE_DELAY_DEFAULT;_this91.rotationPerSecond='auto';_this91[_a]=performance.now();_this91[_b]=0;_this91[_c]=function(event){return _this91[$onCameraChange](event);};return _this91;}_createClass(StagingModelViewerElement,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(StagingModelViewerElement.prototype),"connectedCallback",this).call(this);this.addEventListener('camera-change',this[$cameraChangeHandler]);this[$autoRotateStartTime]=performance.now();}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(StagingModelViewerElement.prototype),"disconnectedCallback",this).call(this);this.removeEventListener('camera-change',this[$cameraChangeHandler]);this[$autoRotateStartTime]=performance.now();}},{key:"updated",value:function updated(changedProperties){_get(_getPrototypeOf(StagingModelViewerElement.prototype),"updated",this).call(this,changedProperties);if(changedProperties.has('autoRotate')){this[$autoRotateStartTime]=performance.now();}}},{key:(_a=$autoRotateStartTime,_b=$radiansPerSecond,_c=$cameraChangeHandler,$syncRotationRate),value:function value(style){this[$radiansPerSecond]=style[0];}},{key:$tick$1,value:function value(time,delta){_get(_getPrototypeOf(StagingModelViewerElement.prototype),$tick$1,this).call(this,time,delta);if(!this.autoRotate||!this[$hasTransitioned]()||this[$renderer].isPresenting){return;}var rotationDelta=Math.min(delta,time-this[$autoRotateStartTime]-this.autoRotateDelay);if(rotationDelta>0){this[$scene].yaw=this.turntableRotation+this[$radiansPerSecond]*rotationDelta*0.001;}}},{key:$onCameraChange,value:function value(event){if(!this.autoRotate){return;}if(event.detail.source==='user-interaction'){this[$autoRotateStartTime]=performance.now();}}},{key:"resetTurntableRotation",value:function resetTurntableRotation(){var theta=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;this[$scene].yaw=theta;}},{key:"turntableRotation",get:function get(){return this[$scene].yaw;}}]);return StagingModelViewerElement;}(ModelViewerElement);__decorate$7([property({type:Boolean,attribute:'auto-rotate'})],StagingModelViewerElement.prototype,"autoRotate",void 0);__decorate$7([property({type:Number,attribute:'auto-rotate-delay'})],StagingModelViewerElement.prototype,"autoRotateDelay",void 0);__decorate$7([style({intrinsics:rotationRateIntrinsics,updateHandler:$syncRotationRate}),property({type:String,attribute:'rotation-per-second'})],StagingModelViewerElement.prototype,"rotationPerSecond",void 0);return StagingModelViewerElement;};var FocusVisiblePolyfillMixin=function FocusVisiblePolyfillMixin(SuperClass){var _a;var coordinateWithPolyfill=function coordinateWithPolyfill(instance){if(instance.shadowRoot==null||instance.hasAttribute('data-js-focus-visible')){return function(){};}if(self.applyFocusVisiblePolyfill){self.applyFocusVisiblePolyfill(instance.shadowRoot);}else{var coordinationHandler=function coordinationHandler(){self.applyFocusVisiblePolyfill(instance.shadowRoot);};self.addEventListener('focus-visible-polyfill-ready',coordinationHandler,{once:true});return function(){self.removeEventListener('focus-visible-polyfill-ready',coordinationHandler);};}return function(){};};var $endPolyfillCoordination=Symbol('endPolyfillCoordination');var FocusVisibleCoordinator=/*#__PURE__*/function(_SuperClass){_inherits(FocusVisibleCoordinator,_SuperClass);var _super52=_createSuper(FocusVisibleCoordinator);function FocusVisibleCoordinator(){var _this92;_classCallCheck(this,FocusVisibleCoordinator);_this92=_super52.apply(this,arguments);_this92[_a]=null;return _this92;}_createClass(FocusVisibleCoordinator,[{key:"connectedCallback",value:function connectedCallback(){_get(_getPrototypeOf(FocusVisibleCoordinator.prototype),"connectedCallback",this)&&_get(_getPrototypeOf(FocusVisibleCoordinator.prototype),"connectedCallback",this).call(this);if(this[$endPolyfillCoordination]==null){this[$endPolyfillCoordination]=coordinateWithPolyfill(this);}}},{key:"disconnectedCallback",value:function disconnectedCallback(){_get(_getPrototypeOf(FocusVisibleCoordinator.prototype),"disconnectedCallback",this)&&_get(_getPrototypeOf(FocusVisibleCoordinator.prototype),"disconnectedCallback",this).call(this);if(this[$endPolyfillCoordination]!=null){this[$endPolyfillCoordination]();this[$endPolyfillCoordination]=null;}}}]);return FocusVisibleCoordinator;}(SuperClass);_a=$endPolyfillCoordination;return FocusVisibleCoordinator;};var ModelViewerElement=AnnotationMixin(SceneGraphMixin(StagingMixin(EnvironmentMixin(ControlsMixin(ARMixin(LoadingMixin(AnimationMixin(FocusVisiblePolyfillMixin(ModelViewerElementBase)))))))));customElements.define('model-viewer',ModelViewerElement);exports.ModelViewerElement=ModelViewerElement;Object.defineProperty(exports,'__esModule',{value:true});});