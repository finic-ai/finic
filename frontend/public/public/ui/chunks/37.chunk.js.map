{"version":3,"sources":["webpack:///./src/ui/src/components/MenuOverlay/MenuOverlay.scss?799e","webpack:///./src/ui/src/components/MenuOverlay/MenuOverlay.scss","webpack:///./src/ui/src/components/MenuOverlay/MenuOverlay.js","webpack:///./src/ui/src/components/MenuOverlay/index.js"],"names":["api","content","__esModule","default","module","i","options","styleTag","webComponents","document","getElementsByTagName","length","clonedStyleTags","webComponent","shadowRoot","appendChild","onload","forEach","styleNode","innerHTML","cloneNode","push","head","exports","locals","InitialMenuOverLayItem","dataElement","children","items","useSelector","state","selectors","getMenuOverlayItems","shallowEqual","childrenArray","React","Children","toArray","map","item","type","hidden","key","mediaQueryClassName","screen","join","component","find","child","props","ActionButton","CustomElement","cloneElement","MenuOverlay","dispatch","useDispatch","t","useTranslation","useState","documentType","setDocumentType","isEmbedPrintSupported","colorMap","getColorMap","sortStrategy","getSortStrategy","isFullScreen","timezone","getTimezone","closeMenuOverlay","useCallback","actions","closeElements","DataElements","MENU_OVERLAY","useEffect","onDocumentLoaded","core","getDocument","getType","addEventListener","removeEventListener","handleNewDocumentClick","loadDocument","getEmptyWordDocument","filename","enableOfficeEditing","FlyoutMenu","menu","trigger","MENU_OVERLAY_BUTTON","ariaLabel","isOfficeEditorMode","className","img","label","role","onClick","openFilePicker","workerTypes","XOD","downloadPdf","toggleFullscreen","openElement","SAVE_MODAL","print","isGrayscale","getDocumentViewer","isGrayscaleModeEnabled","SETTINGS_MODAL"],"mappings":"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","file":"chunks/37.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../../node_modules/sass-loader/dist/cjs.js!./MenuOverlay.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function (styleTag) {\n                const webComponents = document.getElementsByTagName('apryse-webviewer');\n                if (webComponents.length > 0) {\n                  const clonedStyleTags = [];\n                  for (let i = 0; i < webComponents.length; i++) {\n                    const webComponent = webComponents[i];\n                    if (i === 0) {\n                      webComponent.shadowRoot.appendChild(styleTag);\n                      styleTag.onload = function () {\n                        if (clonedStyleTags.length > 0) {\n                          clonedStyleTags.forEach((styleNode) => {\n                            // eslint-disable-next-line no-unsanitized/property\n                            styleNode.innerHTML = styleTag.innerHTML;\n                          });\n                        }\n                      };\n                    } else {\n                      const styleNode = styleTag.cloneNode(true);\n                      webComponent.shadowRoot.appendChild(styleNode);\n                      clonedStyleTags.push(styleNode);\n                    }\n                  }\n                } else {\n                  document.head.appendChild(styleTag);\n                }\n              };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.FlyoutMenu[data-element=menuOverlay] .ActionButton{justify-content:flex-start}.FlyoutMenu[data-element=menuOverlay] .ActionButton .Icon{margin:4px}.FlyoutMenu[data-element=menuOverlay] .ActionButton span{margin:0 4px}.FlyoutMenu[data-element=menuOverlay] .ActionButton.row.disabled:hover{background:none;cursor:default}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"LEFT_HEADER_WIDTH\": \"41px\",\n\t\"RIGHT_HEADER_WIDTH\": \"41px\"\n};","import actions from 'actions';\nimport ActionButton from 'components/ActionButton';\nimport CustomElement from 'components/CustomElement';\nimport { workerTypes } from 'constants/types';\nimport core from 'core';\nimport downloadPdf from 'helpers/downloadPdf';\nimport openFilePicker from 'helpers/openFilePicker';\nimport toggleFullscreen from 'helpers/toggleFullscreen';\nimport { print } from 'helpers/print';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport selectors from 'selectors';\nimport FlyoutMenu from '../FlyoutMenu/FlyoutMenu';\nimport DataElements from 'constants/dataElement';\nimport loadDocument from 'helpers/loadDocument';\nimport { isOfficeEditorMode } from 'helpers/officeEditor';\n\nimport './MenuOverlay.scss';\n\nconst InitialMenuOverLayItem = ({ dataElement, children }) => {\n  const items = useSelector((state) => selectors.getMenuOverlayItems(state, dataElement), shallowEqual);\n\n  const childrenArray = React.Children.toArray(children);\n\n  return items.map((item, i) => {\n    const { dataElement, type, hidden } = item;\n    const key = `${type}-${dataElement || i}`;\n    const mediaQueryClassName = hidden?.map((screen) => `hide-in-${screen}`).join(' ');\n    let component = childrenArray.find((child) => child.props.dataElement === dataElement);\n\n    if (!component) {\n      const props = { ...item, mediaQueryClassName };\n\n      switch (type) {\n        case 'actionButton':\n          component = <ActionButton {...props} />;\n          break;\n        case 'customElement':\n          component = <CustomElement {...props} />;\n          break;\n      }\n    }\n\n    return component\n      ? React.cloneElement(component, {\n        key,\n      })\n      : null;\n  });\n};\n\nfunction MenuOverlay() {\n  const dispatch = useDispatch();\n  const [t] = useTranslation();\n\n  const [documentType, setDocumentType] = useState(null);\n\n  const isEmbedPrintSupported = useSelector(selectors.isEmbedPrintSupported);\n  const colorMap = useSelector(selectors.getColorMap);\n  const sortStrategy = useSelector(selectors.getSortStrategy);\n  const isFullScreen = useSelector((state) => selectors.isFullScreen(state));\n  const timezone = useSelector((state) => selectors.getTimezone(state));\n\n  const closeMenuOverlay = useCallback(() => dispatch(actions.closeElements([DataElements.MENU_OVERLAY])), [dispatch]);\n\n  useEffect(() => {\n    const onDocumentLoaded = () => {\n      const type = core.getDocument().getType();\n      setDocumentType(type);\n    };\n    core.addEventListener('documentLoaded', onDocumentLoaded);\n    return () => {\n      core.removeEventListener('documentLoaded', onDocumentLoaded);\n    };\n  }, []);\n\n  const handlePrintButtonClick = () => {\n    closeMenuOverlay();\n    print(dispatch, isEmbedPrintSupported, sortStrategy, colorMap, { isGrayscale: core.getDocumentViewer().isGrayscaleModeEnabled(), timezone });\n  };\n\n  const downloadDocument = () => {\n    downloadPdf(dispatch);\n  };\n\n  const openSaveModal = () => {\n    closeMenuOverlay();\n    dispatch(actions.openElement(DataElements.SAVE_MODAL));\n  };\n\n  const handleSettingsButtonClick = () => {\n    closeMenuOverlay();\n    dispatch(actions.openElement(DataElements.SETTINGS_MODAL));\n  };\n\n  const handleNewDocumentClick = async () => {\n    closeMenuOverlay();\n    loadDocument(dispatch, (await core.getEmptyWordDocument()).default, {\n      filename: 'Untitled.docx',\n      enableOfficeEditing: true\n    });\n  };\n\n  return (\n    <FlyoutMenu\n      menu={DataElements.MENU_OVERLAY}\n      trigger={DataElements.MENU_OVERLAY_BUTTON}\n      ariaLabel={t('component.menuOverlay')}\n    >\n      <InitialMenuOverLayItem>\n        {isOfficeEditorMode() && (\n          <ActionButton\n            dataElement=\"newDocumentButton\"\n            className=\"row\"\n            img=\"icon-plus-sign\"\n            label={t('action.newDocument')}\n            ariaLabel={t('action.newDocument')}\n            role=\"option\"\n            onClick={handleNewDocumentClick}\n          />\n        )}\n        <ActionButton\n          dataElement=\"filePickerButton\"\n          className=\"row\"\n          img=\"icon-header-file-picker-line\"\n          label={t('action.openFile')}\n          ariaLabel={t('action.openFile')}\n          role=\"option\"\n          onClick={openFilePicker}\n        />\n        {documentType !== workerTypes.XOD && !isOfficeEditorMode() && (\n          <ActionButton\n            dataElement=\"downloadButton\"\n            className=\"row\"\n            img=\"icon-download\"\n            label={t('action.download')}\n            ariaLabel={t('action.download')}\n            role=\"option\"\n            onClick={downloadDocument}\n          />\n        )}\n        {isOfficeEditorMode() && (\n          <ActionButton\n            dataElement=\"fullscreenButton\"\n            className=\"row\"\n            img={isFullScreen ? 'icon-header-full-screen-exit' : 'icon-header-full-screen'}\n            label={isFullScreen ? t('action.exitFullscreen') : t('action.enterFullscreen')}\n            ariaLabel={isFullScreen ? t('action.exitFullscreen') : t('action.enterFullscreen')}\n            role=\"option\"\n            onClick={toggleFullscreen}\n          />\n        )}\n        {documentType !== workerTypes.XOD && (\n          <ActionButton\n            dataElement=\"saveAsButton\"\n            className=\"row\"\n            img=\"icon-save\"\n            label={t('saveModal.saveAs')}\n            ariaLabel={t('saveModal.saveAs')}\n            role=\"option\"\n            onClick={openSaveModal}\n          />\n        )}\n        <ActionButton\n          dataElement=\"printButton\"\n          className=\"row\"\n          img=\"icon-header-print-line\"\n          label={t('action.print')}\n          ariaLabel={t('action.print')}\n          role=\"option\"\n          onClick={handlePrintButtonClick}\n        />\n      </InitialMenuOverLayItem>\n      <div className=\"divider\"></div>\n      <ActionButton\n        dataElement=\"settingsButton\"\n        className=\"row\"\n        img=\"icon-header-settings-line\"\n        label={t('option.settings.settings')}\n        ariaLabel={t('settings')}\n        role=\"option\"\n        onClick={handleSettingsButtonClick}\n      />\n    </FlyoutMenu>\n  );\n}\n\nexport default MenuOverlay;\n","import MenuOverlay from './MenuOverlay';\n\nexport default MenuOverlay;"],"sourceRoot":""}