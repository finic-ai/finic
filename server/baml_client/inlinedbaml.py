###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Sonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> Haiku {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [GPT4oMini, Haiku]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GPT4o, GPT4oMini]\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.55.3\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "selector.baml": "class GenerateSelectorResult {\n  id string\n  predicted_selector string\n  confidence float\n}\n\nclass Selector {\n  id string\n  description string\n}\n// Generate a selector for a given HTML element.\nfunction GenerateSelectors(selectors: Selector[], html: string) -> GenerateSelectorResult[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate CSS selectors based on the ID and description of each selector, as well as the HTML content provided.\n    Indiciate your level of confidence in each prediction, assuming this is not the entire HTML page the and the relevant element may be in another chunk.\n    0.9-1.0 is very confident, 0.5-0.9 is moderately confident, 0.0-0.5 is not confident.\n\n    Selectors: {{ selectors }}\n    \n    HTML: \n    {{ html }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Testing the function with a sample resume.\n// test vaibhav_resume {\n//   functions [ExtractResume]\n//   args {\n//     resume #\"\n//       Vaibhav Gupta\n//       vbv@boundaryml.com\n\n//       Experience:\n//       - Founder at BoundaryML\n//       - CV Engineer at Google\n//       - CV Engineer at Microsoft\n\n//       Skills:\n//       - Rust\n//       - C++\n//     \"#\n//   }\n// }\n",
}

def get_baml_files():
    return file_map